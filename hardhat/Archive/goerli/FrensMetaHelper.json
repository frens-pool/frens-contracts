{
  "address": "0x47daB9f517417cd90a7443Bb5A29dBB1ce5e15Ba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFrensStorage",
          "name": "_frensStorage",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEns",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInWei",
          "type": "uint256"
        }
      ],
      "name": "getEthDecimalString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getOperatorsForPool",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc16df0d6eab06c0f5f96957bb0607c62e9708db691bc21caf552662c13750613",
  "receipt": {
    "to": null,
    "from": "0xC50e6e6eee8d434a6Ee947DeFB04cBA4115d47b5",
    "contractAddress": "0x47daB9f517417cd90a7443Bb5A29dBB1ce5e15Ba",
    "transactionIndex": 63,
    "gasUsed": "866015",
    "logsBloom": "0x
    "blockHash": "0x4a71be1ce4bd4e8eb50c46c11f4277fe6a1788c6225dd7698cfbab89b585ee40",
    "transactionHash": "0xc16df0d6eab06c0f5f96957bb0607c62e9708db691bc21caf552662c13750613",
    "logs": [],
    "blockNumber": 8218370,
    "cumulativeGasUsed": "20987726",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3703511A5fa20Be3FdBAD50A0A84d5d87E7683F4"
  ],
  "solcInputHash": "dec71180e1bee5d638201a120d8ef93f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFrensStorage\",\"name\":\"_frensStorage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEns\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"getEthDecimalString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getOperatorsForPool\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FrensMetaHelper.sol\":\"FrensMetaHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/FrensBase.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"./interfaces/IFrensStorage.sol\\\";\\n\\n/// @title Base settings / modifiers for each contract in Frens Pool\\n/// @author modified 04-Dec-2022 by 0xWildhare originally by David Rugendyke (h/t David and Rocket Pool!)\\n/// this code is modified from the Rocket Pool RocketBase contract all \\\"Rocket\\\" replaced with \\\"Frens\\\"\\n\\nabstract contract FrensBase {\\n\\n    // Calculate using this as the base\\n    uint256 constant calcBase = 1 ether;\\n\\n    // Version of the contract\\n    uint8 public version;\\n\\n    // The main storage contract where primary persistant storage is maintained\\n    IFrensStorage frensStorage;\\n\\n\\n    /*** Modifiers **********************************************************/\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match a Frens Pool network contract\\n    */\\n    modifier onlyLatestNetworkContract() {\\n        require(getBool(keccak256(abi.encodePacked(\\\"contract.exists\\\", msg.sender))), \\\"Invalid or outdated network contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\\n    */\\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName))), \\\"Invalid or outdated contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered node\\n    */\\n    //removed  0xWildhare\\n    /*\\n    modifier onlyRegisteredNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"node.exists\\\", _nodeAddress))), \\\"Invalid node\\\");\\n        _;\\n    }\\n    */\\n    /**\\n    * @dev Throws if called by any sender that isn't a trusted node DAO member\\n    */\\n    //removed  0xWildhare\\n    /*\\n    modifier onlyTrustedNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"dao.trustednodes.\\\", \\\"member\\\", _nodeAddress))), \\\"Invalid trusted node\\\");\\n        _;\\n    }\\n    */\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered Frens StakingPool\\n    */\\n    modifier onlyStakingPool(address _stakingPoolAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"pool.exists\\\", _stakingPoolAddress))), \\\"Invalid Pool\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n    * @dev Throws if called by any account other than a guardian account (temporary account allowed access to settings before DAO is fully enabled)\\n    */\\n    modifier onlyGuardian() {\\n        require(msg.sender == frensStorage.getGuardian(), \\\"Account is not a temporary guardian\\\");\\n        _;\\n    }\\n\\n\\n    \\n\\n\\n\\n\\n\\n    /*** Methods **********************************************************/\\n\\n    /// @dev Set the main Frens Storage address\\n    constructor(IFrensStorage _frensStorage) {\\n        // Update the contract address\\n        frensStorage = IFrensStorage(_frensStorage);\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name\\n    function getContractAddress(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Check it\\n        require(contractAddress != address(0x0), \\\"Contract not found\\\");\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name (returns address(0x0) instead of reverting if contract does not exist)\\n    function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the name of a network contract by address\\n    function getContractName(address _contractAddress) internal view returns (string memory) {\\n        // Get the contract name\\n        string memory contractName = getString(keccak256(abi.encodePacked(\\\"contract.name\\\", _contractAddress)));\\n        // Check it\\n        require(bytes(contractName).length > 0, \\\"Contract not found\\\");\\n        // Return\\n        return contractName;\\n    }\\n\\n    /// @dev Get revert error message from a .call method\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n\\n\\n    /*** Frens Storage Methods ****************************************/\\n\\n    // Note: Unused helpers have been removed to keep contract sizes down\\n\\n    /// @dev Storage get methods\\n    function getAddress(bytes32 _key) internal view returns (address) { return frensStorage.getAddress(_key); }\\n    function getUint(bytes32 _key) internal view returns (uint) { return frensStorage.getUint(_key); }\\n    function getString(bytes32 _key) internal view returns (string memory) { return frensStorage.getString(_key); }\\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return frensStorage.getBytes(_key); }\\n    function getBool(bytes32 _key) internal view returns (bool) { return frensStorage.getBool(_key); }\\n    function getInt(bytes32 _key) internal view returns (int) { return frensStorage.getInt(_key); }\\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return frensStorage.getBytes32(_key); }\\n    function getArray(bytes32 _key) internal view returns (uint[] memory) { return frensStorage.getArray(_key); }\\n\\n    /// @dev Storage set methods\\n    function setAddress(bytes32 _key, address _value) internal { frensStorage.setAddress(_key, _value); }\\n    function setUint(bytes32 _key, uint _value) internal { frensStorage.setUint(_key, _value); }\\n    function setString(bytes32 _key, string memory _value) internal { frensStorage.setString(_key, _value); }\\n    function setBytes(bytes32 _key, bytes memory _value) internal { frensStorage.setBytes(_key, _value); }\\n    function setBool(bytes32 _key, bool _value) internal { frensStorage.setBool(_key, _value); }\\n    function setInt(bytes32 _key, int _value) internal { frensStorage.setInt(_key, _value); }\\n    function setBytes32(bytes32 _key, bytes32 _value) internal { frensStorage.setBytes32(_key, _value); }\\n    function setArray(bytes32 _key, uint[] memory _value) internal { frensStorage.setArray(_key, _value); }\\n\\n    /// @dev Storage delete methods\\n    function deleteAddress(bytes32 _key) internal { frensStorage.deleteAddress(_key); }\\n    function deleteUint(bytes32 _key) internal { frensStorage.deleteUint(_key); }\\n    function deleteString(bytes32 _key) internal { frensStorage.deleteString(_key); }\\n    function deleteBytes(bytes32 _key) internal { frensStorage.deleteBytes(_key); }\\n    function deleteBool(bytes32 _key) internal { frensStorage.deleteBool(_key); }\\n    function deleteInt(bytes32 _key) internal { frensStorage.deleteInt(_key); }\\n    function deleteBytes32(bytes32 _key) internal { frensStorage.deleteBytes32(_key); }\\n    function deleteArray(bytes32 _key) internal { frensStorage.deleteArray(_key); }\\n\\n    /// @dev Storage arithmetic methods - push added by 0xWildhare\\n    function addUint(bytes32 _key, uint256 _amount) internal { frensStorage.addUint(_key, _amount); }\\n    function subUint(bytes32 _key, uint256 _amount) internal { frensStorage.subUint(_key, _amount); }\\n    function pushUint(bytes32 _key, uint256 _amount) internal { frensStorage.pushUint(_key, _amount); }\\n}\\n\",\"keccak256\":\"0x7374e6a194a565712df6aa0f2e80fa9e4ab6a179b5ed331b830e14075907e88f\",\"license\":\"GPL-3.0-only\"},\"contracts/FrensMetaHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/ISSVRegistry.sol\\\";\\nimport \\\"./interfaces/IFrensMetaHelper.sol\\\";\\nimport \\\"./interfaces/IENS.sol\\\";\\nimport \\\"./interfaces/IReverseResolver.sol\\\";\\nimport \\\"./FrensBase.sol\\\";\\nimport './ToColor.sol';\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract FrensMetaHelper is IFrensMetaHelper, FrensBase {\\n\\n  using ToColor for bytes3;\\n  using Strings for uint256;\\n\\n  constructor(IFrensStorage _frensStorage) FrensBase(_frensStorage) {\\n    //hi fren\\n  }\\n\\n  function getColor(address a) public pure returns(string memory){\\n    bytes32 colorRandomness = keccak256(abi.encodePacked(address(a)));\\n    bytes3 colorBytes = bytes2(colorRandomness[0]) | ( bytes2(colorRandomness[1]) >> 8 ) | ( bytes3(colorRandomness[2]) >> 16 );\\n    string memory color = colorBytes.toColor();\\n    return color;\\n  }\\n\\n  function getEthDecimalString(uint amountInWei) public pure returns(string memory){\\n    string memory leftOfDecimal = (amountInWei / 1 ether).toString();\\n    uint rightOfDecimal = (amountInWei % 1 ether) / 10**14;\\n    string memory rod = rightOfDecimal.toString();\\n    if(rightOfDecimal < 1000) rod = string.concat(\\\"0\\\", rod);\\n    if(rightOfDecimal < 100) rod = string.concat(\\\"0\\\", rod);\\n    if(rightOfDecimal < 10) rod = string.concat(\\\"0\\\", rod);\\n    return string.concat(leftOfDecimal, \\\".\\\", rod);\\n  }\\n\\n  function getOperatorsForPool(address poolAddress) public view returns (uint32[] memory, string memory) {\\n    bytes memory poolPubKey = getBytes(keccak256(abi.encodePacked(\\\"validator.public.key\\\", poolAddress)));\\n    string memory pubKeyString = _iToHex(poolPubKey);\\n    ISSVRegistry ssvRegistry = ISSVRegistry(getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"SSVRegistry\\\"))));\\n    uint32[] memory poolOperators = ssvRegistry.getOperatorsByValidator(poolPubKey);\\n    return(poolOperators, pubKeyString);\\n  }\\n\\n  function _iToHex(bytes memory buffer) internal pure returns (string memory) {\\n    // Fixed buffer size for hexadecimal convertion\\n    bytes memory converted = new bytes(buffer.length * 2);\\n    bytes memory _base = \\\"0123456789abcdef\\\";\\n    for (uint256 i = 0; i < buffer.length; i++) {\\n        converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n        converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n    }\\n    return string(abi.encodePacked(\\\"0x\\\", converted));\\n  }\\n\\n  function getEns(address addr) public view returns(bool, string memory){\\n    IENS ens = IENS(getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"ENS\\\"))));\\n    bytes32 node = _node(addr);\\n    address revResAddr = ens.resolver(node);\\n    if(revResAddr == address(0)) return(false,'');\\n    IReverseResolver reverseResolver = IReverseResolver(revResAddr);\\n    return(ens.recordExists(node), reverseResolver.name(node));\\n  }\\n\\n  function _node(address addr) internal pure returns (bytes32) {\\n    bytes32 ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n    return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\\n  }\\n\\n  function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n    addr;\\n    ret; // Stop warning us about unused variables\\n    assembly {\\n      let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\\n\\n      for { let i := 40 } gt(i, 0) { } {\\n          i := sub(i, 1)\\n          mstore8(i, byte(and(addr, 0xf), lookup))\\n          addr := div(addr, 0x10)\\n          i := sub(i, 1)\\n          mstore8(i, byte(and(addr, 0xf), lookup))\\n          addr := div(addr, 0x10)\\n      }\\n\\n      ret := keccak256(0, 40)\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x54ba5918116ad07ce968b6d239eaac02b9e38458af631e8ae0f0fcbc14e39af0\",\"license\":\"MIT\"},\"contracts/ToColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary ToColor {\\n    bytes16 internal constant ALPHABET = '0123456789abcdef';\\n\\n    function toColor(bytes3 value) internal pure returns (string memory) {\\n      bytes memory buffer = new bytes(6);\\n      for (uint256 i = 0; i < 3; i++) {\\n          buffer[i*2+1] = ALPHABET[uint8(value[i]) & 0xf];\\n          buffer[i*2] = ALPHABET[uint8(value[i]>>4) & 0xf];\\n      }\\n      return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x80d48cfb10669856b687d9ed46b3571ba82505490b020fc1b5128dc2aaa70cbd\",\"license\":\"MIT\"},\"contracts/interfaces/IENS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external;\\n    function setOwner(bytes32 node, address owner) external;\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function owner(bytes32 node) external view returns (address);\\n    function resolver(bytes32 node) external view returns (address);\\n    function ttl(bytes32 node) external view returns (uint64);\\n    function recordExists(bytes32 node) external view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\",\"keccak256\":\"0x4d761c3e61513fd65c0ff43e159efdb9c6fb4d2440640f7b1f55da5d8e67970c\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensMetaHelper.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IFrensMetaHelper {\\n\\n  function getColor(address a) external pure returns(string memory);\\n\\n  function getEthDecimalString(uint amountInWei) external pure returns(string memory);\\n\\n  function getOperatorsForPool(address poolAddress) external view returns (uint32[] memory, string memory);\\n\\n  function getEns(address addr) external view returns(bool, string memory);\\n}\\n\",\"keccak256\":\"0x643308572ba7413d67a1147b87179e4b2ab606336da93d6fb5394e5d60579cc2\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensStorage.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n//modified from IRocketStorage on 03/12/2022 by 0xWildhare\\n\\ninterface IFrensStorage {\\n\\n    // Deploy status\\n    function getDeployedStatus() external view returns (bool);\\n\\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getString(bytes32 _key) external view returns (string memory);\\n    function getBytes(bytes32 _key) external view returns (bytes memory);\\n    function getBool(bytes32 _key) external view returns (bool);\\n    function getInt(bytes32 _key) external view returns (int);\\n    function getBytes32(bytes32 _key) external view returns (bytes32);\\n    function getArray(bytes32 _key) external view returns (uint[] memory);\\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setString(bytes32 _key, string calldata _value) external;\\n    function setBytes(bytes32 _key, bytes calldata _value) external;\\n    function setBool(bytes32 _key, bool _value) external;\\n    function setInt(bytes32 _key, int _value) external;\\n    function setBytes32(bytes32 _key, bytes32 _value) external;\\n    function setArray(bytes32 _key, uint[] calldata _value) external;\\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteString(bytes32 _key) external;\\n    function deleteBytes(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;\\n    function deleteInt(bytes32 _key) external;\\n    function deleteBytes32(bytes32 _key) external;\\n    function deleteArray(bytes32 _key) external;\\n\\n    // Arithmetic (and stuff) - push added by 0xWildhare\\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n    function pushUint(bytes32 _key, uint256 _amount) external;\\n\\n    // Protected storage removed ~ 0xWildhare\\n    /*\\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\\n    function confirmWithdrawalAddress(address _nodeAddress) external;\\n    */\\n}\\n\",\"keccak256\":\"0x460c440b2f1de0c6a41fff71e5f2c38117217a8aae946f6856ac720fc555a203\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IReverseResolver{\\n\\n    function name(bytes32 node) external view returns(string memory);\\n\\n}\",\"keccak256\":\"0x720b9b5ecca8643bf2796e06ff206291b306c3c680c442551e6f9d267b1ffb52\",\"license\":\"MIT\"},\"contracts/interfaces/ISSVRegistry.sol\":{\"content\":\"// File: contracts/ISSVRegistry.sol\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.2;\\n\\ninterface ISSVRegistry {\\n    struct Oess {\\n        uint32 operatorId;\\n        bytes sharedPublicKey;\\n        bytes encryptedKey;\\n    }\\n\\n    /** errors */\\n    error ExceedRegisteredOperatorsByAccountLimit();\\n    error OperatorDeleted();\\n    error ValidatorAlreadyExists();\\n    error ExceedValidatorLimit();\\n    error OperatorNotFound();\\n    error InvalidPublicKeyLength();\\n    error OessDataStructureInvalid();\\n\\n    /**\\n     * @dev Initializes the contract\\n     */\\n    function initialize() external;\\n\\n    /**\\n     * @dev Registers a new operator.\\n     * @param name Operator's display name.\\n     * @param ownerAddress Operator's ethereum address that can collect fees.\\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\\n     * @param fee The fee which the operator charges for each block.\\n     */\\n    function registerOperator(string calldata name, address ownerAddress, bytes calldata publicKey, uint64 fee) external returns (uint32);\\n\\n    /**\\n     * @dev removes an operator.\\n     * @param operatorId Operator id.\\n     */\\n    function removeOperator(uint32 operatorId) external;\\n\\n    /**\\n     * @dev Updates an operator fee.\\n     * @param operatorId Operator id.\\n     * @param fee New operator fee.\\n     */\\n    function updateOperatorFee(\\n        uint32 operatorId,\\n        uint64 fee\\n    ) external;\\n\\n    /**\\n     * @dev Updates an operator fee.\\n     * @param operatorId Operator id.\\n     * @param score New score.\\n     */\\n    function updateOperatorScore(\\n        uint32 operatorId,\\n        uint32 score\\n    ) external;\\n\\n    /**\\n     * @dev Registers a new validator.\\n     * @param ownerAddress The user's ethereum address that is the owner of the validator.\\n     * @param publicKey Validator public key.\\n     * @param operatorIds Operator ids.\\n     * @param sharesPublicKeys Shares public keys.\\n     * @param sharesEncrypted Encrypted private keys.\\n     */\\n    function registerValidator(\\n        address ownerAddress,\\n        bytes calldata publicKey,\\n        uint32[] calldata operatorIds,\\n        bytes[] calldata sharesPublicKeys,\\n        bytes[] calldata sharesEncrypted\\n    ) external;\\n\\n    /**\\n     * @dev removes a validator.\\n     * @param publicKey Validator's public key.\\n     */\\n    function removeValidator(bytes calldata publicKey) external;\\n\\n    function enableOwnerValidators(address ownerAddress) external;\\n\\n    function disableOwnerValidators(address ownerAddress) external;\\n\\n    function isLiquidated(address ownerAddress) external view returns (bool);\\n\\n    /**\\n     * @dev Gets an operator by operator id.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorById(uint32 operatorId)\\n        external view\\n        returns (\\n            string memory,\\n            address,\\n            bytes memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    /**\\n     * @dev Returns operators for owner.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function getOperatorsByOwnerAddress(address ownerAddress)\\n        external view\\n        returns (uint32[] memory);\\n\\n    /**\\n     * @dev Gets operators list which are in use by validator.\\n     * @param validatorPublicKey Validator's public key.\\n     */\\n    function getOperatorsByValidator(bytes calldata validatorPublicKey)\\n        external view\\n        returns (uint32[] memory);\\n\\n    /**\\n     * @dev Gets operator's owner.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorOwner(uint32 operatorId) external view returns (address);\\n\\n    /**\\n     * @dev Gets operator current fee.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorFee(uint32 operatorId)\\n        external view\\n        returns (uint64);\\n\\n    /**\\n     * @dev Gets active validator count.\\n     */\\n    function activeValidatorCount() external view returns (uint32);\\n\\n    /**\\n     * @dev Gets an validator by public key.\\n     * @param publicKey Validator's public key.\\n     */\\n    function validators(bytes calldata publicKey)\\n        external view\\n        returns (\\n            address,\\n            bytes memory,\\n            bool\\n        );\\n\\n    /**\\n     * @dev Gets a validator public keys by owner's address.\\n     * @param ownerAddress Owner's Address.\\n     */\\n    function getValidatorsByAddress(address ownerAddress)\\n        external view\\n        returns (bytes[] memory);\\n\\n    /**\\n     * @dev Get validator's owner.\\n     * @param publicKey Validator's public key.\\n     */\\n    function getValidatorOwner(bytes calldata publicKey) external view returns (address);\\n\\n    /**\\n     * @dev Get validators amount per operator.\\n     * @param operatorId Operator public key\\n     */\\n    function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32);\\n}\",\"keccak256\":\"0xc43589f0f38f8dcd2b808071bc46162081b6198be4baee9f44d5ff1556ffb10f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60803461008357601f610edf38819003918201601f19168301916001600160401b038311848410176100885780849260209460405283398101031261008357516001600160a01b03811681036100835760008054610100600160a81b03191660089290921b610100600160a81b0316919091179055604051610e40908161009f8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040526004361015610013575b600080fd5b6000803560e01c90816354fd4d501461011a57816384b5e5961461007157508063a090f9b414610068578063de1c7f701461005f5763edd148a21461005757600080fd5b61000e6103b6565b5061000e610371565b5061000e6101f8565b34610117576020366003190112610117576101076101139160043561009581610138565b6040516100cf816100c16020820194856014916bffffffffffffffffffffffff199060601b1681520190565b03601f1981018352826104db565b5190209081901a60f81b6001600160f81b031916600182901a60f01b60ff60f01b161760029190911a60e81b60ff60e81b1617610d5c565b60405191829182610191565b0390f35b80fd5b3461011757806003193601126101175760ff90541660805260206080f35b6001600160a01b0381160361000e57565b60005b83811061015c5750506000910152565b818101518382015260200161014c565b9060209161018581518092818552858086019101610149565b601f01601f1916010190565b9060206101a292818152019061016c565b90565b9092916040820191604081528451809352606081019260208096019060005b8181106101de575050506101a2939481840391015261016c565b825163ffffffff16865294870194918701916001016101c4565b503461000e57602036600319011261000e5760043561021681610138565b61031f600061028160405193846102656020820192836028917376616c696461746f722e7075626c69632e6b657960601b82526bffffffffffffffffffffffff199060601b1660148201520190565b0394610279601f19968781018352826104db565b5190206108bb565b6103046102f86102f8610293846109b2565b966040516102f06020820192826102e46102cd866019907865787465726e616c2e636f6e74726163742e6164647265737360381b81520190565b6a535356526567697374727960a81b8152600b0190565b039081018352826104db565b51902061080e565b6001600160a01b031690565b604051808095819463053e834960e01b835260048301610191565b03915afa908115610364575b600091610343575b50610113604051928392836101a5565b61035e913d8091833e61035681836104db565b810190610755565b38610333565b61036c6107ec565b61032b565b503461000e57602036600319011261000e5761039760043561039281610138565b610afd565b906101136040519283921515835260406020840152604083019061016c565b503461000e57602036600319011261000e57610113600435655af3107a4000670de0b6b3a76400006103e981840461069b565b920604906103f68261069b565b916103e8811061048b575b60648110610477575b600a1161045f575b6021610107916040519381610431869351809260208087019101610149565b8201601760f91b60208201526104508251809360208785019101610149565b010360018101845201826104db565b90602161046e61010792610585565b92915050610412565b91610483600a91610585565b92905061040a565b9161049590610585565b91610401565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176104ce57604052565b6104d661049b565b604052565b90601f8019910116810190811067ffffffffffffffff8211176104ce57604052565b50634e487b7160e01b600052603260045260246000fd5b50634e487b7160e01b600052601260045260246000fd5b50634e487b7160e01b600052601160045260246000fd5b811561054c570490565b610554610514565b0490565b8115610562570690565b61056a610514565b0690565b9061058160209282815194859201610149565b0190565b906105bd60216040518094600360fc1b60208301526105ad8151809260208686019101610149565b81010360018101855201836104db565b565b60209067ffffffffffffffff81116105dd575b601f01601f19160190565b6105e561049b565b6105d2565b604051906020820182811067ffffffffffffffff82111761060f575b60405260008252565b61061761049b565b610606565b600190600019811461062c570190565b61058161052b565b9061063e826105bf565b61064b60405191826104db565b828152809261065c601f19916105bf565b0190602036910137565b906001820180921161067457565b6105bd61052b565b90602091805182101561068e57010190565b6106966104fd565b010190565b8015610737576000818181805b61071f57506106b681610634565b935b6106c25750505090565b6000198101908111610712575b8091600a916106fc60308484068101809111610705575b60f81b6001600160f81b031916861a918761067c565b530490816106b8565b61070d61052b565b6106e6565b61071a61052b565b6106cf565b915061072c600a9161061c565b9104808492916106a8565b50604051610744816104b2565b60018152600360fc1b602082015290565b90602090818382031261000e57825167ffffffffffffffff9384821161000e570181601f8201121561000e5780519384116107df575b8360051b90604051946107a0858401876104db565b8552838086019282010192831161000e578301905b8282106107c3575050505090565b815163ffffffff8116810361000e5781529083019083016107b5565b6107e761049b565b61078b565b506040513d6000823e3d90fd5b9081602091031261000e57516101a281610138565b6000546040516321f8a72160e01b815260048101929092526020908290602490829060081c6001600160a01b03165afa908115610879575b600091610851575090565b6101a2915060203d8111610872575b61086a81836104db565b8101906107f9565b503d610860565b6108816107ec565b610846565b90929192610893816105bf565b916108a160405193846104db565b82948284528282011161000e5760206105bd930190610149565b60008054604051630180634360e71b8152600481019390935281908390602490829060081c6001600160a01b03165afa918215610955575b81926108fe57505090565b909291503d8084833e61091181836104db565b81019060208183031261094d5780519067ffffffffffffffff8211610951570181601f8201121561094d576101a2929350602081519101610886565b8380fd5b8480fd5b61095d6107ec565b6108f3565b806000190460021181151516610979575b60011b90565b61098161052b565b610973565b60405190610993826104b2565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b6020830152565b906109c56109c08351610962565b610634565b6109cd610986565b600093845b8151811015610a865780610a5d6109f8610a57610a0c610a066109f8610a81978961067c565b516001600160f81b03191690565b60f81c90565b610a276109f8610a218a5160ff809516610542565b8a61067c565b610a3d610a3387610962565b918d1a918b61067c565b53610a4e610a066109f8878a61067c565b88519116610558565b8661067c565b610a7b610a71610a6c84610962565b610666565b91891a918761067c565b5361061c565b6109d2565b505060405161060f60f31b60208201529293506101a2918391506100c190602283019061056e565b9081602091031261000e5751801515810361000e5790565b60208183031261000e5780519067ffffffffffffffff821161000e57019080601f8301121561000e5781516101a292602001610886565b90604051610b57610b516102f8602093848101906102f0816100c1610b42856019907865787465726e616c2e636f6e74726163742e6164647265737360381b81520190565b62454e5360e81b815260030190565b93610caf565b604051630178b8bf60e01b8152600481018290526001600160a01b0394851694919291908281602481895afa908115610ca2575b600091610c85575b5016918215610c7557604051631ef3fca760e31b815260048101829052610bf5958390829060249082905afa928315610c68575b600093610c36575b505060009192604051808097819463691f343160e01b8352600483019190602083019252565b03915afa928315610c29575b600093610c0d57509190565b6101a291933d8091833e610c2181836104db565b810190610ac6565b610c316107ec565b610c01565b600093509081610c5a92903d10610c61575b610c5281836104db565b810190610aae565b9138610bcf565b503d610c48565b610c706107ec565b610bc7565b50505090506000906101a26105ea565b610c9c9150833d85116108725761086a81836104db565b38610b93565b610caa6107ec565b610b8b565b6028805b610d20575050602860002060405160208101917f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e283526040820152604081526060810181811067ffffffffffffffff821117610d13575b60405251902090565b610d1b61049b565b610d0a565b6f181899199a1a9b1b9c1cb0b131b232b360811b91600f9182821684901a600019820153600119019283928260041c161a825360081c91610cb3565b90604051610d69816104b2565b600681526020368183013760005b60038110610d8457509150565b610deb90600f85821a8181169160109182841015610dfd575b6f181899199a1a9b1b9c1cb0b131b232b360811b9384901a610dca610dc4610a6c88610962565b8961067c565b5360041c1690811015610df0575b1a610a7b610de583610962565b8561067c565b610d77565b610df86104fd565b610dd8565b610e056104fd565b610d9d56fea2646970667358221220b0b33cd9cbcababe73aea37fa6e7cc3f82249f979ec47fd4e7f97e7f3856ab1664736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c90816354fd4d501461011a57816384b5e5961461007157508063a090f9b414610068578063de1c7f701461005f5763edd148a21461005757600080fd5b61000e6103b6565b5061000e610371565b5061000e6101f8565b34610117576020366003190112610117576101076101139160043561009581610138565b6040516100cf816100c16020820194856014916bffffffffffffffffffffffff199060601b1681520190565b03601f1981018352826104db565b5190209081901a60f81b6001600160f81b031916600182901a60f01b60ff60f01b161760029190911a60e81b60ff60e81b1617610d5c565b60405191829182610191565b0390f35b80fd5b3461011757806003193601126101175760ff90541660805260206080f35b6001600160a01b0381160361000e57565b60005b83811061015c5750506000910152565b818101518382015260200161014c565b9060209161018581518092818552858086019101610149565b601f01601f1916010190565b9060206101a292818152019061016c565b90565b9092916040820191604081528451809352606081019260208096019060005b8181106101de575050506101a2939481840391015261016c565b825163ffffffff16865294870194918701916001016101c4565b503461000e57602036600319011261000e5760043561021681610138565b61031f600061028160405193846102656020820192836028917376616c696461746f722e7075626c69632e6b657960601b82526bffffffffffffffffffffffff199060601b1660148201520190565b0394610279601f19968781018352826104db565b5190206108bb565b6103046102f86102f8610293846109b2565b966040516102f06020820192826102e46102cd866019907865787465726e616c2e636f6e74726163742e6164647265737360381b81520190565b6a535356526567697374727960a81b8152600b0190565b039081018352826104db565b51902061080e565b6001600160a01b031690565b604051808095819463053e834960e01b835260048301610191565b03915afa908115610364575b600091610343575b50610113604051928392836101a5565b61035e913d8091833e61035681836104db565b810190610755565b38610333565b61036c6107ec565b61032b565b503461000e57602036600319011261000e5761039760043561039281610138565b610afd565b906101136040519283921515835260406020840152604083019061016c565b503461000e57602036600319011261000e57610113600435655af3107a4000670de0b6b3a76400006103e981840461069b565b920604906103f68261069b565b916103e8811061048b575b60648110610477575b600a1161045f575b6021610107916040519381610431869351809260208087019101610149565b8201601760f91b60208201526104508251809360208785019101610149565b010360018101845201826104db565b90602161046e61010792610585565b92915050610412565b91610483600a91610585565b92905061040a565b9161049590610585565b91610401565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176104ce57604052565b6104d661049b565b604052565b90601f8019910116810190811067ffffffffffffffff8211176104ce57604052565b50634e487b7160e01b600052603260045260246000fd5b50634e487b7160e01b600052601260045260246000fd5b50634e487b7160e01b600052601160045260246000fd5b811561054c570490565b610554610514565b0490565b8115610562570690565b61056a610514565b0690565b9061058160209282815194859201610149565b0190565b906105bd60216040518094600360fc1b60208301526105ad8151809260208686019101610149565b81010360018101855201836104db565b565b60209067ffffffffffffffff81116105dd575b601f01601f19160190565b6105e561049b565b6105d2565b604051906020820182811067ffffffffffffffff82111761060f575b60405260008252565b61061761049b565b610606565b600190600019811461062c570190565b61058161052b565b9061063e826105bf565b61064b60405191826104db565b828152809261065c601f19916105bf565b0190602036910137565b906001820180921161067457565b6105bd61052b565b90602091805182101561068e57010190565b6106966104fd565b010190565b8015610737576000818181805b61071f57506106b681610634565b935b6106c25750505090565b6000198101908111610712575b8091600a916106fc60308484068101809111610705575b60f81b6001600160f81b031916861a918761067c565b530490816106b8565b61070d61052b565b6106e6565b61071a61052b565b6106cf565b915061072c600a9161061c565b9104808492916106a8565b50604051610744816104b2565b60018152600360fc1b602082015290565b90602090818382031261000e57825167ffffffffffffffff9384821161000e570181601f8201121561000e5780519384116107df575b8360051b90604051946107a0858401876104db565b8552838086019282010192831161000e578301905b8282106107c3575050505090565b815163ffffffff8116810361000e5781529083019083016107b5565b6107e761049b565b61078b565b506040513d6000823e3d90fd5b9081602091031261000e57516101a281610138565b6000546040516321f8a72160e01b815260048101929092526020908290602490829060081c6001600160a01b03165afa908115610879575b600091610851575090565b6101a2915060203d8111610872575b61086a81836104db565b8101906107f9565b503d610860565b6108816107ec565b610846565b90929192610893816105bf565b916108a160405193846104db565b82948284528282011161000e5760206105bd930190610149565b60008054604051630180634360e71b8152600481019390935281908390602490829060081c6001600160a01b03165afa918215610955575b81926108fe57505090565b909291503d8084833e61091181836104db565b81019060208183031261094d5780519067ffffffffffffffff8211610951570181601f8201121561094d576101a2929350602081519101610886565b8380fd5b8480fd5b61095d6107ec565b6108f3565b806000190460021181151516610979575b60011b90565b61098161052b565b610973565b60405190610993826104b2565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b6020830152565b906109c56109c08351610962565b610634565b6109cd610986565b600093845b8151811015610a865780610a5d6109f8610a57610a0c610a066109f8610a81978961067c565b516001600160f81b03191690565b60f81c90565b610a276109f8610a218a5160ff809516610542565b8a61067c565b610a3d610a3387610962565b918d1a918b61067c565b53610a4e610a066109f8878a61067c565b88519116610558565b8661067c565b610a7b610a71610a6c84610962565b610666565b91891a918761067c565b5361061c565b6109d2565b505060405161060f60f31b60208201529293506101a2918391506100c190602283019061056e565b9081602091031261000e5751801515810361000e5790565b60208183031261000e5780519067ffffffffffffffff821161000e57019080601f8301121561000e5781516101a292602001610886565b90604051610b57610b516102f8602093848101906102f0816100c1610b42856019907865787465726e616c2e636f6e74726163742e6164647265737360381b81520190565b62454e5360e81b815260030190565b93610caf565b604051630178b8bf60e01b8152600481018290526001600160a01b0394851694919291908281602481895afa908115610ca2575b600091610c85575b5016918215610c7557604051631ef3fca760e31b815260048101829052610bf5958390829060249082905afa928315610c68575b600093610c36575b505060009192604051808097819463691f343160e01b8352600483019190602083019252565b03915afa928315610c29575b600093610c0d57509190565b6101a291933d8091833e610c2181836104db565b810190610ac6565b610c316107ec565b610c01565b600093509081610c5a92903d10610c61575b610c5281836104db565b810190610aae565b9138610bcf565b503d610c48565b610c706107ec565b610bc7565b50505090506000906101a26105ea565b610c9c9150833d85116108725761086a81836104db565b38610b93565b610caa6107ec565b610b8b565b6028805b610d20575050602860002060405160208101917f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e283526040820152604081526060810181811067ffffffffffffffff821117610d13575b60405251902090565b610d1b61049b565b610d0a565b6f181899199a1a9b1b9c1cb0b131b232b360811b91600f9182821684901a600019820153600119019283928260041c161a825360081c91610cb3565b90604051610d69816104b2565b600681526020368183013760005b60038110610d8457509150565b610deb90600f85821a8181169160109182841015610dfd575b6f181899199a1a9b1b9c1cb0b131b232b360811b9384901a610dca610dc4610a6c88610962565b8961067c565b5360041c1690811015610df0575b1a610a7b610de583610962565b8561067c565b610d77565b610df86104fd565b610dd8565b610e056104fd565b610d9d56fea2646970667358221220b0b33cd9cbcababe73aea37fa6e7cc3f82249f979ec47fd4e7f97e7f3856ab1664736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2396,
        "contract": "contracts/FrensMetaHelper.sol:FrensMetaHelper",
        "label": "version",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2399,
        "contract": "contracts/FrensMetaHelper.sol:FrensMetaHelper",
        "label": "frensStorage",
        "offset": 1,
        "slot": "0",
        "type": "t_contract(IFrensStorage)6261"
      }
    ],
    "types": {
      "t_contract(IFrensStorage)6261": {
        "encoding": "inplace",
        "label": "contract IFrensStorage",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}