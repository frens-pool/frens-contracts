{
  "address": "0x86ce161B4aD447B35B3a7CE76A854fBc16eB5fcA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFrensStorage",
          "name": "_frensStorage",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x130932bfe4229ea5f11caeace4b9a0dd425994a85f0e11d32e8daf74602b0866",
  "receipt": {
    "to": null,
    "from": "0xC50e6e6eee8d434a6Ee947DeFB04cBA4115d47b5",
    "contractAddress": "0x86ce161B4aD447B35B3a7CE76A854fBc16eB5fcA",
    "transactionIndex": 39,
    "gasUsed": "1187874",
    "logsBloom": "0x
    "blockHash": "0x06ae3ce58fae863cca36e48f19a3162dde956313309233132bb650c6fcb722a7",
    "transactionHash": "0x130932bfe4229ea5f11caeace4b9a0dd425994a85f0e11d32e8daf74602b0866",
    "logs": [],
    "blockNumber": 8225254,
    "cumulativeGasUsed": "8543482",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3703511A5fa20Be3FdBAD50A0A84d5d87E7683F4"
  ],
  "solcInputHash": "17a14ad4bc53af827cbeea225ea20fb1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFrensStorage\",\"name\":\"_frensStorage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FrensPoolShareTokenURI.sol\":\"FrensPoolShareTokenURI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\",\"keccak256\":\"0xf0f689f041c9970ece22ba42dc66cacf2aee78699e1eab26658becb738322356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/FrensBase.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"./interfaces/IFrensStorage.sol\\\";\\n\\n/// @title Base settings / modifiers for each contract in Frens Pool\\n/// @author modified 04-Dec-2022 by 0xWildhare originally by David Rugendyke (h/t David and Rocket Pool!)\\n/// this code is modified from the Rocket Pool RocketBase contract all \\\"Rocket\\\" replaced with \\\"Frens\\\"\\n\\nabstract contract FrensBase {\\n\\n    // Calculate using this as the base\\n    uint256 constant calcBase = 1 ether;\\n\\n    // Version of the contract\\n    uint8 public version;\\n\\n    // The main storage contract where primary persistant storage is maintained\\n    IFrensStorage frensStorage;\\n\\n\\n    /*** Modifiers **********************************************************/\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match a Frens Pool network contract\\n    */\\n    modifier onlyLatestNetworkContract() {\\n        require(getBool(keccak256(abi.encodePacked(\\\"contract.exists\\\", msg.sender))), \\\"Invalid or outdated network contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\\n    */\\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName))), \\\"Invalid or outdated contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered node\\n    */\\n    //removed  0xWildhare\\n    /*\\n    modifier onlyRegisteredNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"node.exists\\\", _nodeAddress))), \\\"Invalid node\\\");\\n        _;\\n    }\\n    */\\n    /**\\n    * @dev Throws if called by any sender that isn't a trusted node DAO member\\n    */\\n    //removed  0xWildhare\\n    /*\\n    modifier onlyTrustedNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"dao.trustednodes.\\\", \\\"member\\\", _nodeAddress))), \\\"Invalid trusted node\\\");\\n        _;\\n    }\\n    */\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered Frens StakingPool\\n    */\\n    modifier onlyStakingPool(address _stakingPoolAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"pool.exists\\\", _stakingPoolAddress))), \\\"Invalid Pool\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n    * @dev Throws if called by any account other than a guardian account (temporary account allowed access to settings before DAO is fully enabled)\\n    */\\n    modifier onlyGuardian() {\\n        require(msg.sender == frensStorage.getGuardian(), \\\"Account is not a temporary guardian\\\");\\n        _;\\n    }\\n\\n\\n    \\n\\n\\n\\n\\n\\n    /*** Methods **********************************************************/\\n\\n    /// @dev Set the main Frens Storage address\\n    constructor(IFrensStorage _frensStorage) {\\n        // Update the contract address\\n        frensStorage = IFrensStorage(_frensStorage);\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name\\n    function getContractAddress(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Check it\\n        require(contractAddress != address(0x0), \\\"Contract not found\\\");\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name (returns address(0x0) instead of reverting if contract does not exist)\\n    function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the name of a network contract by address\\n    function getContractName(address _contractAddress) internal view returns (string memory) {\\n        // Get the contract name\\n        string memory contractName = getString(keccak256(abi.encodePacked(\\\"contract.name\\\", _contractAddress)));\\n        // Check it\\n        require(bytes(contractName).length > 0, \\\"Contract not found\\\");\\n        // Return\\n        return contractName;\\n    }\\n\\n    /// @dev Get revert error message from a .call method\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n\\n\\n    /*** Frens Storage Methods ****************************************/\\n\\n    // Note: Unused helpers have been removed to keep contract sizes down\\n\\n    /// @dev Storage get methods\\n    function getAddress(bytes32 _key) internal view returns (address) { return frensStorage.getAddress(_key); }\\n    function getUint(bytes32 _key) internal view returns (uint) { return frensStorage.getUint(_key); }\\n    function getString(bytes32 _key) internal view returns (string memory) { return frensStorage.getString(_key); }\\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return frensStorage.getBytes(_key); }\\n    function getBool(bytes32 _key) internal view returns (bool) { return frensStorage.getBool(_key); }\\n    function getInt(bytes32 _key) internal view returns (int) { return frensStorage.getInt(_key); }\\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return frensStorage.getBytes32(_key); }\\n    function getArray(bytes32 _key) internal view returns (uint[] memory) { return frensStorage.getArray(_key); }\\n\\n    /// @dev Storage set methods\\n    function setAddress(bytes32 _key, address _value) internal { frensStorage.setAddress(_key, _value); }\\n    function setUint(bytes32 _key, uint _value) internal { frensStorage.setUint(_key, _value); }\\n    function setString(bytes32 _key, string memory _value) internal { frensStorage.setString(_key, _value); }\\n    function setBytes(bytes32 _key, bytes memory _value) internal { frensStorage.setBytes(_key, _value); }\\n    function setBool(bytes32 _key, bool _value) internal { frensStorage.setBool(_key, _value); }\\n    function setInt(bytes32 _key, int _value) internal { frensStorage.setInt(_key, _value); }\\n    function setBytes32(bytes32 _key, bytes32 _value) internal { frensStorage.setBytes32(_key, _value); }\\n    function setArray(bytes32 _key, uint[] memory _value) internal { frensStorage.setArray(_key, _value); }\\n\\n    /// @dev Storage delete methods\\n    function deleteAddress(bytes32 _key) internal { frensStorage.deleteAddress(_key); }\\n    function deleteUint(bytes32 _key) internal { frensStorage.deleteUint(_key); }\\n    function deleteString(bytes32 _key) internal { frensStorage.deleteString(_key); }\\n    function deleteBytes(bytes32 _key) internal { frensStorage.deleteBytes(_key); }\\n    function deleteBool(bytes32 _key) internal { frensStorage.deleteBool(_key); }\\n    function deleteInt(bytes32 _key) internal { frensStorage.deleteInt(_key); }\\n    function deleteBytes32(bytes32 _key) internal { frensStorage.deleteBytes32(_key); }\\n    function deleteArray(bytes32 _key) internal { frensStorage.deleteArray(_key); }\\n\\n    /// @dev Storage arithmetic methods - push added by 0xWildhare\\n    function addUint(bytes32 _key, uint256 _amount) internal { frensStorage.addUint(_key, _amount); }\\n    function subUint(bytes32 _key, uint256 _amount) internal { frensStorage.subUint(_key, _amount); }\\n    function pushUint(bytes32 _key, uint256 _amount) internal { frensStorage.pushUint(_key, _amount); }\\n}\\n\",\"keccak256\":\"0x7374e6a194a565712df6aa0f2e80fa9e4ab6a179b5ed331b830e14075907e88f\",\"license\":\"GPL-3.0-only\"},\"contracts/FrensPoolShareTokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\nimport \\\"./interfaces/IFrensMetaHelper.sol\\\";\\nimport \\\"./interfaces/IFrensArt.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShareTokenURI.sol\\\";\\nimport \\\"./FrensBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport 'base64-sol/base64.sol';\\n\\ncontract FrensPoolShareTokenURI is IFrensPoolShareTokenURI, FrensBase {\\n\\n  using Strings for uint256;\\n\\n\\n  IFrensPoolShare frensPoolShare;\\n\\n  constructor(IFrensStorage _frensStorage) FrensBase(_frensStorage){\\n    frensPoolShare = IFrensPoolShare(getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensPoolShare\\\"))));\\n  }\\n\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n      require(frensPoolShare.exists(id), \\\"id does not exist\\\");\\n      address poolAddress = getAddress(keccak256(abi.encodePacked(\\\"pool.for.id\\\", id)));\\n      IStakingPool stakingPool = IStakingPool(payable(poolAddress));\\n      IFrensMetaHelper metaHelper = IFrensMetaHelper(getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensMetaHelper\\\"))));\\n      uint depositForId = getUint(keccak256(abi.encodePacked(\\\"deposit.amount\\\", id)));\\n      string memory depositString = metaHelper.getEthDecimalString(depositForId);\\n      uint shareForId = stakingPool.getDistributableShare(id);\\n      string memory shareString = metaHelper.getEthDecimalString(shareForId);\\n      string memory stakingPoolAddress = Strings.toHexString(uint160(poolAddress), 20);\\n      (uint32[] memory poolOperators, string memory pubKeyString) = metaHelper.getOperatorsForPool(poolAddress);\\n      string memory poolState = stakingPool.getState();\\n      string memory name = string(abi.encodePacked('fren pool share #',id.toString()));\\n      string memory description = string(abi.encodePacked(\\n        'this fren has a deposit of ',depositString,\\n        ' Eth in pool ', stakingPoolAddress,\\n        ', with claimable balance of ', shareString, ' Eth'));\\n      string memory image = Base64.encode(bytes(generateSVGofTokenById(id)));\\n\\n\\n  //TODO: add pool owner to traits and possibly art (Add ENS integration for art - only display if ENS exists for address)\\n      return\\n        string(\\n          abi.encodePacked(\\n            'data:application/json;base64,',\\n            Base64.encode(\\n              bytes(\\n                abi.encodePacked(\\n                  '{\\\"name\\\":\\\"',\\n                  name,\\n                  '\\\", \\\"description\\\":\\\"',\\n                  description,\\n                  '\\\", \\\"external_url\\\":\\\"https://frens.fun/token/',\\n                  id.toString(),\\n                  '\\\", \\\"attributes\\\": [{\\\"trait_type\\\": \\\"pool\\\", \\\"value\\\":\\\"',\\n                  stakingPoolAddress,\\n                  '\\\"},{\\\"trait_type\\\": \\\"validator public key\\\", \\\"value\\\": \\\"',\\n                  pubKeyString,\\n                  '\\\"},{\\\"trait_type\\\": \\\"deposit\\\", \\\"value\\\": \\\"',\\n                  depositString, ' Eth',\\n                  '\\\"},{\\\"trait_type\\\": \\\"claimable\\\", \\\"value\\\": \\\"',\\n                  shareString, ' Eth',\\n                  '\\\"},{\\\"trait_type\\\": \\\"pool state\\\", \\\"value\\\": \\\"',\\n                  poolState,\\n                  '\\\"},{\\\"trait_type\\\": \\\"operator1\\\", \\\"value\\\": \\\"',\\n                  poolOperators.length == 0 ? \\\"Not Set\\\" : uint(poolOperators[0]).toString(),\\n                  '\\\"},{\\\"trait_type\\\": \\\"operator2\\\", \\\"value\\\": \\\"',\\n                  poolOperators.length == 0 ? \\\"Not Set\\\" : uint(poolOperators[1]).toString(),\\n                  '\\\"},{\\\"trait_type\\\": \\\"operator3\\\", \\\"value\\\": \\\"',\\n                  poolOperators.length == 0 ? \\\"Not Set\\\" : uint(poolOperators[2]).toString(),\\n                  '\\\"},{\\\"trait_type\\\": \\\"operator4\\\", \\\"value\\\": \\\"',\\n                  poolOperators.length == 0 ? \\\"Not Set\\\" : uint(poolOperators[3]).toString(),\\n                  '\\\"}], \\\"image\\\": \\\"',\\n                  'data:image/svg+xml;base64,',\\n                  image,\\n                  '\\\"}'\\n                )\\n              )\\n            )\\n          )\\n        );\\n    }\\n\\n    function generateSVGofTokenById(uint256 id) internal view returns (string memory) {\\n      IFrensArt frensArt = IFrensArt(getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensArt\\\"))));\\n\\n      string memory svg = string(abi.encodePacked(\\n        '<svg width=\\\"400\\\" height=\\\"400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n          frensArt.renderTokenById(id),\\n        '</svg>'\\n      ));\\n\\n      return svg;\\n    }\\n\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xce33aeb0f23813dac45144d017246b481340113d0cf97649c1cd350406dbed87\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensArt.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IFrensArt {\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xfdb4c36608a20ac7f10ccb1b5d59ec26b25587860fb596dc12414b27591db2a0\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensMetaHelper.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IFrensMetaHelper {\\n\\n  function getColor(address a) external pure returns(string memory);\\n\\n  function getEthDecimalString(uint amountInWei) external pure returns(string memory);\\n\\n  function getOperatorsForPool(address poolAddress) external view returns (uint32[] memory, string memory);\\n\\n  function getEns(address addr) external view returns(bool, string memory);\\n}\\n\",\"keccak256\":\"0x643308572ba7413d67a1147b87179e4b2ab606336da93d6fb5394e5d60579cc2\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensPoolShare.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\n\\ninterface IFrensPoolShare is IERC721Enumerable{\\n\\n  function mint(address userAddress, address _pool) external;\\n\\n  function exists(uint _id) external view returns(bool);\\n\\n  function getPoolById(uint _id) external view returns(address);\\n\\n  function tokenURI(uint256 id) external view returns (string memory);\\n\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n\\n}\\n\",\"keccak256\":\"0x3d9190356b243fa28107e4576ef453a1ad4a6b22dd61e7ed61ab28540fd4f1e4\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensPoolShareTokenURI.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IFrensPoolShareTokenURI {\\n  function tokenURI(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3fc19266145fb90aed63716c57842d6dedcdb62ef499ee70fd22bf638df8fa8c\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensStorage.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n//modified from IRocketStorage on 03/12/2022 by 0xWildhare\\n\\ninterface IFrensStorage {\\n\\n    // Deploy status\\n    function getDeployedStatus() external view returns (bool);\\n\\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getString(bytes32 _key) external view returns (string memory);\\n    function getBytes(bytes32 _key) external view returns (bytes memory);\\n    function getBool(bytes32 _key) external view returns (bool);\\n    function getInt(bytes32 _key) external view returns (int);\\n    function getBytes32(bytes32 _key) external view returns (bytes32);\\n    function getArray(bytes32 _key) external view returns (uint[] memory);\\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setString(bytes32 _key, string calldata _value) external;\\n    function setBytes(bytes32 _key, bytes calldata _value) external;\\n    function setBool(bytes32 _key, bool _value) external;\\n    function setInt(bytes32 _key, int _value) external;\\n    function setBytes32(bytes32 _key, bytes32 _value) external;\\n    function setArray(bytes32 _key, uint[] calldata _value) external;\\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteString(bytes32 _key) external;\\n    function deleteBytes(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;\\n    function deleteInt(bytes32 _key) external;\\n    function deleteBytes32(bytes32 _key) external;\\n    function deleteArray(bytes32 _key) external;\\n\\n    // Arithmetic (and stuff) - push added by 0xWildhare\\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n    function pushUint(bytes32 _key, uint256 _amount) external;\\n\\n    // Protected storage removed ~ 0xWildhare\\n    /*\\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\\n    function confirmWithdrawalAddress(address _nodeAddress) external;\\n    */\\n}\\n\",\"keccak256\":\"0x460c440b2f1de0c6a41fff71e5f2c38117217a8aae946f6856ac720fc555a203\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IStakingPool{\\n\\n  function owner() external view returns (address);\\n\\n  function depositToPool() external payable;\\n\\n  function addToDeposit(uint _id) external payable;\\n\\n  function withdraw(uint _id, uint _amount) external;\\n\\n  function distribute() external;\\n\\n  function getIdsInThisPool() external view returns(uint[] memory);\\n\\n  function getShare(uint _id) external view returns(uint);\\n\\n  function getDistributableShare(uint _id) external view returns(uint);\\n\\n  function getPubKey() external view returns(bytes memory);\\n\\n  function setPubKey(\\n    bytes calldata pubKey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n    ) external;\\n\\n  function getState() external view returns(string memory);\\n\\n  function getDepositAmount(uint _id) external view returns(uint);\\n\\n  function stake(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) external;\\n\\n  function stake() external;\\n\\n    function unstake() external;\\n\\n}\\n\",\"keccak256\":\"0x3b064293270744fdbc1e8b6758057b1bd58586d057ad8301c758c87ddd8c814a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604090808252346200017f57806200153a803803809162000023828562000184565b83396020928391810103126200017f57516001600160a01b03919082811681036200017f5760008054610100600160a81b03191660089290921b610100600160a81b03169190911780825584516f636f6e74726163742e6164647265737360801b8482019081526d4672656e73506f6f6c536861726560901b6030830152601e825290938487019290916001600160401b038411868510176200016b576024848885948294838d528a5190206321f8a72160e01b845260448b015260081c165afa9384156200016157839462000117575b505050501660018060a01b031960015416176001555161137b9081620001bf8239f35b9080929394503d831162000159575b62000132818562000184565b8101031262000155575190828216820362000152575038808080620000f4565b80fd5b5080fd5b503d62000126565b86513d85823e3d90fd5b634e487b7160e01b85526041600452602485fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620001a857604052565b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c806354fd4d50146109985763c87b56dd1461003757600080fd5b3461099457602092836003193601126109915783828480936102856100fa96359586946100b861007d61007160015460018060a01b031690565b6001600160a01b031690565b8884518092634f558e7960e01b8252818061009f8d8983019190602083019252565b03915afa908115610984575b8691610957575b50610aae565b61023e8251856101028a8301836100e78c83602b916a1c1bdbdb0b999bdc8b9a5960aa1b8252600b8201520190565b0393601f199e8f95868101835282610a62565b51902061110a565b8a60018060a01b036101b18184169e8f966101a96101716100718d51888101906100fa8161016561014a856010906f636f6e74726163742e6164647265737360801b81520190565b6e233932b739a6b2ba30a432b63832b960891b8152600f0190565b03878101835282610a62565b9b51918261019d8882019586602e916d19195c1bdcda5d0b985b5bdd5b9d60921b8252600e8201520190565b03908101835282610a62565b51902061119c565b9716968b8b5195888d87898d81806101db6376e8a45160e11b9a8b83528883019190602083019252565b03915afa98891561094a575b889961091c575b50516333c7180560e11b81529081019283528694939290918491839190829081906020015b03915afa92831561090f575b84936108e0575b50508b51968792839283528983019190602083019252565b0381895afa9384156108d3575b82946108b7575b5061025c8c610ef4565b95895180809981946328243e6d60e21b8352898301919091602081019260018060a01b03169052565b03915afa998a156108aa575b8695879b610882575b508690885194858092631865c57d60e01b82525afa928315610875575b8693610851575b506102c888610d9d565b998751809b8b82016102f290601190706672656e20706f6f6c207368617265202360781b81520190565b6102fb91610c43565b038c81018c5261030b908c610a62565b875194858b810161034090601b907f74686973206672656e206861732061206465706f736974206f6620000000000081520190565b61034a9085610c43565b6c01022ba341034b7103837b7b61609d1b8152600d0161036a9083610c43565b7f2c207769746820636c61696d61626c652062616c616e6365206f6620000000008152601c0161039a9086610c43565b630408ae8d60e31b8152600401038d810187526103b79087610a62565b6103c08a611204565b6103c990611021565b996103d390610d9d565b8751610839576103e1610cec565b965b8851610821576103f1610cec565b985b805161080957610401610cec565b9a5b5080516107d95750610413610cec565b9a5b51683d913730b6b2911d1160b91b9d81019d8e529d8e9d60090161043891610c43565b71111610113232b9b1b934b83a34b7b7111d1160711b815260120161045c91610c43565b7f222c202265787465726e616c5f75726c223a2268747470733a2f2f6672656e7381526a2e66756e2f746f6b656e2f60a81b6020820152602b0161049f91610c43565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a81527110113837b7b6111610113b30b63ab2911d1160711b60208201526032016104e991610c43565b7f227d2c7b2274726169745f74797065223a202276616c696461746f72207075628152733634b19035b2bc911610113b30b63ab2911d101160611b602082015260340161053591610c43565b7f227d2c7b2274726169745f74797065223a20226465706f736974222c20227661815266363ab2911d101160c91b602082015260270161057491610c43565b630408ae8d60e31b81526004017f227d2c7b2274726169745f74797065223a2022636c61696d61626c65222c20228152683b30b63ab2911d101160b91b60208201526029016105c291610c43565b630408ae8d60e31b81526004017f227d2c7b2274726169745f74797065223a2022706f6f6c207374617465222c20815269113b30b63ab2911d101160b11b6020820152602a0161061191610c43565b7f227d2c7b2274726169745f74797065223a20226f70657261746f7231222c20228152683b30b63ab2911d101160b91b602082015260290161065291610c43565b7f227d2c7b2274726169745f74797065223a20226f70657261746f7232222c20228152683b30b63ab2911d101160b91b602082015260290161069391610c43565b7f227d2c7b2274726169745f74797065223a20226f70657261746f7233222c20228152683b30b63ab2911d101160b91b60208201526029016106d491610c43565b7f227d2c7b2274726169745f74797065223a20226f70657261746f7234222c20228152683b30b63ab2911d101160b91b602082015260290161071591610c43565b6e113eae96101134b6b0b3b2911d101160891b8152600f017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a0161075c91610c43565b61227d60f01b81526002010382810182526107779082610a62565b61078090611021565b82517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000094810194855293849190601d016107b991610c43565b0390810183526107c99083610a62565b516107d58192826109da565b0390f35b6107fe6107f56107eb61080393610ca9565b5163ffffffff1690565b63ffffffff1690565b610d9d565b9a610415565b61081b6107fe6107f56107eb84610c98565b9a610403565b6108336107fe6107f56107eb8c610c87565b986103f3565b61084b6107fe6107f56107eb8b610c71565b966103e3565b61086e9193503d8088833e6108668183610a62565b810190610b5e565b91386102be565b61087d610aa1565b6102b7565b6108a2919b508796503d8088833e61089a8183610a62565b810190610b93565b9a909561029a565b6108b2610aa1565b610291565b6108cc9194503d8084833e6108668183610a62565b9238610252565b6108db610aa1565b61024b565b610900929350803d10610908575b6108f88183610a62565b810190610b84565b90388e610226565b503d6108ee565b610917610aa1565b61021f565b8695949199509288969261093c610213953d808b833e6108668183610a62565b9a92959650929650926101ee565b610952610aa1565b6101e7565b6109779150893d8b1161097d575b61096f8183610a62565b810190610a84565b386100b2565b503d610965565b61098c610aa1565b6100ab565b80fd5b8280fd5b833461099157806003193601126109915760ff90541660805260206080f35b60005b8381106109ca5750506000910152565b81810151838201526020016109ba565b604091602082526109fa81518092816020860152602086860191016109b7565b601f01601f1916010190565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117610a3957604052565b610a41610a06565b604052565b6060810190811067ffffffffffffffff821117610a3957604052565b90601f8019910116810190811067ffffffffffffffff821117610a3957604052565b90816020910312610a9c57518015158103610a9c5790565b600080fd5b506040513d6000823e3d90fd5b15610ab557565b60405162461bcd60e51b81526020600482015260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606490fd5b60209067ffffffffffffffff8111610b0c575b601f01601f19160190565b610b14610a06565b610b01565b81601f82011215610a9c578051610b2f81610aee565b92610b3d6040519485610a62565b81845260208284010111610a9c57610b5b91602080850191016109b7565b90565b90602082820312610a9c57815167ffffffffffffffff8111610a9c57610b5b9201610b19565b90816020910312610a9c575190565b919091604081840312610a9c5780519267ffffffffffffffff93848111610a9c5782019381601f86011215610a9c57845194818611610c36575b8560051b9060405191602097610be589830185610a62565b8352878084019183010191858311610a9c578801905b828210610c1a5750505094830151908111610a9c57610b5b9201610b19565b815163ffffffff81168103610a9c578152908801908801610bfb565b610c3e610a06565b610bcd565b90610c56602092828151948592016109b7565b0190565b50634e487b7160e01b600052603260045260246000fd5b602090805115610c7f570190565b610c56610c5a565b604090805160011015610c7f570190565b606090805160021015610c7f570190565b608090805160031015610c7f570190565b604051906020820182811067ffffffffffffffff821117610cdf575b60405260008252565b610ce7610a06565b610cd6565b60405190610cf982610a1d565b6007825266139bdd0814d95d60ca1b6020830152565b50634e487b7160e01b600052601160045260246000fd5b90610d3082610aee565b610d3d6040519182610a62565b8281528092610d4e601f1991610aee565b0190602036910137565b9060028201809211610d6657565b610d6e610d0f565b565b9060208201809211610d6657565b906020918051821015610d9057010190565b610d98610c5a565b010190565b8015610e4b576000818181805b610e215750610db881610d26565b935b610dc45750505090565b6000198101908111610e14575b8091600a91610dfe60308484068101809111610e07575b60f81b6001600160f81b031916861a9187610d7e565b53049081610dba565b610e0f610d0f565b610de8565b610e1c610d0f565b610dd1565b91506001600a916000198114610e3e575b01910480849291610daa565b610e46610d0f565b610e32565b50604051610e5881610a1d565b60018152600360fc1b602082015290565b6001600160fe1b038111600116610e81575b60021b90565b610e89610d0f565b610e7b565b8015610e9c575b6000190190565b610ea4610d0f565b610e95565b15610eb057565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b60405190610f0182610a46565b602a825260403660208401376030610f1883610c71565b538151600190811015610f96575b90607860218401536029915b808311610f455750610b5b915015610ea9565b9080600f610f8292166010811015610f89575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a610f788587610d7e565b5360041c92610e8e565b9190610f32565b610f91610c5a565b610f58565b610f9e610c5a565b610f26565b604051906060820182811067ffffffffffffffff821117611014575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b61101c610a06565b610fbf565b80511561110157611030610fa3565b61104c6110476110408451610d58565b6003900490565b610e69565b9161105e61105984610d70565b610d26565b92835280815182019060208501935b8282106110af5750505060039051068060011461109e5760021461108f575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c168801015160028601531685010151908201530193919061106d565b50610b5b610cba565b60018060a01b036000602082825460081c16936024604051809681936321f8a72160e01b835260048301525afa92831561118f575b819361114c575b50505090565b909192506020813d8211611187575b8161116860209383610a62565b81010312611183575191821682036109915750388080611146565b5080fd5b3d915061115b565b611197610aa1565b61113f565b60005460405163bd02d0f560e01b815260048101929092526020908290602490829060081c6001600160a01b03165afa9081156111f7575b6000916111df575090565b610b5b915060203d8111610908576108f88183610a62565b6111ff610aa1565b6111d4565b610b5b61130d91611288600060405192611268610071610071602087016f636f6e74726163742e6164647265737360801b8152876112546030820160089067119c995b9cd05c9d60c21b81520190565b03976100fa601f19998a8101835282610a62565b604051808095819463516b636d60e11b8352600483019190602083019252565b03915afa908115611338575b60009161131f575b5061019d604051948592611307602085016041907f3c7376672077696474683d2234303022206865696768743d223430302220786d81527f6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667226020820152601f60f91b60408201520190565b90610c43565b651e17b9bb339f60d11b815260060190565b611332913d8091833e6108668183610a62565b3861129c565b611340610aa1565b61129456fea2646970667358221220a8766847c5d4c4be2b2460274da6ef404a85d477c9d968cfbba75166f3a014e264736f6c63430008100033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c806354fd4d50146109985763c87b56dd1461003757600080fd5b3461099457602092836003193601126109915783828480936102856100fa96359586946100b861007d61007160015460018060a01b031690565b6001600160a01b031690565b8884518092634f558e7960e01b8252818061009f8d8983019190602083019252565b03915afa908115610984575b8691610957575b50610aae565b61023e8251856101028a8301836100e78c83602b916a1c1bdbdb0b999bdc8b9a5960aa1b8252600b8201520190565b0393601f199e8f95868101835282610a62565b51902061110a565b8a60018060a01b036101b18184169e8f966101a96101716100718d51888101906100fa8161016561014a856010906f636f6e74726163742e6164647265737360801b81520190565b6e233932b739a6b2ba30a432b63832b960891b8152600f0190565b03878101835282610a62565b9b51918261019d8882019586602e916d19195c1bdcda5d0b985b5bdd5b9d60921b8252600e8201520190565b03908101835282610a62565b51902061119c565b9716968b8b5195888d87898d81806101db6376e8a45160e11b9a8b83528883019190602083019252565b03915afa98891561094a575b889961091c575b50516333c7180560e11b81529081019283528694939290918491839190829081906020015b03915afa92831561090f575b84936108e0575b50508b51968792839283528983019190602083019252565b0381895afa9384156108d3575b82946108b7575b5061025c8c610ef4565b95895180809981946328243e6d60e21b8352898301919091602081019260018060a01b03169052565b03915afa998a156108aa575b8695879b610882575b508690885194858092631865c57d60e01b82525afa928315610875575b8693610851575b506102c888610d9d565b998751809b8b82016102f290601190706672656e20706f6f6c207368617265202360781b81520190565b6102fb91610c43565b038c81018c5261030b908c610a62565b875194858b810161034090601b907f74686973206672656e206861732061206465706f736974206f6620000000000081520190565b61034a9085610c43565b6c01022ba341034b7103837b7b61609d1b8152600d0161036a9083610c43565b7f2c207769746820636c61696d61626c652062616c616e6365206f6620000000008152601c0161039a9086610c43565b630408ae8d60e31b8152600401038d810187526103b79087610a62565b6103c08a611204565b6103c990611021565b996103d390610d9d565b8751610839576103e1610cec565b965b8851610821576103f1610cec565b985b805161080957610401610cec565b9a5b5080516107d95750610413610cec565b9a5b51683d913730b6b2911d1160b91b9d81019d8e529d8e9d60090161043891610c43565b71111610113232b9b1b934b83a34b7b7111d1160711b815260120161045c91610c43565b7f222c202265787465726e616c5f75726c223a2268747470733a2f2f6672656e7381526a2e66756e2f746f6b656e2f60a81b6020820152602b0161049f91610c43565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a81527110113837b7b6111610113b30b63ab2911d1160711b60208201526032016104e991610c43565b7f227d2c7b2274726169745f74797065223a202276616c696461746f72207075628152733634b19035b2bc911610113b30b63ab2911d101160611b602082015260340161053591610c43565b7f227d2c7b2274726169745f74797065223a20226465706f736974222c20227661815266363ab2911d101160c91b602082015260270161057491610c43565b630408ae8d60e31b81526004017f227d2c7b2274726169745f74797065223a2022636c61696d61626c65222c20228152683b30b63ab2911d101160b91b60208201526029016105c291610c43565b630408ae8d60e31b81526004017f227d2c7b2274726169745f74797065223a2022706f6f6c207374617465222c20815269113b30b63ab2911d101160b11b6020820152602a0161061191610c43565b7f227d2c7b2274726169745f74797065223a20226f70657261746f7231222c20228152683b30b63ab2911d101160b91b602082015260290161065291610c43565b7f227d2c7b2274726169745f74797065223a20226f70657261746f7232222c20228152683b30b63ab2911d101160b91b602082015260290161069391610c43565b7f227d2c7b2274726169745f74797065223a20226f70657261746f7233222c20228152683b30b63ab2911d101160b91b60208201526029016106d491610c43565b7f227d2c7b2274726169745f74797065223a20226f70657261746f7234222c20228152683b30b63ab2911d101160b91b602082015260290161071591610c43565b6e113eae96101134b6b0b3b2911d101160891b8152600f017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a0161075c91610c43565b61227d60f01b81526002010382810182526107779082610a62565b61078090611021565b82517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000094810194855293849190601d016107b991610c43565b0390810183526107c99083610a62565b516107d58192826109da565b0390f35b6107fe6107f56107eb61080393610ca9565b5163ffffffff1690565b63ffffffff1690565b610d9d565b9a610415565b61081b6107fe6107f56107eb84610c98565b9a610403565b6108336107fe6107f56107eb8c610c87565b986103f3565b61084b6107fe6107f56107eb8b610c71565b966103e3565b61086e9193503d8088833e6108668183610a62565b810190610b5e565b91386102be565b61087d610aa1565b6102b7565b6108a2919b508796503d8088833e61089a8183610a62565b810190610b93565b9a909561029a565b6108b2610aa1565b610291565b6108cc9194503d8084833e6108668183610a62565b9238610252565b6108db610aa1565b61024b565b610900929350803d10610908575b6108f88183610a62565b810190610b84565b90388e610226565b503d6108ee565b610917610aa1565b61021f565b8695949199509288969261093c610213953d808b833e6108668183610a62565b9a92959650929650926101ee565b610952610aa1565b6101e7565b6109779150893d8b1161097d575b61096f8183610a62565b810190610a84565b386100b2565b503d610965565b61098c610aa1565b6100ab565b80fd5b8280fd5b833461099157806003193601126109915760ff90541660805260206080f35b60005b8381106109ca5750506000910152565b81810151838201526020016109ba565b604091602082526109fa81518092816020860152602086860191016109b7565b601f01601f1916010190565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117610a3957604052565b610a41610a06565b604052565b6060810190811067ffffffffffffffff821117610a3957604052565b90601f8019910116810190811067ffffffffffffffff821117610a3957604052565b90816020910312610a9c57518015158103610a9c5790565b600080fd5b506040513d6000823e3d90fd5b15610ab557565b60405162461bcd60e51b81526020600482015260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606490fd5b60209067ffffffffffffffff8111610b0c575b601f01601f19160190565b610b14610a06565b610b01565b81601f82011215610a9c578051610b2f81610aee565b92610b3d6040519485610a62565b81845260208284010111610a9c57610b5b91602080850191016109b7565b90565b90602082820312610a9c57815167ffffffffffffffff8111610a9c57610b5b9201610b19565b90816020910312610a9c575190565b919091604081840312610a9c5780519267ffffffffffffffff93848111610a9c5782019381601f86011215610a9c57845194818611610c36575b8560051b9060405191602097610be589830185610a62565b8352878084019183010191858311610a9c578801905b828210610c1a5750505094830151908111610a9c57610b5b9201610b19565b815163ffffffff81168103610a9c578152908801908801610bfb565b610c3e610a06565b610bcd565b90610c56602092828151948592016109b7565b0190565b50634e487b7160e01b600052603260045260246000fd5b602090805115610c7f570190565b610c56610c5a565b604090805160011015610c7f570190565b606090805160021015610c7f570190565b608090805160031015610c7f570190565b604051906020820182811067ffffffffffffffff821117610cdf575b60405260008252565b610ce7610a06565b610cd6565b60405190610cf982610a1d565b6007825266139bdd0814d95d60ca1b6020830152565b50634e487b7160e01b600052601160045260246000fd5b90610d3082610aee565b610d3d6040519182610a62565b8281528092610d4e601f1991610aee565b0190602036910137565b9060028201809211610d6657565b610d6e610d0f565b565b9060208201809211610d6657565b906020918051821015610d9057010190565b610d98610c5a565b010190565b8015610e4b576000818181805b610e215750610db881610d26565b935b610dc45750505090565b6000198101908111610e14575b8091600a91610dfe60308484068101809111610e07575b60f81b6001600160f81b031916861a9187610d7e565b53049081610dba565b610e0f610d0f565b610de8565b610e1c610d0f565b610dd1565b91506001600a916000198114610e3e575b01910480849291610daa565b610e46610d0f565b610e32565b50604051610e5881610a1d565b60018152600360fc1b602082015290565b6001600160fe1b038111600116610e81575b60021b90565b610e89610d0f565b610e7b565b8015610e9c575b6000190190565b610ea4610d0f565b610e95565b15610eb057565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b60405190610f0182610a46565b602a825260403660208401376030610f1883610c71565b538151600190811015610f96575b90607860218401536029915b808311610f455750610b5b915015610ea9565b9080600f610f8292166010811015610f89575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a610f788587610d7e565b5360041c92610e8e565b9190610f32565b610f91610c5a565b610f58565b610f9e610c5a565b610f26565b604051906060820182811067ffffffffffffffff821117611014575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b61101c610a06565b610fbf565b80511561110157611030610fa3565b61104c6110476110408451610d58565b6003900490565b610e69565b9161105e61105984610d70565b610d26565b92835280815182019060208501935b8282106110af5750505060039051068060011461109e5760021461108f575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c168801015160028601531685010151908201530193919061106d565b50610b5b610cba565b60018060a01b036000602082825460081c16936024604051809681936321f8a72160e01b835260048301525afa92831561118f575b819361114c575b50505090565b909192506020813d8211611187575b8161116860209383610a62565b81010312611183575191821682036109915750388080611146565b5080fd5b3d915061115b565b611197610aa1565b61113f565b60005460405163bd02d0f560e01b815260048101929092526020908290602490829060081c6001600160a01b03165afa9081156111f7575b6000916111df575090565b610b5b915060203d8111610908576108f88183610a62565b6111ff610aa1565b6111d4565b610b5b61130d91611288600060405192611268610071610071602087016f636f6e74726163742e6164647265737360801b8152876112546030820160089067119c995b9cd05c9d60c21b81520190565b03976100fa601f19998a8101835282610a62565b604051808095819463516b636d60e11b8352600483019190602083019252565b03915afa908115611338575b60009161131f575b5061019d604051948592611307602085016041907f3c7376672077696474683d2234303022206865696768743d223430302220786d81527f6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667226020820152601f60f91b60408201520190565b90610c43565b651e17b9bb339f60d11b815260060190565b611332913d8091833e6108668183610a62565b3861129c565b611340610aa1565b61129456fea2646970667358221220a8766847c5d4c4be2b2460274da6ef404a85d477c9d968cfbba75166f3a014e264736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2396,
        "contract": "contracts/FrensPoolShareTokenURI.sol:FrensPoolShareTokenURI",
        "label": "version",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2399,
        "contract": "contracts/FrensPoolShareTokenURI.sol:FrensPoolShareTokenURI",
        "label": "frensStorage",
        "offset": 1,
        "slot": "0",
        "type": "t_contract(IFrensStorage)6545"
      },
      {
        "astId": 3719,
        "contract": "contracts/FrensPoolShareTokenURI.sol:FrensPoolShareTokenURI",
        "label": "frensPoolShare",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFrensPoolShare)6339"
      }
    ],
    "types": {
      "t_contract(IFrensPoolShare)6339": {
        "encoding": "inplace",
        "label": "contract IFrensPoolShare",
        "numberOfBytes": "20"
      },
      "t_contract(IFrensStorage)6545": {
        "encoding": "inplace",
        "label": "contract IFrensStorage",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}