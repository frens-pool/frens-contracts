{
  "address": "0xEB0E870664bdB6551e6bf5DEdF6CdcBD2F6A3C74",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "contract IFrensStorage",
          "name": "frensStorage_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositer",
          "type": "address"
        }
      ],
      "name": "DepositToPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "addToDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getDistributableShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIdsInThisPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPubKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getState",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rugpull",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "withdrawal_credentials",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "deposit_data_root",
          "type": "bytes32"
        }
      ],
      "name": "setPubKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "withdrawal_credentials",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "deposit_data_root",
          "type": "bytes32"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xaac3c41b9169d210bb8d953c0d52560d651c341a0bafb09ccb77a170209408d5",
  "receipt": {
    "to": null,
    "from": "0xC50e6e6eee8d434a6Ee947DeFB04cBA4115d47b5",
    "contractAddress": "0xEB0E870664bdB6551e6bf5DEdF6CdcBD2F6A3C74",
    "transactionIndex": 69,
    "gasUsed": "1932044",
    "logsBloom": "0x
    "blockHash": "0xc82f8c72b56a424772bfd77392de08e850fc479a192b8d3d8b5d553c7aeb4a11",
    "transactionHash": "0xaac3c41b9169d210bb8d953c0d52560d651c341a0bafb09ccb77a170209408d5",
    "logs": [
      {
        "transactionIndex": 69,
        "blockNumber": 8225260,
        "transactionHash": "0xaac3c41b9169d210bb8d953c0d52560d651c341a0bafb09ccb77a170209408d5",
        "address": "0xEB0E870664bdB6551e6bf5DEdF6CdcBD2F6A3C74",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c50e6e6eee8d434a6ee947defb04cba4115d47b5"
        ],
        "data": "0x",
        "logIndex": 243,
        "blockHash": "0xc82f8c72b56a424772bfd77392de08e850fc479a192b8d3d8b5d553c7aeb4a11"
      },
      {
        "transactionIndex": 69,
        "blockNumber": 8225260,
        "transactionHash": "0xaac3c41b9169d210bb8d953c0d52560d651c341a0bafb09ccb77a170209408d5",
        "address": "0xEB0E870664bdB6551e6bf5DEdF6CdcBD2F6A3C74",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000c50e6e6eee8d434a6ee947defb04cba4115d47b5",
          "0x000000000000000000000000521b2ce927fd6d0d473789bd3c70b296bbce613e"
        ],
        "data": "0x",
        "logIndex": 244,
        "blockHash": "0xc82f8c72b56a424772bfd77392de08e850fc479a192b8d3d8b5d553c7aeb4a11"
      }
    ],
    "blockNumber": 8225260,
    "cumulativeGasUsed": "15340650",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x521B2cE927FD6d0D473789Bd3c70B296BBce613e",
    "0x3703511A5fa20Be3FdBAD50A0A84d5d87E7683F4"
  ],
  "solcInputHash": "17a14ad4bc53af827cbeea225ea20fb1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"contract IFrensStorage\",\"name\":\"frensStorage_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"DepositToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDistributableShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdsInThisPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPubKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rugpull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"setPubKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPool.sol\":\"StakingPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\",\"keccak256\":\"0xf0f689f041c9970ece22ba42dc66cacf2aee78699e1eab26658becb738322356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/FrensBase.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"./interfaces/IFrensStorage.sol\\\";\\n\\n/// @title Base settings / modifiers for each contract in Frens Pool\\n/// @author modified 04-Dec-2022 by 0xWildhare originally by David Rugendyke (h/t David and Rocket Pool!)\\n/// this code is modified from the Rocket Pool RocketBase contract all \\\"Rocket\\\" replaced with \\\"Frens\\\"\\n\\nabstract contract FrensBase {\\n\\n    // Calculate using this as the base\\n    uint256 constant calcBase = 1 ether;\\n\\n    // Version of the contract\\n    uint8 public version;\\n\\n    // The main storage contract where primary persistant storage is maintained\\n    IFrensStorage frensStorage;\\n\\n\\n    /*** Modifiers **********************************************************/\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match a Frens Pool network contract\\n    */\\n    modifier onlyLatestNetworkContract() {\\n        require(getBool(keccak256(abi.encodePacked(\\\"contract.exists\\\", msg.sender))), \\\"Invalid or outdated network contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\\n    */\\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName))), \\\"Invalid or outdated contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered node\\n    */\\n    //removed  0xWildhare\\n    /*\\n    modifier onlyRegisteredNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"node.exists\\\", _nodeAddress))), \\\"Invalid node\\\");\\n        _;\\n    }\\n    */\\n    /**\\n    * @dev Throws if called by any sender that isn't a trusted node DAO member\\n    */\\n    //removed  0xWildhare\\n    /*\\n    modifier onlyTrustedNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"dao.trustednodes.\\\", \\\"member\\\", _nodeAddress))), \\\"Invalid trusted node\\\");\\n        _;\\n    }\\n    */\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered Frens StakingPool\\n    */\\n    modifier onlyStakingPool(address _stakingPoolAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"pool.exists\\\", _stakingPoolAddress))), \\\"Invalid Pool\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n    * @dev Throws if called by any account other than a guardian account (temporary account allowed access to settings before DAO is fully enabled)\\n    */\\n    modifier onlyGuardian() {\\n        require(msg.sender == frensStorage.getGuardian(), \\\"Account is not a temporary guardian\\\");\\n        _;\\n    }\\n\\n\\n    \\n\\n\\n\\n\\n\\n    /*** Methods **********************************************************/\\n\\n    /// @dev Set the main Frens Storage address\\n    constructor(IFrensStorage _frensStorage) {\\n        // Update the contract address\\n        frensStorage = IFrensStorage(_frensStorage);\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name\\n    function getContractAddress(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Check it\\n        require(contractAddress != address(0x0), \\\"Contract not found\\\");\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name (returns address(0x0) instead of reverting if contract does not exist)\\n    function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the name of a network contract by address\\n    function getContractName(address _contractAddress) internal view returns (string memory) {\\n        // Get the contract name\\n        string memory contractName = getString(keccak256(abi.encodePacked(\\\"contract.name\\\", _contractAddress)));\\n        // Check it\\n        require(bytes(contractName).length > 0, \\\"Contract not found\\\");\\n        // Return\\n        return contractName;\\n    }\\n\\n    /// @dev Get revert error message from a .call method\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n\\n\\n    /*** Frens Storage Methods ****************************************/\\n\\n    // Note: Unused helpers have been removed to keep contract sizes down\\n\\n    /// @dev Storage get methods\\n    function getAddress(bytes32 _key) internal view returns (address) { return frensStorage.getAddress(_key); }\\n    function getUint(bytes32 _key) internal view returns (uint) { return frensStorage.getUint(_key); }\\n    function getString(bytes32 _key) internal view returns (string memory) { return frensStorage.getString(_key); }\\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return frensStorage.getBytes(_key); }\\n    function getBool(bytes32 _key) internal view returns (bool) { return frensStorage.getBool(_key); }\\n    function getInt(bytes32 _key) internal view returns (int) { return frensStorage.getInt(_key); }\\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return frensStorage.getBytes32(_key); }\\n    function getArray(bytes32 _key) internal view returns (uint[] memory) { return frensStorage.getArray(_key); }\\n\\n    /// @dev Storage set methods\\n    function setAddress(bytes32 _key, address _value) internal { frensStorage.setAddress(_key, _value); }\\n    function setUint(bytes32 _key, uint _value) internal { frensStorage.setUint(_key, _value); }\\n    function setString(bytes32 _key, string memory _value) internal { frensStorage.setString(_key, _value); }\\n    function setBytes(bytes32 _key, bytes memory _value) internal { frensStorage.setBytes(_key, _value); }\\n    function setBool(bytes32 _key, bool _value) internal { frensStorage.setBool(_key, _value); }\\n    function setInt(bytes32 _key, int _value) internal { frensStorage.setInt(_key, _value); }\\n    function setBytes32(bytes32 _key, bytes32 _value) internal { frensStorage.setBytes32(_key, _value); }\\n    function setArray(bytes32 _key, uint[] memory _value) internal { frensStorage.setArray(_key, _value); }\\n\\n    /// @dev Storage delete methods\\n    function deleteAddress(bytes32 _key) internal { frensStorage.deleteAddress(_key); }\\n    function deleteUint(bytes32 _key) internal { frensStorage.deleteUint(_key); }\\n    function deleteString(bytes32 _key) internal { frensStorage.deleteString(_key); }\\n    function deleteBytes(bytes32 _key) internal { frensStorage.deleteBytes(_key); }\\n    function deleteBool(bytes32 _key) internal { frensStorage.deleteBool(_key); }\\n    function deleteInt(bytes32 _key) internal { frensStorage.deleteInt(_key); }\\n    function deleteBytes32(bytes32 _key) internal { frensStorage.deleteBytes32(_key); }\\n    function deleteArray(bytes32 _key) internal { frensStorage.deleteArray(_key); }\\n\\n    /// @dev Storage arithmetic methods - push added by 0xWildhare\\n    function addUint(bytes32 _key, uint256 _amount) internal { frensStorage.addUint(_key, _amount); }\\n    function subUint(bytes32 _key, uint256 _amount) internal { frensStorage.subUint(_key, _amount); }\\n    function pushUint(bytes32 _key, uint256 _amount) internal { frensStorage.pushUint(_key, _amount); }\\n}\\n\",\"keccak256\":\"0x7374e6a194a565712df6aa0f2e80fa9e4ab6a179b5ed331b830e14075907e88f\",\"license\":\"GPL-3.0-only\"},\"contracts/StakingPool.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\nimport \\\"./FrensBase.sol\\\";\\n\\n\\n//should ownable be replaces with an equivalent in storage/base?\\ncontract StakingPool is IStakingPool, Ownable, FrensBase {\\n\\n  event Stake(address depositContractAddress, address caller);\\n  event DepositToPool(uint amount, address depositer);\\n\\n  IFrensPoolShare frensPoolShare;\\n\\n  constructor(address owner_, IFrensStorage frensStorage_) FrensBase(frensStorage_){\\n    address frensPoolShareAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensPoolShare\\\")));\\n    frensPoolShare = IFrensPoolShare(frensPoolShareAddress); //this hardcodes the nft contract to the pool\\n    _transferOwnership(owner_);\\n    version = 1;\\n  }\\n\\n//TODO: should the pool support arbitrary calls to whitelisted contracts? this solves a lot of problems\\n\\n//TODO: needs to interact with SSVtoken (via amm, check balance, check minimum amount needed in contract etc)\\n  function depositToPool() public payable {\\n    require(_getStateHash() == _getStringHash(\\\"acceptingDeposits\\\"), \\\"not accepting deposits\\\");\\n    require(msg.value != 0, \\\"must deposit ether\\\");\\n    require(getUint(keccak256(abi.encodePacked(\\\"total.deposits\\\", address(this)))) + msg.value <= 32 ether, \\\"total deposits cannot be more than 32 Eth\\\");\\n    addUint(keccak256(abi.encodePacked(\\\"token.id\\\")), 1);\\n    uint id = getUint(keccak256(abi.encodePacked(\\\"token.id\\\")));\\n    setUint(keccak256(abi.encodePacked(\\\"deposit.amount\\\", id)), msg.value);\\n    addUint(keccak256(abi.encodePacked(\\\"total.deposits\\\", address(this))), msg.value);\\n    pushUint(keccak256(abi.encodePacked(\\\"ids.in.pool\\\", address(this))), id);\\n    frensPoolShare.mint(msg.sender, address(this));\\n    emit DepositToPool(msg.value,  msg.sender);\\n  }\\n\\n  function addToDeposit(uint _id) public payable {\\n    require(frensPoolShare.exists(_id), \\\"id does not exist\\\");\\n    require(getAddress(keccak256(abi.encodePacked(\\\"pool.for.id\\\", _id))) == address(this), \\\"wrong staking pool\\\");\\n    require(_getStateHash() == _getStringHash(\\\"acceptingDeposits\\\"), \\\"not accepting deposits\\\");\\n    require(getUint(keccak256(abi.encodePacked(\\\"total.deposits\\\", address(this)))) + msg.value <= 32 ether, \\\"total deposits cannot be more than 32 Eth\\\");\\n    addUint(keccak256(abi.encodePacked(\\\"deposit.amount\\\", _id)), msg.value);\\n    addUint(keccak256(abi.encodePacked(\\\"total.deposits\\\", address(this))), msg.value);\\n  }\\n\\n  function stake(\\n    bytes calldata pubKey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) public onlyOwner{\\n    if(getBool(keccak256(abi.encodePacked(\\\"validator.set\\\", address(this))))){\\n      bytes memory pubKeyFromStorage = getBytes(keccak256(abi.encodePacked(\\\"pubKey\\\", address(this))));\\n      require(keccak256(pubKeyFromStorage) == keccak256(pubKey), \\\"pubKey mismatch\\\");\\n      _stake();\\n    }else {\\n      _setPubKey(\\n        pubKey,\\n        withdrawal_credentials,\\n        signature,\\n        deposit_data_root\\n      );\\n      _stake();\\n    }\\n  }\\n\\n  function stake() public onlyOwner {\\n    _stake();\\n  }\\n\\n  function _stake() internal {\\n    require(address(this).balance >= 32 ether, \\\"not enough eth\\\");\\n    require(_getStateHash() == _getStringHash(\\\"acceptingDeposits\\\"), \\\"wrong state\\\");\\n    uint value = 32 ether;\\n    bytes memory pubKey = getBytes(keccak256(abi.encodePacked(\\\"pubKey\\\", address(this))));\\n    bytes memory withdrawal_credentials = getBytes(keccak256(abi.encodePacked(\\\"withdrawal_credentials\\\", address(this))));\\n    bytes memory signature = getBytes(keccak256(abi.encodePacked(\\\"signature\\\", address(this))));\\n    bytes32 deposit_data_root = getBytes32(keccak256(abi.encodePacked(\\\"deposit_data_root\\\", address(this))));\\n    address depositContractAddress = getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"DepositContract\\\")));\\n    setString(keccak256(abi.encodePacked(\\\"contract.state\\\", address(this))), \\\"staked\\\");\\n    IDepositContract(depositContractAddress).deposit{value: value}(pubKey, withdrawal_credentials, signature, deposit_data_root);\\n    emit Stake(depositContractAddress, msg.sender);\\n  }\\n\\n  function setPubKey(\\n    bytes calldata pubKey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) public onlyOwner{\\n    _setPubKey(\\n      pubKey,\\n      withdrawal_credentials,\\n      signature,\\n      deposit_data_root\\n    );\\n  }\\n\\n  function _setPubKey(\\n    bytes calldata pubKey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) internal{\\n    //get expected withdrawal_credentials based on contract address\\n    bytes memory withdrawalCredFromAddr = _toWithdrawalCred(address(this));\\n    //compare expected withdrawal_credentials to provided\\n    require(keccak256(withdrawal_credentials) == keccak256(withdrawalCredFromAddr), \\\"withdrawal credential mismatch\\\");\\n    if(getBool(keccak256(abi.encodePacked(\\\"validator.locked\\\", address(this))))){\\n      require(_getStateHash() == _getStringHash(\\\"awaitingValidatorInfo\\\"), \\\"wrong state\\\");\\n      setBytes(keccak256(abi.encodePacked(\\\"pubKey\\\", address(this))), pubKey);\\n      setBytes(keccak256(abi.encodePacked(\\\"withdrawal_credentials\\\", address(this))), withdrawal_credentials);\\n      setBytes(keccak256(abi.encodePacked(\\\"signature\\\", address(this))), signature);\\n      setBytes32(keccak256(abi.encodePacked(\\\"deposit_data_root\\\", address(this))), deposit_data_root);\\n      setString(keccak256(abi.encodePacked(\\\"contract.state\\\", address(this))), \\\"acceptingDeposits\\\");\\n    } else {\\n      require(_getStateHash() == _getStringHash(\\\"acceptingDeposits\\\"), \\\"wrong state\\\");\\n      setBytes(keccak256(abi.encodePacked(\\\"pubKey\\\", address(this))), pubKey);\\n      setBytes(keccak256(abi.encodePacked(\\\"withdrawal_credentials\\\", address(this))), withdrawal_credentials);\\n      setBytes(keccak256(abi.encodePacked(\\\"signature\\\", address(this))), signature);\\n      setBytes32(keccak256(abi.encodePacked(\\\"deposit_data_root\\\", address(this))), deposit_data_root);\\n    }\\n    setBool(keccak256(abi.encodePacked(\\\"validator.set\\\", address(this))), true);\\n  }\\n\\n  function withdraw(uint _id, uint _amount) public {\\n    require(_getStateHash() != _getStringHash(\\\"staked\\\"), \\\"cannot withdraw once staked\\\");//TODO: this may need to be more restrictive\\n    require(msg.sender == frensPoolShare.ownerOf(_id), \\\"not the owner\\\");\\n    require(getUint(keccak256(abi.encodePacked(\\\"deposit.amount\\\", _id))) >= _amount, \\\"not enough deposited\\\");\\n    subUint(keccak256(abi.encodePacked(\\\"deposit.amount\\\", _id)), _amount);\\n    subUint(keccak256(abi.encodePacked(\\\"total.deposits\\\", address(this))), _amount);\\n    payable(msg.sender).transfer(_amount);\\n  }\\n\\n  //TODO think about other options for distribution\\n  function distribute() public {\\n    require(_getStateHash() == _getStringHash(\\\"staked\\\"), \\\"use withdraw when not staked\\\");\\n    uint contractBalance = address(this).balance;\\n    uint[] memory idsInPool = getIdsInThisPool();\\n    require(contractBalance > 100, \\\"minimum of 100 wei to distribute\\\");\\n    for(uint i=0; i<idsInPool.length; i++) {\\n      uint id = idsInPool[i];\\n      address tokenOwner = frensPoolShare.ownerOf(id);\\n      uint share = _getShare(id, contractBalance);\\n      payable(tokenOwner).transfer(share);\\n    }\\n  }\\n\\n  function unstake() public onlyOwner{\\n    if(address(this).balance > 100){\\n      distribute();\\n    }\\n    setString(keccak256(abi.encodePacked(\\\"contract.state\\\", address(this))), \\\"exited\\\");\\n\\n    //TODO what else needs to be in here (probably a limiting modifier and/or some requires) maybe add an arbitrary call to an external contract is enabled?\\n    //TODO: is this where we extract fees?\\n  }\\n\\n  function getIdsInThisPool() public view returns(uint[] memory) {\\n    return getArray(keccak256(abi.encodePacked(\\\"ids.in.pool\\\", address(this))));\\n  }\\n\\n  function _getShare(uint _id, uint _contractBalance) internal view returns(uint) {\\n    uint depAmt = getUint(keccak256(abi.encodePacked(\\\"deposit.amount\\\", _id)));\\n    uint totDeps = getUint(keccak256(abi.encodePacked(\\\"total.deposits\\\", address(this))));\\n    if(depAmt == 0) return 0;\\n    uint calcedShare =  _contractBalance * depAmt / totDeps;\\n    if(calcedShare > 1){\\n      return(calcedShare - 1); //steal 1 wei to avoid rounding errors drawing balance negative\\n    }else return 0;\\n  }\\n\\n  function getShare(uint _id) public view returns(uint) {\\n    uint contractBalance = address(this).balance;\\n    return _getShare(_id, contractBalance);\\n  }\\n\\n  function getDistributableShare(uint _id) public view returns(uint) {\\n    if(_getStateHash() == _getStringHash(\\\"acceptingDeposits\\\")) {\\n      return 0;\\n    } else {\\n      return getShare(_id);\\n    }\\n  }\\n\\n  function getPubKey() public view returns(bytes memory){\\n    return getBytes(keccak256(abi.encodePacked(\\\"validator.public.key\\\", address(this))));\\n  }\\n\\n  function getState() public view returns(string memory){\\n    return getString(keccak256(abi.encodePacked(\\\"contract.state\\\", address(this))));\\n  }\\n\\n  function _getStateHash() internal view returns(bytes32){\\n    return keccak256(abi.encodePacked(getState()));\\n  }\\n\\n  function _getStringHash(string memory s) internal pure returns(bytes32){\\n    return keccak256(abi.encodePacked(s));\\n  }\\n\\n  function getDepositAmount(uint _id) public view returns(uint){\\n    return getUint(keccak256(abi.encodePacked(\\\"deposit.amount\\\", _id)));\\n  }\\n\\n  function getTotalDeposits() public view returns(uint){\\n    return getUint(keccak256(abi.encodePacked(\\\"total.deposits\\\", address(this))));\\n  }\\n\\n  function owner() public view override(IStakingPool, Ownable) returns (address){\\n    return super.owner();\\n  }\\n\\n  function _toWithdrawalCred(address a) private pure returns (bytes memory) {\\n    uint uintFromAddress = uint256(uint160(a));\\n    bytes memory withdralDesired = abi.encodePacked(uintFromAddress + 0x0100000000000000000000000000000000000000000000000000000000000000);\\n    return withdralDesired;\\n  }\\n\\n//REMOVE rugpull is for testing only and should not be in the mainnet version\\n//if this gets deploied on mainnet call 911 or DM @0xWildhare\\n  function rugpull() public onlyOwner{\\n    payable(msg.sender).transfer(address(this).balance);\\n  }\\n\\n  // to support receiving ETH by default\\n  receive() external payable {\\n\\n  }\\n\\n  fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x2871cf543dd75fe136bff22babe8e8737c9722178e2aed4351e592e803509f92\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"\\npragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IDepositContract {\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    function get_deposit_count() external view returns (bytes memory);\\n\\n}\\n\",\"keccak256\":\"0x7590a7c7c977852560b0f2373e71ad175d1aa15d320d1238b2fe64e4cd1902f7\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensPoolShare.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\n\\ninterface IFrensPoolShare is IERC721Enumerable{\\n\\n  function mint(address userAddress, address _pool) external;\\n\\n  function exists(uint _id) external view returns(bool);\\n\\n  function getPoolById(uint _id) external view returns(address);\\n\\n  function tokenURI(uint256 id) external view returns (string memory);\\n\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n\\n}\\n\",\"keccak256\":\"0x3d9190356b243fa28107e4576ef453a1ad4a6b22dd61e7ed61ab28540fd4f1e4\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensStorage.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n//modified from IRocketStorage on 03/12/2022 by 0xWildhare\\n\\ninterface IFrensStorage {\\n\\n    // Deploy status\\n    function getDeployedStatus() external view returns (bool);\\n\\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getString(bytes32 _key) external view returns (string memory);\\n    function getBytes(bytes32 _key) external view returns (bytes memory);\\n    function getBool(bytes32 _key) external view returns (bool);\\n    function getInt(bytes32 _key) external view returns (int);\\n    function getBytes32(bytes32 _key) external view returns (bytes32);\\n    function getArray(bytes32 _key) external view returns (uint[] memory);\\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setString(bytes32 _key, string calldata _value) external;\\n    function setBytes(bytes32 _key, bytes calldata _value) external;\\n    function setBool(bytes32 _key, bool _value) external;\\n    function setInt(bytes32 _key, int _value) external;\\n    function setBytes32(bytes32 _key, bytes32 _value) external;\\n    function setArray(bytes32 _key, uint[] calldata _value) external;\\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteString(bytes32 _key) external;\\n    function deleteBytes(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;\\n    function deleteInt(bytes32 _key) external;\\n    function deleteBytes32(bytes32 _key) external;\\n    function deleteArray(bytes32 _key) external;\\n\\n    // Arithmetic (and stuff) - push added by 0xWildhare\\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n    function pushUint(bytes32 _key, uint256 _amount) external;\\n\\n    // Protected storage removed ~ 0xWildhare\\n    /*\\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\\n    function confirmWithdrawalAddress(address _nodeAddress) external;\\n    */\\n}\\n\",\"keccak256\":\"0x460c440b2f1de0c6a41fff71e5f2c38117217a8aae946f6856ac720fc555a203\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IStakingPool{\\n\\n  function owner() external view returns (address);\\n\\n  function depositToPool() external payable;\\n\\n  function addToDeposit(uint _id) external payable;\\n\\n  function withdraw(uint _id, uint _amount) external;\\n\\n  function distribute() external;\\n\\n  function getIdsInThisPool() external view returns(uint[] memory);\\n\\n  function getShare(uint _id) external view returns(uint);\\n\\n  function getDistributableShare(uint _id) external view returns(uint);\\n\\n  function getPubKey() external view returns(bytes memory);\\n\\n  function setPubKey(\\n    bytes calldata pubKey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n    ) external;\\n\\n  function getState() external view returns(string memory);\\n\\n  function getDepositAmount(uint _id) external view returns(uint);\\n\\n  function stake(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) external;\\n\\n  function stake() external;\\n\\n    function unstake() external;\\n\\n}\\n\",\"keccak256\":\"0x3b064293270744fdbc1e8b6758057b1bd58586d057ad8301c758c87ddd8c814a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604081815234620001965780826200228f80380380916200002382856200019b565b83398101031262000196576200003982620001bf565b6020928301516001600160a01b03808216949185900362000196576200005f33620001d4565b600180546001600160a01b0319908116871790915584516f636f6e74726163742e6164647265737360801b8185019081526d4672656e73506f6f6c536861726560901b6030830152601e82528187019792949192906001600160401b038911848a1017620001805760248984938193828c52875190206321f8a72160e01b835260448801525afa918215620001755760009262000131575b50506200011094955016906002541617600255620001d4565b6000805460ff60a01b1916600160a01b1790555161206e9081620002218239f35b813d83116200016d575b62000147818a6200019b565b810103126200016a575062000161620001109495620001bf565b859438620000f7565b80fd5b503d6200013b565b86513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200018057604052565b51906001600160a01b03821682036200019657565b600080546001600160a01b039283166001600160a01b03198216811783556040519093909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe6080604081815260048036101561001e575b505050361561001c57005b005b600092833560e01c908163168a482214610d6d575080631865c57d14610d4f5780632def662014610cd4578063378de45b14610c8d5780633a4b66f114610c67578063441a3e7014610a7557806345b58fe414610a1b5780634ad02ef1146109b45780634b2b4e361461089057806354fd4d501461086d578063678e300a1461084d578063715018a6146107ed5780638620891c1461061e5780638da5cb5b146105f6578063cfb5a5f8146105ca578063e2664e4914610579578063e4fc6b6d1461055f578063e920eec014610529578063f2fde38b146104605763f9faa1040361001157826003193601126103c15761012f610119612000565b610129610124610f68565b612008565b14610f95565b3415610429578151906020916101876801bc16d674ec8000006101808584019361017b8161015d3088610fda565b0395610171601f1997888101855284610f2a565b3492519020611089565b611008565b111561102b565b83519085848301671d1bdad95b8b9a5960c21b93848252600881526101ab81610ef2565b5190206001546001600160a01b039491908516803b1561042557604484928a519586938492632b6cd4f760e21b84528b840152600160248401525af191821561040c5761021592610416575b5086518681019182526008815261020d81610ef2565b519020611089565b90868651868101906d19195c1bdcda5d0b985b5bdd5b9d60921b825284602e820152602e815261024481610f0e565b5190208460015416803b156103c157604483928a519485938492637152429d60e11b84528b8401523460248401525af1801561040c576103f5575b50908692916102b087518781016102a68261029a3084610fda565b03858101845283610f2a565b3491519020611102565b86516a1a591ccb9a5b8b9c1bdbdb60aa1b8782019081523060601b6001600160601b031916600b820152916102f19082601f85015b03908101835282610f2a565b519020826001541691823b156103f15760448592838a51958694859363785f002b60e11b85528b85015260248401525af19081156103e75783916103d3575b50506002541691823b156103cf57845163ee1fe2ad60e01b815233918101918252306020830152859390918391839182908490829060400103925af180156103c5576103aa575b50507f1ed12c9855bd60407f7650e01c62ee4f0f40744b5b17983eec349a2b4e89981a918151903482523390820152a151f35b6103b5919250610ec8565b6103c157818338610377565b8280fd5b83513d84823e3d90fd5b5080fd5b6103dc90610ec8565b6103cf578138610330565b86513d85823e3d90fd5b8480fd5b610403909791939297610ec8565b9590913861027f565b87513d8a823e3d90fd5b61041f90610ec8565b386101f7565b8380fd5b6020606492519162461bcd60e51b8352820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152fd5b5090346103c15760203660031901126103c15781356001600160a01b0381811692918390036103f15784549081169361049a338614610e7d565b83156104d757506001600160a01b0319168217845551917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b608490602084519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b5050346103cf5761055c61053c36610e13565b9561055760018060a09894989795971b038b54163314610e7d565b611798565b51f35b5050346103cf57816003193601126103cf5761055c611c22565b5050346103cf57816003193601126103cf5761059f60018060a01b038354163314610e7d565b81808080478181156105c1575b3390f1156105b75751f35b51903d90823e3d90fd5b506108fc6105ac565b5091346105f35760203660031901126105f357506105ec602092479035611ed7565b9051908152f35b80fd5b5050346103cf57816003193601126103cf57905490516001600160a01b039091168152602090f35b50602090816003193601126104255780359060018060a01b036024848260025416875192838092634f558e7960e01b825288888301525afa9081156107e35787916107b6575b501561077f5761069f8551858101906a1c1bdbdb0b999bdc8b9a5960aa1b825285602b820152602b815261069781610f0e565b519020611189565b3091160361074757509061055c916106b8610119612000565b6107278451916106fa6801bc16d674ec8000006101806106f3878701876106df3083610fda565b039761020d601f19998a8101835282610f2a565b3490611008565b855190848201906d19195c1bdcda5d0b985b5bdd5b9d60921b8252602e830152602e82526102a682610f0e565b6102a68451928301918361073b3085610fda565b03908101845283610f2a565b835162461bcd60e51b815290810183905260126024820152711ddc9bdb99c81cdd185ada5b99c81c1bdbdb60721b6044820152606490fd5b845162461bcd60e51b815280830185905260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606490fd5b6107d69150853d87116107dc575b6107ce8183610f2a565b810190611152565b38610664565b503d6107c4565b86513d89823e3d90fd5b5050346103cf57816003193601126103cf5781546001600160a01b038116918391610819338514610e7d565b6001600160a01b031916825551917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b5091346105f35760203660031901126105f357506105ec60209235611f7d565b5050346103cf57816003193601126103cf5760ff6020925460a01c169051908152f35b50346103c15761089f36610e13565b926108ba60018060a09998999594951b038b54163314610e7d565b88519461091360208701876108f730836021916c1d985b1a59185d1bdc8b9cd95d609a1b82526001600160601b03199060601b16600d8201520190565b039761090b601f19998a8101835282610f2a565b519020611312565b1561099a5750505050509061094261095192865161093a6020820192826102e530866111e3565b519020611275565b60208151910120923691611209565b6020815191012003610966575061055c611483565b6020606492519162461bcd60e51b8352820152600f60248201526e0e0eac496caf240dad2e6dac2e8c6d608b1b6044820152fd5b92959093969194506109ac9750611798565b61055c611483565b5050346103cf57816003193601126103cf5780610a04610a17925160208101907376616c696461746f722e7075626c69632e6b657960601b82523060601b60348201526028815261093a81610f0e565b9051918291602083526020830190610dbb565b0390f35b5050346103cf57816003193601126103cf57610a35611da1565b815192839260208080860192818752855180945286019401925b828110610a5e57505050500390f35b835185528695509381019392810192600101610a4f565b50346103c157816003193601126103c157803560243591610a94612000565b610a9f610124611461565b14610c245760025484516331a9108f60e11b8152828101849052602093916001600160a01b03919085908290602490829086165afa90811561040c578891610bf7575b50163303610bc55784519184610b1d8585016d19195c1bdcda5d0b985b5bdd5b9d60921b9586825285602e820152602e815261020d81610f0e565b10610b8b575083610b7981889695610b578897889788978c5190858201928352602e820152602e8152610b4f81610f0e565b519020611bdd565b885190810190610b4f81610b6b3085610fda565b03601f198101835282610f2a565b8181156105c1573390f1156105b75751f35b855162461bcd60e51b815290810184905260146024820152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b5060649184519162461bcd60e51b8352820152600d60248201526c3737ba103a34329037bbb732b960991b6044820152fd5b610c179150853d8711610c1d575b610c0f8183610f2a565b81019061116a565b38610ae2565b503d610c05565b606490602085519162461bcd60e51b8352820152601b60248201527f63616e6e6f74207769746864726177206f6e6365207374616b656400000000006044820152fd5b5050346103cf57816003193601126103cf576109ac60018060a01b038354163314610e7d565b5091346105f35760203660031901126105f357506105ec6020928251848101916d19195c1bdcda5d0b985b5bdd5b9d60921b835235602e820152602e815261020d81610f0e565b5050346103cf57816003193601126103cf57610cfa60018060a01b038354163314610e7d565b60644711610d42575b61055c81516020810190610d1b81610b6b3085611433565b519020825190610d2a82610ef2565b6006825265195e1a5d195960d21b6020830152611742565b610d4a611c22565b610d03565b5050346103cf57816003193601126103cf57610a1790610a04611fa6565b8385346105f357806003193601126105f357506105ec8260208094019061020d81610b6b3085610fda565b60005b838110610dab5750506000910152565b8181015183820152602001610d9b565b90602091610dd481518092818552858086019101610d98565b601f01601f1916010190565b9181601f84011215610e0e5782359167ffffffffffffffff8311610e0e5760208381860195010111610e0e57565b600080fd5b906080600319830112610e0e5767ffffffffffffffff600435818111610e0e5783610e4091600401610de0565b93909392602435838111610e0e5782610e5b91600401610de0565b93909392604435918211610e0e57610e7591600401610de0565b909160643590565b15610e8457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b67ffffffffffffffff8111610edc57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117610edc57604052565b6060810190811067ffffffffffffffff821117610edc57604052565b90601f8019910116810190811067ffffffffffffffff821117610edc57604052565b67ffffffffffffffff8111610edc57601f01601f191660200190565b60405190610f7582610ef2565b6011825270616363657074696e674465706f7369747360781b6020830152565b15610f9c57565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b6022916d746f74616c2e6465706f7369747360901b82526001600160601b03199060601b16600e8201520190565b9190820180921161101557565b634e487b7160e01b600052601160045260246000fd5b1561103257565b60405162461bcd60e51b815260206004820152602960248201527f746f74616c206465706f736974732063616e6e6f74206265206d6f72652074686044820152680c2dc406664408ae8d60bb1b6064820152608490fd5b60015460405163bd02d0f560e01b81526004810192909252602090829060249082906001600160a01b03165afa9081156110f6576000916110c8575090565b906020823d82116110ee575b816110e160209383610f2a565b810103126105f357505190565b3d91506110d4565b6040513d6000823e3d90fd5b6001546001600160a01b031691823b15610e0e576044600092836040519586948593632b6cd4f760e21b8552600485015260248401525af180156110f6576111475750565b61115090610ec8565b565b90816020910312610e0e57518015158103610e0e5790565b90816020910312610e0e57516001600160a01b0381168103610e0e5790565b6001546040516321f8a72160e01b81526004810192909252602090829060249082906001600160a01b03165afa9081156110f6576000916111c8575090565b6111e0915060203d8111610c1d57610c0f8183610f2a565b90565b601a91657075624b657960d01b82526001600160601b03199060601b1660068201520190565b92919261121582610f4c565b916112236040519384610f2a565b829481845281830111610e0e578281602093846000960137010152565b9092919261124d81610f4c565b9161125b6040519384610f2a565b829482845282820111610e0e576020611150930190610d98565b600154604051630180634360e71b815260048101929092526000908190839060249082906001600160a01b03165afa9182156113055781926112b657505090565b909291503d8084833e6112c98183610f2a565b8101906020818303126104255780519067ffffffffffffffff82116103f1570181601f82011215610425576111e0929350602081519101611240565b50604051903d90823e3d90fd5b600154604051633d70e7e560e11b81526004810192909252602090829060249082906001600160a01b03165afa9081156110f657600091611351575090565b6111e0915060203d81116107dc576107ce8183610f2a565b1561137057565b60405162461bcd60e51b815260206004820152600b60248201526a77726f6e6720737461746560a81b6044820152606490fd5b602a91757769746864726177616c5f63726564656e7469616c7360501b82526001600160601b03199060601b1660168201520190565b601d91687369676e617475726560b81b82526001600160601b03199060601b1660098201520190565b6025917019195c1bdcda5d17d9185d1857dc9bdbdd607a1b82526001600160601b03199060601b1660118201520190565b6022916d636f6e74726163742e737461746560901b82526001600160601b03199060601b16600e8201520190565b6040519061146e82610ef2565b60068252651cdd185ad95960d21b6020830152565b6801bc16d674ec80000080471061170c576114b061149f612000565b6114aa610124610f68565b14611369565b60408051916020926114dd848201826114c930836111e3565b039261093a601f1994858101835282610f2a565b9061150184518681019061093a816114f530856113a3565b03858101835282610f2a565b9261152585518781019061093a8161151930856113d9565b03868101835282610f2a565b9385518781019061153a816115193085611402565b5190206001548751635376ab1f60e11b8152600481019290925290936001600160a01b039189908690602490829086165afa948515611701576000956116d0575b506115f7906115d189518b8101907f65787465726e616c2e636f6e74726163742e616464726573730000000000000082526e11195c1bdcda5d10dbdb9d1c9858dd608a1b60398201526028815261069781610f0e565b996115e68a5191820192826102e53086611433565b5190206115f1611461565b90611742565b871691823b15610e0e5760009461164694611655611633948a51998a98899788966304512a2360e31b8852608060048901526084880190610dbb565b6003199384888303016024890152610dbb565b91858303016044860152610dbb565b90606483015203925af180156116c557917f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce19293916116b1936116b6575b50516001600160a01b0390911681523360208201529081906040820190565b0390a1565b6116bf90610ec8565b38611692565b82513d6000823e3d90fd5b90948982813d83116116fa575b6116e78183610f2a565b810103126105f3575051936115f761157b565b503d6116dd565b88513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152606490fd5b6001546001600160a01b031691823b15610e0e5761178792600092836040518096819582946306e8995560e41b84526004840152604060248401526044830190610dbb565b03925af180156110f6576111475750565b93909592949194600160f81b3001958630116110155760409788516020988982019081528982526117c882610ef2565b6117d3368686611209565b8a81519101209151902003611b0f576118178951898101906f1d985b1a59185d1bdc8b9b1bd8dad95960821b82523060601b60308201526024815261090b81610f0e565b15611a0657611824612000565b895161182f81610ef2565b60158152746177616974696e6756616c696461746f72496e666f60581b8a82015261185990612008565b1461186390611369565b8851968888018861187430836111e3565b0398601f19998a810182526118899082610f2a565b51902091369061189892611209565b6118a191611b53565b875187810190806118b230846113a3565b0388810182526118c29082610f2a565b5190209136906118d192611209565b6118da91611b53565b855185810190806118eb30846113d9565b0386810182526118fb9082610f2a565b51902091369061190a92611209565b61191391611b53565b835183810190806119243084611402565b0384810182526119349082610f2a565b5190209061194191611b98565b825182810191816119523085611433565b0390810182526119629082610f2a565b51902061196d610f68565b61197691611742565b81516c1d985b1a59185d1bdc8b9cd95d609a1b9181019182523060601b6001600160601b031916600d8301526119af8160218401610b6b565b5190206001546001600160a01b03169190823b15610e0e57600092604484928451958693849263abfdcced60e01b84526004840152600160248401525af19081156119fc57506111475750565b513d6000823e3d90fd5b611a11969596612000565b611a19610f68565b611a2290612008565b14611a2c90611369565b88519588870187611a3d30836111e3565b0397601f19988981018252611a529082610f2a565b519020913690611a6192611209565b611a6a91611b53565b87518781019080611a7b30846113a3565b038781018252611a8b9082610f2a565b519020913690611a9a92611209565b611aa391611b53565b85518581019080611ab430846113d9565b038581018252611ac49082610f2a565b519020913690611ad392611209565b611adc91611b53565b83518381019181611aed3085611402565b039081018252611afd9082610f2a565b51902090611b0a91611b98565b611976565b885162461bcd60e51b815260048101899052601e60248201527f7769746864726177616c2063726564656e7469616c206d69736d6174636800006044820152606490fd5b6001546001600160a01b031691823b15610e0e576117879260009283604051809681958294630b8a342160e21b84526004840152604060248401526044830190610dbb565b6001546001600160a01b031691823b15610e0e5760446000928360405195869485936309d23b6160e31b8552600485015260248401525af180156110f6576111475750565b6001546001600160a01b031691823b15610e0e57604460009283604051958694859363ebb9d8c960e01b8552600485015260248401525af180156110f6576111475750565b611c2a612000565b611c35610124611461565b03611d5c5747611c43611da1565b6064821115611d185760005b8151811015611d13576020808260051b8401015160018060a01b03908160025416926024816040958651928380926331a9108f60e11b82528760048301525afa918215611d085793600094938594938a86959486958693611ce5575b5050611cb79192611ed7565b9183918315611cdb575b1690f1156119fc5750600019811461101557600101611c4f565b6108fc9250611cc1565b611cb793509081611d0192903d10610c1d57610c0f8183610f2a565b9138611cab565b85513d6000823e3d90fd5b505050565b606460405162461bcd60e51b815260206004820152602060248201527f6d696e696d756d206f66203130302077656920746f20646973747269627574656044820152fd5b60405162461bcd60e51b815260206004820152601c60248201527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b6040516a1a591ccb9a5b8b9c1bdbdb60aa1b60208083019182523060601b6001600160601b031916602b84015291611ddc81603f8101610b6b565b5190206001546040516378267eb560e11b81526004810192909252600092908390839060249082906001600160a01b03165afa928315611ecb578093611e23575b50505090565b909192503d8082853e611e368185610f2a565b83019082848303126105f357835167ffffffffffffffff948582116103c1570182601f820112156103cf578051948511611eb7578460051b9160405195611e7f86850188610f2a565b865284808701938301019384116105f357508301905b828210611ea85750505050388080611e1d565b81518152908301908301611e95565b634e487b7160e01b82526041600452602482fd5b604051903d90823e3d90fd5b611f099060405160208101916d19195c1bdcda5d0b985b5bdd5b9d60921b8352602e820152602e815261020d81610f0e565b611f22604051602081019061020d81610b6b3085610fda565b908015611f755760001992801515818504831116611015578215611f5f570204906001821115611f585781019081116110155790565b5050600090565b634e487b7160e01b600052601260045260246000fd5b505050600090565b611f85612000565b611f90610124610f68565b03611f9b5750600090565b6111e0904790611ed7565b6040516020810190611fbc81610b6b3085611433565b519020600154604051634c373c8d60e11b815260048101929092526000908190839060249082906001600160a01b03165afa9182156113055781926112b657505090565b612008611fa6565b604051612032602082816120258183019687815193849201610d98565b8101038084520182610f2a565b5190209056fea2646970667358221220e3817e7a9ca79ca30ca5ccdc0f339752887c0786e10f9ecdf61a56d43038753464736f6c63430008100033",
  "deployedBytecode": "0x6080604081815260048036101561001e575b505050361561001c57005b005b600092833560e01c908163168a482214610d6d575080631865c57d14610d4f5780632def662014610cd4578063378de45b14610c8d5780633a4b66f114610c67578063441a3e7014610a7557806345b58fe414610a1b5780634ad02ef1146109b45780634b2b4e361461089057806354fd4d501461086d578063678e300a1461084d578063715018a6146107ed5780638620891c1461061e5780638da5cb5b146105f6578063cfb5a5f8146105ca578063e2664e4914610579578063e4fc6b6d1461055f578063e920eec014610529578063f2fde38b146104605763f9faa1040361001157826003193601126103c15761012f610119612000565b610129610124610f68565b612008565b14610f95565b3415610429578151906020916101876801bc16d674ec8000006101808584019361017b8161015d3088610fda565b0395610171601f1997888101855284610f2a565b3492519020611089565b611008565b111561102b565b83519085848301671d1bdad95b8b9a5960c21b93848252600881526101ab81610ef2565b5190206001546001600160a01b039491908516803b1561042557604484928a519586938492632b6cd4f760e21b84528b840152600160248401525af191821561040c5761021592610416575b5086518681019182526008815261020d81610ef2565b519020611089565b90868651868101906d19195c1bdcda5d0b985b5bdd5b9d60921b825284602e820152602e815261024481610f0e565b5190208460015416803b156103c157604483928a519485938492637152429d60e11b84528b8401523460248401525af1801561040c576103f5575b50908692916102b087518781016102a68261029a3084610fda565b03858101845283610f2a565b3491519020611102565b86516a1a591ccb9a5b8b9c1bdbdb60aa1b8782019081523060601b6001600160601b031916600b820152916102f19082601f85015b03908101835282610f2a565b519020826001541691823b156103f15760448592838a51958694859363785f002b60e11b85528b85015260248401525af19081156103e75783916103d3575b50506002541691823b156103cf57845163ee1fe2ad60e01b815233918101918252306020830152859390918391839182908490829060400103925af180156103c5576103aa575b50507f1ed12c9855bd60407f7650e01c62ee4f0f40744b5b17983eec349a2b4e89981a918151903482523390820152a151f35b6103b5919250610ec8565b6103c157818338610377565b8280fd5b83513d84823e3d90fd5b5080fd5b6103dc90610ec8565b6103cf578138610330565b86513d85823e3d90fd5b8480fd5b610403909791939297610ec8565b9590913861027f565b87513d8a823e3d90fd5b61041f90610ec8565b386101f7565b8380fd5b6020606492519162461bcd60e51b8352820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152fd5b5090346103c15760203660031901126103c15781356001600160a01b0381811692918390036103f15784549081169361049a338614610e7d565b83156104d757506001600160a01b0319168217845551917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b608490602084519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b5050346103cf5761055c61053c36610e13565b9561055760018060a09894989795971b038b54163314610e7d565b611798565b51f35b5050346103cf57816003193601126103cf5761055c611c22565b5050346103cf57816003193601126103cf5761059f60018060a01b038354163314610e7d565b81808080478181156105c1575b3390f1156105b75751f35b51903d90823e3d90fd5b506108fc6105ac565b5091346105f35760203660031901126105f357506105ec602092479035611ed7565b9051908152f35b80fd5b5050346103cf57816003193601126103cf57905490516001600160a01b039091168152602090f35b50602090816003193601126104255780359060018060a01b036024848260025416875192838092634f558e7960e01b825288888301525afa9081156107e35787916107b6575b501561077f5761069f8551858101906a1c1bdbdb0b999bdc8b9a5960aa1b825285602b820152602b815261069781610f0e565b519020611189565b3091160361074757509061055c916106b8610119612000565b6107278451916106fa6801bc16d674ec8000006101806106f3878701876106df3083610fda565b039761020d601f19998a8101835282610f2a565b3490611008565b855190848201906d19195c1bdcda5d0b985b5bdd5b9d60921b8252602e830152602e82526102a682610f0e565b6102a68451928301918361073b3085610fda565b03908101845283610f2a565b835162461bcd60e51b815290810183905260126024820152711ddc9bdb99c81cdd185ada5b99c81c1bdbdb60721b6044820152606490fd5b845162461bcd60e51b815280830185905260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606490fd5b6107d69150853d87116107dc575b6107ce8183610f2a565b810190611152565b38610664565b503d6107c4565b86513d89823e3d90fd5b5050346103cf57816003193601126103cf5781546001600160a01b038116918391610819338514610e7d565b6001600160a01b031916825551917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b5091346105f35760203660031901126105f357506105ec60209235611f7d565b5050346103cf57816003193601126103cf5760ff6020925460a01c169051908152f35b50346103c15761089f36610e13565b926108ba60018060a09998999594951b038b54163314610e7d565b88519461091360208701876108f730836021916c1d985b1a59185d1bdc8b9cd95d609a1b82526001600160601b03199060601b16600d8201520190565b039761090b601f19998a8101835282610f2a565b519020611312565b1561099a5750505050509061094261095192865161093a6020820192826102e530866111e3565b519020611275565b60208151910120923691611209565b6020815191012003610966575061055c611483565b6020606492519162461bcd60e51b8352820152600f60248201526e0e0eac496caf240dad2e6dac2e8c6d608b1b6044820152fd5b92959093969194506109ac9750611798565b61055c611483565b5050346103cf57816003193601126103cf5780610a04610a17925160208101907376616c696461746f722e7075626c69632e6b657960601b82523060601b60348201526028815261093a81610f0e565b9051918291602083526020830190610dbb565b0390f35b5050346103cf57816003193601126103cf57610a35611da1565b815192839260208080860192818752855180945286019401925b828110610a5e57505050500390f35b835185528695509381019392810192600101610a4f565b50346103c157816003193601126103c157803560243591610a94612000565b610a9f610124611461565b14610c245760025484516331a9108f60e11b8152828101849052602093916001600160a01b03919085908290602490829086165afa90811561040c578891610bf7575b50163303610bc55784519184610b1d8585016d19195c1bdcda5d0b985b5bdd5b9d60921b9586825285602e820152602e815261020d81610f0e565b10610b8b575083610b7981889695610b578897889788978c5190858201928352602e820152602e8152610b4f81610f0e565b519020611bdd565b885190810190610b4f81610b6b3085610fda565b03601f198101835282610f2a565b8181156105c1573390f1156105b75751f35b855162461bcd60e51b815290810184905260146024820152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b5060649184519162461bcd60e51b8352820152600d60248201526c3737ba103a34329037bbb732b960991b6044820152fd5b610c179150853d8711610c1d575b610c0f8183610f2a565b81019061116a565b38610ae2565b503d610c05565b606490602085519162461bcd60e51b8352820152601b60248201527f63616e6e6f74207769746864726177206f6e6365207374616b656400000000006044820152fd5b5050346103cf57816003193601126103cf576109ac60018060a01b038354163314610e7d565b5091346105f35760203660031901126105f357506105ec6020928251848101916d19195c1bdcda5d0b985b5bdd5b9d60921b835235602e820152602e815261020d81610f0e565b5050346103cf57816003193601126103cf57610cfa60018060a01b038354163314610e7d565b60644711610d42575b61055c81516020810190610d1b81610b6b3085611433565b519020825190610d2a82610ef2565b6006825265195e1a5d195960d21b6020830152611742565b610d4a611c22565b610d03565b5050346103cf57816003193601126103cf57610a1790610a04611fa6565b8385346105f357806003193601126105f357506105ec8260208094019061020d81610b6b3085610fda565b60005b838110610dab5750506000910152565b8181015183820152602001610d9b565b90602091610dd481518092818552858086019101610d98565b601f01601f1916010190565b9181601f84011215610e0e5782359167ffffffffffffffff8311610e0e5760208381860195010111610e0e57565b600080fd5b906080600319830112610e0e5767ffffffffffffffff600435818111610e0e5783610e4091600401610de0565b93909392602435838111610e0e5782610e5b91600401610de0565b93909392604435918211610e0e57610e7591600401610de0565b909160643590565b15610e8457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b67ffffffffffffffff8111610edc57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117610edc57604052565b6060810190811067ffffffffffffffff821117610edc57604052565b90601f8019910116810190811067ffffffffffffffff821117610edc57604052565b67ffffffffffffffff8111610edc57601f01601f191660200190565b60405190610f7582610ef2565b6011825270616363657074696e674465706f7369747360781b6020830152565b15610f9c57565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b6022916d746f74616c2e6465706f7369747360901b82526001600160601b03199060601b16600e8201520190565b9190820180921161101557565b634e487b7160e01b600052601160045260246000fd5b1561103257565b60405162461bcd60e51b815260206004820152602960248201527f746f74616c206465706f736974732063616e6e6f74206265206d6f72652074686044820152680c2dc406664408ae8d60bb1b6064820152608490fd5b60015460405163bd02d0f560e01b81526004810192909252602090829060249082906001600160a01b03165afa9081156110f6576000916110c8575090565b906020823d82116110ee575b816110e160209383610f2a565b810103126105f357505190565b3d91506110d4565b6040513d6000823e3d90fd5b6001546001600160a01b031691823b15610e0e576044600092836040519586948593632b6cd4f760e21b8552600485015260248401525af180156110f6576111475750565b61115090610ec8565b565b90816020910312610e0e57518015158103610e0e5790565b90816020910312610e0e57516001600160a01b0381168103610e0e5790565b6001546040516321f8a72160e01b81526004810192909252602090829060249082906001600160a01b03165afa9081156110f6576000916111c8575090565b6111e0915060203d8111610c1d57610c0f8183610f2a565b90565b601a91657075624b657960d01b82526001600160601b03199060601b1660068201520190565b92919261121582610f4c565b916112236040519384610f2a565b829481845281830111610e0e578281602093846000960137010152565b9092919261124d81610f4c565b9161125b6040519384610f2a565b829482845282820111610e0e576020611150930190610d98565b600154604051630180634360e71b815260048101929092526000908190839060249082906001600160a01b03165afa9182156113055781926112b657505090565b909291503d8084833e6112c98183610f2a565b8101906020818303126104255780519067ffffffffffffffff82116103f1570181601f82011215610425576111e0929350602081519101611240565b50604051903d90823e3d90fd5b600154604051633d70e7e560e11b81526004810192909252602090829060249082906001600160a01b03165afa9081156110f657600091611351575090565b6111e0915060203d81116107dc576107ce8183610f2a565b1561137057565b60405162461bcd60e51b815260206004820152600b60248201526a77726f6e6720737461746560a81b6044820152606490fd5b602a91757769746864726177616c5f63726564656e7469616c7360501b82526001600160601b03199060601b1660168201520190565b601d91687369676e617475726560b81b82526001600160601b03199060601b1660098201520190565b6025917019195c1bdcda5d17d9185d1857dc9bdbdd607a1b82526001600160601b03199060601b1660118201520190565b6022916d636f6e74726163742e737461746560901b82526001600160601b03199060601b16600e8201520190565b6040519061146e82610ef2565b60068252651cdd185ad95960d21b6020830152565b6801bc16d674ec80000080471061170c576114b061149f612000565b6114aa610124610f68565b14611369565b60408051916020926114dd848201826114c930836111e3565b039261093a601f1994858101835282610f2a565b9061150184518681019061093a816114f530856113a3565b03858101835282610f2a565b9261152585518781019061093a8161151930856113d9565b03868101835282610f2a565b9385518781019061153a816115193085611402565b5190206001548751635376ab1f60e11b8152600481019290925290936001600160a01b039189908690602490829086165afa948515611701576000956116d0575b506115f7906115d189518b8101907f65787465726e616c2e636f6e74726163742e616464726573730000000000000082526e11195c1bdcda5d10dbdb9d1c9858dd608a1b60398201526028815261069781610f0e565b996115e68a5191820192826102e53086611433565b5190206115f1611461565b90611742565b871691823b15610e0e5760009461164694611655611633948a51998a98899788966304512a2360e31b8852608060048901526084880190610dbb565b6003199384888303016024890152610dbb565b91858303016044860152610dbb565b90606483015203925af180156116c557917f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce19293916116b1936116b6575b50516001600160a01b0390911681523360208201529081906040820190565b0390a1565b6116bf90610ec8565b38611692565b82513d6000823e3d90fd5b90948982813d83116116fa575b6116e78183610f2a565b810103126105f3575051936115f761157b565b503d6116dd565b88513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152606490fd5b6001546001600160a01b031691823b15610e0e5761178792600092836040518096819582946306e8995560e41b84526004840152604060248401526044830190610dbb565b03925af180156110f6576111475750565b93909592949194600160f81b3001958630116110155760409788516020988982019081528982526117c882610ef2565b6117d3368686611209565b8a81519101209151902003611b0f576118178951898101906f1d985b1a59185d1bdc8b9b1bd8dad95960821b82523060601b60308201526024815261090b81610f0e565b15611a0657611824612000565b895161182f81610ef2565b60158152746177616974696e6756616c696461746f72496e666f60581b8a82015261185990612008565b1461186390611369565b8851968888018861187430836111e3565b0398601f19998a810182526118899082610f2a565b51902091369061189892611209565b6118a191611b53565b875187810190806118b230846113a3565b0388810182526118c29082610f2a565b5190209136906118d192611209565b6118da91611b53565b855185810190806118eb30846113d9565b0386810182526118fb9082610f2a565b51902091369061190a92611209565b61191391611b53565b835183810190806119243084611402565b0384810182526119349082610f2a565b5190209061194191611b98565b825182810191816119523085611433565b0390810182526119629082610f2a565b51902061196d610f68565b61197691611742565b81516c1d985b1a59185d1bdc8b9cd95d609a1b9181019182523060601b6001600160601b031916600d8301526119af8160218401610b6b565b5190206001546001600160a01b03169190823b15610e0e57600092604484928451958693849263abfdcced60e01b84526004840152600160248401525af19081156119fc57506111475750565b513d6000823e3d90fd5b611a11969596612000565b611a19610f68565b611a2290612008565b14611a2c90611369565b88519588870187611a3d30836111e3565b0397601f19988981018252611a529082610f2a565b519020913690611a6192611209565b611a6a91611b53565b87518781019080611a7b30846113a3565b038781018252611a8b9082610f2a565b519020913690611a9a92611209565b611aa391611b53565b85518581019080611ab430846113d9565b038581018252611ac49082610f2a565b519020913690611ad392611209565b611adc91611b53565b83518381019181611aed3085611402565b039081018252611afd9082610f2a565b51902090611b0a91611b98565b611976565b885162461bcd60e51b815260048101899052601e60248201527f7769746864726177616c2063726564656e7469616c206d69736d6174636800006044820152606490fd5b6001546001600160a01b031691823b15610e0e576117879260009283604051809681958294630b8a342160e21b84526004840152604060248401526044830190610dbb565b6001546001600160a01b031691823b15610e0e5760446000928360405195869485936309d23b6160e31b8552600485015260248401525af180156110f6576111475750565b6001546001600160a01b031691823b15610e0e57604460009283604051958694859363ebb9d8c960e01b8552600485015260248401525af180156110f6576111475750565b611c2a612000565b611c35610124611461565b03611d5c5747611c43611da1565b6064821115611d185760005b8151811015611d13576020808260051b8401015160018060a01b03908160025416926024816040958651928380926331a9108f60e11b82528760048301525afa918215611d085793600094938594938a86959486958693611ce5575b5050611cb79192611ed7565b9183918315611cdb575b1690f1156119fc5750600019811461101557600101611c4f565b6108fc9250611cc1565b611cb793509081611d0192903d10610c1d57610c0f8183610f2a565b9138611cab565b85513d6000823e3d90fd5b505050565b606460405162461bcd60e51b815260206004820152602060248201527f6d696e696d756d206f66203130302077656920746f20646973747269627574656044820152fd5b60405162461bcd60e51b815260206004820152601c60248201527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b6040516a1a591ccb9a5b8b9c1bdbdb60aa1b60208083019182523060601b6001600160601b031916602b84015291611ddc81603f8101610b6b565b5190206001546040516378267eb560e11b81526004810192909252600092908390839060249082906001600160a01b03165afa928315611ecb578093611e23575b50505090565b909192503d8082853e611e368185610f2a565b83019082848303126105f357835167ffffffffffffffff948582116103c1570182601f820112156103cf578051948511611eb7578460051b9160405195611e7f86850188610f2a565b865284808701938301019384116105f357508301905b828210611ea85750505050388080611e1d565b81518152908301908301611e95565b634e487b7160e01b82526041600452602482fd5b604051903d90823e3d90fd5b611f099060405160208101916d19195c1bdcda5d0b985b5bdd5b9d60921b8352602e820152602e815261020d81610f0e565b611f22604051602081019061020d81610b6b3085610fda565b908015611f755760001992801515818504831116611015578215611f5f570204906001821115611f585781019081116110155790565b5050600090565b634e487b7160e01b600052601260045260246000fd5b505050600090565b611f85612000565b611f90610124610f68565b03611f9b5750600090565b6111e0904790611ed7565b6040516020810190611fbc81610b6b3085611433565b519020600154604051634c373c8d60e11b815260048101929092526000908190839060249082906001600160a01b03165afa9182156113055781926112b657505090565b612008611fa6565b604051612032602082816120258183019687815193849201610d98565b8101038084520182610f2a565b5190209056fea2646970667358221220e3817e7a9ca79ca30ca5ccdc0f339752887c0786e10f9ecdf61a56d43038753464736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2396,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "version",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2399,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "frensStorage",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFrensStorage)6545"
      },
      {
        "astId": 4700,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "frensPoolShare",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IFrensPoolShare)6339"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IFrensPoolShare)6339": {
        "encoding": "inplace",
        "label": "contract IFrensPoolShare",
        "numberOfBytes": "20"
      },
      "t_contract(IFrensStorage)6545": {
        "encoding": "inplace",
        "label": "contract IFrensStorage",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}