{
  "language": "Solidity",
  "sources": {
    "contracts/FactoryProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n\nimport \"./FrensBase.sol\";\n\ncontract FactoryProxy is FrensBase {\n\n    constructor(IFrensStorage _frensStorage) FrensBase(_frensStorage){\n        //construct dn\n    }\n\n    function _delegate(address implementation) internal {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            // replaced delegatecall with call to be comptible with storageContract permissions\n            let result := call(gas(), implementation, 0, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    function _implementation() internal view returns (address) {\n        return getAddress(keccak256(abi.encodePacked(\"contract.address\", \"StakingPoolFactory\")));\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _delegate(_implementation());\n    }\n}"
    },
    "contracts/FrensBase.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\nimport \"./interfaces/IFrensStorage.sol\";\n\n/// @title Base settings / modifiers for each contract in Frens Pool\n/// @author modified 04-Dec-2022 by 0xWildhare originally by David Rugendyke (h/t David and Rocket Pool!)\n/// this code is modified from the Rocket Pool RocketBase contract all \"Rocket\" replaced with \"Frens\"\n\nabstract contract FrensBase {\n\n    // Calculate using this as the base\n    uint256 constant calcBase = 1 ether;\n\n    // Version of the contract\n    uint8 public version;\n\n    // The main storage contract where primary persistant storage is maintained\n    IFrensStorage frensStorage;\n\n\n    /*** Modifiers **********************************************************/\n\n    /**\n    * @dev Throws if called by any sender that doesn't match a Frens Pool network contract\n    */\n    modifier onlyLatestNetworkContract() {\n        require(getBool(keccak256(abi.encodePacked(\"contract.exists\", msg.sender))), \"Invalid or outdated network contract\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\n    */\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName))), \"Invalid or outdated contract\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any sender that isn't a registered node\n    */\n    //removed  0xWildhare\n    /*\n    modifier onlyRegisteredNode(address _nodeAddress) {\n        require(getBool(keccak256(abi.encodePacked(\"node.exists\", _nodeAddress))), \"Invalid node\");\n        _;\n    }\n    */\n    /**\n    * @dev Throws if called by any sender that isn't a trusted node DAO member\n    */\n    //removed  0xWildhare\n    /*\n    modifier onlyTrustedNode(address _nodeAddress) {\n        require(getBool(keccak256(abi.encodePacked(\"dao.trustednodes.\", \"member\", _nodeAddress))), \"Invalid trusted node\");\n        _;\n    }\n    */\n\n    /**\n    * @dev Throws if called by any sender that isn't a registered Frens StakingPool\n    */\n    modifier onlyStakingPool(address _stakingPoolAddress) {\n        require(getBool(keccak256(abi.encodePacked(\"pool.exists\", _stakingPoolAddress))), \"Invalid Pool\");\n        _;\n    }\n\n\n    /**\n    * @dev Throws if called by any account other than a guardian account (temporary account allowed access to settings before DAO is fully enabled)\n    */\n    modifier onlyGuardian() {\n        require(msg.sender == frensStorage.getGuardian(), \"Account is not a temporary guardian\");\n        _;\n    }\n\n\n    \n\n\n\n\n\n    /*** Methods **********************************************************/\n\n    /// @dev Set the main Frens Storage address\n    constructor(IFrensStorage _frensStorage) {\n        // Update the contract address\n        frensStorage = IFrensStorage(_frensStorage);\n    }\n\n\n    /// @dev Get the address of a network contract by name\n    function getContractAddress(string memory _contractName) internal view returns (address) {\n        // Get the current contract address\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName)));\n        // Check it\n        require(contractAddress != address(0x0), \"Contract not found\");\n        // Return\n        return contractAddress;\n    }\n\n\n    /// @dev Get the address of a network contract by name (returns address(0x0) instead of reverting if contract does not exist)\n    function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {\n        // Get the current contract address\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName)));\n        // Return\n        return contractAddress;\n    }\n\n\n    /// @dev Get the name of a network contract by address\n    function getContractName(address _contractAddress) internal view returns (string memory) {\n        // Get the contract name\n        string memory contractName = getString(keccak256(abi.encodePacked(\"contract.name\", _contractAddress)));\n        // Check it\n        require(bytes(contractName).length > 0, \"Contract not found\");\n        // Return\n        return contractName;\n    }\n\n    /// @dev Get revert error message from a .call method\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n\n\n\n    /*** Frens Storage Methods ****************************************/\n\n    // Note: Unused helpers have been removed to keep contract sizes down\n\n    /// @dev Storage get methods\n    function getAddress(bytes32 _key) internal view returns (address) { return frensStorage.getAddress(_key); }\n    function getUint(bytes32 _key) internal view returns (uint) { return frensStorage.getUint(_key); }\n    function getString(bytes32 _key) internal view returns (string memory) { return frensStorage.getString(_key); }\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return frensStorage.getBytes(_key); }\n    function getBool(bytes32 _key) internal view returns (bool) { return frensStorage.getBool(_key); }\n    function getInt(bytes32 _key) internal view returns (int) { return frensStorage.getInt(_key); }\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return frensStorage.getBytes32(_key); }\n    function getArray(bytes32 _key) internal view returns (uint[] memory) { return frensStorage.getArray(_key); }\n\n    /// @dev Storage set methods\n    function setAddress(bytes32 _key, address _value) internal { frensStorage.setAddress(_key, _value); }\n    function setUint(bytes32 _key, uint _value) internal { frensStorage.setUint(_key, _value); }\n    function setString(bytes32 _key, string memory _value) internal { frensStorage.setString(_key, _value); }\n    function setBytes(bytes32 _key, bytes memory _value) internal { frensStorage.setBytes(_key, _value); }\n    function setBool(bytes32 _key, bool _value) internal { frensStorage.setBool(_key, _value); }\n    function setInt(bytes32 _key, int _value) internal { frensStorage.setInt(_key, _value); }\n    function setBytes32(bytes32 _key, bytes32 _value) internal { frensStorage.setBytes32(_key, _value); }\n    function setArray(bytes32 _key, uint[] memory _value) internal { frensStorage.setArray(_key, _value); }\n\n    /// @dev Storage delete methods\n    function deleteAddress(bytes32 _key) internal { frensStorage.deleteAddress(_key); }\n    function deleteUint(bytes32 _key) internal { frensStorage.deleteUint(_key); }\n    function deleteString(bytes32 _key) internal { frensStorage.deleteString(_key); }\n    function deleteBytes(bytes32 _key) internal { frensStorage.deleteBytes(_key); }\n    function deleteBool(bytes32 _key) internal { frensStorage.deleteBool(_key); }\n    function deleteInt(bytes32 _key) internal { frensStorage.deleteInt(_key); }\n    function deleteBytes32(bytes32 _key) internal { frensStorage.deleteBytes32(_key); }\n    function deleteArray(bytes32 _key) internal { frensStorage.deleteArray(_key); }\n\n    /// @dev Storage arithmetic methods - push added by 0xWildhare\n    function addUint(bytes32 _key, uint256 _amount) internal { frensStorage.addUint(_key, _amount); }\n    function subUint(bytes32 _key, uint256 _amount) internal { frensStorage.subUint(_key, _amount); }\n    function pushUint(bytes32 _key, uint256 _amount) internal { frensStorage.pushUint(_key, _amount); }\n}\n"
    },
    "contracts/interfaces/IFrensStorage.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n\n\n// SPDX-License-Identifier: GPL-3.0-only\n//modified from IRocketStorage on 03/12/2022 by 0xWildhare\n\ninterface IFrensStorage {\n\n    // Deploy status\n    function getDeployedStatus() external view returns (bool);\n\n    // Guardian\n    function getGuardian() external view returns(address);\n    function setGuardian(address _newAddress) external;\n    function confirmGuardian() external;\n\n    // Getters\n    function getAddress(bytes32 _key) external view returns (address);\n    function getUint(bytes32 _key) external view returns (uint);\n    function getString(bytes32 _key) external view returns (string memory);\n    function getBytes(bytes32 _key) external view returns (bytes memory);\n    function getBool(bytes32 _key) external view returns (bool);\n    function getInt(bytes32 _key) external view returns (int);\n    function getBytes32(bytes32 _key) external view returns (bytes32);\n    function getArray(bytes32 _key) external view returns (uint[] memory);\n\n    // Setters\n    function setAddress(bytes32 _key, address _value) external;\n    function setUint(bytes32 _key, uint _value) external;\n    function setString(bytes32 _key, string calldata _value) external;\n    function setBytes(bytes32 _key, bytes calldata _value) external;\n    function setBool(bytes32 _key, bool _value) external;\n    function setInt(bytes32 _key, int _value) external;\n    function setBytes32(bytes32 _key, bytes32 _value) external;\n    function setArray(bytes32 _key, uint[] calldata _value) external;\n\n    // Deleters\n    function deleteAddress(bytes32 _key) external;\n    function deleteUint(bytes32 _key) external;\n    function deleteString(bytes32 _key) external;\n    function deleteBytes(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;\n    function deleteInt(bytes32 _key) external;\n    function deleteBytes32(bytes32 _key) external;\n    function deleteArray(bytes32 _key) external;\n\n    // Arithmetic (and stuff) - push added by 0xWildhare\n    function addUint(bytes32 _key, uint256 _amount) external;\n    function subUint(bytes32 _key, uint256 _amount) external;\n    function pushUint(bytes32 _key, uint256 _amount) external;\n\n    // Protected storage removed ~ 0xWildhare\n    /*\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\n    function confirmWithdrawalAddress(address _nodeAddress) external;\n    */\n}\n"
    },
    "contracts/StakingPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n//import \"hardhat/console.sol\";\nimport \"./StakingPool.sol\";\nimport \"./FrensBase.sol\";\nimport \"./interfaces/IStakingPoolFactory.sol\";\n\ncontract StakingPoolFactory is IStakingPoolFactory, FrensBase {\n\n  event Create(\n    address indexed contractAddress,\n    address creator,\n    address owner\n  );\n\n  constructor(IFrensStorage _frensStorage) FrensBase(_frensStorage){\n    version = 1;\n  }\n\n  function create(\n    address owner_, \n    bool validatorLocked\n    ) public returns(address) {\n    StakingPool stakingPool = new StakingPool(owner_, frensStorage);\n    setBool(keccak256(abi.encodePacked(\"pool.exists\", address(stakingPool))), true);//do we need both pool.exists and contract.exists?\n    setBool(keccak256(abi.encodePacked(\"contract.exists\", address(stakingPool))), true);\n    setBool(keccak256(abi.encodePacked(\"validator.locked\", address(stakingPool))), validatorLocked);\n    if(validatorLocked){\n      setString(keccak256(abi.encodePacked(\"contract.state\", address(stakingPool))), \"awaitingValidatorInfo\");\n    } else {\n      setString(keccak256(abi.encodePacked(\"contract.state\", address(stakingPool))), \"acceptingDeposits\");\n    }\n    emit Create(address(stakingPool), msg.sender, owner_);\n    return(address(stakingPool));\n  }\n\n\n}\n"
    },
    "contracts/StakingPool.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n//SPDX-License-Identifier: MIT\n\n//import \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\";\nimport \"./interfaces/IDepositContract.sol\";\nimport \"./interfaces/IFrensPoolShare.sol\";\nimport \"./interfaces/IStakingPool.sol\";\nimport \"./FrensBase.sol\";\n\n\n//should ownable be replaces with an equivalent in storage/base?\ncontract StakingPool is IStakingPool, Ownable, FrensBase {\n\n  event Stake(address depositContractAddress, address caller);\n  event DepositToPool(uint amount, address depositer);\n\n  IFrensPoolShare frensPoolShare;\n\n  constructor(address owner_, IFrensStorage frensStorage_) FrensBase(frensStorage_){\n    address frensPoolShareAddress = getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensPoolShare\")));\n    frensPoolShare = IFrensPoolShare(frensPoolShareAddress); //this hardcodes the nft contract to the pool\n    _transferOwnership(owner_);\n    version = 1;\n  }\n\n//TODO: should the pool support arbitrary calls to whitelisted contracts? this solves a lot of problems\n\n//TODO: needs to interact with SSVtoken (via amm, check balance, check minimum amount needed in contract etc)\n  function depositToPool() public payable {\n    require(_getStateHash() == _getStringHash(\"acceptingDeposits\"), \"not accepting deposits\");\n    require(msg.value != 0, \"must deposit ether\");\n    require(getUint(keccak256(abi.encodePacked(\"total.deposits\", address(this)))) + msg.value <= 32 ether, \"total deposits cannot be more than 32 Eth\");\n    addUint(keccak256(abi.encodePacked(\"token.id\")), 1);\n    uint id = getUint(keccak256(abi.encodePacked(\"token.id\")));\n    setUint(keccak256(abi.encodePacked(\"deposit.amount\", id)), msg.value);\n    addUint(keccak256(abi.encodePacked(\"total.deposits\", address(this))), msg.value);\n    pushUint(keccak256(abi.encodePacked(\"ids.in.pool\", address(this))), id);\n    frensPoolShare.mint(msg.sender, address(this));\n    emit DepositToPool(msg.value,  msg.sender);\n  }\n\n  function addToDeposit(uint _id) public payable {\n    require(frensPoolShare.exists(_id), \"id does not exist\");\n    require(getAddress(keccak256(abi.encodePacked(\"pool.for.id\", _id))) == address(this), \"wrong staking pool\");\n    require(_getStateHash() == _getStringHash(\"acceptingDeposits\"), \"not accepting deposits\");\n    require(getUint(keccak256(abi.encodePacked(\"total.deposits\", address(this)))) + msg.value <= 32 ether, \"total deposits cannot be more than 32 Eth\");\n    addUint(keccak256(abi.encodePacked(\"deposit.amount\", _id)), msg.value);\n    addUint(keccak256(abi.encodePacked(\"total.deposits\", address(this))), msg.value);\n  }\n\n  function stake(\n    bytes calldata pubKey,\n    bytes calldata withdrawal_credentials,\n    bytes calldata signature,\n    bytes32 deposit_data_root\n  ) public onlyOwner{\n    if(getBool(keccak256(abi.encodePacked(\"validator.set\", address(this))))){\n      bytes memory pubKeyFromStorage = getBytes(keccak256(abi.encodePacked(\"pubKey\", address(this))));\n      require(keccak256(pubKeyFromStorage) == keccak256(pubKey), \"pubKey mismatch\");\n      _stake();\n    }else {\n      _setPubKey(\n        pubKey,\n        withdrawal_credentials,\n        signature,\n        deposit_data_root\n      );\n      _stake();\n    }\n  }\n\n  function stake() public onlyOwner {\n    _stake();\n  }\n\n  function _stake() internal {\n    require(address(this).balance >= 32 ether, \"not enough eth\");\n    require(_getStateHash() == _getStringHash(\"acceptingDeposits\"), \"wrong state\");\n    uint value = 32 ether;\n    bytes memory pubKey = getBytes(keccak256(abi.encodePacked(\"pubKey\", address(this))));\n    bytes memory withdrawal_credentials = getBytes(keccak256(abi.encodePacked(\"withdrawal_credentials\", address(this))));\n    bytes memory signature = getBytes(keccak256(abi.encodePacked(\"signature\", address(this))));\n    bytes32 deposit_data_root = getBytes32(keccak256(abi.encodePacked(\"deposit_data_root\", address(this))));\n    address depositContractAddress = getAddress(keccak256(abi.encodePacked(\"external.contract.address\", \"DepositContract\")));\n    setString(keccak256(abi.encodePacked(\"contract.state\", address(this))), \"staked\");\n    IDepositContract(depositContractAddress).deposit{value: value}(pubKey, withdrawal_credentials, signature, deposit_data_root);\n    emit Stake(depositContractAddress, msg.sender);\n  }\n\n  function setPubKey(\n    bytes calldata pubKey,\n    bytes calldata withdrawal_credentials,\n    bytes calldata signature,\n    bytes32 deposit_data_root\n  ) public onlyOwner{\n    _setPubKey(\n      pubKey,\n      withdrawal_credentials,\n      signature,\n      deposit_data_root\n    );\n  }\n\n  function _setPubKey(\n    bytes calldata pubKey,\n    bytes calldata withdrawal_credentials,\n    bytes calldata signature,\n    bytes32 deposit_data_root\n  ) internal{\n    //get expected withdrawal_credentials based on contract address\n    bytes memory withdrawalCredFromAddr = _toWithdrawalCred(address(this));\n    //compare expected withdrawal_credentials to provided\n    require(keccak256(withdrawal_credentials) == keccak256(withdrawalCredFromAddr), \"withdrawal credential mismatch\");\n    if(getBool(keccak256(abi.encodePacked(\"validator.locked\", address(this))))){\n      require(_getStateHash() == _getStringHash(\"awaitingValidatorInfo\"), \"wrong state\");\n      setBytes(keccak256(abi.encodePacked(\"pubKey\", address(this))), pubKey);\n      setBytes(keccak256(abi.encodePacked(\"withdrawal_credentials\", address(this))), withdrawal_credentials);\n      setBytes(keccak256(abi.encodePacked(\"signature\", address(this))), signature);\n      setBytes32(keccak256(abi.encodePacked(\"deposit_data_root\", address(this))), deposit_data_root);\n      setString(keccak256(abi.encodePacked(\"contract.state\", address(this))), \"acceptingDeposits\");\n    } else {\n      require(_getStateHash() == _getStringHash(\"acceptingDeposits\"), \"wrong state\");\n      setBytes(keccak256(abi.encodePacked(\"pubKey\", address(this))), pubKey);\n      setBytes(keccak256(abi.encodePacked(\"withdrawal_credentials\", address(this))), withdrawal_credentials);\n      setBytes(keccak256(abi.encodePacked(\"signature\", address(this))), signature);\n      setBytes32(keccak256(abi.encodePacked(\"deposit_data_root\", address(this))), deposit_data_root);\n    }\n    setBool(keccak256(abi.encodePacked(\"validator.set\", address(this))), true);\n  }\n\n  function withdraw(uint _id, uint _amount) public {\n    require(_getStateHash() != _getStringHash(\"staked\"), \"cannot withdraw once staked\");//TODO: this may need to be more restrictive\n    require(msg.sender == frensPoolShare.ownerOf(_id), \"not the owner\");\n    require(getUint(keccak256(abi.encodePacked(\"deposit.amount\", _id))) >= _amount, \"not enough deposited\");\n    subUint(keccak256(abi.encodePacked(\"deposit.amount\", _id)), _amount);\n    subUint(keccak256(abi.encodePacked(\"total.deposits\", address(this))), _amount);\n    payable(msg.sender).transfer(_amount);\n  }\n\n  //TODO think about other options for distribution\n  function distribute() public {\n    require(_getStateHash() == _getStringHash(\"staked\"), \"use withdraw when not staked\");\n    uint contractBalance = address(this).balance;\n    uint[] memory idsInPool = getIdsInThisPool();\n    require(contractBalance > 100, \"minimum of 100 wei to distribute\");\n    for(uint i=0; i<idsInPool.length; i++) {\n      uint id = idsInPool[i];\n      address tokenOwner = frensPoolShare.ownerOf(id);\n      uint share = _getShare(id, contractBalance);\n      payable(tokenOwner).transfer(share);\n    }\n  }\n\n  function unstake() public onlyOwner{\n    if(address(this).balance > 100){\n      distribute();\n    }\n    setString(keccak256(abi.encodePacked(\"contract.state\", address(this))), \"exited\");\n\n    //TODO what else needs to be in here (probably a limiting modifier and/or some requires) maybe add an arbitrary call to an external contract is enabled?\n    //TODO: is this where we extract fees?\n  }\n\n  function getIdsInThisPool() public view returns(uint[] memory) {\n    return getArray(keccak256(abi.encodePacked(\"ids.in.pool\", address(this))));\n  }\n\n  function _getShare(uint _id, uint _contractBalance) internal view returns(uint) {\n    uint depAmt = getUint(keccak256(abi.encodePacked(\"deposit.amount\", _id)));\n    uint totDeps = getUint(keccak256(abi.encodePacked(\"total.deposits\", address(this))));\n    if(depAmt == 0) return 0;\n    uint calcedShare =  _contractBalance * depAmt / totDeps;\n    if(calcedShare > 1){\n      return(calcedShare - 1); //steal 1 wei to avoid rounding errors drawing balance negative\n    }else return 0;\n  }\n\n  function getShare(uint _id) public view returns(uint) {\n    uint contractBalance = address(this).balance;\n    return _getShare(_id, contractBalance);\n  }\n\n  function getDistributableShare(uint _id) public view returns(uint) {\n    if(_getStateHash() == _getStringHash(\"acceptingDeposits\")) {\n      return 0;\n    } else {\n      return getShare(_id);\n    }\n  }\n\n  function getPubKey() public view returns(bytes memory){\n    return getBytes(keccak256(abi.encodePacked(\"validator.public.key\", address(this))));\n  }\n\n  function getState() public view returns(string memory){\n    return getString(keccak256(abi.encodePacked(\"contract.state\", address(this))));\n  }\n\n  function _getStateHash() internal view returns(bytes32){\n    return keccak256(abi.encodePacked(getState()));\n  }\n\n  function _getStringHash(string memory s) internal pure returns(bytes32){\n    return keccak256(abi.encodePacked(s));\n  }\n\n  function getDepositAmount(uint _id) public view returns(uint){\n    return getUint(keccak256(abi.encodePacked(\"deposit.amount\", _id)));\n  }\n\n  function getTotalDeposits() public view returns(uint){\n    return getUint(keccak256(abi.encodePacked(\"total.deposits\", address(this))));\n  }\n\n  function owner() public view override(IStakingPool, Ownable) returns (address){\n    return super.owner();\n  }\n\n  function _toWithdrawalCred(address a) private pure returns (bytes memory) {\n    uint uintFromAddress = uint256(uint160(a));\n    bytes memory withdralDesired = abi.encodePacked(uintFromAddress + 0x0100000000000000000000000000000000000000000000000000000000000000);\n    return withdralDesired;\n  }\n\n//REMOVE rugpull is for testing only and should not be in the mainnet version\n//if this gets deploied on mainnet call 911 or DM @0xWildhare\n  function rugpull() public onlyOwner{\n    payable(msg.sender).transfer(address(this).balance);\n  }\n\n  // to support receiving ETH by default\n  receive() external payable {\n\n  }\n\n  fallback() external payable {}\n}\n"
    },
    "contracts/interfaces/IStakingPoolFactory.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n//SPDX-License-Identifier: MIT\n\ninterface IStakingPoolFactory {\n\n  function create(\n    address owner_, \n    bool validatorLocked\n   ) external returns(address);\n\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/IERC721Enumerable.sol\";\n"
    },
    "contracts/interfaces/IDepositContract.sol": {
      "content": "\npragma solidity >=0.8.0 <0.9.0;\n//SPDX-License-Identifier: MIT\n\n\ninterface IDepositContract {\n\n    function deposit(\n        bytes calldata pubkey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external payable;\n\n    function get_deposit_count() external view returns (bytes memory);\n\n}\n"
    },
    "contracts/interfaces/IFrensPoolShare.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n//SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\";\n\n\ninterface IFrensPoolShare is IERC721Enumerable{\n\n  function mint(address userAddress, address _pool) external;\n\n  function exists(uint _id) external view returns(bool);\n\n  function getPoolById(uint _id) external view returns(address);\n\n  function tokenURI(uint256 id) external view returns (string memory);\n\n  function renderTokenById(uint256 id) external view returns (string memory);\n\n}\n"
    },
    "contracts/interfaces/IStakingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IStakingPool{\n\n  function owner() external view returns (address);\n\n  function depositToPool() external payable;\n\n  function addToDeposit(uint _id) external payable;\n\n  function withdraw(uint _id, uint _amount) external;\n\n  function distribute() external;\n\n  function getIdsInThisPool() external view returns(uint[] memory);\n\n  function getShare(uint _id) external view returns(uint);\n\n  function getDistributableShare(uint _id) external view returns(uint);\n\n  function getPubKey() external view returns(bytes memory);\n\n  function setPubKey(\n    bytes calldata pubKey,\n    bytes calldata withdrawal_credentials,\n    bytes calldata signature,\n    bytes32 deposit_data_root\n    ) external;\n\n  function getState() external view returns(string memory);\n\n  function getDepositAmount(uint _id) external view returns(uint);\n\n  function stake(\n    bytes calldata pubkey,\n    bytes calldata withdrawal_credentials,\n    bytes calldata signature,\n    bytes32 deposit_data_root\n  ) external;\n\n  function stake() external;\n\n    function unstake() external;\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/FrensPoolShareTokenURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n//import \"hardhat/console.sol\";\nimport \"./interfaces/IStakingPool.sol\";\nimport \"./interfaces/IFrensPoolShare.sol\";\nimport \"./interfaces/IFrensMetaHelper.sol\";\nimport \"./interfaces/IFrensArt.sol\";\nimport \"./interfaces/IFrensPoolShareTokenURI.sol\";\nimport \"./FrensBase.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport 'base64-sol/base64.sol';\n\ncontract FrensPoolShareTokenURI is IFrensPoolShareTokenURI, FrensBase {\n\n  using Strings for uint256;\n\n\n  IFrensPoolShare frensPoolShare;\n\n  constructor(IFrensStorage _frensStorage) FrensBase(_frensStorage){\n    frensPoolShare = IFrensPoolShare(getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensPoolShare\"))));\n  }\n\n    function tokenURI(uint256 id) public view returns (string memory) {\n      require(frensPoolShare.exists(id), \"id does not exist\");\n      address poolAddress = getAddress(keccak256(abi.encodePacked(\"pool.for.id\", id)));\n      IStakingPool stakingPool = IStakingPool(payable(poolAddress));\n      IFrensMetaHelper metaHelper = IFrensMetaHelper(getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensMetaHelper\"))));\n      uint depositForId = getUint(keccak256(abi.encodePacked(\"deposit.amount\", id)));\n      string memory depositString = metaHelper.getEthDecimalString(depositForId);\n      uint shareForId = stakingPool.getDistributableShare(id);\n      string memory shareString = metaHelper.getEthDecimalString(shareForId);\n      string memory stakingPoolAddress = Strings.toHexString(uint160(poolAddress), 20);\n      (uint32[] memory poolOperators, string memory pubKeyString) = metaHelper.getOperatorsForPool(poolAddress);\n      string memory poolState = stakingPool.getState();\n      string memory name = string(abi.encodePacked('fren pool share #',id.toString()));\n      string memory description = string(abi.encodePacked(\n        'this fren has a deposit of ',depositString,\n        ' Eth in pool ', stakingPoolAddress,\n        ', with claimable balance of ', shareString, ' Eth'));\n      string memory image = Base64.encode(bytes(generateSVGofTokenById(id)));\n\n\n  //TODO: add pool owner to traits and possibly art (Add ENS integration for art - only display if ENS exists for address)\n      return\n        string(\n          abi.encodePacked(\n            'data:application/json;base64,',\n            Base64.encode(\n              bytes(\n                abi.encodePacked(\n                  '{\"name\":\"',\n                  name,\n                  '\", \"description\":\"',\n                  description,\n                  '\", \"external_url\":\"https://frens.fun/token/',\n                  id.toString(),\n                  '\", \"attributes\": [{\"trait_type\": \"pool\", \"value\":\"',\n                  stakingPoolAddress,\n                  '\"},{\"trait_type\": \"validator public key\", \"value\": \"',\n                  pubKeyString,\n                  '\"},{\"trait_type\": \"deposit\", \"value\": \"',\n                  depositString, ' Eth',\n                  '\"},{\"trait_type\": \"claimable\", \"value\": \"',\n                  shareString, ' Eth',\n                  '\"},{\"trait_type\": \"pool state\", \"value\": \"',\n                  poolState,\n                  '\"},{\"trait_type\": \"operator1\", \"value\": \"',\n                  poolOperators.length == 0 ? \"Not Set\" : uint(poolOperators[0]).toString(),\n                  '\"},{\"trait_type\": \"operator2\", \"value\": \"',\n                  poolOperators.length == 0 ? \"Not Set\" : uint(poolOperators[1]).toString(),\n                  '\"},{\"trait_type\": \"operator3\", \"value\": \"',\n                  poolOperators.length == 0 ? \"Not Set\" : uint(poolOperators[2]).toString(),\n                  '\"},{\"trait_type\": \"operator4\", \"value\": \"',\n                  poolOperators.length == 0 ? \"Not Set\" : uint(poolOperators[3]).toString(),\n                  '\"}], \"image\": \"',\n                  'data:image/svg+xml;base64,',\n                  image,\n                  '\"}'\n                )\n              )\n            )\n          )\n        );\n    }\n\n    function generateSVGofTokenById(uint256 id) internal view returns (string memory) {\n      IFrensArt frensArt = IFrensArt(getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensArt\"))));\n\n      string memory svg = string(abi.encodePacked(\n        '<svg width=\"400\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\">',\n          frensArt.renderTokenById(id),\n        '</svg>'\n      ));\n\n      return svg;\n    }\n\n\n\n\n}\n"
    },
    "contracts/interfaces/IFrensMetaHelper.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n//SPDX-License-Identifier: MIT\n\ninterface IFrensMetaHelper {\n\n  function getColor(address a) external pure returns(string memory);\n\n  function getEthDecimalString(uint amountInWei) external pure returns(string memory);\n\n  function getOperatorsForPool(address poolAddress) external view returns (uint32[] memory, string memory);\n\n  function getEns(address addr) external view returns(bool, string memory);\n}\n"
    },
    "contracts/interfaces/IFrensArt.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n//SPDX-License-Identifier: MIT\n\ninterface IFrensArt {\n  function renderTokenById(uint256 id) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IFrensPoolShareTokenURI.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n//SPDX-License-Identifier: MIT\n\ninterface IFrensPoolShareTokenURI {\n  function tokenURI(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "contracts/FrensPoolShare.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n//import \"hardhat/console.sol\";\nimport \"./FrensBase.sol\";\nimport \"./interfaces/IFrensPoolShareTokenURI.sol\";\nimport \"./interfaces/IFrensArt.sol\";\nimport \"./interfaces/IFrensPoolShare.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\n//should ownable be replaces with an equivalent in storage/base? (needs to interface with opensea properly)\ncontract FrensPoolShare is IFrensPoolShare, ERC721Enumerable, Ownable, FrensBase {\n\n  constructor(IFrensStorage _frensStorage) FrensBase(_frensStorage) ERC721(\"staking con amigos\", \"FRENS\") {\n    //hi fren\n  }\n\n  function mint(address userAddress, address _pool) public onlyStakingPool(msg.sender) {\n    uint id = getUint(keccak256(abi.encodePacked(\"token.id\")));\n    setAddress(keccak256(abi.encodePacked(\"pool.for.id\", id)), _pool);\n    _safeMint(userAddress, id);\n  }\n\n  function exists(uint _id) public view returns(bool){\n    return _exists(_id);\n  }\n\n  //does frontend use this? otherwise it can be deleted\n  function getPoolById(uint _id) public view returns(address){\n    return getAddress(keccak256(abi.encodePacked(\"pool.for.id\", _id)));\n  }\n\n  function tokenURI(uint256 id) public view override(ERC721, IFrensPoolShare) returns (string memory) {\n    IFrensPoolShareTokenURI _tokenURI = IFrensPoolShareTokenURI(getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensPoolShareTokenURI\"))));\n    return _tokenURI.tokenURI(id);\n  }\n\n  function renderTokenById(uint256 id) public view returns (string memory){\n    IFrensArt frensArt = IFrensArt(getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensArt\"))));\n    return frensArt.renderTokenById(id);\n  }\n\n}\n"
    },
    "contracts/FrensArt.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n//import \"hardhat/console.sol\";\nimport \"./interfaces/IStakingPool.sol\";\nimport \"./interfaces/IFrensPoolShare.sol\";\nimport \"./interfaces/IFrensMetaHelper.sol\";\nimport \"./interfaces/IFrensArt.sol\";\nimport \"./FrensBase.sol\";\n\ncontract FrensArt is IFrensArt, FrensBase {\n\n  IFrensPoolShare frensPoolShare;\n\n  constructor(IFrensStorage _frensStorage) FrensBase(_frensStorage){\n    frensPoolShare = IFrensPoolShare(getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensPoolShare\"))));\n  }\n\n  // Visibility is `public` to enable it being called by other contracts for composition.\n  function renderTokenById(uint256 id) public view returns (string memory) {\n    IStakingPool stakingPool = IStakingPool(payable(getAddress(keccak256(abi.encodePacked(\"pool.for.id\", id)))));\n    IFrensMetaHelper metaHelper = IFrensMetaHelper(getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensMetaHelper\"))));\n    uint depositForId = getUint(keccak256(abi.encodePacked(\"deposit.amount\", id)));\n    string memory depositString = metaHelper.getEthDecimalString(depositForId);\n    uint shareForId = stakingPool.getDistributableShare(id);\n    string memory shareString = metaHelper.getEthDecimalString(shareForId);\n    string memory poolColor = metaHelper.getColor(address(stakingPool));\n    address ownerAddress = frensPoolShare.ownerOf(id);\n    string memory textColor = metaHelper.getColor(ownerAddress);\n    (bool ensExists, string memory ownerEns) = metaHelper.getEns(stakingPool.owner());\n\n    string memory render = string(abi.encodePacked(\n\n      //\"frens\" lettering stlying\n      '<defs><style>@font-face{font-family:\"Permanent Marker\";src:url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAr4AA0AAAAAD/gAAQBCAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABMAAAAE8AAABgYbLjY2NtYXAAAAGAAAAAWgAAAVoM5AMpY3Z0IAAAAdwAAAACAAAAAgAVAABmcGdtAAAB4AAAAPcAAAFhkkHa+mdseWYAAALYAAAFogAAB9S42zT5aGVhZAAACHwAAAA2AAAANghIWvtoaGVhAAAItAAAAB0AAAAkBH0BgGhtdHgAAAjUAAAAHAAAABwPZ//6bG9jYQAACPAAAAAQAAAAEAUYB0JtYXhwAAAJAAAAAB4AAAAgAhQCGW5hbWUAAAkgAAABuwAAA1RQW8M9cG9zdAAACtwAAAAUAAAAIP+2ADpwcmVwAAAK8AAAAAcAAAAHaAaMhXicY2BhMmacwMDKwMC0h6mLgYGhB0Iz3mUwZgRymRhgoIGBQV2AAQFcPP2CGBwYFBiCmfL+H2awZSlgdAUKgzQxMBUyfQNSCgwMAE76DFAAeJxjYGBgZoBgGQZGBhAIAfIYwXwWBgsgzcXAwcAEhAoMbgx+DMH//wPFFBhcgeyg////P/y/9/+2/5uheqGAkY2BIGAkrISBgYkZymABYlYiTB08AAC6og4SAAAAFQAAeJxdkD1OxDAQhWMSFnIDJAvJI2spVrboqVI4kVCasKHwNPxIuxLZOyCloXHBWd52KXMxBN4EVkDj8Xuj+fRmkJgaeeP3QrzzID7f4C73efr4YCGMUmXnIJ4sTgzEiixSoyqky2rtNaugwu0mqEq9PG+QLacaG9vA1wpJ67v43ntCwfL43TLfWGQHTDZhAkfA7huwmwBx/sPi1NQK6VXj7zx6J1E4lkSqxNh4jE4Ss8XimDHW1+5iTntmsFhZnM+E1qOQSDiEWWlCH4IMcYMfPf7Vg0j+G8VvI16gHETfTJ1ekzwYmjTFhOwsclO3vowRie0X5WBrXAB4nHVVSa8j1RX2ufNUt0bf8vTK03NV+/Haz/0GG7ppN69BCETSCVkECSEWvUDZRELJhh3LREL8g/yN8ANgySqLiA1LdiAQEkp2eTlVhiWusst1zx2/4Zxe71c+0NN3/yX/IN/0/t7r7TfQbOj+QJsDlAe63+Cf9nUfLq/C1XV9c1nBrqmgDB6K0nNZe9J4kEGUYbcPol/RfQXS0+YMGlHLetFFD6Q8wL6N0b2nUtRLDxt4UcmISEkp0ZoTQZVMslylsWLCLdbb8fY3bzy7As6oAiI5A1eXAIQk683VzW6kIp861bcc6NkHD4DpJM0cZ7yo19sJl9zMrV/5bObWu+3Vang7MT7yllMqVH7x6M37NlaT3z57Y6GCjJv1OtVJnCiwJNSnqzJZ1U2RlbEWcWq1ppJyQgjl/bHRSmo1rhKlk4QCY0QKaoNimuDiIkstmOCiMQLEOOWcj16aCSIEOJwmTR3h3klozkqrCOeGZB0Hd9/d/Yd8TX7ofXbkABEvEWUEDe961zYt6qYlBy5gv7tu6iewewLHON6Xu/0On08g7K4u25EVTCFIDzHUi+XC4ybxCgJbpCjxd3oc+whkKdu+OCQmTY0RpKbrVS8XXXe8S1Esi/alH46hbhvdbpq6Xfe8mhGajyZRzC03iLESwIjgggoWa84Vd4IwSogBU27LcjtQuZKOpkn1/HFfOHGdmkRyRZWVwssoilT1uz88O1ERFcg4APRRB5ywogmTl6aNtgJ1gwOAXgiTpyrTg1kS1pllxBRaMIKCAQ0taYazECexwn05qhg3DPkj7Mv0MBmMU40UKcYSZYPVnnPAxVAZynHlUJuRcBExAhsSISkQJpgKHPcz47HkkqhB6VABIKPcCg5MYasVw4VhMY5H/qWGBAVuaGTNy4rijrpzSAkgKHaVkcwIKC+YoFmZnyj0AaFgBIa8Xl6Uynf6+PHuf+Qr8m3vr6gPdJcIZS0kuvM6XB3lUtES/VaBKDDSBE9KZB2fEMqjg7EDkozu87T8heIGfYuz4QyeLj39p2EiznF/3ulyWqYaZc/lydNXX51Obs6n6FGCAHE8AWeKMySUtqQS+cLNNNU20lplwzDI/IAJIZ2lzijQgefBcYL/eDqarucPnpXGKKWINfx9NRykCIrCS67ONykDM1SHv33y6WtmfHpRCcYEEiSxi0+iOML1YHSzfzgd/v75hw/tbLH0JO1ntFiVZjAoZHV9uZudPB7F54GhALhToyDd6fuv0CJkOo7RbaRn7v6N+e773p86NBGFq/qAUB2gboHcdYB1Fir7LaoV6SNqxaVsEcSboJF2ZZfGMFc2RyyRDbEhcgNytyGAQbTXBiaofCulkZJzChDFLnZ+yqfbB4fN4OVcxcrnsdcEKGGP33l+T5NqfrKcTpeT2dh6QSUeQRoTmdMP33lhd28RKGAOKhKrEEFjqYhwIIW3o9l0wM/eW/OzP0Kqwmo5z6hNczF9evt4TKwavHZ7ydPmBN0ZR8vmXiq0turmdn2SMpGFGDeoMc/aqhorBsC9d+BH82Q0PClAwL3LEUUGOWYxnYKOrIN/5dN5M+ardHW/qyHm7ifyOWL6ca+XH1CQnSavFyi8DrNfMPq5XIhwBLMFskMaRYnhfVsVZJdUlteY0TYEv4B15UBaBeP7zQaWm7ayHHMh9kUE0NREr863fUV2f/7LR0+Zjx04TEWD6P67p7aaz7w9xXMQORgWNBtlCquFYOg1atJX3n73nFmqy/E4UhGKhhNggImAUyL8+s3bRxMaedd6n2ERGD0s3CA9e2tJhJUxfBHnNsmS0ekwFZha6krmLvQLa4d9lUgrmAOtiZHoeqGlQODSwdhiCornebUtz1+/aSIsbgg6ISqxYLGeUIoq18NRqVgymXssWzE2U4Z9oswqxYiLBU6a9v4PxderQQAAAAEAAAABAEJAxpAWXw889QgLBAAAAAAAyTVKIAAAAADVK8zX/+z/1QLcAu8AAAAJAAIAAAAAAAB4nGNgZGBgKfi3m0Geae//NwwgwMiACtgBhGwFAAAAAAF7AAABewAAAoIACQJN/+wCvf/xApYACgJOAAoAAAAGAAwAzgHeAoQDLgPqeJxjYGRgYGBn2M7AxAACjGCSiwHIZUwEMQEVgwExAAB4nJVRzWrbQBD+1nFSCq3praWnoaekxPrx0ToF2wHRxBin5K4oiyyiSGKl2PjSJ8gL5C36DD30IfoYfYJ+Xi/BmJRSLbv7zcw33+yMALzDTyhsv4h7ixX9kcMdvMIXhw/wCXOHu/iA1uFDvMWjw0d4jyeHe/iM78xS3de0lvjlsIKomcMd9FTt8AHG6pvDXQTqh8OH+Kh+O3wEr/PG4R6+doajql6bPFu0cpyeyCAIA7lZy3lVtjLOS21OJS5TT86KQiytEaMbbZb61ptpc5+UmszLxNxpM9fZQ5GY0AuCMBrH03n0zNgS+o6xnyjOf61Nk1elWIW/5C7ath76/mq18pI6SRfaq0zmF3mqy0Y3/kU8mkyvJv2BF2CECjXWMMiRYcF5C46R4oT3AAFCbsENGYJzckvLGJNdQjPrlFZMnMIjOkPBJTtqjbU07w17yfOWzJm17pFYla3mJS2DOxuZ88zwQK2NL2RGYN8SsXKMKePRCxq7Cv09jX9VlD3+tfU27GPTs+y84f/qbmbQcsJD+FwruzxGau6UUU2rIi9jtGC11Go2dmI+LtjtCBN2fMWzzz/CV/wB3KikGwB4nGNgZgCD/5sZjBkwATsALLAB8LgB/4WwBI0A) format(\"woff\"); font-weight:normal;font-style:normal;}</style></defs>'\n\n      '<circle cx=\"200\" cy=\"200\" r=\"170\" fill=\"#',\n        poolColor,\n      '\"/>,'\n      //shaka\n      '<g transform=\"matrix(.707107 -.70710678 .70710678 .707107 16 153)\" stroke=\"none\" fill-rule=\"nonzero\"><path d=\"M196.2512 233.555c8.3009 0 9.8263-6.9913 8.1372-12.24-1.6351-5.0915-6.5388-9.2041-16.1456-13.4342-18.6514-8.1867-44.9124-15.3737-44.9124-17.8813s11.2595-.665 25.952-3.4659c11.1504-2.1342 12.204-6.4434 13.6215-13.9247 1.6891-8.8516-4.0689-15.5493-4.0689-15.5493s9.8988-3.9178 9.8988-16.099-11.4057-17.6453-11.4057-17.6453 4.6668-3.0747 5.866-10.2425c1.4894-8.8319-4.4865-16.6662-12.6045-22.5219-6.8467-4.9352-15.5279-9.3614-21.9741-12.0446-5.5393-2.3102-9.6994-3.936-23.3019-3.7602-10.9517.1372-16.3081-.2153-17.144-3.9951-.6356-2.8202 1.6347-5.7382 3.904-12.8275 2.8157-8.7339 10.0441-31.256-3.0874-51.3503-5.0481-7.7155-18.1245-7.598-20.7756-4.9148-5.0497 5.1108 1.5253 15.3338-1.98 33.645-2.4151 12.6321-5.3214 21.249-17.2164 30.9824-6.8661 5.6207-22.0854 14.963-33.8356 30.6297-4.3587 5.7979-17.9428 4.7004-25.5348 3.5652-3.032-.4507-5.8841 1.7227-6.4831 4.9739-6.0301 32.3922-1.9433 66.2534.0905 79.3165.4911 3.1726 3.1423 5.4245 6.1208 5.1895 6.7737-.5086 18.2526-1.2925 21.8119-.8611 7.1738.8611 21.9389 12.4552 42.1698 18.6239 17.9615 5.4838 43.5155 10.5559 54.9387 11.2413s59.8411 14.5903 67.9588 14.5903z\" fill=\"#ffca28\"/><path d=\"M131.2159 74.786v.3141c6.9566.0192 13.2219 7.0502 12.9677 14.5512-.31 8.7336-11.6234 12.3186-7.3188 24.6756.8706 2.5251 11.4597 6.6976 8.8616 19.2512-2.1244 10.2827-10.0614 9.5562-10.0614 14.7071 0 8.7359 9.4624 14.5704 10.1345 24.5197s-4.0677 11.5345-3.7421 14.9828c.2368 2.5466 1.2729 3.4652 1.2729 2.1941 0-2.5082 11.2594-.6666 25.951-3.4675 11.1514-2.1342 12.2049-6.4434 13.6224-13.9252 1.6891-8.8511-4.0695-15.5488-4.0695-15.5488s9.8995-3.9183 9.8995-16.0979-11.4057-17.6469-11.4057-17.6469 4.6667-3.0743 5.8647-10.242c1.4906-8.8319-4.4856-16.6662-12.6037-22.5221-6.8469-4.9351-15.5274-9.3618-21.9737-12.0429-4.632-1.94-8.3376-3.3884-17.3994-3.7025z\" fill=\"#ffb300\"/><path d=\"M135.3022 150.9304c-.1636-4.1328.091-5.2682 2.1071-5.8173s5.7028.9998 5.7028.9998c14.8553-1.3524 30.8928 2.0552 35.7408 10.9277 0 0-23.609-1.8607-32.4723-1.3523-6.9549.4122-10.8781.4892-11.0784-4.7579zm42.0433-27.6145c-14.5104-5.4647-31.4737-6.4432-36.486-6.4432-7.1193 0-5.7568-11.6727-2.7244-13.8658 2.0889-.9203 4.5581 2.3106 6.5015 3.0748 5.7759 2.2908 30.1841 3.7407 32.7089 17.2342zm.9263 109.5939c-26.6423-5.0914-62.148-15.1978-90.3348-19.1146-20.7393-2.878-32.3452-11.5346-41.0801-16.392-4.9223-2.7417-8.8089-4.9147-12.713-5.9722-10.3344-2.8205-18.2891-1.2347-24.7356-1.489s7.7542-10.0275 26.4972-6.0523c4.758.9998 9.1353 3.7409 14.2568 6.5999 8.8262 4.9161 19.6143 12.241 39.3193 15.7064 11.0417 1.9591 27.8048 3.9566 43.5505 8.2251 12.4227 3.35 46.9653 15.2178 58.9874 16.8051 6.1574.8227 11.587-.9805 11.606-.9805 0 0-1.0361 2.6641-5.2309 4.0149-4.4679 1.45-9.7167.6467-20.1228-1.3508zm-62.0753-158.301c-3.7771.5875-11.986-2.0552-8.5724-10.947 5.8122-15.1194 6.2843-20.3472 6.0476-35.5457-.1812-10.8894-3.3052-18.2322-5.6474-22.6781 0 0 18.8516 13.7094 9.3162 56.5404-1.3982 6.2276-1.144 12.6304-1.144 12.6304zm61.0586 109.1441s-4.2854 2.8393-10.0614 5.0142c-5.7934 2.1727-15.4195 3.9951-19.233 4.0143s-8.355-4.3284-5.0847-5.9542c3.2511-1.6044 34.3791-3.0743 34.3791-3.0743z\" fill=\"#eda600\"/></g>',\n      //cover part of shaka to have consistent gap from eth logo\n      '<polygon points=\"200,359 80,220 98,195 200,256\" fill=\"#',\n        poolColor,\n      '\"/>',\n      //ethlogo (partial)\n      '<polygon points=\"200,359 98,215 200,276\" fill=\"#8c8c8c\" />',\n      '<polygon points=\"200,359 302,215 200,276\" fill=\"#3c3c3b\" />',\n      //frens text\n      '<text font-size=\"122\" x=\"5\" y=\"240\" font-family=\"Permanent Marker\"  opacity=\".4\" fill=\"#',\n        textColor,\n      '\">FRENS</text>',\n      //frens Text outline\n      '<text font-size=\"122\" x=\"5\" y=\"240\" font-family=\"Permanent Marker\" fill=\"none\"  stroke-width=\"2\" stroke=\"#',\n        textColor,\n      '\">FRENS</text>'\n      //deposit text\n      '<text font-size=\"50\" text-anchor=\"middle\" x=\"200\" y=\"135\" fill=\"#FF69B4\" stroke=\"#00EDF5\" font-weight=\"Bold\" font-family=\"Sans-Serif\" opacity=\".8\">',\n        depositString, ' Eth',\n      '</text>',\n      //claimable text\n      '<text font-size=\"25\" text-anchor=\"middle\" x=\"200\" y=\"300\" fill=\"#FF69B4\" stroke=\"#00EDF5\" font-weight=\"Bold\" font-family=\"Sans-Serif\" >',\n        shareString, ' Eth Claimable',\n      '</text>'\n      //pool owners ENS\n      '<text font-size=\"15\" text-anchor=\"middle\" x=\"200\" y=\"330\" fill=\"#FF69B4\" stroke=\"#00EDF5\" font-weight=\"Bold\" font-family=\"Sans-Serif\" >',\n        ensExists ? 'Pool created by:' : '',\n      '</text>'\n      \n      '<text font-size=\"30\" text-anchor=\"middle\" x=\"200\" y=\"360\" fill=\"#FF69B4\" stroke=\"#00EDF5\" font-weight=\"Bold\" font-family=\"Sans-Serif\" >',\n        ownerEns, \n      '</text>'\n\n\n      ));\n\n    return render;\n  }\n\n}\n"
    },
    "contracts/FrensMetaHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n//import \"hardhat/console.sol\";\nimport \"./interfaces/ISSVRegistry.sol\";\nimport \"./interfaces/IFrensMetaHelper.sol\";\nimport \"./interfaces/IENS.sol\";\nimport \"./interfaces/IReverseResolver.sol\";\nimport \"./FrensBase.sol\";\nimport './ToColor.sol';\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract FrensMetaHelper is IFrensMetaHelper, FrensBase {\n\n  using ToColor for bytes3;\n  using Strings for uint256;\n\n  constructor(IFrensStorage _frensStorage) FrensBase(_frensStorage) {\n    //hi fren\n  }\n\n  function getColor(address a) public pure returns(string memory){\n    bytes32 colorRandomness = keccak256(abi.encodePacked(address(a)));\n    bytes3 colorBytes = bytes2(colorRandomness[0]) | ( bytes2(colorRandomness[1]) >> 8 ) | ( bytes3(colorRandomness[2]) >> 16 );\n    string memory color = colorBytes.toColor();\n    return color;\n  }\n\n  function getEthDecimalString(uint amountInWei) public pure returns(string memory){\n    string memory leftOfDecimal = (amountInWei / 1 ether).toString();\n    uint rightOfDecimal = (amountInWei % 1 ether) / 10**14;\n    string memory rod = rightOfDecimal.toString();\n    if(rightOfDecimal < 1000) rod = string.concat(\"0\", rod);\n    if(rightOfDecimal < 100) rod = string.concat(\"0\", rod);\n    if(rightOfDecimal < 10) rod = string.concat(\"0\", rod);\n    return string.concat(leftOfDecimal, \".\", rod);\n  }\n\n  function getOperatorsForPool(address poolAddress) public view returns (uint32[] memory, string memory) {\n    bytes memory poolPubKey = getBytes(keccak256(abi.encodePacked(\"validator.public.key\", poolAddress)));\n    string memory pubKeyString = _iToHex(poolPubKey);\n    ISSVRegistry ssvRegistry = ISSVRegistry(getAddress(keccak256(abi.encodePacked(\"external.contract.address\", \"SSVRegistry\"))));\n    uint32[] memory poolOperators = ssvRegistry.getOperatorsByValidator(poolPubKey);\n    return(poolOperators, pubKeyString);\n  }\n\n  function _iToHex(bytes memory buffer) internal pure returns (string memory) {\n    // Fixed buffer size for hexadecimal convertion\n    bytes memory converted = new bytes(buffer.length * 2);\n    bytes memory _base = \"0123456789abcdef\";\n    for (uint256 i = 0; i < buffer.length; i++) {\n        converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\n        converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\n    }\n    return string(abi.encodePacked(\"0x\", converted));\n  }\n\n  function getEns(address addr) public view returns(bool, string memory){\n    IENS ens = IENS(getAddress(keccak256(abi.encodePacked(\"external.contract.address\", \"ENS\"))));\n    bytes32 node = _node(addr);\n    address revResAddr = ens.resolver(node);\n    if(revResAddr == address(0)) return(false,'');\n    IReverseResolver reverseResolver = IReverseResolver(revResAddr);\n    return(ens.recordExists(node), reverseResolver.name(node));\n  }\n\n  function _node(address addr) internal pure returns (bytes32) {\n    bytes32 ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n    return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\n  }\n\n  function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\n    addr;\n    ret; // Stop warning us about unused variables\n    assembly {\n      let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\n\n      for { let i := 40 } gt(i, 0) { } {\n          i := sub(i, 1)\n          mstore8(i, byte(and(addr, 0xf), lookup))\n          addr := div(addr, 0x10)\n          i := sub(i, 1)\n          mstore8(i, byte(and(addr, 0xf), lookup))\n          addr := div(addr, 0x10)\n      }\n\n      ret := keccak256(0, 40)\n    }\n  }\n\n}\n"
    },
    "contracts/interfaces/ISSVRegistry.sol": {
      "content": "// File: contracts/ISSVRegistry.sol\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.2;\n\ninterface ISSVRegistry {\n    struct Oess {\n        uint32 operatorId;\n        bytes sharedPublicKey;\n        bytes encryptedKey;\n    }\n\n    /** errors */\n    error ExceedRegisteredOperatorsByAccountLimit();\n    error OperatorDeleted();\n    error ValidatorAlreadyExists();\n    error ExceedValidatorLimit();\n    error OperatorNotFound();\n    error InvalidPublicKeyLength();\n    error OessDataStructureInvalid();\n\n    /**\n     * @dev Initializes the contract\n     */\n    function initialize() external;\n\n    /**\n     * @dev Registers a new operator.\n     * @param name Operator's display name.\n     * @param ownerAddress Operator's ethereum address that can collect fees.\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\n     * @param fee The fee which the operator charges for each block.\n     */\n    function registerOperator(string calldata name, address ownerAddress, bytes calldata publicKey, uint64 fee) external returns (uint32);\n\n    /**\n     * @dev removes an operator.\n     * @param operatorId Operator id.\n     */\n    function removeOperator(uint32 operatorId) external;\n\n    /**\n     * @dev Updates an operator fee.\n     * @param operatorId Operator id.\n     * @param fee New operator fee.\n     */\n    function updateOperatorFee(\n        uint32 operatorId,\n        uint64 fee\n    ) external;\n\n    /**\n     * @dev Updates an operator fee.\n     * @param operatorId Operator id.\n     * @param score New score.\n     */\n    function updateOperatorScore(\n        uint32 operatorId,\n        uint32 score\n    ) external;\n\n    /**\n     * @dev Registers a new validator.\n     * @param ownerAddress The user's ethereum address that is the owner of the validator.\n     * @param publicKey Validator public key.\n     * @param operatorIds Operator ids.\n     * @param sharesPublicKeys Shares public keys.\n     * @param sharesEncrypted Encrypted private keys.\n     */\n    function registerValidator(\n        address ownerAddress,\n        bytes calldata publicKey,\n        uint32[] calldata operatorIds,\n        bytes[] calldata sharesPublicKeys,\n        bytes[] calldata sharesEncrypted\n    ) external;\n\n    /**\n     * @dev removes a validator.\n     * @param publicKey Validator's public key.\n     */\n    function removeValidator(bytes calldata publicKey) external;\n\n    function enableOwnerValidators(address ownerAddress) external;\n\n    function disableOwnerValidators(address ownerAddress) external;\n\n    function isLiquidated(address ownerAddress) external view returns (bool);\n\n    /**\n     * @dev Gets an operator by operator id.\n     * @param operatorId Operator id.\n     */\n    function getOperatorById(uint32 operatorId)\n        external view\n        returns (\n            string memory,\n            address,\n            bytes memory,\n            uint256,\n            uint256,\n            uint256,\n            bool\n        );\n\n    /**\n     * @dev Returns operators for owner.\n     * @param ownerAddress Owner's address.\n     */\n    function getOperatorsByOwnerAddress(address ownerAddress)\n        external view\n        returns (uint32[] memory);\n\n    /**\n     * @dev Gets operators list which are in use by validator.\n     * @param validatorPublicKey Validator's public key.\n     */\n    function getOperatorsByValidator(bytes calldata validatorPublicKey)\n        external view\n        returns (uint32[] memory);\n\n    /**\n     * @dev Gets operator's owner.\n     * @param operatorId Operator id.\n     */\n    function getOperatorOwner(uint32 operatorId) external view returns (address);\n\n    /**\n     * @dev Gets operator current fee.\n     * @param operatorId Operator id.\n     */\n    function getOperatorFee(uint32 operatorId)\n        external view\n        returns (uint64);\n\n    /**\n     * @dev Gets active validator count.\n     */\n    function activeValidatorCount() external view returns (uint32);\n\n    /**\n     * @dev Gets an validator by public key.\n     * @param publicKey Validator's public key.\n     */\n    function validators(bytes calldata publicKey)\n        external view\n        returns (\n            address,\n            bytes memory,\n            bool\n        );\n\n    /**\n     * @dev Gets a validator public keys by owner's address.\n     * @param ownerAddress Owner's Address.\n     */\n    function getValidatorsByAddress(address ownerAddress)\n        external view\n        returns (bytes[] memory);\n\n    /**\n     * @dev Get validator's owner.\n     * @param publicKey Validator's public key.\n     */\n    function getValidatorOwner(bytes calldata publicKey) external view returns (address);\n\n    /**\n     * @dev Get validators amount per operator.\n     * @param operatorId Operator public key\n     */\n    function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32);\n}"
    },
    "contracts/interfaces/IENS.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IENS {\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n    // Logged when an operator is added or removed.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns(bytes32);\n    function setResolver(bytes32 node, address resolver) external;\n    function setOwner(bytes32 node, address owner) external;\n    function setTTL(bytes32 node, uint64 ttl) external;\n    function setApprovalForAll(address operator, bool approved) external;\n    function owner(bytes32 node) external view returns (address);\n    function resolver(bytes32 node) external view returns (address);\n    function ttl(bytes32 node) external view returns (uint64);\n    function recordExists(bytes32 node) external view returns (bool);\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}"
    },
    "contracts/interfaces/IReverseResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IReverseResolver{\n\n    function name(bytes32 node) external view returns(string memory);\n\n}"
    },
    "contracts/ToColor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary ToColor {\n    bytes16 internal constant ALPHABET = '0123456789abcdef';\n\n    function toColor(bytes3 value) internal pure returns (string memory) {\n      bytes memory buffer = new bytes(6);\n      for (uint256 i = 0; i < 3; i++) {\n          buffer[i*2+1] = ALPHABET[uint8(value[i]) & 0xf];\n          buffer[i*2] = ALPHABET[uint8(value[i]>>4) & 0xf];\n      }\n      return string(buffer);\n    }\n}\n"
    },
    "contracts/FrensInitialiser.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./FrensBase.sol\";\n\ncontract FrensInitialiser is FrensBase {\n\n  constructor(IFrensStorage _frensStorage) FrensBase(_frensStorage) {\n    //nothing?\n  }\n  //set boolean\n  function setContractExists(address _contractAddress, bool _exists) public onlyGuardian{\n    setBool(keccak256(abi.encodePacked(\"contract.exists\", _contractAddress)), _exists);\n  }\n  //set name and address\n  function setContract(address _contractAddress, string memory _contractName) public onlyGuardian{\n    setAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName)), _contractAddress);\n    setString(keccak256(abi.encodePacked(\"contract.name\", _contractAddress)), _contractName);\n    setBool(keccak256(abi.encodePacked(\"contract.exists\", _contractAddress)), true);\n  }\n\n  function deleteContract(address _contractAddress, string memory _contractName) public onlyGuardian {\n    deleteAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName)));\n    deleteString(keccak256(abi.encodePacked(\"contract.name\", _contractAddress)));\n    setBool(keccak256(abi.encodePacked(\"contract.exists\", _contractAddress)), false);\n  }\n\n  function setExternalContract(address _contractAddress, string memory _contractName) public onlyGuardian {\n    setAddress(keccak256(abi.encodePacked(\"external.contract.address\", _contractName)), _contractAddress);\n    setString(keccak256(abi.encodePacked(\"external.contract.name\", _contractAddress)), _contractName);\n  }\n\n  ///add deletes\n\n}\n"
    },
    "contracts/FrensStorage.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\n/// @title The primary persistent storage for Frens Staking Pools\n/// @author modified 04-Dec-2022 by 0xWildhare originally by David Rugendyke (h/t David and Rocket Pool!)\n/// this code is modified from the Rocket Pool RocketStorage contract all \"Rocket\" replaced with \"Frens\"\n\nimport \"./interfaces/IFrensStorage.sol\";\n\ncontract FrensStorage is IFrensStorage{\n\n    // Events\n    event NodeWithdrawalAddressSet(address indexed node, address indexed withdrawalAddress, uint256 time);\n    event GuardianChanged(address oldGuardian, address newGuardian);\n\n      // Storage maps\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => uint256)    private uintStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private booleanStorage;\n    mapping(bytes32 => bytes32)    private bytes32Storage;\n    mapping(bytes32 => uint[])     private arrayStorage; //added for Frens Pool\n\n    // Protected storage (not accessible by network contracts) not used in Frens so this is removed ~ 0xWildhare\n    //mapping(address => address)    private withdrawalAddresses;\n    //mapping(address => address)    private pendingWithdrawalAddresses;\n\n    // Guardian address\n    address guardian;\n    address newGuardian;\n\n    // Flag storage has been initialised\n    bool storageInit = false;\n\n    /// @dev Only allow access from the latest version of a contract in the Frens Pool network after deployment\n    modifier onlyLatestFrensNetworkContract() {\n        if (storageInit == true) {\n            // Make sure the access is permitted to only contracts in our Dapp\n            require(booleanStorage[keccak256(abi.encodePacked(\"contract.exists\", msg.sender))], \"Invalid or outdated network contract\");\n        } else {\n            // Only Dapp and the guardian account are allowed access during initialisation.\n            // tx.origin is only safe to use in this case for deployment since no external contracts are interacted with\n            require((\n                booleanStorage[keccak256(abi.encodePacked(\"contract.exists\", msg.sender))] || tx.origin == guardian\n            ), \"Invalid or outdated network contract attempting access during deployment\");\n        }\n        _;\n    }\n\n\n    /// @dev Construct FrensStorage\n    constructor() {\n        // Set the guardian upon deployment\n        guardian = msg.sender;\n    }\n\n    // Get guardian address\n    function getGuardian() external override view returns (address) {\n        return guardian;\n    }\n\n    // Transfers guardianship to a new address\n    function setGuardian(address _newAddress) external override {\n        // Check tx comes from current guardian\n        require(msg.sender == guardian, \"Is not guardian account\");\n        // Store new address awaiting confirmation\n        newGuardian = _newAddress;\n    }\n\n    // Confirms change of guardian\n    function confirmGuardian() external override {\n        // Check tx came from new guardian address\n        require(msg.sender == newGuardian, \"Confirmation must come from new guardian address\");\n        // Store old guardian for event\n        address oldGuardian = guardian;\n        // Update guardian and clear storage\n        guardian = newGuardian;\n        delete newGuardian;\n        // Emit event\n        emit GuardianChanged(oldGuardian, guardian);\n    }\n\n    // Set this as being deployed now\n    function getDeployedStatus() external override view returns (bool) {\n        return storageInit;\n    }\n\n    // Set this as being deployed now\n    function setDeployedStatus() external {\n        // Only guardian can lock this down\n        require(msg.sender == guardian, \"Is not guardian account\");\n        // Set it now\n        storageInit = true;\n    }\n\n    // Protected storage node withdrawal address is not applicable to Frens Pools this section removed ~ 0xWildhare\n/*\n    // Get a node's withdrawal address\n    function getNodeWithdrawalAddress(address _nodeAddress) public override view returns (address) {\n        // If no withdrawal address has been set, return the nodes address\n        address withdrawalAddress = withdrawalAddresses[_nodeAddress];\n        if (withdrawalAddress == address(0)) {\n            return _nodeAddress;\n        }\n        return withdrawalAddress;\n    }\n\n    // Get a node's pending withdrawal address\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external override view returns (address) {\n        return pendingWithdrawalAddresses[_nodeAddress];\n    }\n\n    // Set a node's withdrawal address\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external override {\n        // Check new withdrawal address\n        require(_newWithdrawalAddress != address(0x0), \"Invalid withdrawal address\");\n        // Confirm the transaction is from the node's current withdrawal address\n        address withdrawalAddress = getNodeWithdrawalAddress(_nodeAddress);\n        require(withdrawalAddress == msg.sender, \"Only a tx from a node's withdrawal address can update it\");\n        // Update immediately if confirmed\n        if (_confirm) {\n            updateWithdrawalAddress(_nodeAddress, _newWithdrawalAddress);\n        }\n        // Set pending withdrawal address if not confirmed\n        else {\n            pendingWithdrawalAddresses[_nodeAddress] = _newWithdrawalAddress;\n        }\n    }\n\n    // Confirm a node's new withdrawal address\n    function confirmWithdrawalAddress(address _nodeAddress) external override {\n        // Get node by pending withdrawal address\n        require(pendingWithdrawalAddresses[_nodeAddress] == msg.sender, \"Confirmation must come from the pending withdrawal address\");\n        delete pendingWithdrawalAddresses[_nodeAddress];\n        // Update withdrawal address\n        updateWithdrawalAddress(_nodeAddress, msg.sender);\n    }\n\n    // Update a node's withdrawal address\n    function updateWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress) private {\n        // Set new withdrawal address\n        withdrawalAddresses[_nodeAddress] = _newWithdrawalAddress;\n        // Emit withdrawal address set event\n        emit NodeWithdrawalAddressSet(_nodeAddress, _newWithdrawalAddress, block.timestamp);\n    }\n*/\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) override external view returns (address r) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) override external view returns (uint256 r) {\n        return uintStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) override external view returns (string memory) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) override external view returns (bytes memory) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) override external view returns (bool r) {\n        return booleanStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) override external view returns (int r) {\n        return intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes32(bytes32 _key) override external view returns (bytes32 r) {\n        return bytes32Storage[_key];\n    }\n\n    /// @param _key The key for the record - added for Frens ~ 0xWildhare\n    function getArray(bytes32 _key) override external view returns (uint[] memory) {\n        return arrayStorage[_key];\n    }\n\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyLatestFrensNetworkContract override external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyLatestFrensNetworkContract override external {\n        uintStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string calldata _value) onlyLatestFrensNetworkContract override external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes calldata _value) onlyLatestFrensNetworkContract override external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyLatestFrensNetworkContract override external {\n        booleanStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyLatestFrensNetworkContract override external {\n        intStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes32(bytes32 _key, bytes32 _value) onlyLatestFrensNetworkContract override external {\n        bytes32Storage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setArray(bytes32 _key, uint[] calldata _value) onlyLatestFrensNetworkContract override external {\n        arrayStorage[_key] = _value;\n    }\n\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyLatestFrensNetworkContract override external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record - added for Frens ~ 0xWildhare\n    function deleteUint(bytes32 _key) onlyLatestFrensNetworkContract override external {\n        delete uintStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyLatestFrensNetworkContract override external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyLatestFrensNetworkContract override external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyLatestFrensNetworkContract override external {\n        delete booleanStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyLatestFrensNetworkContract override external {\n        delete intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes32(bytes32 _key) onlyLatestFrensNetworkContract override external {\n        delete bytes32Storage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteArray(bytes32 _key) onlyLatestFrensNetworkContract override external {\n        delete arrayStorage[_key];\n    }\n\n\n    /// @param _key The key for the record\n    /// @param _amount An amount to add to the record's value  - 0xWildhare removed safeMath\n    function addUint(bytes32 _key, uint256 _amount) onlyLatestFrensNetworkContract override external {\n        uintStorage[_key] += _amount;\n    }\n\n    /// @param _key The key for the record\n    /// @param _amount An amount to subtract from the record's value - 0xWildhare removed safeMath\n    function subUint(bytes32 _key, uint256 _amount) onlyLatestFrensNetworkContract override external {\n        uintStorage[_key] -= _amount;\n    }\n\n    /// @param _key The key for the record\n    /// @param _amount An uint to push into the record's array - added by 0xWildhare\n    function pushUint(bytes32 _key, uint256 _amount) onlyLatestFrensNetworkContract override external {\n        arrayStorage[_key].push(_amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}