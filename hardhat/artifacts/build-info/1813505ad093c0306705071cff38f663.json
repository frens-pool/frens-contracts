{
  "id": "1813505ad093c0306705071cff38f663",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.16",
  "solcLongVersion": "0.8.16+commit.07a7930e",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/FrensPoolShare.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n//import \"hardhat/console.sol\";\nimport \"./interfaces/IStakingPool.sol\";\nimport \"./interfaces/ISSVRegistry.sol\";\nimport \"./interfaces/IStakingPoolFactory.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport 'base64-sol/base64.sol';\nimport './ToColor.sol';\n\n\ncontract FrensPoolShare is ERC721Enumerable, Ownable {\n\n  using Strings for uint256;\n  using ToColor for bytes3;\n\n  uint private _tokenId;\n  mapping(uint => address) poolById;\n\n  IStakingPoolFactory factoryContract;\n  ISSVRegistry ssvRegistry;\n\n  constructor(address factoryAddress_, address ssvRegistryAddress_) ERC721(\"staking con amigos\", \"FRENS\") {\n    factoryContract = IStakingPoolFactory(factoryAddress_);\n    ssvRegistry = ISSVRegistry(ssvRegistryAddress_);\n  }\n\n  modifier onlyStakingPools(address _stakingPoolAddress) {\n    require(factoryContract.doesStakingPoolExist(_stakingPoolAddress), \"must be a staking pool\");\n    _;\n  }\n\n  function incrementTokenId() public onlyStakingPools(msg.sender) returns(uint){\n    _tokenId++;\n    return _tokenId;\n  }\n\n  function mint(address userAddress, uint id, address _pool) public onlyStakingPools(msg.sender) {\n    poolById[id] = _pool;\n    _safeMint(userAddress,id);\n  }\n\n  function exists(uint _id) public view returns(bool){\n    return _exists(_id);\n  }\n\n  function getPoolById(uint _id) public view returns(address){\n    return poolById[_id];\n  }\n\n  //art stuff\n\n\n  function tokenURI(uint256 id) public view override returns (string memory) {\n    require(_exists(id), \"not exist\");\n    address poolAddress = poolById[id];\n    IStakingPool stakingPool = IStakingPool(payable(poolAddress));\n    uint depositForId = stakingPool.getDepositAmount(id);\n    string memory depositString = getEthDecimalString(depositForId);\n    uint shareForId = stakingPool.getDistributableShare(id);\n    string memory shareString = getEthDecimalString(shareForId);\n    string memory stakingPoolAddress = Strings.toHexString(uint160(poolAddress), 20);\n    (uint32[] memory poolOperators, bytes memory pubKey) = getOperatorsForPool(poolAddress);\n    //string memory pubKeyString = string(abi.encodePacked(pubKey));\n    string memory poolState = stakingPool.getState();\n    string memory name = string(abi.encodePacked('fren pool share #',id.toString()));\n    string memory description = string(abi.encodePacked(\n      'this fren has a deposit of ',depositString,\n      ' Eth in pool ', stakingPoolAddress,\n      ' with claimable balance of ', shareString, ' Eth'));\n    string memory image = Base64.encode(bytes(generateSVGofTokenById(id)));\n\n    return\n      string(\n        abi.encodePacked(\n          'data:application/json;base64,',\n          Base64.encode(\n            bytes(\n              abi.encodePacked(\n                '{\"name\":\"',\n                name,\n                '\", \"description\":\"',\n                description,\n                '\", \"external_url\":\"https://frens.fun/token/',\n                id.toString(),\n                '\", \"attributes\": [{\"trait_type\": \"pool\", \"value\":\"',\n                stakingPoolAddress,\n                '\"},{\"trait_type\": \"deposit\", \"value\": \"',\n                depositString, ' Eth',\n                '\"},{\"trait_type\": \"claimable\", \"value\": \"',\n                shareString, ' Eth',\n                '\"},{\"trait_type\": \"pool state\", \"value\": \"',\n                poolState,\n                '\"},{\"trait_type\": \"operator1\", \"value\": \"',\n                poolOperators.length == 0 ? \"Not Set\" : uint2str(poolOperators[0]),\n                '\"},{\"trait_type\": \"operator2\", \"value\": \"',\n                poolOperators.length == 0 ? \"Not Set\" : uint2str(poolOperators[1]),\n                '\"},{\"trait_type\": \"operator3\", \"value\": \"',\n                poolOperators.length == 0 ? \"Not Set\" : uint2str(poolOperators[2]),\n                '\"},{\"trait_type\": \"operator4\", \"value\": \"',\n                poolOperators.length == 0 ? \"Not Set\" : uint2str(poolOperators[3]),\n                '\"}], \"image\": \"',\n                'data:image/svg+xml;base64,',\n                image,\n                '\"}'\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function generateSVGofTokenById(uint256 id) internal view returns (string memory) {\n\n    string memory svg = string(abi.encodePacked(\n      '<svg width=\"400\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\">',\n        renderTokenById(id),\n      '</svg>'\n    ));\n\n    return svg;\n  }\n\n  function getColor(address a) internal pure returns(string memory){\n    bytes32 colorRandomness = keccak256(abi.encodePacked(address(a)));\n    bytes3 colorBytes = bytes2(colorRandomness[0]) | ( bytes2(colorRandomness[1]) >> 8 ) | ( bytes3(colorRandomness[2]) >> 16 );\n    string memory color = colorBytes.toColor();\n    return color;\n  }\n\n\n  // Visibility is `public` to enable it being called by other contracts for composition.\n  function renderTokenById(uint256 id) public view returns (string memory) {\n\n    IStakingPool stakingPool = IStakingPool(payable(poolById[id]));\n    uint depositForId = stakingPool.getDepositAmount(id);\n    string memory depositString = getEthDecimalString(depositForId);\n    uint shareForId = stakingPool.getDistributableShare(id);\n    string memory shareString = getEthDecimalString(shareForId);\n    string memory poolColor = getColor(address(stakingPool));\n    string memory textColor = getColor(ownerOf(id));\n\n    string memory render = string(abi.encodePacked(\n\n      //\"frens\" lettering stlying\n      '<defs><style>@font-face{font-family:\"Permanent Marker\";src:url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAr4AA0AAAAAD/gAAQBCAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABMAAAAE8AAABgYbLjY2NtYXAAAAGAAAAAWgAAAVoM5AMpY3Z0IAAAAdwAAAACAAAAAgAVAABmcGdtAAAB4AAAAPcAAAFhkkHa+mdseWYAAALYAAAFogAAB9S42zT5aGVhZAAACHwAAAA2AAAANghIWvtoaGVhAAAItAAAAB0AAAAkBH0BgGhtdHgAAAjUAAAAHAAAABwPZ//6bG9jYQAACPAAAAAQAAAAEAUYB0JtYXhwAAAJAAAAAB4AAAAgAhQCGW5hbWUAAAkgAAABuwAAA1RQW8M9cG9zdAAACtwAAAAUAAAAIP+2ADpwcmVwAAAK8AAAAAcAAAAHaAaMhXicY2BhMmacwMDKwMC0h6mLgYGhB0Iz3mUwZgRymRhgoIGBQV2AAQFcPP2CGBwYFBiCmfL+H2awZSlgdAUKgzQxMBUyfQNSCgwMAE76DFAAeJxjYGBgZoBgGQZGBhAIAfIYwXwWBgsgzcXAwcAEhAoMbgx+DMH//wPFFBhcgeyg////P/y/9/+2/5uheqGAkY2BIGAkrISBgYkZymABYlYiTB08AAC6og4SAAAAFQAAeJxdkD1OxDAQhWMSFnIDJAvJI2spVrboqVI4kVCasKHwNPxIuxLZOyCloXHBWd52KXMxBN4EVkDj8Xuj+fRmkJgaeeP3QrzzID7f4C73efr4YCGMUmXnIJ4sTgzEiixSoyqky2rtNaugwu0mqEq9PG+QLacaG9vA1wpJ67v43ntCwfL43TLfWGQHTDZhAkfA7huwmwBx/sPi1NQK6VXj7zx6J1E4lkSqxNh4jE4Ss8XimDHW1+5iTntmsFhZnM+E1qOQSDiEWWlCH4IMcYMfPf7Vg0j+G8VvI16gHETfTJ1ekzwYmjTFhOwsclO3vowRie0X5WBrXAB4nHVVSa8j1RX2ufNUt0bf8vTK03NV+/Haz/0GG7ppN69BCETSCVkECSEWvUDZRELJhh3LREL8g/yN8ANgySqLiA1LdiAQEkp2eTlVhiWusst1zx2/4Zxe71c+0NN3/yX/IN/0/t7r7TfQbOj+QJsDlAe63+Cf9nUfLq/C1XV9c1nBrqmgDB6K0nNZe9J4kEGUYbcPol/RfQXS0+YMGlHLetFFD6Q8wL6N0b2nUtRLDxt4UcmISEkp0ZoTQZVMslylsWLCLdbb8fY3bzy7As6oAiI5A1eXAIQk683VzW6kIp861bcc6NkHD4DpJM0cZ7yo19sJl9zMrV/5bObWu+3Vang7MT7yllMqVH7x6M37NlaT3z57Y6GCjJv1OtVJnCiwJNSnqzJZ1U2RlbEWcWq1ppJyQgjl/bHRSmo1rhKlk4QCY0QKaoNimuDiIkstmOCiMQLEOOWcj16aCSIEOJwmTR3h3klozkqrCOeGZB0Hd9/d/Yd8TX7ofXbkABEvEWUEDe961zYt6qYlBy5gv7tu6iewewLHON6Xu/0On08g7K4u25EVTCFIDzHUi+XC4ybxCgJbpCjxd3oc+whkKdu+OCQmTY0RpKbrVS8XXXe8S1Esi/alH46hbhvdbpq6Xfe8mhGajyZRzC03iLESwIjgggoWa84Vd4IwSogBU27LcjtQuZKOpkn1/HFfOHGdmkRyRZWVwssoilT1uz88O1ERFcg4APRRB5ywogmTl6aNtgJ1gwOAXgiTpyrTg1kS1pllxBRaMIKCAQ0taYazECexwn05qhg3DPkj7Mv0MBmMU40UKcYSZYPVnnPAxVAZynHlUJuRcBExAhsSISkQJpgKHPcz47HkkqhB6VABIKPcCg5MYasVw4VhMY5H/qWGBAVuaGTNy4rijrpzSAkgKHaVkcwIKC+YoFmZnyj0AaFgBIa8Xl6Uynf6+PHuf+Qr8m3vr6gPdJcIZS0kuvM6XB3lUtES/VaBKDDSBE9KZB2fEMqjg7EDkozu87T8heIGfYuz4QyeLj39p2EiznF/3ulyWqYaZc/lydNXX51Obs6n6FGCAHE8AWeKMySUtqQS+cLNNNU20lplwzDI/IAJIZ2lzijQgefBcYL/eDqarucPnpXGKKWINfx9NRykCIrCS67ONykDM1SHv33y6WtmfHpRCcYEEiSxi0+iOML1YHSzfzgd/v75hw/tbLH0JO1ntFiVZjAoZHV9uZudPB7F54GhALhToyDd6fuv0CJkOo7RbaRn7v6N+e773p86NBGFq/qAUB2gboHcdYB1Fir7LaoV6SNqxaVsEcSboJF2ZZfGMFc2RyyRDbEhcgNytyGAQbTXBiaofCulkZJzChDFLnZ+yqfbB4fN4OVcxcrnsdcEKGGP33l+T5NqfrKcTpeT2dh6QSUeQRoTmdMP33lhd28RKGAOKhKrEEFjqYhwIIW3o9l0wM/eW/OzP0Kqwmo5z6hNczF9evt4TKwavHZ7ydPmBN0ZR8vmXiq0turmdn2SMpGFGDeoMc/aqhorBsC9d+BH82Q0PClAwL3LEUUGOWYxnYKOrIN/5dN5M+ardHW/qyHm7ifyOWL6ca+XH1CQnSavFyi8DrNfMPq5XIhwBLMFskMaRYnhfVsVZJdUlteY0TYEv4B15UBaBeP7zQaWm7ayHHMh9kUE0NREr863fUV2f/7LR0+Zjx04TEWD6P67p7aaz7w9xXMQORgWNBtlCquFYOg1atJX3n73nFmqy/E4UhGKhhNggImAUyL8+s3bRxMaedd6n2ERGD0s3CA9e2tJhJUxfBHnNsmS0ekwFZha6krmLvQLa4d9lUgrmAOtiZHoeqGlQODSwdhiCornebUtz1+/aSIsbgg6ISqxYLGeUIoq18NRqVgymXssWzE2U4Z9oswqxYiLBU6a9v4PxderQQAAAAEAAAABAEJAxpAWXw889QgLBAAAAAAAyTVKIAAAAADVK8zX/+z/1QLcAu8AAAAJAAIAAAAAAAB4nGNgZGBgKfi3m0Geae//NwwgwMiACtgBhGwFAAAAAAF7AAABewAAAoIACQJN/+wCvf/xApYACgJOAAoAAAAGAAwAzgHeAoQDLgPqeJxjYGRgYGBn2M7AxAACjGCSiwHIZUwEMQEVgwExAAB4nJVRzWrbQBD+1nFSCq3praWnoaekxPrx0ToF2wHRxBin5K4oiyyiSGKl2PjSJ8gL5C36DD30IfoYfYJ+Xi/BmJRSLbv7zcw33+yMALzDTyhsv4h7ixX9kcMdvMIXhw/wCXOHu/iA1uFDvMWjw0d4jyeHe/iM78xS3de0lvjlsIKomcMd9FTt8AHG6pvDXQTqh8OH+Kh+O3wEr/PG4R6+doajql6bPFu0cpyeyCAIA7lZy3lVtjLOS21OJS5TT86KQiytEaMbbZb61ptpc5+UmszLxNxpM9fZQ5GY0AuCMBrH03n0zNgS+o6xnyjOf61Nk1elWIW/5C7ath76/mq18pI6SRfaq0zmF3mqy0Y3/kU8mkyvJv2BF2CECjXWMMiRYcF5C46R4oT3AAFCbsENGYJzckvLGJNdQjPrlFZMnMIjOkPBJTtqjbU07w17yfOWzJm17pFYla3mJS2DOxuZ88zwQK2NL2RGYN8SsXKMKePRCxq7Cv09jX9VlD3+tfU27GPTs+y84f/qbmbQcsJD+FwruzxGau6UUU2rIi9jtGC11Go2dmI+LtjtCBN2fMWzzz/CV/wB3KikGwB4nGNgZgCD/5sZjBkwATsALLAB8LgB/4WwBI0A) format(\"woff\"); font-weight:normal;font-style:normal;}</style></defs>'\n\n      '<circle cx=\"200\" cy=\"200\" r=\"170\" fill=\"#',\n        poolColor,\n      '\"/>,'\n      //shaka\n      '<g transform=\"matrix(.707107 -.70710678 .70710678 .707107 16 153)\" stroke=\"none\" fill-rule=\"nonzero\"><path d=\"M196.2512 233.555c8.3009 0 9.8263-6.9913 8.1372-12.24-1.6351-5.0915-6.5388-9.2041-16.1456-13.4342-18.6514-8.1867-44.9124-15.3737-44.9124-17.8813s11.2595-.665 25.952-3.4659c11.1504-2.1342 12.204-6.4434 13.6215-13.9247 1.6891-8.8516-4.0689-15.5493-4.0689-15.5493s9.8988-3.9178 9.8988-16.099-11.4057-17.6453-11.4057-17.6453 4.6668-3.0747 5.866-10.2425c1.4894-8.8319-4.4865-16.6662-12.6045-22.5219-6.8467-4.9352-15.5279-9.3614-21.9741-12.0446-5.5393-2.3102-9.6994-3.936-23.3019-3.7602-10.9517.1372-16.3081-.2153-17.144-3.9951-.6356-2.8202 1.6347-5.7382 3.904-12.8275 2.8157-8.7339 10.0441-31.256-3.0874-51.3503-5.0481-7.7155-18.1245-7.598-20.7756-4.9148-5.0497 5.1108 1.5253 15.3338-1.98 33.645-2.4151 12.6321-5.3214 21.249-17.2164 30.9824-6.8661 5.6207-22.0854 14.963-33.8356 30.6297-4.3587 5.7979-17.9428 4.7004-25.5348 3.5652-3.032-.4507-5.8841 1.7227-6.4831 4.9739-6.0301 32.3922-1.9433 66.2534.0905 79.3165.4911 3.1726 3.1423 5.4245 6.1208 5.1895 6.7737-.5086 18.2526-1.2925 21.8119-.8611 7.1738.8611 21.9389 12.4552 42.1698 18.6239 17.9615 5.4838 43.5155 10.5559 54.9387 11.2413s59.8411 14.5903 67.9588 14.5903z\" fill=\"#ffca28\"/><path d=\"M131.2159 74.786v.3141c6.9566.0192 13.2219 7.0502 12.9677 14.5512-.31 8.7336-11.6234 12.3186-7.3188 24.6756.8706 2.5251 11.4597 6.6976 8.8616 19.2512-2.1244 10.2827-10.0614 9.5562-10.0614 14.7071 0 8.7359 9.4624 14.5704 10.1345 24.5197s-4.0677 11.5345-3.7421 14.9828c.2368 2.5466 1.2729 3.4652 1.2729 2.1941 0-2.5082 11.2594-.6666 25.951-3.4675 11.1514-2.1342 12.2049-6.4434 13.6224-13.9252 1.6891-8.8511-4.0695-15.5488-4.0695-15.5488s9.8995-3.9183 9.8995-16.0979-11.4057-17.6469-11.4057-17.6469 4.6667-3.0743 5.8647-10.242c1.4906-8.8319-4.4856-16.6662-12.6037-22.5221-6.8469-4.9351-15.5274-9.3618-21.9737-12.0429-4.632-1.94-8.3376-3.3884-17.3994-3.7025z\" fill=\"#ffb300\"/><path d=\"M135.3022 150.9304c-.1636-4.1328.091-5.2682 2.1071-5.8173s5.7028.9998 5.7028.9998c14.8553-1.3524 30.8928 2.0552 35.7408 10.9277 0 0-23.609-1.8607-32.4723-1.3523-6.9549.4122-10.8781.4892-11.0784-4.7579zm42.0433-27.6145c-14.5104-5.4647-31.4737-6.4432-36.486-6.4432-7.1193 0-5.7568-11.6727-2.7244-13.8658 2.0889-.9203 4.5581 2.3106 6.5015 3.0748 5.7759 2.2908 30.1841 3.7407 32.7089 17.2342zm.9263 109.5939c-26.6423-5.0914-62.148-15.1978-90.3348-19.1146-20.7393-2.878-32.3452-11.5346-41.0801-16.392-4.9223-2.7417-8.8089-4.9147-12.713-5.9722-10.3344-2.8205-18.2891-1.2347-24.7356-1.489s7.7542-10.0275 26.4972-6.0523c4.758.9998 9.1353 3.7409 14.2568 6.5999 8.8262 4.9161 19.6143 12.241 39.3193 15.7064 11.0417 1.9591 27.8048 3.9566 43.5505 8.2251 12.4227 3.35 46.9653 15.2178 58.9874 16.8051 6.1574.8227 11.587-.9805 11.606-.9805 0 0-1.0361 2.6641-5.2309 4.0149-4.4679 1.45-9.7167.6467-20.1228-1.3508zm-62.0753-158.301c-3.7771.5875-11.986-2.0552-8.5724-10.947 5.8122-15.1194 6.2843-20.3472 6.0476-35.5457-.1812-10.8894-3.3052-18.2322-5.6474-22.6781 0 0 18.8516 13.7094 9.3162 56.5404-1.3982 6.2276-1.144 12.6304-1.144 12.6304zm61.0586 109.1441s-4.2854 2.8393-10.0614 5.0142c-5.7934 2.1727-15.4195 3.9951-19.233 4.0143s-8.355-4.3284-5.0847-5.9542c3.2511-1.6044 34.3791-3.0743 34.3791-3.0743z\" fill=\"#eda600\"/></g>',\n      //ethlogo (partial)\n      '<polygon points=\"200,359 80,220 98,195 200,256\" fill=\"#',\n        poolColor,\n      '\"/>',\n      '<polygon points=\"200,359 98,215 200,276\" fill=\"#8c8c8c\" />',\n      '<polygon points=\"200,359 302,215 200,276\" fill=\"#3c3c3b\" />',\n      //frens text\n      '<text font-size=\"122\" x=\"5\" y=\"240\" font-family=\"Permanent Marker\"  opacity=\".4\" fill=\"#',\n        textColor,\n      '\">FRENS</text>',\n      //frens Text outline\n      '<text font-size=\"122\" x=\"5\" y=\"240\" font-family=\"Permanent Marker\" fill=\"none\"  stroke-width=\"2\" stroke=\"#',\n        textColor,\n      '\">FRENS</text>'\n      //deposit text\n      '<text font-size=\"50\" text-anchor=\"middle\" x=\"200\" y=\"135\" fill=\"#FF69B4\" stroke=\"#00EDF5\" font-weight=\"Bold\" font-family=\"Sans-Serif\" opacity=\".8\">',\n        depositString, ' Eth',\n      '</text>',\n      //claimable text\n      '<text font-size=\"25\" text-anchor=\"middle\" x=\"200\" y=\"300\" fill=\"#FF69B4\" stroke=\"#00EDF5\" font-weight=\"Bold\" font-family=\"Sans-Serif\" >',\n        shareString, ' Eth Claimable',\n      '</text>'\n\n\n      ));\n\n    return render;\n  }\n\n\n  function getEthDecimalString(uint amountInWei) public pure returns(string memory){\n    string memory leftOfDecimal = uint2str(amountInWei / 1 ether);\n    uint rightOfDecimal = (amountInWei % 1 ether) / 10**14;\n    string memory rod = uint2str(rightOfDecimal);\n    if(rightOfDecimal < 1000) rod = string.concat(\"0\", rod);\n    if(rightOfDecimal < 100) rod = string.concat(\"0\", rod);\n    if(rightOfDecimal < 10) rod = string.concat(\"0\", rod);\n    return string.concat(leftOfDecimal, \".\", rod);\n  }\n\n  function getOperatorsForPool(address poolAddress) public view returns (uint32[] memory, bytes memory) {\n    IStakingPool stakingPool = IStakingPool(payable(poolAddress));\n    bytes memory poolPubKey = stakingPool.getPubKey();\n    uint32[] memory poolOperators = ssvRegistry.getOperatorsByValidator(poolPubKey);\n    return(poolOperators, poolPubKey);\n  }\n\n\n  function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n      if (_i == 0) {\n          return \"0\";\n      }\n      uint j = _i;\n      uint len;\n      while (j != 0) {\n          len++;\n          j /= 10;\n      }\n      bytes memory bstr = new bytes(len);\n      uint k = len;\n      while (_i != 0) {\n          k = k-1;\n          uint8 temp = (48 + uint8(_i - _i / 10 * 10));\n          bytes1 b1 = bytes1(temp);\n          bstr[k] = b1;\n          _i /= 10;\n      }\n      return string(bstr);\n  }\n}\n"
      },
      "contracts/interfaces/IStakingPool.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IStakingPool{\n  function deposit(address userAddress) external payable;\n\n  function addToDeposit(uint _id) external payable;\n\n  function withdraw(uint _id, uint _amount) external;\n\n  function distribute() external;\n\n  function getShare(uint _id) external view returns(uint);\n\n  function getDistributableShare(uint _id) external view returns(uint);\n\n  function getPubKey() external view returns(bytes memory);\n\n  function getState() external view returns(string memory);\n\n  function getDepositAmount(uint _id) external view returns(uint);\n\n\n  function stake(\n    bytes calldata pubkey,\n    bytes calldata withdrawal_credentials,\n    bytes calldata signature,\n    bytes32 deposit_data_root\n  ) external;\n\n    function unstake() external;\n\n}\n"
      },
      "contracts/interfaces/ISSVRegistry.sol": {
        "content": "// File: contracts/ISSVRegistry.sol\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.2;\n\ninterface ISSVRegistry {\n    struct Oess {\n        uint32 operatorId;\n        bytes sharedPublicKey;\n        bytes encryptedKey;\n    }\n\n    /** errors */\n    error ExceedRegisteredOperatorsByAccountLimit();\n    error OperatorDeleted();\n    error ValidatorAlreadyExists();\n    error ExceedValidatorLimit();\n    error OperatorNotFound();\n    error InvalidPublicKeyLength();\n    error OessDataStructureInvalid();\n\n    /**\n     * @dev Initializes the contract\n     */\n    function initialize() external;\n\n    /**\n     * @dev Registers a new operator.\n     * @param name Operator's display name.\n     * @param ownerAddress Operator's ethereum address that can collect fees.\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\n     * @param fee The fee which the operator charges for each block.\n     */\n    function registerOperator(string calldata name, address ownerAddress, bytes calldata publicKey, uint64 fee) external returns (uint32);\n\n    /**\n     * @dev removes an operator.\n     * @param operatorId Operator id.\n     */\n    function removeOperator(uint32 operatorId) external;\n\n    /**\n     * @dev Updates an operator fee.\n     * @param operatorId Operator id.\n     * @param fee New operator fee.\n     */\n    function updateOperatorFee(\n        uint32 operatorId,\n        uint64 fee\n    ) external;\n\n    /**\n     * @dev Updates an operator fee.\n     * @param operatorId Operator id.\n     * @param score New score.\n     */\n    function updateOperatorScore(\n        uint32 operatorId,\n        uint32 score\n    ) external;\n\n    /**\n     * @dev Registers a new validator.\n     * @param ownerAddress The user's ethereum address that is the owner of the validator.\n     * @param publicKey Validator public key.\n     * @param operatorIds Operator ids.\n     * @param sharesPublicKeys Shares public keys.\n     * @param sharesEncrypted Encrypted private keys.\n     */\n    function registerValidator(\n        address ownerAddress,\n        bytes calldata publicKey,\n        uint32[] calldata operatorIds,\n        bytes[] calldata sharesPublicKeys,\n        bytes[] calldata sharesEncrypted\n    ) external;\n\n    /**\n     * @dev removes a validator.\n     * @param publicKey Validator's public key.\n     */\n    function removeValidator(bytes calldata publicKey) external;\n\n    function enableOwnerValidators(address ownerAddress) external;\n\n    function disableOwnerValidators(address ownerAddress) external;\n\n    function isLiquidated(address ownerAddress) external view returns (bool);\n\n    /**\n     * @dev Gets an operator by operator id.\n     * @param operatorId Operator id.\n     */\n    function getOperatorById(uint32 operatorId)\n        external view\n        returns (\n            string memory,\n            address,\n            bytes memory,\n            uint256,\n            uint256,\n            uint256,\n            bool\n        );\n\n    /**\n     * @dev Returns operators for owner.\n     * @param ownerAddress Owner's address.\n     */\n    function getOperatorsByOwnerAddress(address ownerAddress)\n        external view\n        returns (uint32[] memory);\n\n    /**\n     * @dev Gets operators list which are in use by validator.\n     * @param validatorPublicKey Validator's public key.\n     */\n    function getOperatorsByValidator(bytes calldata validatorPublicKey)\n        external view\n        returns (uint32[] memory);\n\n    /**\n     * @dev Gets operator's owner.\n     * @param operatorId Operator id.\n     */\n    function getOperatorOwner(uint32 operatorId) external view returns (address);\n\n    /**\n     * @dev Gets operator current fee.\n     * @param operatorId Operator id.\n     */\n    function getOperatorFee(uint32 operatorId)\n        external view\n        returns (uint64);\n\n    /**\n     * @dev Gets active validator count.\n     */\n    function activeValidatorCount() external view returns (uint32);\n\n    /**\n     * @dev Gets an validator by public key.\n     * @param publicKey Validator's public key.\n     */\n    function validators(bytes calldata publicKey)\n        external view\n        returns (\n            address,\n            bytes memory,\n            bool\n        );\n\n    /**\n     * @dev Gets a validator public keys by owner's address.\n     * @param ownerAddress Owner's Address.\n     */\n    function getValidatorsByAddress(address ownerAddress)\n        external view\n        returns (bytes[] memory);\n\n    /**\n     * @dev Get validator's owner.\n     * @param publicKey Validator's public key.\n     */\n    function getValidatorOwner(bytes calldata publicKey) external view returns (address);\n\n    /**\n     * @dev Get validators amount per operator.\n     * @param operatorId Operator public key\n     */\n    function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32);\n}"
      },
      "contracts/interfaces/IStakingPoolFactory.sol": {
        "content": "pragma solidity >=0.8.0 <0.9.0;\n//SPDX-License-Identifier: MIT\n\ninterface IStakingPoolFactory {\n\n  function doesStakingPoolExist(address stakingPoolAddress) external view returns(bool);\n\n}\n"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
      },
      "@openzeppelin/contracts/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Strings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
      },
      "base64-sol/base64.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
      },
      "contracts/ToColor.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary ToColor {\n    bytes16 internal constant ALPHABET = '0123456789abcdef';\n\n    function toColor(bytes3 value) internal pure returns (string memory) {\n      bytes memory buffer = new bytes(6);\n      for (uint256 i = 0; i < 3; i++) {\n          buffer[i*2+1] = ALPHABET[uint8(value[i]) & 0xf];\n          buffer[i*2] = ALPHABET[uint8(value[i]>>4) & 0xf];\n      }\n      return string(buffer);\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
      },
      "@openzeppelin/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "@openzeppelin/contracts/interfaces/IERC721Enumerable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/IERC721Enumerable.sol\";\n"
      },
      "contracts/StakingPool.sol": {
        "content": "pragma solidity >=0.8.0 <0.9.0;\n//SPDX-License-Identifier: MIT\n\n//import \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\";\nimport \"./interfaces/IStakingPoolFactory.sol\";\nimport \"./interfaces/IDepositContract.sol\";\nimport \"./interfaces/IFrensPoolShare.sol\";\n\n\ncontract StakingPool is Ownable {\n\n  event Deposit(address depositContractAddress, address caller);\n\n  mapping (uint => uint) public depositAmount;\n  uint public totalDeposits;\n  uint[] public idsInThisPool;\n\n  enum State { acceptingDeposits, staked, exited }\n  State currentState;\n\n  address public depositContractAddress;\n  address private rightfulOwner;\n  bytes public validatorPubKey;\n\n  IDepositContract depositContract;\n  IStakingPoolFactory factoryContract;\n  IFrensPoolShare frensPoolShare;\n\n  constructor(address depositContractAddress_, address factory_, address frensPoolShareAddress_) {\n    currentState = State.acceptingDeposits;\n    depositContractAddress = depositContractAddress_;\n    depositContract = IDepositContract(depositContractAddress);\n    factoryContract = IStakingPoolFactory(factory_);\n    frensPoolShare = IFrensPoolShare(frensPoolShareAddress_);\n\n  }\n\n  function deposit(address userAddress) public payable {\n    require(currentState == State.acceptingDeposits, \"not accepting deposits\");\n    require(msg.value != 0, \"must deposit ether\");\n    uint id = frensPoolShare.incrementTokenId();\n    depositAmount[id] = msg.value;\n    totalDeposits += msg.value;\n    idsInThisPool.push(id);\n    frensPoolShare.mint(userAddress, id, address(this));\n  }\n\n  function addToDeposit(uint _id) public payable {\n    require(frensPoolShare.exists(_id), \"not exist\");\n    require(frensPoolShare.getPoolById(_id) == address(this), \"wrong staking pool\");\n    require(currentState == State.acceptingDeposits, \"not accepting deposits\");\n    require(currentState == State.acceptingDeposits);\n    depositAmount[_id] += msg.value;\n    totalDeposits += msg.value;\n  }\n\n  function withdraw(uint _id, uint _amount) public {\n    require(currentState != State.staked, \"cannot withdraw once staked\");\n    require(msg.sender == frensPoolShare.ownerOf(_id), \"not the owner\");\n    require(depositAmount[_id] >= _amount, \"not enough deposited\");\n    depositAmount[_id] -= _amount;\n    totalDeposits -= _amount;\n    payable(msg.sender).transfer(_amount);\n  }\n\n  function distribute() public {\n    require(currentState == State.staked, \"use withdraw when not staked\");\n    uint contractBalance = address(this).balance;\n    require(contractBalance > 100, \"minimum of 100 wei to distribute\");\n    for(uint i=0; i<idsInThisPool.length; i++) {\n      uint id = idsInThisPool[i];\n      address tokenOwner = frensPoolShare.ownerOf(id);\n      uint share = _getShare(id, contractBalance);\n      payable(tokenOwner).transfer(share);\n    }\n  }\n\n  function _getShare(uint _id, uint _contractBalance) internal view returns(uint) {\n    if(depositAmount[_id] == 0) return 0;\n    uint calcedShare =  _contractBalance * depositAmount[_id] / totalDeposits;\n    if(calcedShare > 1){\n      return(calcedShare - 1); //steal 1 wei to avoid rounding errors drawing balance negative\n    }else return 0;\n  }\n\n  function getShare(uint _id) public view returns(uint) {\n    uint contractBalance = address(this).balance;\n    return _getShare(_id, contractBalance);\n  }\n\n  function getDistributableShare(uint _id) public view returns(uint) {\n    if(currentState == State.acceptingDeposits) {\n      return 0;\n    } else {\n      return getShare(_id);\n    }\n  }\n\n  function getPubKey() public view returns(bytes memory){\n    return validatorPubKey;\n  }\n\n  function setPubKey(bytes memory publicKey) public onlyOwner{\n    validatorPubKey = publicKey;\n  }\n\n  function getState() public view returns(string memory){\n    if(currentState == State.staked) return \"staked\";\n    if(currentState == State.acceptingDeposits) return \"accepting deposits\";\n    if(currentState == State.exited) return \"exited\";\n    return \"state failure\"; //should never happen\n  }\n\n  function getDepositAmount(uint _id) public view returns(uint){\n    return depositAmount[_id];\n  }\n\n\n  function stake(\n    bytes calldata pubkey,\n    bytes calldata withdrawal_credentials,\n    bytes calldata signature,\n    bytes32 deposit_data_root\n  ) public onlyOwner{\n    require(address(this).balance >= 32 ether, \"not enough eth\");\n    require(currentState == State.acceptingDeposits, \"wrong state\");\n    bytes memory zero;\n    if(keccak256(validatorPubKey) != keccak256(zero)){\n      require(keccak256(validatorPubKey) == keccak256(pubkey), \"pubkey does not match stored value\");\n    } else validatorPubKey = pubkey;\n    currentState = State.staked;\n    uint value = 32 ether;\n    //get expected withdrawal_credentials based on contract address\n    bytes memory withdrawalCredFromAddr = _toWithdrawalCred(address(this));\n    //compare expected withdrawal_credentials to provided\n    require(keccak256(withdrawal_credentials) == keccak256(withdrawalCredFromAddr), \"withdrawal credential mismatch\");\n    depositContract.deposit{value: value}(pubkey, withdrawal_credentials, signature, deposit_data_root);\n    emit Deposit(depositContractAddress, msg.sender);\n  }\n\n  function _toWithdrawalCred(address a) private pure returns (bytes memory) {\n    uint uintFromAddress = uint256(uint160(a));\n    bytes memory withdralDesired = abi.encodePacked(uintFromAddress + 0x0100000000000000000000000000000000000000000000000000000000000000);\n    return withdralDesired;\n  }\n\n//REMOVE rugpull is for testing only and should not be in the mainnet version\n  function rugpull() public onlyOwner{\n    payable(msg.sender).transfer(address(this).balance);\n  }\n//REMOVE setFrensPoolShare is for testing only and should not be in the mainnet version\n  function setFrensPoolShare(address frensPoolShareAddress_) public onlyOwner {\n    frensPoolShare = IFrensPoolShare(frensPoolShareAddress_);\n  }\n\n  function unstake() public {\n    distribute();\n    currentState = State.exited;\n    //TODO what else needs to be in here (probably a limiting modifier and/or some requires)\n  }\n\n\n  // to support receiving ETH by default\n  receive() external payable {\n    /*\n    _tokenId++;\n    uint256 id = _tokenId;\n    depositAmount[id] = msg.value;\n    _mint(msg.sender, id);\n    */\n  }\n\n  fallback() external payable {}\n}\n"
      },
      "contracts/interfaces/IDepositContract.sol": {
        "content": "\npragma solidity >=0.8.0 <0.9.0;\n//SPDX-License-Identifier: MIT\n\n\ninterface IDepositContract {\n\n    function deposit(\n        bytes calldata pubkey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external payable;\n\n}\n"
      },
      "contracts/interfaces/IFrensPoolShare.sol": {
        "content": "pragma solidity >=0.8.0 <0.9.0;\n//SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\";\n\n\ninterface IFrensPoolShare is IERC721Enumerable{\n  function incrementTokenId() external returns(uint);\n\n  function mint(address userAddress, uint id, address _pool) external;\n\n  function exists(uint _id) external returns(bool);\n\n  function getPoolById(uint _id) external view returns(address);\n\n\n}\n"
      },
      "contracts/StakingPoolFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./StakingPool.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\ncontract StakingPoolFactory is Ownable{\n\n\n\n  StakingPool[] public stakingPools;\n  mapping(address => bool) existsStakingPool;\n\n\n  address depositContractAddress;\n  address ssvRegistryAddress;\n  address frensPoolShareAddress;\n\n  event Create(\n    uint indexed contractId, //do we use this for anything?\n    address indexed contractAddress,\n    address creator,\n    address owner,\n    address depositContractAddress\n  );\n\n  event Owners(\n    address indexed contractAddress,\n    address[] owners,\n    uint256 indexed signaturesRequired\n  );\n\n\n  constructor(address depContAddress_, address ssvRegistryAddress_) {\n    depositContractAddress = depContAddress_;\n    ssvRegistryAddress = ssvRegistryAddress_;\n  }\n  function setFrensPoolShare(address frensPoolShareAddress_) public onlyOwner {\n    frensPoolShareAddress = frensPoolShareAddress_;\n  }\n\n\n  function create(\n    address owner_\n  ) public returns(address, uint) {\n    uint id = numberOfStakingPools();\n\n    StakingPool stakingPool = new StakingPool(depositContractAddress, address(this), frensPoolShareAddress);\n    stakingPools.push(stakingPool);\n    existsStakingPool[address(stakingPool)] = true;\n    StakingPool(stakingPool).transferOwnership(owner_);\n    emit Create(id, address(stakingPool), msg.sender, owner_, depositContractAddress);\n    return(address(stakingPool), id);\n  }\n\n  function numberOfStakingPools() public view returns(uint) {\n    return stakingPools.length;\n  }\n\n  function getStakingPool(uint256 _index) public view returns (\n    address stakingPoolAddress,\n    uint balance,\n    address owner\n  ) {\n    StakingPool stakingPool = stakingPools[_index];\n    return (address(stakingPool), address(stakingPool).balance, stakingPool.owner());\n  }\n\n  function doesStakingPoolExist(address _stakingPoolAddress) public view returns(bool){\n    return(existsStakingPool[_stakingPoolAddress]);\n  }\n\n\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "viaIR": true,
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "contracts": {
      "@openzeppelin/contracts/access/Ownable.sol": {
        "Ownable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Initializes the contract setting the deployer as the initial owner."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 7,
                "contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
        "ERC721": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "name_",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol_",
                  "type": "string"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "approved",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "_data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "tokenURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.",
            "kind": "dev",
            "methods": {
              "approve(address,uint256)": {
                "details": "See {IERC721-approve}."
              },
              "balanceOf(address)": {
                "details": "See {IERC721-balanceOf}."
              },
              "constructor": {
                "details": "Initializes the contract by setting a `name` and a `symbol` to the token collection."
              },
              "getApproved(uint256)": {
                "details": "See {IERC721-getApproved}."
              },
              "isApprovedForAll(address,address)": {
                "details": "See {IERC721-isApprovedForAll}."
              },
              "name()": {
                "details": "See {IERC721Metadata-name}."
              },
              "ownerOf(uint256)": {
                "details": "See {IERC721-ownerOf}."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "See {IERC721-safeTransferFrom}."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "See {IERC721-safeTransferFrom}."
              },
              "setApprovalForAll(address,bool)": {
                "details": "See {IERC721-setApprovalForAll}."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              },
              "symbol()": {
                "details": "See {IERC721Metadata-symbol}."
              },
              "tokenURI(uint256)": {
                "details": "See {IERC721Metadata-tokenURI}."
              },
              "transferFrom(address,address,uint256)": {
                "details": "See {IERC721-transferFrom}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_string_fromMemory": {
                  "entryPoint": 836,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 798,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234620003195762001653803803806200001d816200031e565b928339810190604081830312620003195780516001600160401b03908181116200031957836200004f91840162000344565b916020938482015183811162000319576200006b920162000344565b825190828211620003035760008054926001958685811c95168015620002f8575b88861014620002e4578190601f9586811162000291575b5088908683116001146200022d57849262000221575b5050600019600383901b1c191690861b1781555b81519384116200020d5784548581811c9116801562000202575b87821014620001ee57838111620001a6575b50859284116001146200014157839495509262000135575b5050600019600383901b1c191690821b1790555b60405161129c9081620003b78239f35b01519050388062000111565b9190601f1984169585845280842093905b8782106200018e5750508385961062000174575b505050811b01905562000125565b015160001960f88460031b161c1916905538808062000166565b80878596829496860151815501950193019062000152565b8582528682208480870160051c820192898810620001e4575b0160051c019086905b828110620001d8575050620000f9565b838155018690620001c8565b92508192620001bf565b634e487b7160e01b82526022600452602482fd5b90607f1690620000e7565b634e487b7160e01b81526041600452602490fd5b015190503880620000b9565b8480528985208994509190601f198416865b8c8282106200027a575050841162000260575b505050811b018155620000cd565b015160001960f88460031b161c1916905538808062000252565b8385015186558c979095019493840193016200023f565b9091508380528884208680850160051c8201928b8610620002da575b918a91869594930160051c01915b828110620002cb575050620000a3565b8681558594508a9101620002bb565b92508192620002ad565b634e487b7160e01b83526022600452602483fd5b94607f16946200008c565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200030357604052565b919080601f84011215620003195782516001600160401b03811162000303576020906200037a601f8201601f191683016200031e565b92818452828287010111620003195760005b818110620003a257508260009394955001015290565b85810183015184820184015282016200038c56fe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461011757806306fdde031461010e578063081812fc14610105578063095ea7b3146100fc57806323b872dd146100f357806342842e0e146100ea5780636352211e146100e157806370a08231146100d857806395d89b41146100cf578063a22cb465146100c6578063b88d4fde146100bd578063c87b56dd146100b45763e985e9c5146100ac57600080fd5b61000e610952565b5061000e610868565b5061000e6107de565b5061000e610680565b5061000e6105be565b5061000e61051b565b5061000e6104fc565b5061000e6104b4565b5061000e61048a565b5061000e610365565b5061000e610308565b5061000e6101fd565b5061000e610132565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e57602060043561015281610120565b63ffffffff60e01b166380ac58cd60e01b8114908115610190575b811561017f575b506040519015158152f35b6301ffc9a760e01b14905038610174565b635b5e139f60e01b8114915061016d565b60005b8381106101b45750506000910152565b81810151838201526020016101a4565b906020916101dd815180928185528580860191016101a1565b601f01601f1916010190565b9060206101fa9281815201906101c4565b90565b503461000e5760008060031936011261030557604051908080549060019180831c928082169283156102fb575b60209283861085146102e75785885260208801949081156102c6575060011461026e575b61026a8761025e81890382610784565b604051918291826101e9565b0390f35b6000805294509192917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8386106102b5575050509101905061025e8261026a388061024e565b805485870152948201948101610299565b60ff191685525050505090151560051b01905061025e8261026a388061024e565b634e487b7160e01b82526022600452602482fd5b93607f169361022a565b80fd5b503461000e57602036600319011261000e576020610327600435610ae3565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e5761037f610339565b60243561038b816109b0565b916001600160a01b038084169082168114610406576103bd936103b89133149081156103bf575b50610a71565b610f97565b005b6001600160a01b0316600090815260056020526040902061040091506103f99033905b9060018060a01b0316600052602052604060002090565b5460ff1690565b386103b2565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e576103bd61049c36610455565b916104af6104aa8433610c76565b610b75565b610e05565b503461000e576103bd6104c636610455565b90604051926020840184811067ffffffffffffffff8211176104ef575b60405260008452610bdb565b6104f761076d565b6104e3565b503461000e57602036600319011261000e5760206103276004356109b0565b503461000e57602036600319011261000e576001600160a01b0361053d610339565b16801561056657600052600360205261026a604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608490fd5b503461000e57600080600319360112610305576040519080600190815480831c92808216928315610676575b60209283861085146102e75785885260208801949081156102c6575060011461061d5761026a8761025e81890382610784565b600160005294509192917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b838610610665575050509101905061025e8261026a388061024e565b805485870152948201948101610649565b93607f16936105ea565b503461000e57604036600319011261000e5761069a610339565b602435801515810361000e576001600160a01b0382169133831461072857816106e56106f69233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176107a657604052565b6107ae61076d565b604052565b60209067ffffffffffffffff81116107d1575b601f01601f19160190565b6107d961076d565b6107c6565b503461000e57608036600319011261000e576107f8610339565b61080061034f565b6064359167ffffffffffffffff831161000e573660238401121561000e5782600401359161082d836107b3565b9261083b6040519485610784565b808452366024828701011161000e5760208160009260246103bd9801838801378501015260443591610bdb565b503461000e57602036600319011261000e576004356000818152600260205260409020546001600160a01b0316156108f5576108a2610a28565b8051156108e35761025e6108cf916108d56108bf61026a9561118f565b6040519485936020850190610a5a565b90610a5a565b03601f198101835282610784565b505061026a6108f0610a28565b61025e565b60405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608490fd5b503461000e57604036600319011261000e57602060ff6109a4610973610339565b61097b61034f565b6001600160a01b0391821660009081526005865260408082209290931681526020919091522090565b54166040519015158152f35b6000908152600260205260409020546001600160a01b031680156109d15790565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608490fd5b604051906020820182811067ffffffffffffffff821117610a4d575b60405260008252565b610a5561076d565b610a44565b90610a6d602092828151948592016101a1565b0190565b15610a7857565b60405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608490fd5b6000818152600260205260409020546001600160a01b031615610b1b576000908152600460205260409020546001600160a01b031690565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b15610b7c57565b60405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608490fd5b90610bff939291610bef6104aa8433610c76565b610bfa838383610e05565b611073565b15610c0657565b60405162461bcd60e51b815280610c1f60048201610c23565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b6000828152600260205260409020546001600160a01b031615610d0757610c9c826109b0565b6001600160a01b038281168282168114949091908515610cef575b5050508215610cc557505090565b6001600160a01b0316600090815260056020526040902060ff9250610cea91906103e2565b541690565b610cfc9192939550610ae3565b161491388080610cb7565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b15610d6857565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b600019810191908211610ddf57565b610de7610db9565b565b9060018201809211610ddf57565b6030019081603011610ddf57565b90610e0f836109b0565b6001600160a01b038381169290918216839003610eea57610e5e610ec192821694610e3b861515610d61565b610e4487610f41565b6001600160a01b0316600090815260036020526040902090565b610e688154610dd0565b90556001600160a01b0381166000908152600360205260409020610e8c8154610de9565b9055610ea2856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608490fd5b600081815260046020526040812080546001600160a01b03191690556001600160a01b03610f6e836109b0565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0380610fd0846109b0565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e57516101fa81610120565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526101fa929101906101c4565b3d1561106e573d90611054826107b3565b916110626040519384610784565b82523d6000602084013e565b606090565b92909190823b1561112d576110a6926020926000604051809681958294630a85bd0160e11b9a8b85523360048601611012565b03926001600160a01b03165af1600091816110fd575b506110ef576110c9611043565b805190816110ea5760405162461bcd60e51b815280610c1f60048201610c23565b602001fd5b6001600160e01b0319161490565b61111f91925060203d8111611126575b6111178183610784565b810190610ffd565b90386110bc565b503d61110d565b50505050600190565b90611140826107b3565b61114d6040519182610784565b828152809261115e601f19916107b3565b0190602036910137565b908151811015611179570160200190565b634e487b7160e01b600052603260045260246000fd5b8015611229576000818181805b6111ff57506111aa81611136565b935b6111b65750505090565b6111bf90610dd0565b90600a906111ea6111da6111d4848406610df7565b60ff1690565b60f81b6001600160f81b03191690565b841a6111f68487611168565b530490816111ac565b91506001600a91600019811461121c575b0191048084929161119c565b611224610db9565b611210565b506040516040810181811067ffffffffffffffff821117611259575b60405260018152600360fc1b602082015290565b61126161076d565b61124556fea2646970667358221220becf4c1a0a1b7f7c06b64b2ba42f61caf715f3c32e86700ce6d6dec0c0f0065064736f6c63430008100033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0x319 JUMPI PUSH3 0x1653 DUP1 CODESIZE SUB DUP1 PUSH3 0x1D DUP2 PUSH3 0x31E JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH1 0x40 DUP2 DUP4 SUB SLT PUSH3 0x319 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 DUP2 GT PUSH3 0x319 JUMPI DUP4 PUSH3 0x4F SWAP2 DUP5 ADD PUSH3 0x344 JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP4 DUP5 DUP3 ADD MLOAD DUP4 DUP2 GT PUSH3 0x319 JUMPI PUSH3 0x6B SWAP3 ADD PUSH3 0x344 JUMP JUMPDEST DUP3 MLOAD SWAP1 DUP3 DUP3 GT PUSH3 0x303 JUMPI PUSH1 0x0 DUP1 SLOAD SWAP3 PUSH1 0x1 SWAP6 DUP7 DUP6 DUP2 SHR SWAP6 AND DUP1 ISZERO PUSH3 0x2F8 JUMPI JUMPDEST DUP9 DUP7 LT EQ PUSH3 0x2E4 JUMPI DUP2 SWAP1 PUSH1 0x1F SWAP6 DUP7 DUP2 GT PUSH3 0x291 JUMPI JUMPDEST POP DUP9 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0x22D JUMPI DUP5 SWAP3 PUSH3 0x221 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP7 SHL OR DUP2 SSTORE JUMPDEST DUP2 MLOAD SWAP4 DUP5 GT PUSH3 0x20D JUMPI DUP5 SLOAD DUP6 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x202 JUMPI JUMPDEST DUP8 DUP3 LT EQ PUSH3 0x1EE JUMPI DUP4 DUP2 GT PUSH3 0x1A6 JUMPI JUMPDEST POP DUP6 SWAP3 DUP5 GT PUSH1 0x1 EQ PUSH3 0x141 JUMPI DUP4 SWAP5 SWAP6 POP SWAP3 PUSH3 0x135 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP3 SHL OR SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x129C SWAP1 DUP2 PUSH3 0x3B7 DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x111 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND SWAP6 DUP6 DUP5 MSTORE DUP1 DUP5 KECCAK256 SWAP4 SWAP1 JUMPDEST DUP8 DUP3 LT PUSH3 0x18E JUMPI POP POP DUP4 DUP6 SWAP7 LT PUSH3 0x174 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x125 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x166 JUMP JUMPDEST DUP1 DUP8 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH3 0x152 JUMP JUMPDEST DUP6 DUP3 MSTORE DUP7 DUP3 KECCAK256 DUP5 DUP1 DUP8 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP10 DUP9 LT PUSH3 0x1E4 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP7 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x1D8 JUMPI POP POP PUSH3 0xF9 JUMP JUMPDEST DUP4 DUP2 SSTORE ADD DUP7 SWAP1 PUSH3 0x1C8 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x1BF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xE7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xB9 JUMP JUMPDEST DUP5 DUP1 MSTORE DUP10 DUP6 KECCAK256 DUP10 SWAP5 POP SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND DUP7 JUMPDEST DUP13 DUP3 DUP3 LT PUSH3 0x27A JUMPI POP POP DUP5 GT PUSH3 0x260 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP2 SSTORE PUSH3 0xCD JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x252 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP13 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x23F JUMP JUMPDEST SWAP1 SWAP2 POP DUP4 DUP1 MSTORE DUP9 DUP5 KECCAK256 DUP7 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP7 LT PUSH3 0x2DA JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x2CB JUMPI POP POP PUSH3 0xA3 JUMP JUMPDEST DUP7 DUP2 SSTORE DUP6 SWAP5 POP DUP11 SWAP2 ADD PUSH3 0x2BB JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x2AD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP5 PUSH1 0x7F AND SWAP5 PUSH3 0x8C JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x303 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH3 0x319 JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x303 JUMPI PUSH1 0x20 SWAP1 PUSH3 0x37A PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD PUSH3 0x31E JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE DUP3 DUP3 DUP8 ADD ADD GT PUSH3 0x319 JUMPI PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH3 0x3A2 JUMPI POP DUP3 PUSH1 0x0 SWAP4 SWAP5 SWAP6 POP ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP6 DUP2 ADD DUP4 ADD MLOAD DUP5 DUP3 ADD DUP5 ADD MSTORE DUP3 ADD PUSH3 0x38C JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0xEA JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xD8 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0xC6 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0xB4 JUMPI PUSH4 0xE985E9C5 EQ PUSH2 0xAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE PUSH2 0x952 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x868 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x7DE JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x680 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x5BE JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x51B JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x4FC JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x4B4 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x48A JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x365 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x308 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x1FD JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x132 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND SUB PUSH2 0xE JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x152 DUP2 PUSH2 0x120 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x190 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x17F JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP CODESIZE PUSH2 0x174 JUMP JUMPDEST PUSH4 0x5B5E139F PUSH1 0xE0 SHL DUP2 EQ SWAP2 POP PUSH2 0x16D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1B4 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1A4 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x1DD DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x1A1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x1FA SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x1C4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x305 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP1 DUP1 SLOAD SWAP1 PUSH1 0x1 SWAP2 DUP1 DUP4 SHR SWAP3 DUP1 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x2FB JUMPI JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP7 LT DUP6 EQ PUSH2 0x2E7 JUMPI DUP6 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP5 SWAP1 DUP2 ISZERO PUSH2 0x2C6 JUMPI POP PUSH1 0x1 EQ PUSH2 0x26E JUMPI JUMPDEST PUSH2 0x26A DUP8 PUSH2 0x25E DUP2 DUP10 SUB DUP3 PUSH2 0x784 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1E9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 MSTORE SWAP5 POP SWAP2 SWAP3 SWAP2 PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 JUMPDEST DUP4 DUP7 LT PUSH2 0x2B5 JUMPI POP POP POP SWAP2 ADD SWAP1 POP PUSH2 0x25E DUP3 PUSH2 0x26A CODESIZE DUP1 PUSH2 0x24E JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD MSTORE SWAP5 DUP3 ADD SWAP5 DUP2 ADD PUSH2 0x299 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP6 MSTORE POP POP POP POP SWAP1 ISZERO ISZERO PUSH1 0x5 SHL ADD SWAP1 POP PUSH2 0x25E DUP3 PUSH2 0x26A CODESIZE DUP1 PUSH2 0x24E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x22A JUMP JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH2 0x327 PUSH1 0x4 CALLDATALOAD PUSH2 0xAE3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xE JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xE JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x37F PUSH2 0x339 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x38B DUP2 PUSH2 0x9B0 JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP1 DUP3 AND DUP2 EQ PUSH2 0x406 JUMPI PUSH2 0x3BD SWAP4 PUSH2 0x3B8 SWAP2 CALLER EQ SWAP1 DUP2 ISZERO PUSH2 0x3BF JUMPI JUMPDEST POP PUSH2 0xA71 JUMP JUMPDEST PUSH2 0xF97 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x400 SWAP2 POP PUSH2 0x3F9 SWAP1 CALLER SWAP1 JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CODESIZE PUSH2 0x3B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0xE JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0xE JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH2 0x3BD PUSH2 0x49C CALLDATASIZE PUSH2 0x455 JUMP JUMPDEST SWAP2 PUSH2 0x4AF PUSH2 0x4AA DUP5 CALLER PUSH2 0xC76 JUMP JUMPDEST PUSH2 0xB75 JUMP JUMPDEST PUSH2 0xE05 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH2 0x3BD PUSH2 0x4C6 CALLDATASIZE PUSH2 0x455 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD DUP5 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x4EF JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP5 MSTORE PUSH2 0xBDB JUMP JUMPDEST PUSH2 0x4F7 PUSH2 0x76D JUMP JUMPDEST PUSH2 0x4E3 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH2 0x327 PUSH1 0x4 CALLDATALOAD PUSH2 0x9B0 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x53D PUSH2 0x339 JUMP JUMPDEST AND DUP1 ISZERO PUSH2 0x566 JUMPI PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x26A PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP3 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x305 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP1 PUSH1 0x1 SWAP1 DUP2 SLOAD DUP1 DUP4 SHR SWAP3 DUP1 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x676 JUMPI JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP7 LT DUP6 EQ PUSH2 0x2E7 JUMPI DUP6 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP5 SWAP1 DUP2 ISZERO PUSH2 0x2C6 JUMPI POP PUSH1 0x1 EQ PUSH2 0x61D JUMPI PUSH2 0x26A DUP8 PUSH2 0x25E DUP2 DUP10 SUB DUP3 PUSH2 0x784 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE SWAP5 POP SWAP2 SWAP3 SWAP2 PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 JUMPDEST DUP4 DUP7 LT PUSH2 0x665 JUMPI POP POP POP SWAP2 ADD SWAP1 POP PUSH2 0x25E DUP3 PUSH2 0x26A CODESIZE DUP1 PUSH2 0x24E JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD MSTORE SWAP5 DUP3 ADD SWAP5 DUP2 ADD PUSH2 0x649 JUMP JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x5EA JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x69A PUSH2 0x339 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0xE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 CALLER DUP4 EQ PUSH2 0x728 JUMPI DUP2 PUSH2 0x6E5 PUSH2 0x6F6 SWAP3 CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE CALLER SWAP1 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP1 PUSH1 0x20 SWAP1 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7A6 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x7AE PUSH2 0x76D JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7D1 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH2 0x7D9 PUSH2 0x76D JUMP JUMPDEST PUSH2 0x7C6 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x7F8 PUSH2 0x339 JUMP JUMPDEST PUSH2 0x800 PUSH2 0x34F JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xE JUMPI CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH2 0xE JUMPI DUP3 PUSH1 0x4 ADD CALLDATALOAD SWAP2 PUSH2 0x82D DUP4 PUSH2 0x7B3 JUMP JUMPDEST SWAP3 PUSH2 0x83B PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x784 JUMP JUMPDEST DUP1 DUP5 MSTORE CALLDATASIZE PUSH1 0x24 DUP3 DUP8 ADD ADD GT PUSH2 0xE JUMPI PUSH1 0x20 DUP2 PUSH1 0x0 SWAP3 PUSH1 0x24 PUSH2 0x3BD SWAP9 ADD DUP4 DUP9 ADD CALLDATACOPY DUP6 ADD ADD MSTORE PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0xBDB JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x8F5 JUMPI PUSH2 0x8A2 PUSH2 0xA28 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x8E3 JUMPI PUSH2 0x25E PUSH2 0x8CF SWAP2 PUSH2 0x8D5 PUSH2 0x8BF PUSH2 0x26A SWAP6 PUSH2 0x118F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0xA5A JUMP JUMPDEST SWAP1 PUSH2 0xA5A JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x784 JUMP JUMPDEST POP POP PUSH2 0x26A PUSH2 0x8F0 PUSH2 0xA28 JUMP JUMPDEST PUSH2 0x25E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x9A4 PUSH2 0x973 PUSH2 0x339 JUMP JUMPDEST PUSH2 0x97B PUSH2 0x34F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 DUP7 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SWAP1 JUMP JUMPDEST SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x9D1 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x32B73A103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA4D JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST PUSH2 0xA55 PUSH2 0x76D JUMP JUMPDEST PUSH2 0xA44 JUMP JUMPDEST SWAP1 PUSH2 0xA6D PUSH1 0x20 SWAP3 DUP3 DUP2 MLOAD SWAP5 DUP6 SWAP3 ADD PUSH2 0x1A1 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xA78 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xB1B JUMPI PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xB7C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xBFF SWAP4 SWAP3 SWAP2 PUSH2 0xBEF PUSH2 0x4AA DUP5 CALLER PUSH2 0xC76 JUMP JUMPDEST PUSH2 0xBFA DUP4 DUP4 DUP4 PUSH2 0xE05 JUMP JUMPDEST PUSH2 0x1073 JUMP JUMPDEST ISZERO PUSH2 0xC06 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC1F PUSH1 0x4 DUP3 ADD PUSH2 0xC23 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xD07 JUMPI PUSH2 0xC9C DUP3 PUSH2 0x9B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND DUP2 EQ SWAP5 SWAP1 SWAP2 SWAP1 DUP6 ISZERO PUSH2 0xCEF JUMPI JUMPDEST POP POP POP DUP3 ISZERO PUSH2 0xCC5 JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0xFF SWAP3 POP PUSH2 0xCEA SWAP2 SWAP1 PUSH2 0x3E2 JUMP JUMPDEST SLOAD AND SWAP1 JUMP JUMPDEST PUSH2 0xCFC SWAP2 SWAP3 SWAP4 SWAP6 POP PUSH2 0xAE3 JUMP JUMPDEST AND EQ SWAP2 CODESIZE DUP1 DUP1 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xD68 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 ADD SWAP2 SWAP1 DUP3 GT PUSH2 0xDDF JUMPI JUMP JUMPDEST PUSH2 0xDE7 PUSH2 0xDB9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xDDF JUMPI JUMP JUMPDEST PUSH1 0x30 ADD SWAP1 DUP2 PUSH1 0x30 GT PUSH2 0xDDF JUMPI JUMP JUMPDEST SWAP1 PUSH2 0xE0F DUP4 PUSH2 0x9B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP3 SWAP1 SWAP2 DUP3 AND DUP4 SWAP1 SUB PUSH2 0xEEA JUMPI PUSH2 0xE5E PUSH2 0xEC1 SWAP3 DUP3 AND SWAP5 PUSH2 0xE3B DUP7 ISZERO ISZERO PUSH2 0xD61 JUMP JUMPDEST PUSH2 0xE44 DUP8 PUSH2 0xF41 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0xE68 DUP2 SLOAD PUSH2 0xDD0 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xE8C DUP2 SLOAD PUSH2 0xDE9 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xEA2 DUP6 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E73666572206F6620746F6B656E20746861742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x39903737BA1037BBB7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xF6E DUP4 PUSH2 0x9B0 JUMP JUMPDEST AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP3 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0xFD0 DUP5 PUSH2 0x9B0 JUMP JUMPDEST AND SWAP2 AND SWAP1 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xE JUMPI MLOAD PUSH2 0x1FA DUP2 PUSH2 0x120 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x1FA SWAP3 SWAP2 ADD SWAP1 PUSH2 0x1C4 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x106E JUMPI RETURNDATASIZE SWAP1 PUSH2 0x1054 DUP3 PUSH2 0x7B3 JUMP JUMPDEST SWAP2 PUSH2 0x1062 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x784 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x112D JUMPI PUSH2 0x10A6 SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP11 DUP12 DUP6 MSTORE CALLER PUSH1 0x4 DUP7 ADD PUSH2 0x1012 JUMP JUMPDEST SUB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x10FD JUMPI JUMPDEST POP PUSH2 0x10EF JUMPI PUSH2 0x10C9 PUSH2 0x1043 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 PUSH2 0x10EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC1F PUSH1 0x4 DUP3 ADD PUSH2 0xC23 JUMP JUMPDEST PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x111F SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1126 JUMPI JUMPDEST PUSH2 0x1117 DUP2 DUP4 PUSH2 0x784 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xFFD JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x10BC JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x110D JUMP JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1140 DUP3 PUSH2 0x7B3 JUMP JUMPDEST PUSH2 0x114D PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x784 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x115E PUSH1 0x1F NOT SWAP2 PUSH2 0x7B3 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1179 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x1229 JUMPI PUSH1 0x0 DUP2 DUP2 DUP2 DUP1 JUMPDEST PUSH2 0x11FF JUMPI POP PUSH2 0x11AA DUP2 PUSH2 0x1136 JUMP JUMPDEST SWAP4 JUMPDEST PUSH2 0x11B6 JUMPI POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x11BF SWAP1 PUSH2 0xDD0 JUMP JUMPDEST SWAP1 PUSH1 0xA SWAP1 PUSH2 0x11EA PUSH2 0x11DA PUSH2 0x11D4 DUP5 DUP5 MOD PUSH2 0xDF7 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 JUMP JUMPDEST DUP5 BYTE PUSH2 0x11F6 DUP5 DUP8 PUSH2 0x1168 JUMP JUMPDEST MSTORE8 DIV SWAP1 DUP2 PUSH2 0x11AC JUMP JUMPDEST SWAP2 POP PUSH1 0x1 PUSH1 0xA SWAP2 PUSH1 0x0 NOT DUP2 EQ PUSH2 0x121C JUMPI JUMPDEST ADD SWAP2 DIV DUP1 DUP5 SWAP3 SWAP2 PUSH2 0x119C JUMP JUMPDEST PUSH2 0x1224 PUSH2 0xDB9 JUMP JUMPDEST PUSH2 0x1210 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1259 JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x1261 PUSH2 0x76D JUMP JUMPDEST PUSH2 0x1245 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0xCF 0x4C BYTE EXP SHL PUSH32 0x7C06B64B2BA42F61CAF715F3C32E86700CE6D6DEC0C0F0065064736F6C634300 ADDMOD LT STOP CALLER ",
              "sourceMap": "613:13006:2:-:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;613:13006:2;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;;;-1:-1:-1;;;;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;-1:-1:-1;613:13006:2;;-1:-1:-1;;613:13006:2;;;;;;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;;;-1:-1:-1;613:13006:2;;;;;-1:-1:-1;613:13006:2;;-1:-1:-1;613:13006:2;;;;;;;;;-1:-1:-1;;613:13006:2;;;-1:-1:-1;;;;;613:13006:2;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;613:13006:2;;;;;;;;;;-1:-1:-1;;613:13006:2;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address": {
                  "entryPoint": 825,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "abi_decode_address_5372": {
                  "entryPoint": 847,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "abi_decode_addresst_addresst_uint256": {
                  "entryPoint": 1109,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 3
                },
                "abi_decode_bytes4_fromMemory": {
                  "entryPoint": 4093,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address_address_uint256_bytes": {
                  "entryPoint": 4114,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 489,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 2650,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_to_string": {
                  "entryPoint": 452,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_1e76": {
                  "entryPoint": 3107,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint256": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "allocate_and_zero_memory_array_bytes": {
                  "entryPoint": 4406,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 2600,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 1971,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage_5359": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_add_uint256": {
                  "entryPoint": 3575,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_add_uint256_5389": {
                  "entryPoint": 3561,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_sub_uint256": {
                  "entryPoint": 3536,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint8_to_bytes1": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 417,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "external_fun_approve": {
                  "entryPoint": 869,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_balanceOf": {
                  "entryPoint": 1307,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getApproved": {
                  "entryPoint": 776,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_isApprovedForAll": {
                  "entryPoint": 2386,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_name": {
                  "entryPoint": 509,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_ownerOf": {
                  "entryPoint": 1276,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_safeTransferFrom": {
                  "entryPoint": 1204,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_safeTransferFrom_499": {
                  "entryPoint": 2014,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setApprovalForAll": {
                  "entryPoint": 1664,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_supportsInterface": {
                  "entryPoint": 306,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_symbol": {
                  "entryPoint": 1470,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_tokenURI": {
                  "entryPoint": 2152,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferFrom": {
                  "entryPoint": 1162,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_returndata": {
                  "entryPoint": 4163,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 1924,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_approve": {
                  "entryPoint": 3991,
                  "id": 832,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_approve_5385": {
                  "entryPoint": 3905,
                  "id": 832,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_checkOnERC721Received": {
                  "entryPoint": 4211,
                  "id": 926,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "fun_exists": {
                  "entryPoint": null,
                  "id": 546,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getApproved": {
                  "entryPoint": 2787,
                  "id": 388,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_isApprovedOrOwner": {
                  "entryPoint": 3190,
                  "id": 587,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_ownerOf": {
                  "entryPoint": 2480,
                  "id": 253,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_safeTransferFrom": {
                  "entryPoint": 3035,
                  "id": 499,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_toString": {
                  "entryPoint": 4495,
                  "id": 1872,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_transfer": {
                  "entryPoint": 3589,
                  "id": 808,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "mapping_index_access_mapping_address_uint256_of_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address_5363": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address_5386": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "memory_array_index_access_bytes": {
                  "entryPoint": 4456,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 3513,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 1901,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "read_from_storage_split_offset_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral_455f": {
                  "entryPoint": 3425,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_6d83": {
                  "entryPoint": 2673,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_c868": {
                  "entryPoint": 2933,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bool_to_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_bytes4": {
                  "entryPoint": 288,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0xEA JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xD8 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0xC6 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0xB4 JUMPI PUSH4 0xE985E9C5 EQ PUSH2 0xAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE PUSH2 0x952 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x868 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x7DE JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x680 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x5BE JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x51B JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x4FC JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x4B4 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x48A JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x365 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x308 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x1FD JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x132 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND SUB PUSH2 0xE JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x152 DUP2 PUSH2 0x120 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x190 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x17F JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP CODESIZE PUSH2 0x174 JUMP JUMPDEST PUSH4 0x5B5E139F PUSH1 0xE0 SHL DUP2 EQ SWAP2 POP PUSH2 0x16D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1B4 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1A4 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x1DD DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x1A1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x1FA SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x1C4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x305 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP1 DUP1 SLOAD SWAP1 PUSH1 0x1 SWAP2 DUP1 DUP4 SHR SWAP3 DUP1 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x2FB JUMPI JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP7 LT DUP6 EQ PUSH2 0x2E7 JUMPI DUP6 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP5 SWAP1 DUP2 ISZERO PUSH2 0x2C6 JUMPI POP PUSH1 0x1 EQ PUSH2 0x26E JUMPI JUMPDEST PUSH2 0x26A DUP8 PUSH2 0x25E DUP2 DUP10 SUB DUP3 PUSH2 0x784 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1E9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 MSTORE SWAP5 POP SWAP2 SWAP3 SWAP2 PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 JUMPDEST DUP4 DUP7 LT PUSH2 0x2B5 JUMPI POP POP POP SWAP2 ADD SWAP1 POP PUSH2 0x25E DUP3 PUSH2 0x26A CODESIZE DUP1 PUSH2 0x24E JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD MSTORE SWAP5 DUP3 ADD SWAP5 DUP2 ADD PUSH2 0x299 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP6 MSTORE POP POP POP POP SWAP1 ISZERO ISZERO PUSH1 0x5 SHL ADD SWAP1 POP PUSH2 0x25E DUP3 PUSH2 0x26A CODESIZE DUP1 PUSH2 0x24E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x22A JUMP JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH2 0x327 PUSH1 0x4 CALLDATALOAD PUSH2 0xAE3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xE JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xE JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x37F PUSH2 0x339 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x38B DUP2 PUSH2 0x9B0 JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP1 DUP3 AND DUP2 EQ PUSH2 0x406 JUMPI PUSH2 0x3BD SWAP4 PUSH2 0x3B8 SWAP2 CALLER EQ SWAP1 DUP2 ISZERO PUSH2 0x3BF JUMPI JUMPDEST POP PUSH2 0xA71 JUMP JUMPDEST PUSH2 0xF97 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x400 SWAP2 POP PUSH2 0x3F9 SWAP1 CALLER SWAP1 JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CODESIZE PUSH2 0x3B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0xE JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0xE JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH2 0x3BD PUSH2 0x49C CALLDATASIZE PUSH2 0x455 JUMP JUMPDEST SWAP2 PUSH2 0x4AF PUSH2 0x4AA DUP5 CALLER PUSH2 0xC76 JUMP JUMPDEST PUSH2 0xB75 JUMP JUMPDEST PUSH2 0xE05 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH2 0x3BD PUSH2 0x4C6 CALLDATASIZE PUSH2 0x455 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD DUP5 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x4EF JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP5 MSTORE PUSH2 0xBDB JUMP JUMPDEST PUSH2 0x4F7 PUSH2 0x76D JUMP JUMPDEST PUSH2 0x4E3 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH2 0x327 PUSH1 0x4 CALLDATALOAD PUSH2 0x9B0 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x53D PUSH2 0x339 JUMP JUMPDEST AND DUP1 ISZERO PUSH2 0x566 JUMPI PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x26A PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP3 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x305 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP1 PUSH1 0x1 SWAP1 DUP2 SLOAD DUP1 DUP4 SHR SWAP3 DUP1 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x676 JUMPI JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP7 LT DUP6 EQ PUSH2 0x2E7 JUMPI DUP6 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP5 SWAP1 DUP2 ISZERO PUSH2 0x2C6 JUMPI POP PUSH1 0x1 EQ PUSH2 0x61D JUMPI PUSH2 0x26A DUP8 PUSH2 0x25E DUP2 DUP10 SUB DUP3 PUSH2 0x784 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE SWAP5 POP SWAP2 SWAP3 SWAP2 PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 JUMPDEST DUP4 DUP7 LT PUSH2 0x665 JUMPI POP POP POP SWAP2 ADD SWAP1 POP PUSH2 0x25E DUP3 PUSH2 0x26A CODESIZE DUP1 PUSH2 0x24E JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD MSTORE SWAP5 DUP3 ADD SWAP5 DUP2 ADD PUSH2 0x649 JUMP JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x5EA JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x69A PUSH2 0x339 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0xE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 CALLER DUP4 EQ PUSH2 0x728 JUMPI DUP2 PUSH2 0x6E5 PUSH2 0x6F6 SWAP3 CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE CALLER SWAP1 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP1 PUSH1 0x20 SWAP1 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7A6 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x7AE PUSH2 0x76D JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7D1 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH2 0x7D9 PUSH2 0x76D JUMP JUMPDEST PUSH2 0x7C6 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x7F8 PUSH2 0x339 JUMP JUMPDEST PUSH2 0x800 PUSH2 0x34F JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xE JUMPI CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH2 0xE JUMPI DUP3 PUSH1 0x4 ADD CALLDATALOAD SWAP2 PUSH2 0x82D DUP4 PUSH2 0x7B3 JUMP JUMPDEST SWAP3 PUSH2 0x83B PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x784 JUMP JUMPDEST DUP1 DUP5 MSTORE CALLDATASIZE PUSH1 0x24 DUP3 DUP8 ADD ADD GT PUSH2 0xE JUMPI PUSH1 0x20 DUP2 PUSH1 0x0 SWAP3 PUSH1 0x24 PUSH2 0x3BD SWAP9 ADD DUP4 DUP9 ADD CALLDATACOPY DUP6 ADD ADD MSTORE PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0xBDB JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x8F5 JUMPI PUSH2 0x8A2 PUSH2 0xA28 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x8E3 JUMPI PUSH2 0x25E PUSH2 0x8CF SWAP2 PUSH2 0x8D5 PUSH2 0x8BF PUSH2 0x26A SWAP6 PUSH2 0x118F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0xA5A JUMP JUMPDEST SWAP1 PUSH2 0xA5A JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x784 JUMP JUMPDEST POP POP PUSH2 0x26A PUSH2 0x8F0 PUSH2 0xA28 JUMP JUMPDEST PUSH2 0x25E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x9A4 PUSH2 0x973 PUSH2 0x339 JUMP JUMPDEST PUSH2 0x97B PUSH2 0x34F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 DUP7 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SWAP1 JUMP JUMPDEST SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x9D1 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x32B73A103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA4D JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST PUSH2 0xA55 PUSH2 0x76D JUMP JUMPDEST PUSH2 0xA44 JUMP JUMPDEST SWAP1 PUSH2 0xA6D PUSH1 0x20 SWAP3 DUP3 DUP2 MLOAD SWAP5 DUP6 SWAP3 ADD PUSH2 0x1A1 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xA78 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xB1B JUMPI PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xB7C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xBFF SWAP4 SWAP3 SWAP2 PUSH2 0xBEF PUSH2 0x4AA DUP5 CALLER PUSH2 0xC76 JUMP JUMPDEST PUSH2 0xBFA DUP4 DUP4 DUP4 PUSH2 0xE05 JUMP JUMPDEST PUSH2 0x1073 JUMP JUMPDEST ISZERO PUSH2 0xC06 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC1F PUSH1 0x4 DUP3 ADD PUSH2 0xC23 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xD07 JUMPI PUSH2 0xC9C DUP3 PUSH2 0x9B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND DUP2 EQ SWAP5 SWAP1 SWAP2 SWAP1 DUP6 ISZERO PUSH2 0xCEF JUMPI JUMPDEST POP POP POP DUP3 ISZERO PUSH2 0xCC5 JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0xFF SWAP3 POP PUSH2 0xCEA SWAP2 SWAP1 PUSH2 0x3E2 JUMP JUMPDEST SLOAD AND SWAP1 JUMP JUMPDEST PUSH2 0xCFC SWAP2 SWAP3 SWAP4 SWAP6 POP PUSH2 0xAE3 JUMP JUMPDEST AND EQ SWAP2 CODESIZE DUP1 DUP1 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xD68 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 ADD SWAP2 SWAP1 DUP3 GT PUSH2 0xDDF JUMPI JUMP JUMPDEST PUSH2 0xDE7 PUSH2 0xDB9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xDDF JUMPI JUMP JUMPDEST PUSH1 0x30 ADD SWAP1 DUP2 PUSH1 0x30 GT PUSH2 0xDDF JUMPI JUMP JUMPDEST SWAP1 PUSH2 0xE0F DUP4 PUSH2 0x9B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP3 SWAP1 SWAP2 DUP3 AND DUP4 SWAP1 SUB PUSH2 0xEEA JUMPI PUSH2 0xE5E PUSH2 0xEC1 SWAP3 DUP3 AND SWAP5 PUSH2 0xE3B DUP7 ISZERO ISZERO PUSH2 0xD61 JUMP JUMPDEST PUSH2 0xE44 DUP8 PUSH2 0xF41 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0xE68 DUP2 SLOAD PUSH2 0xDD0 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xE8C DUP2 SLOAD PUSH2 0xDE9 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xEA2 DUP6 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E73666572206F6620746F6B656E20746861742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x39903737BA1037BBB7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xF6E DUP4 PUSH2 0x9B0 JUMP JUMPDEST AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP3 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0xFD0 DUP5 PUSH2 0x9B0 JUMP JUMPDEST AND SWAP2 AND SWAP1 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xE JUMPI MLOAD PUSH2 0x1FA DUP2 PUSH2 0x120 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x1FA SWAP3 SWAP2 ADD SWAP1 PUSH2 0x1C4 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x106E JUMPI RETURNDATASIZE SWAP1 PUSH2 0x1054 DUP3 PUSH2 0x7B3 JUMP JUMPDEST SWAP2 PUSH2 0x1062 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x784 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x112D JUMPI PUSH2 0x10A6 SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP11 DUP12 DUP6 MSTORE CALLER PUSH1 0x4 DUP7 ADD PUSH2 0x1012 JUMP JUMPDEST SUB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x10FD JUMPI JUMPDEST POP PUSH2 0x10EF JUMPI PUSH2 0x10C9 PUSH2 0x1043 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 PUSH2 0x10EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC1F PUSH1 0x4 DUP3 ADD PUSH2 0xC23 JUMP JUMPDEST PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x111F SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1126 JUMPI JUMPDEST PUSH2 0x1117 DUP2 DUP4 PUSH2 0x784 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xFFD JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x10BC JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x110D JUMP JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1140 DUP3 PUSH2 0x7B3 JUMP JUMPDEST PUSH2 0x114D PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x784 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x115E PUSH1 0x1F NOT SWAP2 PUSH2 0x7B3 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1179 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x1229 JUMPI PUSH1 0x0 DUP2 DUP2 DUP2 DUP1 JUMPDEST PUSH2 0x11FF JUMPI POP PUSH2 0x11AA DUP2 PUSH2 0x1136 JUMP JUMPDEST SWAP4 JUMPDEST PUSH2 0x11B6 JUMPI POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x11BF SWAP1 PUSH2 0xDD0 JUMP JUMPDEST SWAP1 PUSH1 0xA SWAP1 PUSH2 0x11EA PUSH2 0x11DA PUSH2 0x11D4 DUP5 DUP5 MOD PUSH2 0xDF7 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 JUMP JUMPDEST DUP5 BYTE PUSH2 0x11F6 DUP5 DUP8 PUSH2 0x1168 JUMP JUMPDEST MSTORE8 DIV SWAP1 DUP2 PUSH2 0x11AC JUMP JUMPDEST SWAP2 POP PUSH1 0x1 PUSH1 0xA SWAP2 PUSH1 0x0 NOT DUP2 EQ PUSH2 0x121C JUMPI JUMPDEST ADD SWAP2 DIV DUP1 DUP5 SWAP3 SWAP2 PUSH2 0x119C JUMP JUMPDEST PUSH2 0x1224 PUSH2 0xDB9 JUMP JUMPDEST PUSH2 0x1210 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1259 JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x1261 PUSH2 0x76D JUMP JUMPDEST PUSH2 0x1245 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0xCF 0x4C BYTE EXP SHL PUSH32 0x7C06B64B2BA42F61CAF715F3C32E86700CE6D6DEC0C0F0065064736F6C634300 ADDMOD LT STOP CALLER ",
              "sourceMap": "613:13006:2:-:0;;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;;613:13006:2;;;;;:::o;:::-;;;;;;;-1:-1:-1;;613:13006:2;;;;;;;;;;:::i;:::-;;;;;1707:25;;;1692:40;;:104;;;;;613:13006;1692:156;;;;613:13006;;;;;;;;;;1692:156;-1:-1:-1;;;937:40:11;;-1:-1:-1;1692:156:2;;;:104;-1:-1:-1;;;1748:48:2;;;-1:-1:-1;1692:104:2;;613:13006;;;;;;;;-1:-1:-1;;613:13006:2;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;613:13006:2;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;613:13006:2;;;-1:-1:-1;;;;613:13006:2;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;613:13006:2;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;613:13006:2;;;;;;;;;;-1:-1:-1;;;;;613:13006:2;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;613:13006:2;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;613:13006:2;;;;;;:::i;:::-;;;3618:23;;;:::i;:::-;613:13006;-1:-1:-1;;;;;613:13006:2;;;;;;3659:11;;613:13006;;3908:7;719:10:9;3719:165:2;719:10:9;;3740:21:2;:62;;;;;613:13006;3719:165;;:::i;:::-;3908:7;:::i;:::-;613:13006;3740:62;-1:-1:-1;;;;;613:13006:2;;;;;4607:18;613:13006;;;;;4607:35;;-1:-1:-1;4607:35:2;;719:10:9;;4607:25:2;613:13006;;;;;;;;;;;;;;;;4607:35;613:13006;;;;;4607:35;3740:62;;;613:13006;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;-1:-1:-1;;;;;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;5026:7;613:13006;;;:::i;:::-;719:10:9;4892:103:2;4900:41;719:10:9;;4900:41:2;:::i;:::-;4892:103;:::i;:::-;5026:7;:::i;613:13006::-;;;;;5240:39;613:13006;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5240:39;:::i;613:13006::-;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;613:13006:2;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;613:13006:2;;;;-1:-1:-1;;;;;613:13006:2;;:::i;:::-;;2013:19;;613:13006;;-1:-1:-1;613:13006:2;;;;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;;2723:7;613:13006;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2723:7;613:13006;;;-1:-1:-1;613:13006:2;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;613:13006:2;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;613:13006:2;;;719:10:9;11442:17:2;;613:13006;;719:10:9;11499:35:2;:46;719:10:9;;-1:-1:-1;613:13006:2;11499:18;613:13006;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;;;;;11499:35;613:13006;;;;;;;;;;;;;;;11499:46;613:13006;;;;;;;719:10:9;;11560:41:2;;613:13006;;11560:41;613:13006;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;613:13006:2;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;613:13006:2;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;613:13006:2;;;;;;-1:-1:-1;613:13006:2;;;7232:7;613:13006;;;;;;-1:-1:-1;;;;;613:13006:2;7232:30;613:13006;;;;:::i;:::-;;;3039:25;:86;;3074:45;613:13006;3100:18;613:13006;3100:18;613:13006;3100:18;;:::i;:::-;613:13006;;3074:45;;;613:13006;3074:45;;613:13006;;:::i;:::-;;;:::i;:::-;3074:45;613:13006;;3074:45;;;;;;:::i;3039:86::-;613:13006;;;;;:::i;:::-;3039:86;;613:13006;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;-1:-1:-1;;613:13006:2;;;;;;4607:35;613:13006;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;613:13006:2;;;-1:-1:-1;613:13006:2;;;4607:18;613:13006;;;;;;;;;;;;-1:-1:-1;613:13006:2;;;;;;;4607:35;613:13006;;;;;;;;;;2176:235;-1:-1:-1;613:13006:2;;;2283:7;613:13006;;;;;;-1:-1:-1;;;;;613:13006:2;2317:19;;613:13006;;2176:235;:::o;613:13006::-;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;613:13006:2;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;;3984:217;-1:-1:-1;613:13006:2;;;7232:7;613:13006;;;;;;-1:-1:-1;;;;;613:13006:2;7232:30;613:13006;;-1:-1:-1;613:13006:2;;;4170:15;613:13006;;;;;;-1:-1:-1;;;;;613:13006:2;;3984:217::o;613:13006::-;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;5352:320;;6731:48;5352:320;;;5513:103;5521:41;719:10:9;;5521:41:2;:::i;5513:103::-;6705:7;;;;;:::i;:::-;6731:48;:::i;:::-;613:13006;;;5352:320::o;613:13006::-;;;-1:-1:-1;;;613:13006:2;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;:::o;7427:344::-;-1:-1:-1;613:13006:2;;;7232:7;613:13006;;;;;;-1:-1:-1;;;;;613:13006:2;7232:30;613:13006;;7635:23;;;:::i;:::-;-1:-1:-1;;;;;613:13006:2;;;;;;7676:16;;;613:13006;;;7676:51;;;;7427:344;7676:87;;;;;;;7668:96;;7427:344;:::o;7676:87::-;-1:-1:-1;;;;;613:13006:2;;;;;4607:18;613:13006;;;;;;;-1:-1:-1;4607:35:2;;:25;;613:13006;4607:35;613:13006;;7427:344;:::o;7676:51::-;7696:20;;;;;;;:::i;:::-;613:13006;7696:31;7676:51;;;;;;613:13006;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;613:13006:2;;;;;;;;:::o;:::-;;;:::i;:::-;:::o;:::-;;10774:1;613:13006;;;;;;;:::o;:::-;932:2:10;613:13006:2;;;932:2:10;613:13006:2;;;:::o;10324:560::-;;10451:23;;;:::i;:::-;-1:-1:-1;;;;;613:13006:2;;;;;;;;10451:31;;;613:13006;;10755:15;10813:21;613:13006;;;10546:16;10538:65;10546:16;;;10538:65;:::i;:::-;10736:7;;;:::i;:::-;-1:-1:-1;;;;;613:13006:2;;;;;10755:9;613:13006;;;;;;;10755:15;:20;613:13006;;10755:20;:::i;:::-;613:13006;;-1:-1:-1;;;;;613:13006:2;;;;;;10755:9;613:13006;;;;;10785:18;613:13006;;10785:18;:::i;:::-;613:13006;;10813:16;;613:13006;;10813:7;613:13006;;;;;;;10813:16;613:13006;;-1:-1:-1;;;;;;613:13006:2;-1:-1:-1;;;;;613:13006:2;;;;;;;;;;10813:21;10850:27;10560:1;613:13006;;10850:27;10324:560::o;613:13006::-;;;-1:-1:-1;;;613:13006:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;613:13006:2;;;;;;;10995:171;613:13006;;;;11069:15;613:13006;;;;;;;-1:-1:-1;;;;;;613:13006:2;;;-1:-1:-1;;;;;11122:23:2;613:13006;11122:23;:::i;:::-;613:13006;11113:46;613:13006;;;11113:46;10995:171::o;:::-;-1:-1:-1;613:13006:2;;;11069:15;613:13006;;;;;;;-1:-1:-1;;;;;;613:13006:2;-1:-1:-1;;;;;613:13006:2;;;;;-1:-1:-1;;;;;613:13006:2;11122:23;;;:::i;:::-;613:13006;;;;11113:46;-1:-1:-1;613:13006:2;;11113:46;10995:171::o;613:13006::-;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;613:13006:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;613:13006:2;;;;:::o;:::-;;;:::o;12161:778::-;;;;;1056:61:8;;1133:8;12331:15:2;;12366:72;613:13006;12366:72;613:13006;;;;;;;;;;;;;12366:72;;;;719:10:9;12366:72:2;;;;:::i;:::-;;;-1:-1:-1;;;;;613:13006:2;12366:72;;613:13006;;12366:72;;;12327:606;-1:-1:-1;12362:519:2;;12555:326;;:::i;:::-;613:13006;;;12605:18;;;613:13006;;-1:-1:-1;;;12647:60:2;;613:13006;12647:60;12366:72;12647:60;;;:::i;12601:266::-;12366:72;12754:95;;12362:519;-1:-1:-1;;;;;;613:13006:2;12488:51;;12481:58::o;12366:72::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;12327:606;12911:11;;;;12918:4;12911:11;:::o;613:13006::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;328:703:10;601:10;;597:51;;610:1;657:20;610:1;657:20;;718:9;;;817:17;;;;:::i;:::-;844:150;851:10;;;1003:21;;;328:703;:::o;844:150::-;877:11;;;:::i;:::-;773:2;;613:13006:2;919:39:10;926:31;932:24;613:13006:2;;;932:24:10;:::i;:::-;613:13006:2;;;;926:31:10;613:13006:2;;-1:-1:-1;;;;;;613:13006:2;;;919:39:10;902:56;;;;;;:::i;:::-;;613:13006:2;844:150:10;;;;711:75;613:13006:2;;;773:2:10;613:13006:2;;;;;;;711:75:10;613:13006:2;;;711:75:10;;;;;;613:13006:2;;;:::i;:::-;;;597:51:10;613:13006:2;;;;;;;;;;;;;;;597:51:10;613:13006:2;;;;;-1:-1:-1;;;613:13006:2;;;;627:10:10;:::o;613:13006:2:-;;;:::i;:::-;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "952800",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "approve(address,uint256)": "infinite",
                "balanceOf(address)": "2632",
                "getApproved(uint256)": "4654",
                "isApprovedForAll(address,address)": "2869",
                "name()": "infinite",
                "ownerOf(uint256)": "2616",
                "safeTransferFrom(address,address,uint256)": "infinite",
                "safeTransferFrom(address,address,uint256,bytes)": "infinite",
                "setApprovalForAll(address,bool)": "26707",
                "supportsInterface(bytes4)": "380",
                "symbol()": "infinite",
                "tokenURI(uint256)": "infinite",
                "transferFrom(address,address,uint256)": "infinite"
              },
              "internal": {
                "_approve(address,uint256)": "infinite",
                "_baseURI()": "infinite",
                "_beforeTokenTransfer(address,address,uint256)": "infinite",
                "_burn(uint256)": "infinite",
                "_checkOnERC721Received(address,address,uint256,bytes memory)": "infinite",
                "_exists(uint256)": "infinite",
                "_isApprovedOrOwner(address,uint256)": "infinite",
                "_mint(address,uint256)": "infinite",
                "_safeMint(address,uint256)": "infinite",
                "_safeMint(address,uint256,bytes memory)": "infinite",
                "_safeTransfer(address,address,uint256,bytes memory)": "infinite",
                "_setApprovalForAll(address,address,bool)": "infinite",
                "_transfer(address,address,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "getApproved(uint256)": "081812fc",
              "isApprovedForAll(address,address)": "e985e9c5",
              "name()": "06fdde03",
              "ownerOf(uint256)": "6352211e",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "symbol()": "95d89b41",
              "tokenURI(uint256)": "c87b56dd",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 133,
                "contract": "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
                "label": "_name",
                "offset": 0,
                "slot": "0",
                "type": "t_string_storage"
              },
              {
                "astId": 135,
                "contract": "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
                "label": "_symbol",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
              },
              {
                "astId": 139,
                "contract": "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
                "label": "_owners",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 143,
                "contract": "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
                "label": "_balances",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 147,
                "contract": "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
                "label": "_tokenApprovals",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 153,
                "contract": "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
                "label": "_operatorApprovals",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
              },
              "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
              },
              "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
        "IERC721": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "approved",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "_approved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Required interface of an ERC721 compliant contract.",
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
              },
              "ApprovalForAll(address,address,bool)": {
                "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
              }
            },
            "kind": "dev",
            "methods": {
              "approve(address,uint256)": {
                "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the number of tokens in ``owner``'s account."
              },
              "getApproved(uint256)": {
                "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
              },
              "ownerOf(uint256)": {
                "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "getApproved(uint256)": "081812fc",
              "isApprovedForAll(address,address)": "e985e9c5",
              "ownerOf(uint256)": "6352211e",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
        "IERC721Receiver": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "onERC721Received",
              "outputs": [
                {
                  "internalType": "bytes4",
                  "name": "",
                  "type": "bytes4"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
            "kind": "dev",
            "methods": {
              "onERC721Received(address,address,uint256,bytes)": {
                "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
              }
            },
            "title": "ERC721 token receiver interface",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "onERC721Received(address,address,uint256,bytes)": "150b7a02"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
        "ERC721Enumerable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "approved",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "_data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "tokenByIndex",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "tokenOfOwnerByIndex",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "tokenURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.",
            "kind": "dev",
            "methods": {
              "approve(address,uint256)": {
                "details": "See {IERC721-approve}."
              },
              "balanceOf(address)": {
                "details": "See {IERC721-balanceOf}."
              },
              "getApproved(uint256)": {
                "details": "See {IERC721-getApproved}."
              },
              "isApprovedForAll(address,address)": {
                "details": "See {IERC721-isApprovedForAll}."
              },
              "name()": {
                "details": "See {IERC721Metadata-name}."
              },
              "ownerOf(uint256)": {
                "details": "See {IERC721-ownerOf}."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "See {IERC721-safeTransferFrom}."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "See {IERC721-safeTransferFrom}."
              },
              "setApprovalForAll(address,bool)": {
                "details": "See {IERC721-setApprovalForAll}."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              },
              "symbol()": {
                "details": "See {IERC721Metadata-symbol}."
              },
              "tokenByIndex(uint256)": {
                "details": "See {IERC721Enumerable-tokenByIndex}."
              },
              "tokenOfOwnerByIndex(address,uint256)": {
                "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
              },
              "tokenURI(uint256)": {
                "details": "See {IERC721Metadata-tokenURI}."
              },
              "totalSupply()": {
                "details": "See {IERC721Enumerable-totalSupply}."
              },
              "transferFrom(address,address,uint256)": {
                "details": "See {IERC721-transferFrom}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "getApproved(uint256)": "081812fc",
              "isApprovedForAll(address,address)": "e985e9c5",
              "name()": "06fdde03",
              "ownerOf(uint256)": "6352211e",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "symbol()": "95d89b41",
              "tokenByIndex(uint256)": "4f6ccce7",
              "tokenOfOwnerByIndex(address,uint256)": "2f745c59",
              "tokenURI(uint256)": "c87b56dd",
              "totalSupply()": "18160ddd",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":\"ERC721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 133,
                "contract": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
                "label": "_name",
                "offset": 0,
                "slot": "0",
                "type": "t_string_storage"
              },
              {
                "astId": 135,
                "contract": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
                "label": "_symbol",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
              },
              {
                "astId": 139,
                "contract": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
                "label": "_owners",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 143,
                "contract": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
                "label": "_balances",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 147,
                "contract": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
                "label": "_tokenApprovals",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 153,
                "contract": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
                "label": "_operatorApprovals",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
              },
              {
                "astId": 1087,
                "contract": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
                "label": "_ownedTokens",
                "offset": 0,
                "slot": "6",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
              },
              {
                "astId": 1091,
                "contract": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
                "label": "_ownedTokensIndex",
                "offset": 0,
                "slot": "7",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "astId": 1094,
                "contract": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
                "label": "_allTokens",
                "offset": 0,
                "slot": "8",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "astId": 1098,
                "contract": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
                "label": "_allTokensIndex",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_uint256,t_uint256)"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_uint256)dyn_storage": {
                "base": "t_uint256",
                "encoding": "dynamic_array",
                "label": "uint256[]",
                "numberOfBytes": "32"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
              },
              "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => uint256))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_uint256)"
              },
              "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
              },
              "t_mapping(t_uint256,t_uint256)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
        "IERC721Enumerable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "approved",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "_approved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "tokenByIndex",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "tokenOfOwnerByIndex",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "See https://eips.ethereum.org/EIPS/eip-721",
            "kind": "dev",
            "methods": {
              "approve(address,uint256)": {
                "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the number of tokens in ``owner``'s account."
              },
              "getApproved(uint256)": {
                "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
              },
              "ownerOf(uint256)": {
                "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              },
              "tokenByIndex(uint256)": {
                "details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
              },
              "tokenOfOwnerByIndex(address,uint256)": {
                "details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
              },
              "totalSupply()": {
                "details": "Returns the total amount of tokens stored by the contract."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
              }
            },
            "title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "getApproved(uint256)": "081812fc",
              "isApprovedForAll(address,address)": "e985e9c5",
              "ownerOf(uint256)": "6352211e",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "tokenByIndex(uint256)": "4f6ccce7",
              "tokenOfOwnerByIndex(address,uint256)": "2f745c59",
              "totalSupply()": "18160ddd",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "IERC721Metadata": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "approved",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "_approved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "tokenURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "See https://eips.ethereum.org/EIPS/eip-721",
            "kind": "dev",
            "methods": {
              "approve(address,uint256)": {
                "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the number of tokens in ``owner``'s account."
              },
              "getApproved(uint256)": {
                "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
              },
              "name()": {
                "details": "Returns the token collection name."
              },
              "ownerOf(uint256)": {
                "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              },
              "symbol()": {
                "details": "Returns the token collection symbol."
              },
              "tokenURI(uint256)": {
                "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
              }
            },
            "title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "getApproved(uint256)": "081812fc",
              "isApprovedForAll(address,address)": "e985e9c5",
              "name()": "06fdde03",
              "ownerOf(uint256)": "6352211e",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "symbol()": "95d89b41",
              "tokenURI(uint256)": "c87b56dd",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "@openzeppelin/contracts/utils/Address.sol": {
        "Address": {
          "abi": [],
          "devdoc": {
            "details": "Collection of functions related to the address type",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212208cd05bf7402845abb8c453793f54a709d27d1e23b1a1084dc70ba6ed594481f964736f6c63430008100033",
              "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 0xD0 JUMPDEST 0xF7 BLOCKHASH 0x28 GASLIMIT 0xAB 0xB8 0xC4 MSTORE8 PUSH26 0x3F54A709D27D1E23B1A1084DC70BA6ED594481F964736F6C6343 STOP ADDMOD LT STOP CALLER ",
              "sourceMap": "179:7729:8:-:0;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "600080fdfea26469706673582212208cd05bf7402845abb8c453793f54a709d27d1e23b1a1084dc70ba6ed594481f964736f6c63430008100033",
              "opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 0xD0 JUMPDEST 0xF7 BLOCKHASH 0x28 GASLIMIT 0xAB 0xB8 0xC4 MSTORE8 PUSH26 0x3F54A709D27D1E23B1A1084DC70BA6ED594481F964736F6C6343 STOP ADDMOD LT STOP CALLER ",
              "sourceMap": "179:7729:8:-:0;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "11600",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "internal": {
                "functionCall(address,bytes memory)": "infinite",
                "functionCall(address,bytes memory,string memory)": "infinite",
                "functionCallWithValue(address,bytes memory,uint256)": "infinite",
                "functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
                "functionDelegateCall(address,bytes memory)": "infinite",
                "functionDelegateCall(address,bytes memory,string memory)": "infinite",
                "functionStaticCall(address,bytes memory)": "infinite",
                "functionStaticCall(address,bytes memory,string memory)": "infinite",
                "isContract(address)": "infinite",
                "sendValue(address payable,uint256)": "infinite",
                "verifyCallResult(bool,bytes memory,string memory)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "Context": {
          "abi": [],
          "devdoc": {
            "details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol": {
        "Strings": {
          "abi": [],
          "devdoc": {
            "details": "String operations.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212200585f1fdf487d9566089189fb62df4ef89bcef2d2d9bcd0b099654e838a9700264736f6c63430008100033",
              "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV DUP6 CALL REVERT DELEGATECALL DUP8 0xD9 JUMP PUSH1 0x89 XOR SWAP16 0xB6 0x2D DELEGATECALL 0xEF DUP10 0xBC 0xEF 0x2D 0x2D SWAP12 0xCD SIGNEXTEND MULMOD SWAP7 SLOAD 0xE8 CODESIZE 0xA9 PUSH17 0x264736F6C634300081000330000000000 ",
              "sourceMap": "146:1885:10:-:0;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "600080fdfea26469706673582212200585f1fdf487d9566089189fb62df4ef89bcef2d2d9bcd0b099654e838a9700264736f6c63430008100033",
              "opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV DUP6 CALL REVERT DELEGATECALL DUP8 0xD9 JUMP PUSH1 0x89 XOR SWAP16 0xB6 0x2D DELEGATECALL 0xEF DUP10 0xBC 0xEF 0x2D 0x2D SWAP12 0xCD SIGNEXTEND MULMOD SWAP7 SLOAD 0xE8 CODESIZE 0xA9 PUSH17 0x264736F6C634300081000330000000000 ",
              "sourceMap": "146:1885:10:-:0;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "11600",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "internal": {
                "toHexString(uint256)": "infinite",
                "toHexString(uint256,uint256)": "infinite",
                "toString(uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
        "ERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "IERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "base64-sol/base64.sol": {
        "Base64": {
          "abi": [],
          "devdoc": {
            "author": "Brecht Devos - <brecht@loopring.org>",
            "kind": "dev",
            "methods": {},
            "title": "Base64",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220755bde12374a43820bd1ea58c06990a7a49951665008edfcce29012954fd8e1964736f6c63430008100033",
              "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0x5BDE12374A43820BD1EA58C06990A7A49951665008ED 0xFC 0xCE 0x29 ADD 0x29 SLOAD REVERT DUP15 NOT PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ",
              "sourceMap": "186:4638:13:-:0;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "600080fdfea2646970667358221220755bde12374a43820bd1ea58c06990a7a49951665008edfcce29012954fd8e1964736f6c63430008100033",
              "opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0x5BDE12374A43820BD1EA58C06990A7A49951665008ED 0xFC 0xCE 0x29 ADD 0x29 SLOAD REVERT DUP15 NOT PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ",
              "sourceMap": "186:4638:13:-:0;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "11600",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "internal": {
                "decode(string memory)": "infinite",
                "encode(bytes memory)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Brecht Devos - <brecht@loopring.org>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Base64\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides functions for encoding/decoding base64\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"base64-sol/base64.sol\":\"Base64\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Provides functions for encoding/decoding base64",
            "version": 1
          }
        }
      },
      "contracts/FrensPoolShare.sol": {
        "FrensPoolShare": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "factoryAddress_",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "ssvRegistryAddress_",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "approved",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "exists",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amountInWei",
                  "type": "uint256"
                }
              ],
              "name": "getEthDecimalString",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "poolAddress",
                  "type": "address"
                }
              ],
              "name": "getOperatorsForPool",
              "outputs": [
                {
                  "internalType": "uint32[]",
                  "name": "",
                  "type": "uint32[]"
                },
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "getPoolById",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "incrementTokenId",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "userAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_pool",
                  "type": "address"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "renderTokenById",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "_data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "tokenByIndex",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "tokenOfOwnerByIndex",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "tokenURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "approve(address,uint256)": {
                "details": "See {IERC721-approve}."
              },
              "balanceOf(address)": {
                "details": "See {IERC721-balanceOf}."
              },
              "getApproved(uint256)": {
                "details": "See {IERC721-getApproved}."
              },
              "isApprovedForAll(address,address)": {
                "details": "See {IERC721-isApprovedForAll}."
              },
              "name()": {
                "details": "See {IERC721Metadata-name}."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "ownerOf(uint256)": {
                "details": "See {IERC721-ownerOf}."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "See {IERC721-safeTransferFrom}."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "See {IERC721-safeTransferFrom}."
              },
              "setApprovalForAll(address,bool)": {
                "details": "See {IERC721-setApprovalForAll}."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              },
              "symbol()": {
                "details": "See {IERC721Metadata-symbol}."
              },
              "tokenByIndex(uint256)": {
                "details": "See {IERC721Enumerable-tokenByIndex}."
              },
              "tokenOfOwnerByIndex(address,uint256)": {
                "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
              },
              "totalSupply()": {
                "details": "See {IERC721Enumerable-totalSupply}."
              },
              "transferFrom(address,address,uint256)": {
                "details": "See {IERC721-transferFrom}."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 1009,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 977,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 CALLVALUE PUSH3 0x3CC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 PUSH1 0x1F NOT SWAP1 PUSH1 0x1F SWAP1 PUSH3 0x598E CODESIZE DUP2 SWAP1 SUB DUP4 DUP2 ADD DUP6 AND DUP4 ADD SWAP2 SWAP1 DUP7 DUP4 GT DUP5 DUP5 LT OR PUSH3 0x3B6 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x3CC JUMPI PUSH3 0x52 DUP2 PUSH3 0x3F1 JUMP JUMPDEST SWAP4 PUSH3 0x62 PUSH1 0x20 DUP1 SWAP4 ADD PUSH3 0x3F1 JUMP JUMPDEST SWAP3 PUSH3 0x6D PUSH3 0x3D1 JUMP JUMPDEST SWAP3 PUSH1 0x12 DUP5 MSTORE PUSH18 0x7374616B696E6720636F6E20616D69676F73 PUSH1 0x70 SHL DUP2 DUP6 ADD MSTORE PUSH3 0x96 PUSH3 0x3D1 JUMP JUMPDEST SWAP1 PUSH1 0x5 DUP3 MSTORE PUSH5 0x4652454E53 PUSH1 0xD8 SHL DUP2 DUP4 ADD MSTORE DUP5 MLOAD SWAP7 DUP5 DUP9 GT PUSH3 0x3B6 JUMPI PUSH1 0x0 SWAP8 DUP9 SLOAD SWAP7 PUSH1 0x1 SWAP8 DUP9 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x3AB JUMPI JUMPDEST DUP6 DUP3 LT EQ PUSH3 0x397 JUMPI SWAP1 DUP2 DUP8 DUP5 SWAP4 GT PUSH3 0x344 JUMPI JUMPDEST POP DUP5 SWAP1 DUP8 DUP4 GT PUSH1 0x1 EQ PUSH3 0x2E3 JUMPI DUP12 SWAP3 PUSH3 0x2D7 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP8 SHL OR DUP9 SSTORE JUMPDEST DUP3 MLOAD SWAP5 DUP6 GT PUSH3 0x2C3 JUMPI DUP6 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x2B8 JUMPI JUMPDEST DUP4 DUP3 LT EQ PUSH3 0x2A4 JUMPI SWAP1 DUP2 DUP6 DUP8 SWAP7 SWAP6 SWAP5 SWAP4 GT PUSH3 0x24B JUMPI JUMPDEST POP DUP2 SWAP4 DUP6 GT PUSH1 0x1 EQ PUSH3 0x1E6 JUMPI POP POP DUP7 SWAP3 PUSH3 0x1DA JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP3 SHL OR SWAP1 SSTORE JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP3 AND CALLER SWAP1 DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP6 SWAP1 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP4 DUP6 SWAP4 SWAP1 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP10 LOG3 AND DUP4 PUSH1 0xD SLOAD AND OR PUSH1 0xD SSTORE AND SWAP1 PUSH1 0xE SLOAD AND OR PUSH1 0xE SSTORE PUSH2 0x5587 SWAP1 DUP2 PUSH3 0x407 DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x152 JUMP JUMPDEST DUP7 SWAP6 SWAP4 SWAP3 SWAP2 SWAP4 AND DUP6 DUP10 MSTORE DUP4 DUP10 KECCAK256 SWAP4 DUP10 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH3 0x231 JUMPI POP POP DUP5 GT PUSH3 0x217 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x166 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x209 JUMP JUMPDEST DUP5 DUP5 ADD MLOAD DUP7 SSTORE DUP9 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH3 0x1F7 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP DUP7 DUP10 MSTORE DUP3 DUP10 KECCAK256 DUP6 DUP1 DUP9 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP6 DUP10 LT PUSH3 0x29A JUMPI JUMPDEST SWAP2 DUP9 SWAP8 DUP11 SWAP3 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x28B JUMPI POP POP PUSH3 0x13B JUMP JUMPDEST DUP12 DUP2 SSTORE DUP9 SWAP8 POP DUP10 SWAP2 ADD PUSH3 0x27B JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x26A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x123 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xF5 JUMP JUMPDEST SWAP1 DUP5 DUP11 SWAP5 AND SWAP2 DUP13 DUP1 MSTORE DUP7 DUP14 KECCAK256 SWAP3 DUP14 JUMPDEST DUP9 DUP3 DUP3 LT PUSH3 0x32D JUMPI POP POP DUP5 GT PUSH3 0x313 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP9 SSTORE PUSH3 0x109 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x305 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP14 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x2F2 JUMP JUMPDEST SWAP1 SWAP2 POP DUP11 DUP1 MSTORE DUP5 DUP12 KECCAK256 DUP8 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP8 DUP7 LT PUSH3 0x38D JUMPI JUMPDEST SWAP2 DUP12 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x37E JUMPI POP POP PUSH3 0xDF JUMP JUMPDEST DUP14 DUP2 SSTORE DUP6 SWAP5 POP DUP12 SWAP2 ADD PUSH3 0x36E JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x360 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xCA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x3B6 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x3CC JUMPI JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0xBC59B38 EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0xD4D1513 EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0x4F3130FA EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x4F558E79 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xA090F9B4 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0xA2D6C6DA EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0xEDD148A2 EQ PUSH2 0x143 JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE PUSH2 0x16C3 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x16A3 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x1645 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xF4F JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xEC5 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xDCC JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xCDF JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xC5F JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xB9D JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xB73 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xB0E JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xAE2 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xAC3 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xA17 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x9DB JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x93D JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x8F5 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x841 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x817 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x7C3 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x5BE JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x589 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x499 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x426 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x31B JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x236 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND SUB PUSH2 0xE JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x256 DUP2 PUSH2 0x224 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND PUSH4 0x780E9D63 PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x27C JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x80AC58CD PUSH1 0xE0 SHL DUP2 EQ SWAP2 POP DUP2 ISZERO PUSH2 0x2AE JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x29D JUMPI JUMPDEST POP CODESIZE PUSH2 0x271 JUMP JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP CODESIZE PUSH2 0x296 JUMP JUMPDEST PUSH4 0x5B5E139F PUSH1 0xE0 SHL DUP2 EQ SWAP2 POP PUSH2 0x28F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x2D2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2C2 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x2FB DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x318 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x2E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x423 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP1 DUP1 SLOAD SWAP1 PUSH1 0x1 SWAP2 DUP1 DUP4 SHR SWAP3 DUP1 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x419 JUMPI JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP7 LT DUP6 EQ PUSH2 0x405 JUMPI DUP6 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP5 SWAP1 DUP2 ISZERO PUSH2 0x3E4 JUMPI POP PUSH1 0x1 EQ PUSH2 0x38C JUMPI JUMPDEST PUSH2 0x388 DUP8 PUSH2 0x37C DUP2 DUP10 SUB DUP3 PUSH2 0xE78 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x307 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 MSTORE SWAP5 POP SWAP2 SWAP3 SWAP2 PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 JUMPDEST DUP4 DUP7 LT PUSH2 0x3D3 JUMPI POP POP POP SWAP2 ADD SWAP1 POP PUSH2 0x37C DUP3 PUSH2 0x388 CODESIZE DUP1 PUSH2 0x36C JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD MSTORE SWAP5 DUP3 ADD SWAP5 DUP2 ADD PUSH2 0x3B7 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP6 MSTORE POP POP POP POP SWAP1 ISZERO ISZERO PUSH1 0x5 SHL ADD SWAP1 POP PUSH2 0x37C DUP3 PUSH2 0x388 CODESIZE DUP1 PUSH2 0x36C JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x348 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH2 0x445 PUSH1 0x4 CALLDATALOAD PUSH2 0x1957 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xE JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xE JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xE JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x4B3 PUSH2 0x457 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x4BF DUP2 PUSH2 0x186D JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP1 DUP3 AND DUP2 EQ PUSH2 0x53A JUMPI PUSH2 0x4F1 SWAP4 PUSH2 0x4EC SWAP2 CALLER EQ SWAP1 DUP2 ISZERO PUSH2 0x4F3 JUMPI JUMPDEST POP PUSH2 0x18E5 JUMP JUMPDEST PUSH2 0x1E1B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x534 SWAP2 POP PUSH2 0x52D SWAP1 CALLER SWAP1 JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CODESIZE PUSH2 0x4E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x5D8 PUSH2 0x457 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x5E4 PUSH2 0x46D JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 PUSH1 0xD SLOAD AND PUSH2 0x65A PUSH1 0x40 SWAP6 PUSH2 0x62F DUP8 MLOAD DUP1 SWAP5 PUSH4 0x3B7A17C5 PUSH1 0xE1 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE DUP2 PUSH1 0x24 PUSH1 0x20 SWAP8 DUP9 SWAP4 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x7B6 JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x789 JUMPI JUMPDEST POP PUSH2 0x236F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xC DUP5 MSTORE DUP8 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP5 MLOAD SWAP4 PUSH2 0x666 DUP6 PUSH2 0xE17 JUMP JUMPDEST PUSH1 0x0 DUP6 MSTORE DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x747 JUMPI PUSH1 0x0 DUP7 PUSH2 0x744 PUSH2 0x73F DUP9 DUP9 DUP9 DUP2 DUP10 PUSH2 0x6AF PUSH2 0x6AA PUSH2 0x6A6 DUP5 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO ISZERO SWAP1 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x23D0 JUMP JUMPDEST PUSH2 0x6B9 DUP3 DUP5 PUSH2 0x2043 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6DB DUP2 SLOAD PUSH2 0x1C73 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x714 DUP4 PUSH2 0x6F5 DUP5 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP9 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 DUP11 MLOAD LOG4 PUSH2 0x1F2F JUMP JUMPDEST PUSH2 0x1ADE JUMP JUMPDEST MLOAD RETURN JUMPDEST PUSH1 0x64 SWAP1 DUP7 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x7A9 SWAP2 POP DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x7AF JUMPI JUMPDEST PUSH2 0x7A1 DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x235A JUMP JUMPDEST CODESIZE PUSH2 0x629 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x797 JUMP JUMPDEST PUSH2 0x7BE PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x621 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0xE JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0xE JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH2 0x4F1 PUSH2 0x829 CALLDATASIZE PUSH2 0x7E2 JUMP JUMPDEST SWAP2 PUSH2 0x83C PUSH2 0x837 DUP5 CALLER PUSH2 0x1B02 JUMP JUMPDEST PUSH2 0x19E9 JUMP JUMPDEST PUSH2 0x1C9D JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x85B PUSH2 0x457 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x868 DUP2 PUSH2 0x17F5 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x89C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 DUP2 MSTORE SWAP1 DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD SWAP2 DUP3 MSTORE SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A206F776E657220696E646578206F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x74206F6620626F756E6473 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH2 0x4F1 PUSH2 0x907 CALLDATASIZE PUSH2 0x7E2 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD DUP5 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x930 JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP5 MSTORE PUSH2 0x1A62 JUMP JUMPDEST PUSH2 0x938 PUSH2 0xE00 JUMP JUMPDEST PUSH2 0x924 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH4 0x3B7A17C5 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0x993 SWAP2 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x9CE JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x9B6 JUMPI POP PUSH2 0x236F JUMP JUMPDEST PUSH2 0x388 PUSH2 0x9A1 PUSH1 0xB SLOAD PUSH2 0x23B4 JUMP JUMPDEST DUP1 PUSH1 0xB SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP3 MSTORE JUMP JUMPDEST PUSH2 0x7A9 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x7AF JUMPI PUSH2 0x7A1 DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x9D6 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x986 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0xA69 JUMPI PUSH1 0x8 PUSH1 0x0 MSTORE PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A20676C6F62616C20696E646578206F PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x7574206F6620626F756E6473 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH2 0x445 PUSH1 0x4 CALLDATALOAD PUSH2 0x186D JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH2 0xB06 PUSH2 0xB01 PUSH2 0x457 JUMP JUMPDEST PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x423 JUMPI PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH2 0xB3A CALLER DUP4 EQ PUSH2 0x175A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0xA SSTORE PUSH1 0x40 MLOAD SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP5 LOG3 RETURN JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x423 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP1 PUSH1 0x1 SWAP1 DUP2 SLOAD DUP1 DUP4 SHR SWAP3 DUP1 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0xC55 JUMPI JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP7 LT DUP6 EQ PUSH2 0x405 JUMPI DUP6 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP5 SWAP1 DUP2 ISZERO PUSH2 0x3E4 JUMPI POP PUSH1 0x1 EQ PUSH2 0xBFC JUMPI PUSH2 0x388 DUP8 PUSH2 0x37C DUP2 DUP10 SUB DUP3 PUSH2 0xE78 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE SWAP5 POP SWAP2 SWAP3 SWAP2 PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 JUMPDEST DUP4 DUP7 LT PUSH2 0xC44 JUMPI POP POP POP SWAP2 ADD SWAP1 POP PUSH2 0x37C DUP3 PUSH2 0x388 CODESIZE DUP1 PUSH2 0x36C JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD MSTORE SWAP5 DUP3 ADD SWAP5 DUP2 ADD PUSH2 0xC28 JUMP JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0xBC9 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE JUMPI PUSH2 0xC82 PUSH2 0xC7D PUSH2 0x457 JUMP JUMPDEST PUSH2 0x53BA JUMP JUMPDEST PUSH1 0x40 SWAP3 SWAP2 SWAP3 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD PUSH1 0x40 DUP5 MSTORE DUP5 MLOAD DUP1 SWAP2 MSTORE DUP2 PUSH1 0x60 DUP6 ADD SWAP6 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xCBB JUMPI DUP6 DUP8 SUB DUP5 DUP8 ADD MSTORE DUP6 DUP1 PUSH2 0x388 DUP10 DUP9 PUSH2 0x2E2 JUMP JUMPDEST DUP3 MLOAD PUSH4 0xFFFFFFFF AND DUP8 MSTORE SWAP6 DUP4 ADD SWAP6 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xCA1 JUMP JUMPDEST DUP1 ISZERO ISZERO SUB PUSH2 0xE JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0xCF9 PUSH2 0x457 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0xD05 DUP2 PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 CALLER DUP4 EQ PUSH2 0xD87 JUMPI DUP2 PUSH2 0xD44 PUSH2 0xD55 SWAP3 CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE CALLER SWAP1 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP1 PUSH1 0x20 SWAP1 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x388 PUSH2 0xDEC PUSH1 0x4 CALLDATALOAD PUSH2 0x29B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x2E2 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xE33 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xE3B PUSH2 0xE00 JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xE33 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xE33 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xE33 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xEB8 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH2 0xEC0 PUSH2 0xE00 JUMP JUMPDEST PUSH2 0xEAD JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0xEDF PUSH2 0x457 JUMP JUMPDEST PUSH2 0xEE7 PUSH2 0x483 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xE JUMPI CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH2 0xE JUMPI DUP3 PUSH1 0x4 ADD CALLDATALOAD SWAP2 PUSH2 0xF14 DUP4 PUSH2 0xE9A JUMP JUMPDEST SWAP3 PUSH2 0xF22 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xE78 JUMP JUMPDEST DUP1 DUP5 MSTORE CALLDATASIZE PUSH1 0x24 DUP3 DUP8 ADD ADD GT PUSH2 0xE JUMPI PUSH1 0x20 DUP2 PUSH1 0x0 SWAP3 PUSH1 0x24 PUSH2 0x4F1 SWAP9 ADD DUP4 DUP9 ADD CALLDATACOPY DUP6 ADD ADD MSTORE PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x1A62 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xF88 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x241C JUMP JUMPDEST PUSH2 0xFAC PUSH2 0xF9F DUP3 PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x378DE45B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP1 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 SWAP4 DUP6 SWAP2 DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH2 0xFF5 SWAP1 DUP6 DUP2 PUSH1 0x24 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1638 JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x1621 JUMPI JUMPDEST POP PUSH2 0x5256 JUMP JUMPDEST PUSH2 0x1032 DUP4 MLOAD PUSH4 0x33C71805 PUSH1 0xE1 SHL DUP2 MSTORE DUP7 DUP2 DUP1 PUSH2 0x1018 DUP10 DUP13 DUP4 ADD SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP3 MSTORE JUMP JUMPDEST SUB DUP2 DUP8 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1614 JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x15E7 JUMPI POP PUSH2 0x5256 JUMP JUMPDEST SWAP7 PUSH1 0x0 PUSH2 0x1047 PUSH2 0x1041 DUP6 PUSH2 0x2703 JUMP JUMPDEST SWAP3 PUSH2 0x53BA JUMP JUMPDEST POP SWAP4 DUP6 MLOAD SWAP9 DUP10 DUP1 SWAP3 PUSH4 0x1865C57D PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x15DA JUMPI JUMPDEST PUSH1 0x0 SWAP8 PUSH2 0x15B7 JUMPI JUMPDEST POP PUSH2 0x1075 DUP6 PUSH2 0x25AF JUMP JUMPDEST SWAP7 DUP5 MLOAD DUP1 SWAP9 DUP9 DUP3 ADD PUSH2 0x109F SWAP1 PUSH1 0x11 SWAP1 PUSH17 0x6672656E20706F6F6C2073686172652023 PUSH1 0x78 SHL DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0x10A8 SWAP2 PUSH2 0x24C2 JUMP JUMPDEST SUB SWAP9 PUSH1 0x1F NOT SWAP10 DUP11 DUP2 ADD DUP11 MSTORE PUSH2 0x10BD SWAP1 DUP11 PUSH2 0xE78 JUMP JUMPDEST DUP6 MLOAD SWAP4 DUP5 DUP10 DUP2 ADD PUSH2 0x10F2 SWAP1 PUSH1 0x1B SWAP1 PUSH32 0x74686973206672656E206861732061206465706F736974206F66200000000000 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0x10FC SWAP1 DUP4 PUSH2 0x24C2 JUMP JUMPDEST PUSH13 0x1022BA341034B7103837B7B61 PUSH1 0x9D SHL DUP2 MSTORE PUSH1 0xD ADD PUSH2 0x111C SWAP1 DUP7 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x207769746820636C61696D61626C652062616C616E6365206F66200000000000 DUP2 MSTORE PUSH1 0x1B ADD PUSH2 0x114C SWAP1 DUP5 PUSH2 0x24C2 JUMP JUMPDEST PUSH4 0x408AE8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD SUB DUP12 DUP2 ADD DUP7 MSTORE PUSH2 0x1169 SWAP1 DUP7 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x1172 DUP9 PUSH2 0x2919 JUMP JUMPDEST PUSH2 0x117B SWAP1 PUSH2 0x2830 JUMP JUMPDEST SWAP8 PUSH2 0x1185 SWAP1 PUSH2 0x25AF JUMP JUMPDEST SWAP4 DUP7 MLOAD ISZERO PUSH1 0x0 EQ PUSH2 0x159F JUMPI PUSH2 0x1198 PUSH2 0x251E JUMP JUMPDEST SWAP5 JUMPDEST DUP8 MLOAD PUSH2 0x1587 JUMPI PUSH2 0x11A8 PUSH2 0x251E JUMP JUMPDEST SWAP7 JUMPDEST DUP9 MLOAD PUSH2 0x156F JUMPI PUSH2 0x11B8 PUSH2 0x251E JUMP JUMPDEST SWAP9 JUMPDEST DUP1 MLOAD PUSH2 0x153F JUMPI POP PUSH2 0x11C9 PUSH2 0x251E JUMP JUMPDEST SWAP10 JUMPDEST MLOAD PUSH9 0x3D913730B6B2911D11 PUSH1 0xB9 SHL SWAP13 DUP2 ADD SWAP13 DUP14 MSTORE SWAP13 DUP14 SWAP13 PUSH1 0x9 ADD PUSH2 0x11EE SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH18 0x111610113232B9B1B934B83A34B7B7111D11 PUSH1 0x71 SHL DUP2 MSTORE PUSH1 0x12 ADD PUSH2 0x1212 SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x222C202265787465726E616C5F75726C223A2268747470733A2F2F6672656E73 DUP2 MSTORE PUSH11 0x2E66756E2F746F6B656E2F PUSH1 0xA8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2B ADD PUSH2 0x1255 SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x222C202261747472696275746573223A205B7B2274726169745F74797065223A DUP2 MSTORE PUSH18 0x10113837B7B6111610113B30B63AB2911D11 PUSH1 0x71 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x32 ADD PUSH2 0x129F SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x227D2C7B2274726169745F74797065223A20226465706F736974222C20227661 DUP2 MSTORE PUSH7 0x363AB2911D1011 PUSH1 0xC9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x27 ADD PUSH2 0x12DE SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH4 0x408AE8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH32 0x227D2C7B2274726169745F74797065223A2022636C61696D61626C65222C2022 DUP2 MSTORE PUSH9 0x3B30B63AB2911D1011 PUSH1 0xB9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x29 ADD PUSH2 0x132C SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH4 0x408AE8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH32 0x227D2C7B2274726169745F74797065223A2022706F6F6C207374617465222C20 DUP2 MSTORE PUSH10 0x113B30B63AB2911D1011 PUSH1 0xB1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2A ADD PUSH2 0x137B SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x227D2C7B2274726169745F74797065223A20226F70657261746F7231222C2022 DUP2 MSTORE PUSH9 0x3B30B63AB2911D1011 PUSH1 0xB9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x29 ADD PUSH2 0x13BC SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x227D2C7B2274726169745F74797065223A20226F70657261746F7232222C2022 DUP2 MSTORE PUSH9 0x3B30B63AB2911D1011 PUSH1 0xB9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x29 ADD PUSH2 0x13FD SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x227D2C7B2274726169745F74797065223A20226F70657261746F7233222C2022 DUP2 MSTORE PUSH9 0x3B30B63AB2911D1011 PUSH1 0xB9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x29 ADD PUSH2 0x143E SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x227D2C7B2274726169745F74797065223A20226F70657261746F7234222C2022 DUP2 MSTORE PUSH9 0x3B30B63AB2911D1011 PUSH1 0xB9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x29 ADD PUSH2 0x147F SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH15 0x113EAE96101134B6B0B3B2911D1011 PUSH1 0x89 SHL DUP2 MSTORE PUSH1 0xF ADD PUSH32 0x646174613A696D6167652F7376672B786D6C3B6261736536342C000000000000 DUP2 MSTORE PUSH1 0x1A ADD PUSH2 0x14C6 SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH2 0x227D PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 ADD SUB DUP3 DUP2 ADD DUP3 MSTORE PUSH2 0x14E1 SWAP1 DUP3 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x14EA SWAP1 PUSH2 0x2830 JUMP JUMPDEST DUP3 MLOAD PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 SWAP5 DUP2 ADD SWAP5 DUP6 MSTORE SWAP4 DUP5 SWAP2 SWAP1 PUSH1 0x1D ADD PUSH2 0x1523 SWAP2 PUSH2 0x24C2 JUMP JUMPDEST SUB SWAP1 DUP2 ADD DUP4 MSTORE PUSH2 0x1533 SWAP1 DUP4 PUSH2 0xE78 JUMP JUMPDEST MLOAD PUSH2 0x388 DUP2 SWAP3 DUP3 PUSH2 0x307 JUMP JUMPDEST PUSH2 0x1564 PUSH2 0x155B PUSH2 0x1551 PUSH2 0x1569 SWAP4 PUSH2 0x250D JUMP JUMPDEST MLOAD PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x548E JUMP JUMPDEST SWAP10 PUSH2 0x11CB JUMP JUMPDEST PUSH2 0x1581 PUSH2 0x1564 PUSH2 0x155B PUSH2 0x1551 DUP13 PUSH2 0x24FC JUMP JUMPDEST SWAP9 PUSH2 0x11BA JUMP JUMPDEST PUSH2 0x1599 PUSH2 0x1564 PUSH2 0x155B PUSH2 0x1551 DUP12 PUSH2 0x24EB JUMP JUMPDEST SWAP7 PUSH2 0x11AA JUMP JUMPDEST PUSH2 0x15B1 PUSH2 0x1564 PUSH2 0x155B PUSH2 0x1551 DUP11 PUSH2 0x24D5 JUMP JUMPDEST SWAP5 PUSH2 0x119A JUMP JUMPDEST PUSH2 0x15D3 SWAP2 SWAP8 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x15CB DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2463 JUMP JUMPDEST SWAP6 CODESIZE PUSH2 0x106B JUMP JUMPDEST PUSH2 0x15E2 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x1063 JUMP JUMPDEST PUSH2 0x1607 SWAP2 POP DUP8 RETURNDATASIZE DUP10 GT PUSH2 0x160D JUMPI JUMPDEST PUSH2 0x15FF DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2454 JUMP JUMPDEST CODESIZE PUSH2 0xFEF JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x15F5 JUMP JUMPDEST PUSH2 0x161C PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x1025 JUMP JUMPDEST PUSH2 0x1607 SWAP2 POP DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x160D JUMPI PUSH2 0x15FF DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x1640 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0xFE7 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x1697 PUSH2 0x1666 PUSH2 0x457 JUMP JUMPDEST PUSH2 0x166E PUSH2 0x483 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 DUP7 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SWAP1 JUMP JUMPDEST SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x388 PUSH2 0xDEC PUSH1 0x4 CALLDATALOAD PUSH2 0x5256 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x16DD PUSH2 0x457 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x16F6 SWAP1 DUP3 AND CALLER EQ PUSH2 0x175A JUMP JUMPDEST DUP2 AND ISZERO PUSH2 0x1706 JUMPI PUSH2 0x4F1 SWAP1 PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1761 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0xA SLOAD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP2 DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 AND OR PUSH1 0xA SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 PUSH1 0x40 MLOAD LOG3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x1815 JUMPI PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x188E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x32B73A103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x18EC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x198F JUMPI PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x19F0 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1A5C DUP3 PUSH2 0xE17 JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST SWAP2 PUSH2 0x1A89 SWAP4 SWAP2 PUSH2 0x73F SWAP4 PUSH2 0x1A79 PUSH2 0x837 DUP5 CALLER PUSH2 0x1B02 JUMP JUMPDEST PUSH2 0x1A84 DUP4 DUP4 DUP4 PUSH2 0x1C9D JUMP JUMPDEST PUSH2 0x1FF0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1AE5 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1AFE PUSH1 0x4 DUP3 ADD PUSH2 0x1A8B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1B93 JUMPI PUSH2 0x1B28 DUP3 PUSH2 0x186D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND DUP2 EQ SWAP5 SWAP1 SWAP2 SWAP1 DUP6 ISZERO PUSH2 0x1B7B JUMPI JUMPDEST POP POP POP DUP3 ISZERO PUSH2 0x1B51 JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0xFF SWAP3 POP PUSH2 0x1B76 SWAP2 SWAP1 PUSH2 0x516 JUMP JUMPDEST SLOAD AND SWAP1 JUMP JUMPDEST PUSH2 0x1B88 SWAP2 SWAP3 SWAP4 SWAP6 POP PUSH2 0x1957 JUMP JUMPDEST AND EQ SWAP2 CODESIZE DUP1 DUP1 PUSH2 0x1B43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1BF4 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 ADD SWAP2 SWAP1 DUP3 GT PUSH2 0x1C6B JUMPI JUMP JUMPDEST PUSH2 0x1A89 PUSH2 0x1C45 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1C6B JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1C6B JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1C6B JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x1CA7 DUP4 PUSH2 0x186D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP3 SWAP1 SWAP2 DUP3 AND DUP4 SWAP1 SUB PUSH2 0x1D6E JUMPI PUSH2 0x1D01 PUSH2 0x1D45 SWAP3 DUP3 AND SWAP5 PUSH2 0x1CD3 DUP7 ISZERO ISZERO PUSH2 0x1BED JUMP JUMPDEST PUSH2 0x1CDE DUP8 DUP5 DUP4 PUSH2 0x206E JUMP JUMPDEST PUSH2 0x1CE7 DUP8 PUSH2 0x1DC5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1D0B DUP2 SLOAD PUSH2 0x1C5C JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1D2F DUP2 SLOAD PUSH2 0x1C73 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x6F5 DUP6 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E73666572206F6620746F6B656E20746861742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x39903737BA1037BBB7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1DF2 DUP4 PUSH2 0x186D JUMP JUMPDEST AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP3 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x1E54 DUP5 PUSH2 0x186D JUMP JUMPDEST AND SWAP2 AND SWAP1 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xE JUMPI MLOAD PUSH2 0x318 DUP2 PUSH2 0x224 JUMP JUMPDEST PUSH2 0x318 SWAP4 SWAP3 PUSH1 0x80 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x318 SWAP3 SWAP2 ADD SWAP1 PUSH2 0x2E2 JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x1F2A JUMPI RETURNDATASIZE SWAP1 PUSH2 0x1F10 DUP3 PUSH2 0xE9A JUMP JUMPDEST SWAP2 PUSH2 0x1F1E PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xE78 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 DUP1 EXTCODESIZE ISZERO PUSH2 0x1FE8 JUMPI PUSH2 0x1F61 PUSH1 0x20 SWAP2 PUSH1 0x0 SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP5 DUP2 SWAP4 PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP10 DUP11 DUP5 MSTORE CALLER PUSH1 0x4 DUP6 ADD PUSH2 0x1E96 JUMP JUMPDEST SUB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x1FB8 JUMPI JUMPDEST POP PUSH2 0x1FAA JUMPI PUSH2 0x1F84 PUSH2 0x1EFF JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 PUSH2 0x1FA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1AFE PUSH1 0x4 DUP3 ADD PUSH2 0x1A8B JUMP JUMPDEST PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1FDA SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1FE1 JUMPI JUMPDEST PUSH2 0x1FD2 DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1E81 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x1F77 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1FC8 JUMP JUMPDEST POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x2023 JUMPI PUSH2 0x1F61 SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP11 DUP12 DUP6 MSTORE CALLER PUSH1 0x4 DUP7 ADD PUSH2 0x1EC1 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x204D DUP2 PUSH2 0x21CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2065 JUMPI PUSH2 0x1A89 SWAP2 POP PUSH2 0x2244 JUMP JUMPDEST PUSH2 0x1A89 SWAP2 PUSH2 0x2193 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP2 DUP3 PUSH2 0x20A8 JUMPI POP PUSH2 0x208C DUP4 PUSH2 0x21CB JUMP JUMPDEST DUP4 AND DUP1 PUSH2 0x209F JUMPI POP POP PUSH2 0x1A89 SWAP2 POP PUSH2 0x2244 JUMP JUMPDEST SUB PUSH2 0x2065 JUMPI POP POP JUMP JUMPDEST DUP2 DUP6 AND DUP4 SUB PUSH2 0x20B8 JUMPI JUMPDEST POP PUSH2 0x208C JUMP JUMPDEST PUSH2 0x212C PUSH2 0x20C4 DUP3 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0x2186 JUMPI JUMPDEST PUSH2 0x211D PUSH1 0x0 SWAP4 DUP8 DUP6 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP6 KECCAK256 SLOAD DUP4 DUP2 SUB PUSH2 0x2133 JUMPI JUMPDEST POP DUP5 PUSH2 0x2102 DUP10 PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE CODESIZE PUSH2 0x20B2 JUMP JUMPDEST DUP8 DUP7 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP7 KECCAK256 DUP5 DUP8 MSTORE PUSH1 0x20 MSTORE PUSH2 0x217F PUSH1 0x40 DUP8 KECCAK256 SLOAD DUP1 PUSH2 0x216E DUP5 PUSH2 0x211D DUP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE CODESIZE PUSH2 0x20EC JUMP JUMPDEST PUSH2 0x218E PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x20D1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x219F DUP2 PUSH2 0x17F5 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 DUP5 DUP4 MSTORE PUSH1 0x20 MSTORE DUP1 DUP4 DUP4 KECCAK256 SSTORE DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x2237 JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0x8 SSTORE DUP2 LT ISZERO PUSH2 0x222A JUMPI JUMPDEST PUSH1 0x8 PUSH1 0x0 MSTORE PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD SSTORE JUMP JUMPDEST PUSH2 0x2232 PUSH2 0x202C JUMP JUMPDEST PUSH2 0x2200 JUMP JUMPDEST PUSH2 0x223F PUSH2 0xE00 JUMP JUMPDEST PUSH2 0x21F0 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x0 NOT SWAP3 SWAP1 DUP4 DUP2 ADD DUP2 DUP2 GT PUSH2 0x234D JUMPI JUMPDEST PUSH2 0x22F4 PUSH1 0x0 SWAP4 DUP5 SWAP3 DUP2 DUP5 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE DUP5 PUSH1 0x40 DUP6 KECCAK256 SLOAD SWAP2 LT ISZERO PUSH2 0x2340 JUMPI JUMPDEST DUP7 DUP5 MSTORE PUSH2 0x22E3 PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE2 SWAP6 DUP7 DUP2 ADD SLOAD SWAP1 DUP4 LT ISZERO PUSH2 0x2333 JUMPI JUMPDEST DUP9 DUP7 MSTORE DUP1 DUP4 PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD SSTORE PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE DUP3 SLOAD SWAP4 DUP5 ISZERO PUSH2 0x231F JUMPI DUP5 ADD SWAP4 DUP1 DUP6 LT ISZERO PUSH2 0x2312 JUMPI JUMPDEST DUP4 DUP4 MSTORE ADD SSTORE SSTORE JUMP JUMPDEST PUSH2 0x231A PUSH2 0x202C JUMP JUMPDEST PUSH2 0x230A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH2 0x233B PUSH2 0x202C JUMP JUMPDEST PUSH2 0x22AB JUMP JUMPDEST PUSH2 0x2348 PUSH2 0x202C JUMP JUMPDEST PUSH2 0x2276 JUMP JUMPDEST PUSH2 0x2355 PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x2258 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xE JUMPI MLOAD PUSH2 0x318 DUP2 PUSH2 0xCD5 JUMP JUMPDEST ISZERO PUSH2 0x2376 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x1B5D5CDD0818994818481CDD185ADA5B99C81C1BDBDB PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x0 NOT DUP2 EQ PUSH2 0x23C4 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x23CC PUSH2 0x1C45 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x23D7 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2423 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x1B9BDD08195E1A5CDD PUSH1 0xBA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xE JUMPI MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0xE JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xE JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xE JUMPI DUP1 MLOAD PUSH2 0x2496 DUP2 PUSH2 0xE9A JUMP JUMPDEST SWAP3 PUSH2 0x24A4 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xE78 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0xE JUMPI PUSH2 0x318 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST SWAP1 PUSH2 0x23CC PUSH1 0x20 SWAP3 DUP3 DUP2 MLOAD SWAP5 DUP6 SWAP3 ADD PUSH2 0x2BF JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP1 MLOAD ISZERO PUSH2 0x24E3 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x23CC PUSH2 0x202C JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP1 MLOAD PUSH1 0x1 LT ISZERO PUSH2 0x24E3 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 DUP1 MLOAD PUSH1 0x2 LT ISZERO PUSH2 0x24E3 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 SWAP1 DUP1 MLOAD PUSH1 0x3 LT ISZERO PUSH2 0x24E3 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x252B DUP3 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x7 DUP3 MSTORE PUSH7 0x139BDD0814D95D PUSH1 0xCA SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x254E DUP3 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x1 DUP3 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x2568 DUP3 PUSH2 0xE9A JUMP JUMPDEST PUSH2 0x2575 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0xE78 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x2586 PUSH1 0x1F NOT SWAP2 PUSH2 0xE9A JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x25A2 JUMPI ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x25AA PUSH2 0x202C JUMP JUMPDEST ADD ADD SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x264B JUMPI PUSH1 0x0 DUP2 DUP2 DUP2 DUP1 JUMPDEST PUSH2 0x2633 JUMPI POP PUSH2 0x25CA DUP2 PUSH2 0x255E JUMP JUMPDEST SWAP4 JUMPDEST PUSH2 0x25D6 JUMPI POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0x2626 JUMPI JUMPDEST DUP1 SWAP2 PUSH1 0xA SWAP2 PUSH2 0x2610 PUSH1 0x30 DUP5 DUP5 MOD DUP2 ADD DUP1 SWAP2 GT PUSH2 0x2619 JUMPI JUMPDEST PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP7 BYTE SWAP2 DUP8 PUSH2 0x2590 JUMP JUMPDEST MSTORE8 DIV SWAP1 DUP2 PUSH2 0x25CC JUMP JUMPDEST PUSH2 0x2621 PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x25FA JUMP JUMPDEST PUSH2 0x262E PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x25E3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2640 PUSH1 0xA SWAP2 PUSH2 0x23B4 JUMP JUMPDEST SWAP2 DIV DUP1 DUP5 SWAP3 SWAP2 PUSH2 0x25BC JUMP JUMPDEST POP PUSH2 0x318 PUSH2 0x2541 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xFE SHL SUB DUP2 GT PUSH1 0x1 AND PUSH2 0x266C JUMPI JUMPDEST PUSH1 0x2 SHL SWAP1 JUMP JUMPDEST PUSH2 0x2674 PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x2666 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV PUSH1 0x2 GT DUP2 ISZERO ISZERO AND PUSH2 0x2690 JUMPI JUMPDEST PUSH1 0x1 SHL SWAP1 JUMP JUMPDEST PUSH2 0x2698 PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x268A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x26AB JUMPI JUMPDEST PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x26B3 PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x26A4 JUMP JUMPDEST ISZERO PUSH2 0x26BF JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x2710 DUP3 PUSH2 0xE5C JUMP JUMPDEST PUSH1 0x2A DUP3 MSTORE PUSH1 0x40 CALLDATASIZE PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x30 PUSH2 0x2727 DUP4 PUSH2 0x24D5 JUMP JUMPDEST MSTORE8 DUP2 MLOAD PUSH1 0x1 SWAP1 DUP2 LT ISZERO PUSH2 0x27A5 JUMPI JUMPDEST SWAP1 PUSH1 0x78 PUSH1 0x21 DUP5 ADD MSTORE8 PUSH1 0x29 SWAP2 JUMPDEST DUP1 DUP4 GT PUSH2 0x2754 JUMPI POP PUSH2 0x318 SWAP2 POP ISZERO PUSH2 0x26B8 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0xF PUSH2 0x2791 SWAP3 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2798 JUMPI JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2787 DUP6 DUP8 PUSH2 0x2590 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 PUSH2 0x269D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2741 JUMP JUMPDEST PUSH2 0x27A0 PUSH2 0x202C JUMP JUMPDEST PUSH2 0x2767 JUMP JUMPDEST PUSH2 0x27AD PUSH2 0x202C JUMP JUMPDEST PUSH2 0x2735 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2823 JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x40 DUP3 MSTORE PUSH32 0x6768696A6B6C6D6E6F707172737475767778797A303132333435363738392B2F PUSH1 0x40 DUP4 PUSH32 0x4142434445464748494A4B4C4D4E4F505152535455565758595A616263646566 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x282B PUSH2 0xE00 JUMP JUMPDEST PUSH2 0x27CE JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x2910 JUMPI PUSH2 0x283F PUSH2 0x27B2 JUMP JUMPDEST PUSH2 0x285B PUSH2 0x2856 PUSH2 0x284F DUP5 MLOAD PUSH2 0x1C81 JUMP JUMPDEST PUSH1 0x3 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH2 0x2654 JUMP JUMPDEST SWAP2 PUSH2 0x286D PUSH2 0x2868 DUP5 PUSH2 0x1C8F JUMP JUMPDEST PUSH2 0x255E JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP1 DUP2 MLOAD DUP3 ADD SWAP1 PUSH1 0x20 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP3 LT PUSH2 0x28BE JUMPI POP POP POP PUSH1 0x3 SWAP1 MLOAD MOD DUP1 PUSH1 0x1 EQ PUSH2 0x28AD JUMPI PUSH1 0x2 EQ PUSH2 0x289E JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x3D PUSH1 0xF8 SHL PUSH1 0x0 NOT SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST POP PUSH2 0x3D3D PUSH1 0xF0 SHL PUSH1 0x1 NOT SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP4 PUSH1 0x4 SWAP1 PUSH1 0x3 DUP1 SWAP5 ADD SWAP4 DUP5 MLOAD PUSH1 0x1 SWAP1 PUSH1 0x3F SWAP1 DUP3 DUP3 DUP3 PUSH1 0x12 SHR AND DUP9 ADD ADD MLOAD DUP6 MSTORE8 DUP3 DUP3 DUP3 PUSH1 0xC SHR AND DUP9 ADD ADD MLOAD DUP4 DUP7 ADD MSTORE8 DUP3 DUP3 DUP3 PUSH1 0x6 SHR AND DUP9 ADD ADD MLOAD PUSH1 0x2 DUP7 ADD MSTORE8 AND DUP6 ADD ADD MLOAD SWAP1 DUP3 ADD MSTORE8 ADD SWAP4 SWAP2 SWAP1 PUSH2 0x287C JUMP JUMPDEST POP PUSH2 0x318 PUSH2 0x1A4F JUMP JUMPDEST PUSH2 0x2922 SWAP1 PUSH2 0x29B5 JUMP JUMPDEST PUSH2 0x318 PUSH1 0x67 PUSH1 0x40 MLOAD DUP1 SWAP4 PUSH32 0x3C7376672077696474683D2234303022206865696768743D223430302220786D PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x6C6E733D22687474703A2F2F7777772E77332E6F72672F323030302F73766722 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x1F PUSH1 0xF9 SHL PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2996 DUP2 MLOAD DUP1 SWAP3 PUSH1 0x20 PUSH1 0x61 DUP7 ADD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST DUP2 ADD PUSH6 0x1E17B9BB339F PUSH1 0xD1 SHL PUSH1 0x61 DUP3 ADD MSTORE SUB PUSH1 0x47 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x29E1 PUSH2 0x29D5 PUSH2 0x29D5 PUSH2 0x29D5 PUSH2 0xF9F DUP6 PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x378DE45B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x20 SWAP2 SWAP1 PUSH2 0x2A1A SWAP1 DUP4 DUP2 PUSH1 0x24 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x5100 JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x50E9 JUMPI POP PUSH2 0x5256 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x33C71805 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH2 0x2A4F SWAP1 DUP5 DUP2 PUSH1 0x24 DUP2 DUP8 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x50DC JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x50C5 JUMPI POP PUSH2 0x5256 JUMP JUMPDEST SWAP2 PUSH2 0x2A59 SWAP1 PUSH2 0x510D JUMP JUMPDEST SWAP4 PUSH2 0x2A63 SWAP1 PUSH2 0x186D JUMP JUMPDEST PUSH2 0x2A6C SWAP1 PUSH2 0x510D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 DUP6 ADD PUSH2 0x3D59 SWAP1 PUSH2 0xF7F SWAP1 PUSH32 0x3C646566733E3C7374796C653E40666F6E742D666163657B666F6E742D66616D DUP2 MSTORE PUSH32 0x696C793A225065726D616E656E74204D61726B6572223B7372633A75726C2864 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6174613A6170706C69636174696F6E2F666F6E742D776F66663B636861727365 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x743D7574662D383B6261736536342C6430394752674142414141414141723441 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x41304141414141442F6741415142434141414141414141414141414141414141 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x414141414141414141425055793879414141424D414141414538414141426759 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x624C6A59324E745958414141414741414141415767414141566F4D35414D7059 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x335A3049414141416477414141414341414141416741564141426D6347647441 PUSH1 0xE0 DUP3 ADD MSTORE PUSH32 0x4141423441414141506341414146686B6B48612B6D64736557594141414C5941 PUSH2 0x100 DUP3 ADD MSTORE PUSH32 0x4141466F67414142395334327A5435614756685A414141434877414141413241 PUSH2 0x120 DUP3 ADD MSTORE PUSH32 0x4141414E6768495776746F614756684141414974414141414230414141416B42 PUSH2 0x140 DUP3 ADD MSTORE PUSH32 0x483042674768746448674141416A554141414148414141414277505A2F2F3662 PUSH2 0x160 DUP3 ADD MSTORE PUSH32 0x47396A595141414350414141414151414141414541555942304A745958687741 PUSH2 0x180 DUP3 ADD MSTORE PUSH32 0x41414A41414141414234414141416741685143475735686257554141416B6741 PUSH2 0x1A0 DUP3 ADD MSTORE PUSH32 0x414142757741414131525157384D396347397A64414141437477414141415541 PUSH2 0x1C0 DUP3 ADD MSTORE PUSH32 0x41414149502B3241447077636D56774141414B38414141414163414141414861 PUSH2 0x1E0 DUP3 ADD MSTORE PUSH32 0x41614D68586963593242684D6D6163774D444B774D433068366D4C6759476842 PUSH2 0x200 DUP3 ADD MSTORE PUSH32 0x30497A336D55775A6752796D5268676F49474251563241415146635050324347 PUSH2 0x220 DUP3 ADD MSTORE PUSH32 0x427759464269436D664C2B483261775A536C676441554B677A51784D42557966 PUSH2 0x240 DUP3 ADD MSTORE PUSH32 0x514E534367774D4145373644464141654A786A594742675A6F426747515A4742 PUSH2 0x260 DUP3 ADD MSTORE PUSH32 0x6841494166495977587757426773677A6358417763414568416F4D6267782B44 PUSH2 0x280 DUP3 ADD MSTORE PUSH32 0x4D482F2F77504646426863676579672F2F2F2F502F792F392F2B322F35756865 PUSH2 0x2A0 DUP3 ADD MSTORE PUSH32 0x7147416B5932424947416B7249534267596B5A796D4142596C59695442303841 PUSH2 0x2C0 DUP3 ADD MSTORE PUSH32 0x4143366F6734534141414146514141654A78646B44314F7844415168574D5346 PUSH2 0x2E0 DUP3 ADD MSTORE PUSH32 0x6E49444A41764A493273705672626F715649346B564361734B48774E50784975 PUSH2 0x300 DUP3 ADD MSTORE PUSH32 0x784C5A4F79436C6F584842576435324B584D78424E3445566B446A3858756A2B PUSH2 0x320 DUP3 ADD MSTORE PUSH32 0x66526D6B4A67616565503351727A7A4944376634433733656672345943474D55 PUSH2 0x340 DUP3 ADD MSTORE PUSH32 0x6D586E494A347354677A45696978536F79716B793272744E6175677775306D71 PUSH2 0x360 DUP3 ADD MSTORE PUSH32 0x45713950472B514C616361473976413177704A36377634336E744377664C3433 PUSH2 0x380 DUP3 ADD MSTORE PUSH32 0x544C665747514854445A68416B6641376875776D7742782F735069314E514B36 PUSH2 0x3A0 DUP3 ADD MSTORE PUSH32 0x56586A377A78364A3145346C6B5371784E68346A453453733858696D44485731 PUSH2 0x3C0 DUP3 ADD MSTORE PUSH32 0x2B3569546E746D7346685A6E4D2B4531714F515344694557576C434834494D63 PUSH2 0x3E0 DUP3 ADD MSTORE PUSH32 0x594D665066375667306A2B473856764931366748455466544A31656B7A77596D PUSH2 0x400 DUP3 ADD MSTORE PUSH32 0x6A5446684F7773636C4F33766F77526965305835574272584142346E48565653 PUSH2 0x420 DUP3 ADD MSTORE PUSH32 0x61386A3152583275664E55743062663876544B30334E562B2F48617A2F304747 PUSH2 0x440 DUP3 ADD MSTORE PUSH32 0x3770704E3639424345545343566B45435345577655445A52454C4A6868334C52 PUSH2 0x460 DUP3 ADD MSTORE PUSH32 0x454C38672F794E38414E677953714C6941314C64694151456B703265546C5668 PUSH2 0x480 DUP3 ADD MSTORE PUSH32 0x695775737374317A78322F345A78653731632B304E4E332F79582F494E2F302F PUSH2 0x4A0 DUP3 ADD MSTORE PUSH32 0x74377237546651624F6A2B514A73446C416536332B4366396E55664C712F4331 PUSH2 0x4C0 DUP3 ADD MSTORE PUSH32 0x58563963316E4272716D674442364B306E4E5A65394A346B454755596263506F PUSH2 0x4E0 DUP3 ADD MSTORE PUSH32 0x6C2F5266515853302B594D476C484C6574464644365138774C364E3062326E55 PUSH2 0x500 DUP3 ADD MSTORE PUSH32 0x74524C4478743455636D4953456B70305A6F54515A564D736C796C73574C434C PUSH2 0x520 DUP3 ADD MSTORE PUSH32 0x64626238665933627A79374173366F41694935413165584149516B363833567A PUSH2 0x540 DUP3 ADD MSTORE PUSH32 0x57366B4970383631626363364E6B48443444704A4D30635A37796F3139734A6C PUSH2 0x560 DUP3 ADD MSTORE PUSH32 0x397A4D72562F35624F6257752B3356616E67374D5437796C6C4D715648377836 PUSH2 0x580 DUP3 ADD MSTORE PUSH32 0x4D33374E6C6154337A3537593647436A4A76314F74564A6E4369774A4E536E71 PUSH2 0x5A0 DUP3 ADD MSTORE PUSH32 0x7A4A5A315532526C6245576357713170704A7951676A6C2F624852536D6F3172 PUSH2 0x5C0 DUP3 ADD MSTORE PUSH32 0x684B6C6B3451435930514B616F4E696D754469496B73746D4F43694D514C454F PUSH2 0x5E0 DUP3 ADD MSTORE PUSH32 0x4F57636A313661435349454F4A776D54523368336B6C6F7A6B7172434F65475A PUSH2 0x600 DUP3 ADD MSTORE PUSH32 0x42304864392F642F5964385458376F6658626B41424576455755454465393631 PUSH2 0x620 DUP3 ADD MSTORE PUSH32 0x7A59743671596C42793567763774753669657765774C484F4E3658752F304F6E PUSH2 0x640 DUP3 ADD MSTORE PUSH32 0x303867374B34753235455654434649447A4855692B58433479627843674A6270 PUSH2 0x660 DUP3 ADD MSTORE PUSH32 0x436A7864336F632B77686B4B64752B4F43516D54593052704B62725653385858 PUSH2 0x680 DUP3 ADD MSTORE PUSH32 0x58653853314573692F616C483436686268766462707136586665386D6847616A PUSH2 0x6A0 DUP3 ADD MSTORE PUSH32 0x795A527A433033694C455377496A6767676F576138345664344977536F674255 PUSH2 0x6C0 DUP3 ADD MSTORE PUSH32 0x32374C636A7451755A4B4F706B6E312F4846664F4847646D6B5279525A575677 PUSH2 0x6E0 DUP3 ADD MSTORE PUSH32 0x73736F696C5431757A38384F3145524663673441505252423579776F676D546C PUSH2 0x700 DUP3 ADD MSTORE PUSH32 0x36614E74674A3167774F41586769547079725467316B5331706C6C784252614D PUSH2 0x720 DUP3 ADD MSTORE PUSH32 0x494B43415130746159617A45436578776E30357168673344506B6A374D76304D PUSH2 0x740 DUP3 ADD MSTORE PUSH32 0x426D4D553430554B6359535A5950566E6E50417856415A796E486C554A755263 PUSH2 0x760 DUP3 ADD MSTORE PUSH32 0x4245784168735349536B514A70674B4850637A3437486B6B7168423656414249 PUSH2 0x780 DUP3 ADD MSTORE PUSH32 0x4B50634367354D59617356773456684D5935482F715747424156756147544E79 PUSH2 0x7A0 DUP3 ADD MSTORE PUSH32 0x3472696A72707A53416B674B4861566B6377494B432B596F466D5A6E796A3041 PUSH2 0x7C0 DUP3 ADD MSTORE PUSH32 0x61466742496138586C3655796E66362B504875662B5172386D33767236675064 PUSH2 0x7E0 DUP3 ADD MSTORE PUSH32 0x4A63495A53306B75764D365842336C557445532F5661424B4444534245394B5A PUSH2 0x800 DUP3 ADD MSTORE PUSH32 0x423266454D716A673745446B6F7A7538375438686549476659757A345179654C PUSH2 0x820 DUP3 ADD MSTORE PUSH32 0x6A3339703245697A6E462F33756C79577159615A632F6C79644E585835314F62 PUSH2 0x840 DUP3 ADD MSTORE PUSH32 0x73366E36464743414845384157654B4D795355747151532B634C4E4E4E553230 PUSH2 0x860 DUP3 ADD MSTORE PUSH32 0x6C706C777A44492F49414A495A326C7A696A516765664263594C2F6544716172 PUSH2 0x880 DUP3 ADD MSTORE PUSH32 0x7563506E7058474B4B57494E6678394E52796B434972435336374F4E796B444D PUSH2 0x8A0 DUP3 ADD MSTORE PUSH32 0x315348763333793657746D66487052436359454569537869302B694F4D4C3159 PUSH2 0x8C0 DUP3 ADD MSTORE PUSH32 0x48537A667A67642F76373568772F74624C48304A4F316E744669565A6A416F5A PUSH2 0x8E0 DUP3 ADD MSTORE PUSH32 0x485639755A75645042374635344768414C68546F7944643666757630434A6B4F PUSH2 0x900 DUP3 ADD MSTORE PUSH32 0x6F37526261526E3776364E2B653737337038364E424746712F71415542326762 PUSH2 0x920 DUP3 ADD MSTORE PUSH32 0x6F486364594231466972374C616F5636534E7178615673456353626F4A46325A PUSH2 0x940 DUP3 ADD MSTORE PUSH32 0x5A66474D466332527979524462456863674E7974794741516254584269616F66 PUSH2 0x960 DUP3 ADD MSTORE PUSH32 0x43756C6B5A4A7A436844464C6E5A2B797166624234664E344F56637863726E73 PUSH2 0x980 DUP3 ADD MSTORE PUSH32 0x6463454B47475033336C2B54354E7166724B6354706554326468365153556551 PUSH2 0x9A0 DUP3 ADD MSTORE PUSH32 0x526F546D644D5033336C68643238524B47414F4B684B724545466A7159687749 PUSH2 0x9C0 DUP3 ADD MSTORE PUSH32 0x4957336F396C30774D2F65572F4F7A50304B71776D6F357A36684E637A463965 PUSH2 0x9E0 DUP3 ADD MSTORE PUSH32 0x767434544B776176485A377964506D424E305A5238766D586971307475726D64 PUSH2 0xA00 DUP3 ADD MSTORE PUSH32 0x6E32534D7047464744656F4D632F6171686F7242734339642B42483832513050 PUSH2 0xA20 DUP3 ADD MSTORE PUSH32 0x436C41774C334C455555474F5759786E594B4F72494E2F35644E354D2B617264 PUSH2 0xA40 DUP3 ADD MSTORE PUSH32 0x48572F7179486D376966794F574C3663612B58483143516E5361764679693844 PUSH2 0xA60 DUP3 ADD MSTORE PUSH32 0x724E664D50713558496877424C4D46736B4D6152596E68665673565A4A64556C PUSH2 0xA80 DUP3 ADD MSTORE PUSH32 0x746559305459457634423135554261426550377A5161576D37617948484D6839 PUSH2 0xAA0 DUP3 ADD MSTORE PUSH32 0x6B5545304E52457238363366555632662F374C52302B5A6A7830345445574436 PUSH2 0xAC0 DUP3 ADD MSTORE PUSH32 0x503637703761617A37773978584D514F5267574E42746C43717546594F673161 PUSH2 0xAE0 DUP3 ADD MSTORE PUSH32 0x744A58336E37336E466D71792F45345568474B68684E6767496D4155794C382B PUSH2 0xB00 DUP3 ADD MSTORE PUSH32 0x73336252784D61656464366E32455247443073334341396532744A684A557866 PUSH2 0xB20 DUP3 ADD MSTORE PUSH32 0x42486E4E736D5330656B77465A6861366B726D4C76514C613464396C5567726D PUSH2 0xB40 DUP3 ADD MSTORE PUSH32 0x414F74695A486F6571476C514F445377646869436F726E656255747A312B2F61 PUSH2 0xB60 DUP3 ADD MSTORE PUSH32 0x5349736267673649537178594C476555496F7131384E52715667796D58737357 PUSH2 0xB80 DUP3 ADD MSTORE PUSH32 0x7A453255345A396F7377717859694C4255366139763450786465725151414141 PUSH2 0xBA0 DUP3 ADD MSTORE PUSH32 0x4145414141414241454A4178704157587738383951674C424141414141414179 PUSH2 0xBC0 DUP3 ADD MSTORE PUSH32 0x54564B49414141414144564B387A582F2B7A2F31514C63417538414141414A41 PUSH2 0xBE0 DUP3 ADD MSTORE PUSH32 0x41494141414141414142346E474E675A4742674B6669336D30476561652F2F4E PUSH2 0xC00 DUP3 ADD MSTORE PUSH32 0x777767774D694143746742684777464141414141414637414141426577414141 PUSH2 0xC20 DUP3 ADD MSTORE PUSH32 0x6F494143514A4E2F2B774376662F784170594143674A4F41416F414141414741 PUSH2 0xC40 DUP3 ADD MSTORE PUSH32 0x4177417A674865416F51444C675071654A786A594752675947426E324D374178 PUSH2 0xC60 DUP3 ADD MSTORE PUSH32 0x4141436A474353697748495A5577454D51455667774578414142346E4A56527A PUSH2 0xC80 DUP3 ADD MSTORE PUSH32 0x5772625142442B316E4653437133707261576E6F61656B7850727830546F4632 PUSH2 0xCA0 DUP3 ADD MSTORE PUSH32 0x7748527842696E354B346F6979796953474B6C32506A534A38674C3543333644 PUSH2 0xCC0 DUP3 ADD MSTORE PUSH32 0x44333049666F5966594A2B58692F426D4A52534C6276377A637733332B794D41 PUSH2 0xCE0 DUP3 ADD MSTORE PUSH32 0x4C7A445479687376346837697858396B634D64764D495868772F7743584F4875 PUSH2 0xD00 DUP3 ADD MSTORE PUSH32 0x2F694131754644764D576A773064346A796548652F694D37387853336465306C PUSH2 0xD20 DUP3 ADD MSTORE PUSH32 0x766A6C73494B6F6D634D643946547438414847367076445851547168384F482B PUSH2 0xD40 DUP3 ADD MSTORE PUSH32 0x4B682B4F337745722F50473452362B646F616A716C3662504675306370796579 PUSH2 0xD60 DUP3 ADD MSTORE PUSH32 0x43414941376C5A79336C56746A4C4F5332314F4A5335545438364B5169797445 PUSH2 0xD80 DUP3 ADD MSTORE PUSH32 0x614D62625A62363170747063352B556D737A4C784E78704D39665A5135475930 PUSH2 0xDA0 DUP3 ADD MSTORE PUSH32 0x4175434D42724830336E307A4E67532B6F36786E796A4F6636314E6B31656C57 PUSH2 0xDC0 DUP3 ADD MSTORE PUSH32 0x49572F35433761746837362F6D7131387049365352666171307A6D46336D7179 PUSH2 0xDE0 DUP3 ADD MSTORE PUSH32 0x3059332F6B55386D6B79764A76324246324345436A58574D4D69525963463543 PUSH2 0xE00 DUP3 ADD MSTORE PUSH32 0x343652346F5433414146436273454E47594A7A636B764C474A4E64516A50726C PUSH2 0xE20 DUP3 ADD MSTORE PUSH32 0x465A4D6E4D496A4F6B50424A5474716A6255303777313779664F577A4A6D3137 PUSH2 0xE40 DUP3 ADD MSTORE PUSH32 0x7046596C61336D4A5332444F78755A38387A77514B324E4C325247594E385373 PUSH2 0xE60 DUP3 ADD MSTORE PUSH32 0x584B4D4B65505243787137437630396A5839566C44332B746655323747505473 PUSH2 0xE80 DUP3 ADD MSTORE PUSH32 0x2B793834662F71626D625163734A442B467772757A7847617536555555327249 PUSH2 0xEA0 DUP3 ADD MSTORE PUSH32 0x69396A7447433131476F32646D492B4C746A7443424E32664D577A7A7A2F4356 PUSH2 0xEC0 DUP3 ADD MSTORE PUSH32 0x2F7742334B696B477742346E474E675A6743442F35735A6A426B77415473414C PUSH2 0xEE0 DUP3 ADD MSTORE PUSH32 0x4C4142384C67422F345777424930412920666F726D61742822776F666622293B PUSH2 0xF00 DUP3 ADD MSTORE PUSH32 0x20666F6E742D7765696768743A6E6F726D616C3B666F6E742D7374796C653A6E PUSH2 0xF20 DUP3 ADD MSTORE PUSH32 0x6F726D616C3B7D3C2F7374796C653E3C2F646566733E3C636972636C65206378 PUSH2 0xF40 DUP3 ADD MSTORE PUSH32 0x3D22323030222063793D223230302220723D22313730222066696C6C3D222300 PUSH2 0xF60 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0x3D63 SWAP1 DUP3 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x222F3E2C3C67207472616E73666F726D3D226D6174726978282E373037313037 DUP2 MSTORE PUSH32 0x202D2E3730373130363738202E3730373130363738202E373037313037203136 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x203135332922207374726F6B653D226E6F6E65222066696C6C2D72756C653D22 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6F6E7A65726F223E3C7061746820643D224D3139362E32353132203233332E PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x35353563382E33303039203020392E383236332D362E3939313320382E313337 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x322D31322E32342D312E363335312D352E303931352D362E353338382D392E32 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x3034312D31362E313435362D31332E343334322D31382E363531342D382E3138 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x36372D34342E393132342D31352E333733372D34342E393132342D31372E3838 PUSH1 0xE0 DUP3 ADD MSTORE PUSH32 0x31337331312E323539352D2E3636352032352E3935322D332E34363539633131 PUSH2 0x100 DUP3 ADD MSTORE PUSH32 0x2E313530342D322E313334322031322E3230342D362E343433342031332E3632 PUSH2 0x120 DUP3 ADD MSTORE PUSH32 0x31352D31332E3932343720312E363839312D382E383531362D342E303638392D PUSH2 0x140 DUP3 ADD MSTORE PUSH32 0x31352E353439332D342E303638392D31352E3534393373392E383938382D332E PUSH2 0x160 DUP3 ADD MSTORE PUSH32 0x3931373820392E383938382D31362E3039392D31312E343035372D31372E3634 PUSH2 0x180 DUP3 ADD MSTORE PUSH32 0x35332D31312E343035372D31372E3634353320342E363636382D332E30373437 PUSH2 0x1A0 DUP3 ADD MSTORE PUSH32 0x20352E3836362D31302E3234323563312E343839342D382E383331392D342E34 PUSH2 0x1C0 DUP3 ADD MSTORE PUSH32 0x3836352D31362E363636322D31322E363034352D32322E353231392D362E3834 PUSH2 0x1E0 DUP3 ADD MSTORE PUSH32 0x36372D342E393335322D31352E353237392D392E333631342D32312E39373431 PUSH2 0x200 DUP3 ADD MSTORE PUSH32 0x2D31322E303434362D352E353339332D322E333130322D392E363939342D332E PUSH2 0x220 DUP3 ADD MSTORE PUSH32 0x3933362D32332E333031392D332E373630322D31302E393531372E313337322D PUSH2 0x240 DUP3 ADD MSTORE PUSH32 0x31362E333038312D2E323135332D31372E3134342D332E393935312D2E363335 PUSH2 0x260 DUP3 ADD MSTORE PUSH32 0x362D322E3832303220312E363334372D352E3733383220332E3930342D31322E PUSH2 0x280 DUP3 ADD MSTORE PUSH32 0x3832373520322E383135372D382E373333392031302E303434312D33312E3235 PUSH2 0x2A0 DUP3 ADD MSTORE PUSH32 0x362D332E303837342D35312E333530332D352E303438312D372E373135352D31 PUSH2 0x2C0 DUP3 ADD MSTORE PUSH32 0x382E313234352D372E3539382D32302E373735362D342E393134382D352E3034 PUSH2 0x2E0 DUP3 ADD MSTORE PUSH32 0x393720352E3131303820312E353235332031352E333333382D312E3938203333 PUSH2 0x300 DUP3 ADD MSTORE PUSH32 0x2E3634352D322E343135312031322E363332312D352E333231342032312E3234 PUSH2 0x320 DUP3 ADD MSTORE PUSH32 0x392D31372E323136342033302E393832342D362E3836363120352E363230372D PUSH2 0x340 DUP3 ADD MSTORE PUSH32 0x32322E303835342031342E3936332D33332E383335362033302E363239372D34 PUSH2 0x360 DUP3 ADD MSTORE PUSH32 0x2E3335383720352E373937392D31372E3934323820342E373030342D32352E35 PUSH2 0x380 DUP3 ADD MSTORE PUSH32 0x33343820332E353635322D332E3033322D2E343530372D352E3838343120312E PUSH2 0x3A0 DUP3 ADD MSTORE PUSH32 0x373232372D362E3438333120342E393733392D362E303330312033322E333932 PUSH2 0x3C0 DUP3 ADD MSTORE PUSH32 0x322D312E393433332036362E323533342E303930352037392E333136352E3439 PUSH2 0x3E0 DUP3 ADD MSTORE PUSH32 0x313120332E3137323620332E3134323320352E3432343520362E313230382035 PUSH2 0x400 DUP3 ADD MSTORE PUSH32 0x2E3138393520362E373733372D2E353038362031382E323532362D312E323932 PUSH2 0x420 DUP3 ADD MSTORE PUSH32 0x352032312E383131392D2E3836313120372E313733382E383631312032312E39 PUSH2 0x440 DUP3 ADD MSTORE PUSH32 0x3338392031322E343535322034322E313639382031382E363233392031372E39 PUSH2 0x460 DUP3 ADD MSTORE PUSH32 0x36313520352E343833382034332E353135352031302E353535392035342E3933 PUSH2 0x480 DUP3 ADD MSTORE PUSH32 0x38372031312E323431337335392E383431312031342E353930332036372E3935 PUSH2 0x4A0 DUP3 ADD MSTORE PUSH32 0x38382031342E353930337A222066696C6C3D2223666663613238222F3E3C7061 PUSH2 0x4C0 DUP3 ADD MSTORE PUSH32 0x746820643D224D3133312E323135392037342E373836762E3331343163362E39 PUSH2 0x4E0 DUP3 ADD MSTORE PUSH32 0x3536362E303139322031332E3232313920372E303530322031322E3936373720 PUSH2 0x500 DUP3 ADD MSTORE PUSH32 0x31342E353531322D2E333120382E373333362D31312E363233342031322E3331 PUSH2 0x520 DUP3 ADD MSTORE PUSH32 0x38362D372E333138382032342E363735362E3837303620322E35323531203131 PUSH2 0x540 DUP3 ADD MSTORE PUSH32 0x2E3435393720362E3639373620382E383631362031392E323531322D322E3132 PUSH2 0x560 DUP3 ADD MSTORE PUSH32 0x34342031302E323832372D31302E3036313420392E353536322D31302E303631 PUSH2 0x580 DUP3 ADD MSTORE PUSH32 0x342031342E37303731203020382E3733353920392E343632342031342E353730 PUSH2 0x5A0 DUP3 ADD MSTORE PUSH32 0x342031302E313334352032342E35313937732D342E303637372031312E353334 PUSH2 0x5C0 DUP3 ADD MSTORE PUSH32 0x352D332E373432312031342E39383238632E3233363820322E3534363620312E PUSH2 0x5E0 DUP3 ADD MSTORE PUSH32 0x3237323920332E3436353220312E3237323920322E3139343120302D322E3530 PUSH2 0x600 DUP3 ADD MSTORE PUSH32 0x38322031312E323539342D2E363636362032352E3935312D332E343637352031 PUSH2 0x620 DUP3 ADD MSTORE PUSH32 0x312E313531342D322E313334322031322E323034392D362E343433342031332E PUSH2 0x640 DUP3 ADD MSTORE PUSH32 0x363232342D31332E3932353220312E363839312D382E383531312D342E303639 PUSH2 0x660 DUP3 ADD MSTORE PUSH32 0x352D31352E353438382D342E303639352D31352E3534383873392E383939352D PUSH2 0x680 DUP3 ADD MSTORE PUSH32 0x332E3931383320392E383939352D31362E303937392D31312E343035372D3137 PUSH2 0x6A0 DUP3 ADD MSTORE PUSH32 0x2E363436392D31312E343035372D31372E3634363920342E363636372D332E30 PUSH2 0x6C0 DUP3 ADD MSTORE PUSH32 0x37343320352E383634372D31302E32343263312E343930362D382E383331392D PUSH2 0x6E0 DUP3 ADD MSTORE PUSH32 0x342E343835362D31362E363636322D31322E363033372D32322E353232312D36 PUSH2 0x700 DUP3 ADD MSTORE PUSH32 0x2E383436392D342E393335312D31352E353237342D392E333631382D32312E39 PUSH2 0x720 DUP3 ADD MSTORE PUSH32 0x3733372D31322E303432392D342E3633322D312E39342D382E333337362D332E PUSH2 0x740 DUP3 ADD MSTORE PUSH32 0x333838342D31372E333939342D332E373032357A222066696C6C3D2223666662 PUSH2 0x760 DUP3 ADD MSTORE PUSH32 0x333030222F3E3C7061746820643D224D3133352E33303232203135302E393330 PUSH2 0x780 DUP3 ADD MSTORE PUSH32 0x34632D2E313633362D342E313332382E3039312D352E3236383220322E313037 PUSH2 0x7A0 DUP3 ADD MSTORE PUSH32 0x312D352E3831373373352E373032382E3939393820352E373032382E39393938 PUSH2 0x7C0 DUP3 ADD MSTORE PUSH32 0x6331342E383535332D312E333532342033302E3839323820322E303535322033 PUSH2 0x7E0 DUP3 ADD MSTORE PUSH32 0x352E373430382031302E39323737203020302D32332E3630392D312E38363037 PUSH2 0x800 DUP3 ADD MSTORE PUSH32 0x2D33322E343732332D312E333532332D362E393534392E343132322D31302E38 PUSH2 0x820 DUP3 ADD MSTORE PUSH32 0x3738312E343839322D31312E303738342D342E373537397A6D34322E30343333 PUSH2 0x840 DUP3 ADD MSTORE PUSH32 0x2D32372E36313435632D31342E353130342D352E343634372D33312E34373337 PUSH2 0x860 DUP3 ADD MSTORE PUSH32 0x2D362E343433322D33362E3438362D362E343433322D372E3131393320302D35 PUSH2 0x880 DUP3 ADD MSTORE PUSH32 0x2E373536382D31312E363732372D322E373234342D31332E3836353820322E30 PUSH2 0x8A0 DUP3 ADD MSTORE PUSH32 0x3838392D2E3932303320342E3535383120322E3331303620362E353031352033 PUSH2 0x8C0 DUP3 ADD MSTORE PUSH32 0x2E3037343820352E3737353920322E323930382033302E3138343120332E3734 PUSH2 0x8E0 DUP3 ADD MSTORE PUSH32 0x30372033322E373038392031372E323334327A6D2E39323633203130392E3539 PUSH2 0x900 DUP3 ADD MSTORE PUSH32 0x3339632D32362E363432332D352E303931342D36322E3134382D31352E313937 PUSH2 0x920 DUP3 ADD MSTORE PUSH32 0x382D39302E333334382D31392E313134362D32302E373339332D322E3837382D PUSH2 0x940 DUP3 ADD MSTORE PUSH32 0x33322E333435322D31312E353334362D34312E303830312D31362E3339322D34 PUSH2 0x960 DUP3 ADD MSTORE PUSH32 0x2E393232332D322E373431372D382E383038392D342E393134372D31322E3731 PUSH2 0x980 DUP3 ADD MSTORE PUSH32 0x332D352E393732322D31302E333334342D322E383230352D31382E323839312D PUSH2 0x9A0 DUP3 ADD MSTORE PUSH32 0x312E323334372D32342E373335362D312E34383973372E373534322D31302E30 PUSH2 0x9C0 DUP3 ADD MSTORE PUSH32 0x3237352032362E343937322D362E3035323363342E3735382E3939393820392E PUSH2 0x9E0 DUP3 ADD MSTORE PUSH32 0x3133353320332E373430392031342E3235363820362E3539393920382E383236 PUSH2 0xA00 DUP3 ADD MSTORE PUSH32 0x3220342E393136312031392E363134332031322E3234312033392E3331393320 PUSH2 0xA20 DUP3 ADD MSTORE PUSH32 0x31352E373036342031312E3034313720312E393539312032372E383034382033 PUSH2 0xA40 DUP3 ADD MSTORE PUSH32 0x2E393536362034332E3535303520382E323235312031322E3432323720332E33 PUSH2 0xA60 DUP3 ADD MSTORE PUSH32 0x352034362E393635332031352E323137382035382E393837342031362E383035 PUSH2 0xA80 DUP3 ADD MSTORE PUSH32 0x3120362E313537342E383232372031312E3538372D2E393830352031312E3630 PUSH2 0xAA0 DUP3 ADD MSTORE PUSH32 0x362D2E39383035203020302D312E3033363120322E363634312D352E32333039 PUSH2 0xAC0 DUP3 ADD MSTORE PUSH32 0x20342E303134392D342E3436373920312E34352D392E373136372E363436372D PUSH2 0xAE0 DUP3 ADD MSTORE PUSH32 0x32302E313232382D312E333530387A6D2D36322E303735332D3135382E333031 PUSH2 0xB00 DUP3 ADD MSTORE PUSH32 0x632D332E373737312E353837352D31312E3938362D322E303535322D382E3537 PUSH2 0xB20 DUP3 ADD MSTORE PUSH32 0x32342D31302E39343720352E383132322D31352E3131393420362E323834332D PUSH2 0xB40 DUP3 ADD MSTORE PUSH32 0x32302E3334373220362E303437362D33352E353435372D2E313831322D31302E PUSH2 0xB60 DUP3 ADD MSTORE PUSH32 0x383839342D332E333035322D31382E323332322D352E363437342D32322E3637 PUSH2 0xB80 DUP3 ADD MSTORE PUSH32 0x3831203020302031382E383531362031332E3730393420392E33313632203536 PUSH2 0xBA0 DUP3 ADD MSTORE PUSH32 0x2E353430342D312E3339383220362E323237362D312E3134342031322E363330 PUSH2 0xBC0 DUP3 ADD MSTORE PUSH32 0x342D312E3134342031322E363330347A6D36312E30353836203130392E313434 PUSH2 0xBE0 DUP3 ADD MSTORE PUSH32 0x31732D342E3238353420322E383339332D31302E3036313420352E3031343263 PUSH2 0xC00 DUP3 ADD MSTORE PUSH32 0x2D352E3739333420322E313732372D31352E3431393520332E393935312D3139 PUSH2 0xC20 DUP3 ADD MSTORE PUSH32 0x2E32333320342E30313433732D382E3335352D342E333238342D352E30383437 PUSH2 0xC40 DUP3 ADD MSTORE PUSH32 0x2D352E3935343263332E323531312D312E363034342033342E333739312D332E PUSH2 0xC60 DUP3 ADD MSTORE PUSH32 0x303734332033342E333739312D332E303734337A222066696C6C3D2223656461 PUSH2 0xC80 DUP3 ADD MSTORE PUSH10 0x1B181811179F1E17B39F PUSH1 0xB1 SHL PUSH2 0xCA0 DUP3 ADD MSTORE PUSH2 0xCAA ADD PUSH32 0x3C706F6C79676F6E20706F696E74733D223230302C3335392038302C32323020 DUP2 MSTORE PUSH32 0x39382C313935203230302C323536222066696C6C3D2223000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x37 ADD PUSH2 0x4D28 SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH3 0x11179F PUSH1 0xE9 SHL DUP2 MSTORE PUSH1 0x3 ADD PUSH32 0x3C706F6C79676F6E20706F696E74733D223230302C3335392039382C32313520 DUP2 MSTORE PUSH32 0x3230302C323736222066696C6C3D222338633863386322202F3E000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3A ADD PUSH32 0x3C706F6C79676F6E20706F696E74733D223230302C333539203330322C323135 DUP2 MSTORE PUSH32 0x203230302C323736222066696C6C3D222333633363336222202F3E0000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3B ADD PUSH32 0x3C7465787420666F6E742D73697A653D223132322220783D22352220793D2232 DUP2 MSTORE PUSH32 0x34302220666F6E742D66616D696C793D225065726D616E656E74204D61726B65 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x722220206F7061636974793D222E34222066696C6C3D22230000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x58 ADD PUSH2 0x4E48 SWAP1 DUP3 PUSH2 0x24C2 JUMP JUMPDEST PUSH14 0x111F232922A7299E17BA32BC3A1F PUSH1 0x91 SHL DUP2 MSTORE PUSH1 0xE ADD PUSH32 0x3C7465787420666F6E742D73697A653D223132322220783D22352220793D2232 DUP2 MSTORE PUSH32 0x34302220666F6E742D66616D696C793D225065726D616E656E74204D61726B65 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x72222066696C6C3D226E6F6E652220207374726F6B652D77696474683D223222 PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x207374726F6B653D2223 PUSH1 0xB0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x6A ADD PUSH2 0x4EED SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x223E4652454E533C2F746578743E3C7465787420666F6E742D73697A653D2235 DUP2 MSTORE PUSH32 0x302220746578742D616E63686F723D226D6964646C652220783D223230302220 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x793D22313335222066696C6C3D222346463639423422207374726F6B653D2223 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x3030454446352220666F6E742D7765696768743D22426F6C642220666F6E742D PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x66616D696C793D2253616E732D536572696622206F7061636974793D222E3822 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0xF9 SHL PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA1 ADD PUSH2 0x4FBE SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH4 0x408AE8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH7 0x1E17BA32BC3A1F PUSH1 0xC9 SHL DUP2 MSTORE PUSH1 0x7 ADD PUSH32 0x3C7465787420666F6E742D73697A653D2232352220746578742D616E63686F72 DUP2 MSTORE PUSH32 0x3D226D6964646C652220783D223230302220793D22333030222066696C6C3D22 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2346463639423422207374726F6B653D22233030454446352220666F6E742D77 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x65696768743D22426F6C642220666F6E742D66616D696C793D2253616E732D53 PUSH1 0x60 DUP3 ADD MSTORE PUSH7 0x32B934B311101F PUSH1 0xC9 SHL PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x87 ADD PUSH2 0x508C SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH14 0x2045746820436C61696D61626C65 PUSH1 0x90 SHL DUP2 MSTORE PUSH1 0xE ADD PUSH7 0x1E17BA32BC3A1F PUSH1 0xC9 SHL DUP2 MSTORE PUSH1 0x7 ADD SUB PUSH1 0x1F NOT DUP2 ADD DUP3 MSTORE PUSH2 0x318 SWAP1 DUP3 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x1607 SWAP2 POP DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x160D JUMPI PUSH2 0x15FF DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x50E4 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x2A42 JUMP JUMPDEST PUSH2 0x1607 SWAP2 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x160D JUMPI PUSH2 0x15FF DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x5108 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x2A0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 PUSH1 0x60 SHL AND DUP3 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH2 0x5137 DUP2 PUSH2 0xE40 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0xFF PUSH1 0xE8 SHL DUP2 PUSH1 0x2 BYTE PUSH1 0xE8 SHL AND SWAP1 PUSH1 0xFF PUSH1 0xF0 SHL DUP2 PUSH1 0x1 BYTE PUSH1 0xF0 SHL AND SWAP1 PUSH1 0xFF PUSH1 0xF8 SHL SWAP1 PUSH1 0x0 BYTE PUSH1 0xF8 SHL AND OR OR SWAP1 PUSH1 0x40 MLOAD PUSH2 0x5172 DUP2 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 CALLDATASIZE DUP2 DUP4 ADD CALLDATACOPY PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x518D JUMPI POP SWAP2 POP JUMP JUMPDEST PUSH2 0x51FF SWAP1 PUSH1 0xF DUP6 DUP3 BYTE DUP2 DUP2 AND SWAP2 PUSH1 0x10 SWAP2 DUP3 DUP5 LT ISZERO PUSH2 0x5211 JUMPI JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP4 DUP5 SWAP1 BYTE PUSH2 0x51D8 PUSH2 0x51D2 PUSH2 0x51CD DUP9 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0x1C73 JUMP JUMPDEST DUP10 PUSH2 0x2590 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR AND SWAP1 DUP2 LT ISZERO PUSH2 0x5204 JUMPI JUMPDEST BYTE PUSH2 0x51F9 PUSH2 0x51F3 DUP4 PUSH2 0x2679 JUMP JUMPDEST DUP6 PUSH2 0x2590 JUMP JUMPDEST MSTORE8 PUSH2 0x23B4 JUMP JUMPDEST PUSH2 0x5180 JUMP JUMPDEST PUSH2 0x520C PUSH2 0x202C JUMP JUMPDEST PUSH2 0x51E6 JUMP JUMPDEST PUSH2 0x5219 PUSH2 0x202C JUMP JUMPDEST PUSH2 0x51A6 JUMP JUMPDEST SWAP1 PUSH2 0x1A89 PUSH1 0x21 PUSH1 0x40 MLOAD DUP1 SWAP5 PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x5246 DUP2 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST DUP2 ADD SUB PUSH1 0x1 DUP2 ADD DUP6 MSTORE ADD DUP4 PUSH2 0xE78 JUMP JUMPDEST PUSH6 0x5AF3107A4000 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5271 DUP2 DUP5 DIV PUSH2 0x548E JUMP JUMPDEST SWAP3 MOD DIV SWAP1 PUSH2 0x527E DUP3 PUSH2 0x548E JUMP JUMPDEST SWAP2 PUSH2 0x3E8 DUP2 LT PUSH2 0x5313 JUMPI JUMPDEST PUSH1 0x64 DUP2 LT PUSH2 0x52FF JUMPI JUMPDEST PUSH1 0xA GT PUSH2 0x52E7 JUMPI JUMPDEST PUSH1 0x21 PUSH2 0x318 SWAP2 PUSH1 0x40 MLOAD SWAP4 DUP2 PUSH2 0x52B9 DUP7 SWAP4 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP1 DUP8 ADD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST DUP3 ADD PUSH1 0x17 PUSH1 0xF9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x52D8 DUP3 MLOAD DUP1 SWAP4 PUSH1 0x20 DUP8 DUP6 ADD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST ADD SUB PUSH1 0x1 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0xE78 JUMP JUMPDEST SWAP1 PUSH1 0x21 PUSH2 0x52F6 PUSH2 0x318 SWAP3 PUSH2 0x521E JUMP JUMPDEST SWAP3 SWAP2 POP POP PUSH2 0x529A JUMP JUMPDEST SWAP2 PUSH2 0x530B PUSH1 0xA SWAP2 PUSH2 0x521E JUMP JUMPDEST SWAP3 SWAP1 POP PUSH2 0x5292 JUMP JUMPDEST SWAP2 PUSH2 0x531D SWAP1 PUSH2 0x521E JUMP JUMPDEST SWAP2 PUSH2 0x5289 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP4 DUP3 SUB SLT PUSH2 0xE JUMPI DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP3 GT PUSH2 0xE JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xE JUMPI DUP1 MLOAD SWAP4 DUP5 GT PUSH2 0x53AD JUMPI JUMPDEST DUP4 PUSH1 0x5 SHL SWAP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x536E DUP6 DUP5 ADD DUP8 PUSH2 0xE78 JUMP JUMPDEST DUP6 MSTORE DUP4 DUP1 DUP7 ADD SWAP3 DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0xE JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x5391 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0xE JUMPI DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x5383 JUMP JUMPDEST PUSH2 0x53B5 PUSH2 0xE00 JUMP JUMPDEST PUSH2 0x5359 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4AD02EF1 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP3 SWAP1 DUP6 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 DUP6 AND GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x5481 JUMPI JUMPDEST DUP3 SWAP5 PUSH2 0x5465 JUMPI JUMPDEST POP PUSH1 0xE SLOAD AND DUP2 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH4 0x53E8349 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x20 PUSH1 0x4 DUP4 ADD MSTORE DUP2 DUP1 PUSH2 0x541C PUSH1 0x24 DUP3 ADD DUP11 PUSH2 0x2E2 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x5458 JUMPI JUMPDEST DUP1 SWAP3 PUSH2 0x5435 JUMPI JUMPDEST POP POP SWAP2 SWAP1 JUMP JUMPDEST PUSH2 0x5451 SWAP3 POP RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x5449 DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5323 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x542F JUMP JUMPDEST PUSH2 0x5460 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x5428 JUMP JUMPDEST PUSH2 0x547A SWAP2 SWAP5 POP RETURNDATASIZE DUP1 DUP5 DUP4 RETURNDATACOPY PUSH2 0x15CB DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST SWAP3 CODESIZE PUSH2 0x53F1 JUMP JUMPDEST PUSH2 0x5489 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x53EA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x264B JUMPI DUP1 PUSH1 0x0 DUP3 DUP2 SWAP4 JUMPDEST PUSH2 0x553D JUMPI POP DUP2 PUSH2 0x54AA DUP5 PUSH2 0x255E JUMP JUMPDEST SWAP4 SWAP1 JUMPDEST PUSH2 0x54B7 JUMPI POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x54C0 SWAP1 PUSH2 0x1C5C JUMP JUMPDEST SWAP2 DUP3 PUSH2 0x550E PUSH1 0xA SWAP3 DUP4 DUP2 DIV SWAP4 DUP5 PUSH1 0x0 NOT DIV DUP2 GT DUP6 ISZERO ISZERO AND PUSH2 0x5530 JUMPI JUMPDEST DUP5 MUL DUP2 SUB SWAP1 DUP2 GT PUSH2 0x5523 JUMPI JUMPDEST PUSH1 0xFF DUP1 SWAP2 AND PUSH1 0x30 ADD SWAP1 DUP2 GT PUSH2 0x5516 JUMPI JUMPDEST PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP5 BYTE SWAP2 DUP7 PUSH2 0x2590 JUMP JUMPDEST MSTORE8 SWAP2 DUP3 PUSH2 0x54AD JUMP JUMPDEST PUSH2 0x551E PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x54F8 JUMP JUMPDEST PUSH2 0x552B PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x54E8 JUMP JUMPDEST PUSH2 0x5538 PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x54DC JUMP JUMPDEST SWAP3 PUSH2 0x5549 PUSH1 0xA SWAP2 PUSH2 0x23B4 JUMP JUMPDEST SWAP4 DIV DUP1 PUSH2 0x549B JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 JUMP SWAP11 POP SWAP11 0x1F ADD DUP9 DUP2 0xE8 SWAP10 0xB3 0x22 DUP12 0xBF DUP4 PUSH22 0x1757BD896D33CAE2B178D20AC9ADFC64736F6C634300 ADDMOD LT STOP CALLER ",
              "sourceMap": "466:14881:14:-:0;;;;-1:-1:-1;;;;;466:14881:14;-1:-1:-1;;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;-1:-1:-1;;;466:14881:14;;;;;;:::i;:::-;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;-1:-1:-1;;;;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;466:14881:14;;;;;;;;;;;;;;2362:6:0;466:14881:14;;-1:-1:-1;;;;;;466:14881:14;;;719:10:9;466:14881:14;;;;;;;;;;;-1:-1:-1;;;;;466:14881:14;;;;719:10:9;;466:14881:14;;;;2410:40:0;;466:14881:14;2410:40:0;466:14881:14;;823:54;466:14881;;;823:54;466:14881;;;883:47;466:14881;;;883:47;466:14881;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;-1:-1:-1;466:14881:14;;-1:-1:-1;466:14881:14;;;;;;;;;;-1:-1:-1;;;;;466:14881:14;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;466:14881:14;;;;;;:::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address": {
                  "entryPoint": 1111,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "abi_decode_address_15444": {
                  "entryPoint": 1133,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "abi_decode_address_15466": {
                  "entryPoint": 1155,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "abi_decode_addresst_addresst_uint256": {
                  "entryPoint": 2018,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 3
                },
                "abi_decode_array_uint32_dyn_fromMemory": {
                  "entryPoint": 21283,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bool_fromMemory": {
                  "entryPoint": 9050,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes4_fromMemory": {
                  "entryPoint": 7809,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_string_fromMemory": {
                  "entryPoint": 9315,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint256_fromMemory": {
                  "entryPoint": 9300,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address_address_uint256_bytes": {
                  "entryPoint": 7873,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_address_address_uint256_bytes_24755": {
                  "entryPoint": 7830,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 775,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 9410,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_to_string": {
                  "entryPoint": 738,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_044e": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_0820": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_1427": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_1e76": {
                  "entryPoint": 6795,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_2a4d": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_2bb3": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_4066": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_4711": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_6942": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_7586": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_835b": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_85c1": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_8f11": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9780": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9924": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9a1b": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_b026": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_b262": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_b6ee": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_bcca": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_bdf0": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_c522": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_ce0b": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_d221": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_d495": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_dfb0": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_e6be": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_e701": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_ea20": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f005": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f3f1": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f843": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f90a": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint256": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "allocate_and_zero_memory_array_bytes": {
                  "entryPoint": 9566,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 6735,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 3738,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage_15461": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_add_uint256": {
                  "entryPoint": 7297,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_add_uint256_15448": {
                  "entryPoint": 7283,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_add_uint256_15566": {
                  "entryPoint": 7311,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_div_uint256": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_mul_uint256": {
                  "entryPoint": 9849,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_mul_uint256_15565": {
                  "entryPoint": 9812,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_sub_uint256": {
                  "entryPoint": 7260,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint32": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d": {
                  "entryPoint": 9537,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_literal_to_memory_84d8a590de33e00cbdc16e1f28c3506f5ec15c599fab9a6a4bcd575cc2f110ce": {
                  "entryPoint": 10162,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_literal_to_memory_e90c279dafb9063f3b5c32ec3f15f7ebb88374e472baa6c90bef52e668561779": {
                  "entryPoint": 9502,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 703,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "decrement_uint256": {
                  "entryPoint": 9885,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_approve": {
                  "entryPoint": 1177,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_balanceOf": {
                  "entryPoint": 2786,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_exists": {
                  "entryPoint": 2523,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getApproved": {
                  "entryPoint": 1062,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getEthDecimalString": {
                  "entryPoint": 5795,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getOperatorsForPool": {
                  "entryPoint": 3167,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getPoolById": {
                  "entryPoint": 1417,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_incrementTokenId": {
                  "entryPoint": 2365,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_isApprovedForAll": {
                  "entryPoint": 5701,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_mint": {
                  "entryPoint": 1470,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_name": {
                  "entryPoint": 795,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_owner": {
                  "entryPoint": 2931,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_ownerOf": {
                  "entryPoint": 2755,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renderTokenById": {
                  "entryPoint": 3532,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceOwnership": {
                  "entryPoint": 2830,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_safeTransferFrom": {
                  "entryPoint": 2293,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_safeTransferFrom_499": {
                  "entryPoint": 3781,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setApprovalForAll": {
                  "entryPoint": 3295,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_supportsInterface": {
                  "entryPoint": 566,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_symbol": {
                  "entryPoint": 2973,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_tokenByIndex": {
                  "entryPoint": 2583,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_tokenOfOwnerByIndex": {
                  "entryPoint": 2113,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_tokenURI": {
                  "entryPoint": 3919,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_totalSupply": {
                  "entryPoint": 1987,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferFrom": {
                  "entryPoint": 2071,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferOwnership": {
                  "entryPoint": 5827,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_returndata": {
                  "entryPoint": 7935,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 3704,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "finalize_allocation_24752": {
                  "entryPoint": 3607,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "finalize_allocation_24756": {
                  "entryPoint": 3648,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "finalize_allocation_34399": {
                  "entryPoint": 3676,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_addTokenToAllTokensEnumeration": {
                  "entryPoint": 8651,
                  "id": 1298,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_addTokenToOwnerEnumeration": {
                  "entryPoint": 8595,
                  "id": 1278,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_approve": {
                  "entryPoint": 7707,
                  "id": 832,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_approve_15485": {
                  "entryPoint": 7621,
                  "id": 832,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_balanceOf": {
                  "entryPoint": 6133,
                  "id": 225,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_beforeTokenTransfer": {
                  "entryPoint": 8302,
                  "id": 1248,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_beforeTokenTransfer_15446": {
                  "entryPoint": 8259,
                  "id": 1248,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_checkOnERC721Received": {
                  "entryPoint": 8176,
                  "id": 926,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "fun_checkOnERC721Received_15450": {
                  "entryPoint": 7983,
                  "id": 926,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_encode": {
                  "entryPoint": 10288,
                  "id": 2079,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_exists": {
                  "entryPoint": null,
                  "id": 546,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_generateSVGofTokenById": {
                  "entryPoint": 10521,
                  "id": 2513,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getApproved": {
                  "entryPoint": 6487,
                  "id": 388,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getColor": {
                  "entryPoint": 20749,
                  "id": 2570,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getEthDecimalString": {
                  "entryPoint": 21078,
                  "id": 2745,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getOperatorsForPool": {
                  "entryPoint": 21434,
                  "id": 2786,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "fun_isApprovedOrOwner": {
                  "entryPoint": 6914,
                  "id": 587,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_ownerOf": {
                  "entryPoint": 6253,
                  "id": 253,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_removeTokenFromAllTokensEnumeration": {
                  "entryPoint": 8772,
                  "id": 1409,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_renderTokenById": {
                  "entryPoint": 10677,
                  "id": 2665,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_safeTransferFrom": {
                  "entryPoint": 6754,
                  "id": 499,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_toHexString": {
                  "entryPoint": 9987,
                  "id": 1989,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_toString": {
                  "entryPoint": 9647,
                  "id": 1872,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_transfer": {
                  "entryPoint": 7325,
                  "id": 808,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 6053,
                  "id": 103,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_uint2str": {
                  "entryPoint": 21646,
                  "id": 2880,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "increment_uint256": {
                  "entryPoint": 9140,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address_15440": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address_15447": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address_15491": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256_15449": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256_15469": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256_15492": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256_15506": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "memory_array_index_access_bytes": {
                  "entryPoint": 9616,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "memory_array_index_access_uint32_dyn": {
                  "entryPoint": 9485,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "memory_array_index_access_uint32_dyn_15471": {
                  "entryPoint": 9429,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "memory_array_index_access_uint32_dyn_15472": {
                  "entryPoint": 9451,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "memory_array_index_access_uint32_dyn_15473": {
                  "entryPoint": 9468,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 7237,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 8236,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 3584,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "read_from_memoryt_uint32": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 5978,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_04fc": {
                  "entryPoint": 9912,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_1e76": {
                  "entryPoint": 6878,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_2a63": {
                  "entryPoint": 9168,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_455f": {
                  "entryPoint": 7149,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_613b": {
                  "entryPoint": 9244,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_6d83": {
                  "entryPoint": 6373,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_79b3": {
                  "entryPoint": 9071,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_c868": {
                  "entryPoint": 6633,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 7922,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "string_concat_stringliteral_string": {
                  "entryPoint": 21022,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bool_to_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_bool": {
                  "entryPoint": 3285,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes4": {
                  "entryPoint": 548,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0xBC59B38 EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0xD4D1513 EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0x4F3130FA EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x4F558E79 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xA090F9B4 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0xA2D6C6DA EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0xEDD148A2 EQ PUSH2 0x143 JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE PUSH2 0x16C3 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x16A3 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x1645 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xF4F JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xEC5 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xDCC JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xCDF JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xC5F JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xB9D JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xB73 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xB0E JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xAE2 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xAC3 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0xA17 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x9DB JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x93D JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x8F5 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x841 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x817 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x7C3 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x5BE JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x589 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x499 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x426 JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x31B JUMP JUMPDEST POP PUSH2 0xE PUSH2 0x236 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND SUB PUSH2 0xE JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x256 DUP2 PUSH2 0x224 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND PUSH4 0x780E9D63 PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x27C JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x80AC58CD PUSH1 0xE0 SHL DUP2 EQ SWAP2 POP DUP2 ISZERO PUSH2 0x2AE JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x29D JUMPI JUMPDEST POP CODESIZE PUSH2 0x271 JUMP JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP CODESIZE PUSH2 0x296 JUMP JUMPDEST PUSH4 0x5B5E139F PUSH1 0xE0 SHL DUP2 EQ SWAP2 POP PUSH2 0x28F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x2D2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2C2 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x2FB DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x318 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x2E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x423 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP1 DUP1 SLOAD SWAP1 PUSH1 0x1 SWAP2 DUP1 DUP4 SHR SWAP3 DUP1 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x419 JUMPI JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP7 LT DUP6 EQ PUSH2 0x405 JUMPI DUP6 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP5 SWAP1 DUP2 ISZERO PUSH2 0x3E4 JUMPI POP PUSH1 0x1 EQ PUSH2 0x38C JUMPI JUMPDEST PUSH2 0x388 DUP8 PUSH2 0x37C DUP2 DUP10 SUB DUP3 PUSH2 0xE78 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x307 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 MSTORE SWAP5 POP SWAP2 SWAP3 SWAP2 PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 JUMPDEST DUP4 DUP7 LT PUSH2 0x3D3 JUMPI POP POP POP SWAP2 ADD SWAP1 POP PUSH2 0x37C DUP3 PUSH2 0x388 CODESIZE DUP1 PUSH2 0x36C JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD MSTORE SWAP5 DUP3 ADD SWAP5 DUP2 ADD PUSH2 0x3B7 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP6 MSTORE POP POP POP POP SWAP1 ISZERO ISZERO PUSH1 0x5 SHL ADD SWAP1 POP PUSH2 0x37C DUP3 PUSH2 0x388 CODESIZE DUP1 PUSH2 0x36C JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x348 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH2 0x445 PUSH1 0x4 CALLDATALOAD PUSH2 0x1957 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xE JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xE JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xE JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x4B3 PUSH2 0x457 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x4BF DUP2 PUSH2 0x186D JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP1 DUP3 AND DUP2 EQ PUSH2 0x53A JUMPI PUSH2 0x4F1 SWAP4 PUSH2 0x4EC SWAP2 CALLER EQ SWAP1 DUP2 ISZERO PUSH2 0x4F3 JUMPI JUMPDEST POP PUSH2 0x18E5 JUMP JUMPDEST PUSH2 0x1E1B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x534 SWAP2 POP PUSH2 0x52D SWAP1 CALLER SWAP1 JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CODESIZE PUSH2 0x4E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x5D8 PUSH2 0x457 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x5E4 PUSH2 0x46D JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 PUSH1 0xD SLOAD AND PUSH2 0x65A PUSH1 0x40 SWAP6 PUSH2 0x62F DUP8 MLOAD DUP1 SWAP5 PUSH4 0x3B7A17C5 PUSH1 0xE1 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE DUP2 PUSH1 0x24 PUSH1 0x20 SWAP8 DUP9 SWAP4 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x7B6 JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x789 JUMPI JUMPDEST POP PUSH2 0x236F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xC DUP5 MSTORE DUP8 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP5 MLOAD SWAP4 PUSH2 0x666 DUP6 PUSH2 0xE17 JUMP JUMPDEST PUSH1 0x0 DUP6 MSTORE DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x747 JUMPI PUSH1 0x0 DUP7 PUSH2 0x744 PUSH2 0x73F DUP9 DUP9 DUP9 DUP2 DUP10 PUSH2 0x6AF PUSH2 0x6AA PUSH2 0x6A6 DUP5 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO ISZERO SWAP1 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x23D0 JUMP JUMPDEST PUSH2 0x6B9 DUP3 DUP5 PUSH2 0x2043 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6DB DUP2 SLOAD PUSH2 0x1C73 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x714 DUP4 PUSH2 0x6F5 DUP5 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP9 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 DUP11 MLOAD LOG4 PUSH2 0x1F2F JUMP JUMPDEST PUSH2 0x1ADE JUMP JUMPDEST MLOAD RETURN JUMPDEST PUSH1 0x64 SWAP1 DUP7 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x7A9 SWAP2 POP DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x7AF JUMPI JUMPDEST PUSH2 0x7A1 DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x235A JUMP JUMPDEST CODESIZE PUSH2 0x629 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x797 JUMP JUMPDEST PUSH2 0x7BE PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x621 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0xE JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0xE JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH2 0x4F1 PUSH2 0x829 CALLDATASIZE PUSH2 0x7E2 JUMP JUMPDEST SWAP2 PUSH2 0x83C PUSH2 0x837 DUP5 CALLER PUSH2 0x1B02 JUMP JUMPDEST PUSH2 0x19E9 JUMP JUMPDEST PUSH2 0x1C9D JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x85B PUSH2 0x457 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x868 DUP2 PUSH2 0x17F5 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x89C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 DUP2 MSTORE SWAP1 DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD SWAP2 DUP3 MSTORE SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A206F776E657220696E646578206F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x74206F6620626F756E6473 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH2 0x4F1 PUSH2 0x907 CALLDATASIZE PUSH2 0x7E2 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD DUP5 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x930 JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP5 MSTORE PUSH2 0x1A62 JUMP JUMPDEST PUSH2 0x938 PUSH2 0xE00 JUMP JUMPDEST PUSH2 0x924 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH4 0x3B7A17C5 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0x993 SWAP2 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x9CE JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x9B6 JUMPI POP PUSH2 0x236F JUMP JUMPDEST PUSH2 0x388 PUSH2 0x9A1 PUSH1 0xB SLOAD PUSH2 0x23B4 JUMP JUMPDEST DUP1 PUSH1 0xB SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP3 MSTORE JUMP JUMPDEST PUSH2 0x7A9 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x7AF JUMPI PUSH2 0x7A1 DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x9D6 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x986 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0xA69 JUMPI PUSH1 0x8 PUSH1 0x0 MSTORE PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A20676C6F62616C20696E646578206F PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x7574206F6620626F756E6473 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH2 0x445 PUSH1 0x4 CALLDATALOAD PUSH2 0x186D JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH2 0xB06 PUSH2 0xB01 PUSH2 0x457 JUMP JUMPDEST PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x423 JUMPI PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH2 0xB3A CALLER DUP4 EQ PUSH2 0x175A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0xA SSTORE PUSH1 0x40 MLOAD SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP5 LOG3 RETURN JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x423 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP1 PUSH1 0x1 SWAP1 DUP2 SLOAD DUP1 DUP4 SHR SWAP3 DUP1 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0xC55 JUMPI JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP7 LT DUP6 EQ PUSH2 0x405 JUMPI DUP6 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP5 SWAP1 DUP2 ISZERO PUSH2 0x3E4 JUMPI POP PUSH1 0x1 EQ PUSH2 0xBFC JUMPI PUSH2 0x388 DUP8 PUSH2 0x37C DUP2 DUP10 SUB DUP3 PUSH2 0xE78 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE SWAP5 POP SWAP2 SWAP3 SWAP2 PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 JUMPDEST DUP4 DUP7 LT PUSH2 0xC44 JUMPI POP POP POP SWAP2 ADD SWAP1 POP PUSH2 0x37C DUP3 PUSH2 0x388 CODESIZE DUP1 PUSH2 0x36C JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD MSTORE SWAP5 DUP3 ADD SWAP5 DUP2 ADD PUSH2 0xC28 JUMP JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0xBC9 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE JUMPI PUSH2 0xC82 PUSH2 0xC7D PUSH2 0x457 JUMP JUMPDEST PUSH2 0x53BA JUMP JUMPDEST PUSH1 0x40 SWAP3 SWAP2 SWAP3 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD PUSH1 0x40 DUP5 MSTORE DUP5 MLOAD DUP1 SWAP2 MSTORE DUP2 PUSH1 0x60 DUP6 ADD SWAP6 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xCBB JUMPI DUP6 DUP8 SUB DUP5 DUP8 ADD MSTORE DUP6 DUP1 PUSH2 0x388 DUP10 DUP9 PUSH2 0x2E2 JUMP JUMPDEST DUP3 MLOAD PUSH4 0xFFFFFFFF AND DUP8 MSTORE SWAP6 DUP4 ADD SWAP6 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xCA1 JUMP JUMPDEST DUP1 ISZERO ISZERO SUB PUSH2 0xE JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0xCF9 PUSH2 0x457 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0xD05 DUP2 PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 CALLER DUP4 EQ PUSH2 0xD87 JUMPI DUP2 PUSH2 0xD44 PUSH2 0xD55 SWAP3 CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE CALLER SWAP1 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP1 PUSH1 0x20 SWAP1 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x388 PUSH2 0xDEC PUSH1 0x4 CALLDATALOAD PUSH2 0x29B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x2E2 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xE33 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xE3B PUSH2 0xE00 JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xE33 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xE33 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xE33 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xEB8 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH2 0xEC0 PUSH2 0xE00 JUMP JUMPDEST PUSH2 0xEAD JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0xEDF PUSH2 0x457 JUMP JUMPDEST PUSH2 0xEE7 PUSH2 0x483 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xE JUMPI CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH2 0xE JUMPI DUP3 PUSH1 0x4 ADD CALLDATALOAD SWAP2 PUSH2 0xF14 DUP4 PUSH2 0xE9A JUMP JUMPDEST SWAP3 PUSH2 0xF22 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xE78 JUMP JUMPDEST DUP1 DUP5 MSTORE CALLDATASIZE PUSH1 0x24 DUP3 DUP8 ADD ADD GT PUSH2 0xE JUMPI PUSH1 0x20 DUP2 PUSH1 0x0 SWAP3 PUSH1 0x24 PUSH2 0x4F1 SWAP9 ADD DUP4 DUP9 ADD CALLDATACOPY DUP6 ADD ADD MSTORE PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x1A62 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xF88 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x241C JUMP JUMPDEST PUSH2 0xFAC PUSH2 0xF9F DUP3 PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x378DE45B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP1 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 SWAP4 DUP6 SWAP2 DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH2 0xFF5 SWAP1 DUP6 DUP2 PUSH1 0x24 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1638 JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x1621 JUMPI JUMPDEST POP PUSH2 0x5256 JUMP JUMPDEST PUSH2 0x1032 DUP4 MLOAD PUSH4 0x33C71805 PUSH1 0xE1 SHL DUP2 MSTORE DUP7 DUP2 DUP1 PUSH2 0x1018 DUP10 DUP13 DUP4 ADD SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP3 MSTORE JUMP JUMPDEST SUB DUP2 DUP8 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1614 JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x15E7 JUMPI POP PUSH2 0x5256 JUMP JUMPDEST SWAP7 PUSH1 0x0 PUSH2 0x1047 PUSH2 0x1041 DUP6 PUSH2 0x2703 JUMP JUMPDEST SWAP3 PUSH2 0x53BA JUMP JUMPDEST POP SWAP4 DUP6 MLOAD SWAP9 DUP10 DUP1 SWAP3 PUSH4 0x1865C57D PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x15DA JUMPI JUMPDEST PUSH1 0x0 SWAP8 PUSH2 0x15B7 JUMPI JUMPDEST POP PUSH2 0x1075 DUP6 PUSH2 0x25AF JUMP JUMPDEST SWAP7 DUP5 MLOAD DUP1 SWAP9 DUP9 DUP3 ADD PUSH2 0x109F SWAP1 PUSH1 0x11 SWAP1 PUSH17 0x6672656E20706F6F6C2073686172652023 PUSH1 0x78 SHL DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0x10A8 SWAP2 PUSH2 0x24C2 JUMP JUMPDEST SUB SWAP9 PUSH1 0x1F NOT SWAP10 DUP11 DUP2 ADD DUP11 MSTORE PUSH2 0x10BD SWAP1 DUP11 PUSH2 0xE78 JUMP JUMPDEST DUP6 MLOAD SWAP4 DUP5 DUP10 DUP2 ADD PUSH2 0x10F2 SWAP1 PUSH1 0x1B SWAP1 PUSH32 0x74686973206672656E206861732061206465706F736974206F66200000000000 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0x10FC SWAP1 DUP4 PUSH2 0x24C2 JUMP JUMPDEST PUSH13 0x1022BA341034B7103837B7B61 PUSH1 0x9D SHL DUP2 MSTORE PUSH1 0xD ADD PUSH2 0x111C SWAP1 DUP7 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x207769746820636C61696D61626C652062616C616E6365206F66200000000000 DUP2 MSTORE PUSH1 0x1B ADD PUSH2 0x114C SWAP1 DUP5 PUSH2 0x24C2 JUMP JUMPDEST PUSH4 0x408AE8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD SUB DUP12 DUP2 ADD DUP7 MSTORE PUSH2 0x1169 SWAP1 DUP7 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x1172 DUP9 PUSH2 0x2919 JUMP JUMPDEST PUSH2 0x117B SWAP1 PUSH2 0x2830 JUMP JUMPDEST SWAP8 PUSH2 0x1185 SWAP1 PUSH2 0x25AF JUMP JUMPDEST SWAP4 DUP7 MLOAD ISZERO PUSH1 0x0 EQ PUSH2 0x159F JUMPI PUSH2 0x1198 PUSH2 0x251E JUMP JUMPDEST SWAP5 JUMPDEST DUP8 MLOAD PUSH2 0x1587 JUMPI PUSH2 0x11A8 PUSH2 0x251E JUMP JUMPDEST SWAP7 JUMPDEST DUP9 MLOAD PUSH2 0x156F JUMPI PUSH2 0x11B8 PUSH2 0x251E JUMP JUMPDEST SWAP9 JUMPDEST DUP1 MLOAD PUSH2 0x153F JUMPI POP PUSH2 0x11C9 PUSH2 0x251E JUMP JUMPDEST SWAP10 JUMPDEST MLOAD PUSH9 0x3D913730B6B2911D11 PUSH1 0xB9 SHL SWAP13 DUP2 ADD SWAP13 DUP14 MSTORE SWAP13 DUP14 SWAP13 PUSH1 0x9 ADD PUSH2 0x11EE SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH18 0x111610113232B9B1B934B83A34B7B7111D11 PUSH1 0x71 SHL DUP2 MSTORE PUSH1 0x12 ADD PUSH2 0x1212 SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x222C202265787465726E616C5F75726C223A2268747470733A2F2F6672656E73 DUP2 MSTORE PUSH11 0x2E66756E2F746F6B656E2F PUSH1 0xA8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2B ADD PUSH2 0x1255 SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x222C202261747472696275746573223A205B7B2274726169745F74797065223A DUP2 MSTORE PUSH18 0x10113837B7B6111610113B30B63AB2911D11 PUSH1 0x71 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x32 ADD PUSH2 0x129F SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x227D2C7B2274726169745F74797065223A20226465706F736974222C20227661 DUP2 MSTORE PUSH7 0x363AB2911D1011 PUSH1 0xC9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x27 ADD PUSH2 0x12DE SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH4 0x408AE8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH32 0x227D2C7B2274726169745F74797065223A2022636C61696D61626C65222C2022 DUP2 MSTORE PUSH9 0x3B30B63AB2911D1011 PUSH1 0xB9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x29 ADD PUSH2 0x132C SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH4 0x408AE8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH32 0x227D2C7B2274726169745F74797065223A2022706F6F6C207374617465222C20 DUP2 MSTORE PUSH10 0x113B30B63AB2911D1011 PUSH1 0xB1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2A ADD PUSH2 0x137B SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x227D2C7B2274726169745F74797065223A20226F70657261746F7231222C2022 DUP2 MSTORE PUSH9 0x3B30B63AB2911D1011 PUSH1 0xB9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x29 ADD PUSH2 0x13BC SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x227D2C7B2274726169745F74797065223A20226F70657261746F7232222C2022 DUP2 MSTORE PUSH9 0x3B30B63AB2911D1011 PUSH1 0xB9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x29 ADD PUSH2 0x13FD SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x227D2C7B2274726169745F74797065223A20226F70657261746F7233222C2022 DUP2 MSTORE PUSH9 0x3B30B63AB2911D1011 PUSH1 0xB9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x29 ADD PUSH2 0x143E SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x227D2C7B2274726169745F74797065223A20226F70657261746F7234222C2022 DUP2 MSTORE PUSH9 0x3B30B63AB2911D1011 PUSH1 0xB9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x29 ADD PUSH2 0x147F SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH15 0x113EAE96101134B6B0B3B2911D1011 PUSH1 0x89 SHL DUP2 MSTORE PUSH1 0xF ADD PUSH32 0x646174613A696D6167652F7376672B786D6C3B6261736536342C000000000000 DUP2 MSTORE PUSH1 0x1A ADD PUSH2 0x14C6 SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH2 0x227D PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 ADD SUB DUP3 DUP2 ADD DUP3 MSTORE PUSH2 0x14E1 SWAP1 DUP3 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x14EA SWAP1 PUSH2 0x2830 JUMP JUMPDEST DUP3 MLOAD PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 SWAP5 DUP2 ADD SWAP5 DUP6 MSTORE SWAP4 DUP5 SWAP2 SWAP1 PUSH1 0x1D ADD PUSH2 0x1523 SWAP2 PUSH2 0x24C2 JUMP JUMPDEST SUB SWAP1 DUP2 ADD DUP4 MSTORE PUSH2 0x1533 SWAP1 DUP4 PUSH2 0xE78 JUMP JUMPDEST MLOAD PUSH2 0x388 DUP2 SWAP3 DUP3 PUSH2 0x307 JUMP JUMPDEST PUSH2 0x1564 PUSH2 0x155B PUSH2 0x1551 PUSH2 0x1569 SWAP4 PUSH2 0x250D JUMP JUMPDEST MLOAD PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x548E JUMP JUMPDEST SWAP10 PUSH2 0x11CB JUMP JUMPDEST PUSH2 0x1581 PUSH2 0x1564 PUSH2 0x155B PUSH2 0x1551 DUP13 PUSH2 0x24FC JUMP JUMPDEST SWAP9 PUSH2 0x11BA JUMP JUMPDEST PUSH2 0x1599 PUSH2 0x1564 PUSH2 0x155B PUSH2 0x1551 DUP12 PUSH2 0x24EB JUMP JUMPDEST SWAP7 PUSH2 0x11AA JUMP JUMPDEST PUSH2 0x15B1 PUSH2 0x1564 PUSH2 0x155B PUSH2 0x1551 DUP11 PUSH2 0x24D5 JUMP JUMPDEST SWAP5 PUSH2 0x119A JUMP JUMPDEST PUSH2 0x15D3 SWAP2 SWAP8 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x15CB DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2463 JUMP JUMPDEST SWAP6 CODESIZE PUSH2 0x106B JUMP JUMPDEST PUSH2 0x15E2 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x1063 JUMP JUMPDEST PUSH2 0x1607 SWAP2 POP DUP8 RETURNDATASIZE DUP10 GT PUSH2 0x160D JUMPI JUMPDEST PUSH2 0x15FF DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2454 JUMP JUMPDEST CODESIZE PUSH2 0xFEF JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x15F5 JUMP JUMPDEST PUSH2 0x161C PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x1025 JUMP JUMPDEST PUSH2 0x1607 SWAP2 POP DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x160D JUMPI PUSH2 0x15FF DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x1640 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0xFE7 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x1697 PUSH2 0x1666 PUSH2 0x457 JUMP JUMPDEST PUSH2 0x166E PUSH2 0x483 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 DUP7 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SWAP1 JUMP JUMPDEST SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x388 PUSH2 0xDEC PUSH1 0x4 CALLDATALOAD PUSH2 0x5256 JUMP JUMPDEST POP CALLVALUE PUSH2 0xE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE JUMPI PUSH2 0x16DD PUSH2 0x457 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x16F6 SWAP1 DUP3 AND CALLER EQ PUSH2 0x175A JUMP JUMPDEST DUP2 AND ISZERO PUSH2 0x1706 JUMPI PUSH2 0x4F1 SWAP1 PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1761 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0xA SLOAD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP2 DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 AND OR PUSH1 0xA SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 PUSH1 0x40 MLOAD LOG3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x1815 JUMPI PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x188E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x32B73A103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x18EC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x198F JUMPI PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x19F0 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1A5C DUP3 PUSH2 0xE17 JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST SWAP2 PUSH2 0x1A89 SWAP4 SWAP2 PUSH2 0x73F SWAP4 PUSH2 0x1A79 PUSH2 0x837 DUP5 CALLER PUSH2 0x1B02 JUMP JUMPDEST PUSH2 0x1A84 DUP4 DUP4 DUP4 PUSH2 0x1C9D JUMP JUMPDEST PUSH2 0x1FF0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1AE5 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1AFE PUSH1 0x4 DUP3 ADD PUSH2 0x1A8B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1B93 JUMPI PUSH2 0x1B28 DUP3 PUSH2 0x186D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND DUP2 EQ SWAP5 SWAP1 SWAP2 SWAP1 DUP6 ISZERO PUSH2 0x1B7B JUMPI JUMPDEST POP POP POP DUP3 ISZERO PUSH2 0x1B51 JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0xFF SWAP3 POP PUSH2 0x1B76 SWAP2 SWAP1 PUSH2 0x516 JUMP JUMPDEST SLOAD AND SWAP1 JUMP JUMPDEST PUSH2 0x1B88 SWAP2 SWAP3 SWAP4 SWAP6 POP PUSH2 0x1957 JUMP JUMPDEST AND EQ SWAP2 CODESIZE DUP1 DUP1 PUSH2 0x1B43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1BF4 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 ADD SWAP2 SWAP1 DUP3 GT PUSH2 0x1C6B JUMPI JUMP JUMPDEST PUSH2 0x1A89 PUSH2 0x1C45 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1C6B JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1C6B JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1C6B JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x1CA7 DUP4 PUSH2 0x186D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP3 SWAP1 SWAP2 DUP3 AND DUP4 SWAP1 SUB PUSH2 0x1D6E JUMPI PUSH2 0x1D01 PUSH2 0x1D45 SWAP3 DUP3 AND SWAP5 PUSH2 0x1CD3 DUP7 ISZERO ISZERO PUSH2 0x1BED JUMP JUMPDEST PUSH2 0x1CDE DUP8 DUP5 DUP4 PUSH2 0x206E JUMP JUMPDEST PUSH2 0x1CE7 DUP8 PUSH2 0x1DC5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1D0B DUP2 SLOAD PUSH2 0x1C5C JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1D2F DUP2 SLOAD PUSH2 0x1C73 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x6F5 DUP6 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E73666572206F6620746F6B656E20746861742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x39903737BA1037BBB7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1DF2 DUP4 PUSH2 0x186D JUMP JUMPDEST AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP3 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x1E54 DUP5 PUSH2 0x186D JUMP JUMPDEST AND SWAP2 AND SWAP1 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xE JUMPI MLOAD PUSH2 0x318 DUP2 PUSH2 0x224 JUMP JUMPDEST PUSH2 0x318 SWAP4 SWAP3 PUSH1 0x80 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x318 SWAP3 SWAP2 ADD SWAP1 PUSH2 0x2E2 JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x1F2A JUMPI RETURNDATASIZE SWAP1 PUSH2 0x1F10 DUP3 PUSH2 0xE9A JUMP JUMPDEST SWAP2 PUSH2 0x1F1E PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xE78 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 DUP1 EXTCODESIZE ISZERO PUSH2 0x1FE8 JUMPI PUSH2 0x1F61 PUSH1 0x20 SWAP2 PUSH1 0x0 SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP5 DUP2 SWAP4 PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP10 DUP11 DUP5 MSTORE CALLER PUSH1 0x4 DUP6 ADD PUSH2 0x1E96 JUMP JUMPDEST SUB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x1FB8 JUMPI JUMPDEST POP PUSH2 0x1FAA JUMPI PUSH2 0x1F84 PUSH2 0x1EFF JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 PUSH2 0x1FA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1AFE PUSH1 0x4 DUP3 ADD PUSH2 0x1A8B JUMP JUMPDEST PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1FDA SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1FE1 JUMPI JUMPDEST PUSH2 0x1FD2 DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1E81 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x1F77 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1FC8 JUMP JUMPDEST POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x2023 JUMPI PUSH2 0x1F61 SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP11 DUP12 DUP6 MSTORE CALLER PUSH1 0x4 DUP7 ADD PUSH2 0x1EC1 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x204D DUP2 PUSH2 0x21CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2065 JUMPI PUSH2 0x1A89 SWAP2 POP PUSH2 0x2244 JUMP JUMPDEST PUSH2 0x1A89 SWAP2 PUSH2 0x2193 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP2 DUP3 PUSH2 0x20A8 JUMPI POP PUSH2 0x208C DUP4 PUSH2 0x21CB JUMP JUMPDEST DUP4 AND DUP1 PUSH2 0x209F JUMPI POP POP PUSH2 0x1A89 SWAP2 POP PUSH2 0x2244 JUMP JUMPDEST SUB PUSH2 0x2065 JUMPI POP POP JUMP JUMPDEST DUP2 DUP6 AND DUP4 SUB PUSH2 0x20B8 JUMPI JUMPDEST POP PUSH2 0x208C JUMP JUMPDEST PUSH2 0x212C PUSH2 0x20C4 DUP3 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0x2186 JUMPI JUMPDEST PUSH2 0x211D PUSH1 0x0 SWAP4 DUP8 DUP6 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP6 KECCAK256 SLOAD DUP4 DUP2 SUB PUSH2 0x2133 JUMPI JUMPDEST POP DUP5 PUSH2 0x2102 DUP10 PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE CODESIZE PUSH2 0x20B2 JUMP JUMPDEST DUP8 DUP7 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP7 KECCAK256 DUP5 DUP8 MSTORE PUSH1 0x20 MSTORE PUSH2 0x217F PUSH1 0x40 DUP8 KECCAK256 SLOAD DUP1 PUSH2 0x216E DUP5 PUSH2 0x211D DUP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE CODESIZE PUSH2 0x20EC JUMP JUMPDEST PUSH2 0x218E PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x20D1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x219F DUP2 PUSH2 0x17F5 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 DUP5 DUP4 MSTORE PUSH1 0x20 MSTORE DUP1 DUP4 DUP4 KECCAK256 SSTORE DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x2237 JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0x8 SSTORE DUP2 LT ISZERO PUSH2 0x222A JUMPI JUMPDEST PUSH1 0x8 PUSH1 0x0 MSTORE PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD SSTORE JUMP JUMPDEST PUSH2 0x2232 PUSH2 0x202C JUMP JUMPDEST PUSH2 0x2200 JUMP JUMPDEST PUSH2 0x223F PUSH2 0xE00 JUMP JUMPDEST PUSH2 0x21F0 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x0 NOT SWAP3 SWAP1 DUP4 DUP2 ADD DUP2 DUP2 GT PUSH2 0x234D JUMPI JUMPDEST PUSH2 0x22F4 PUSH1 0x0 SWAP4 DUP5 SWAP3 DUP2 DUP5 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE DUP5 PUSH1 0x40 DUP6 KECCAK256 SLOAD SWAP2 LT ISZERO PUSH2 0x2340 JUMPI JUMPDEST DUP7 DUP5 MSTORE PUSH2 0x22E3 PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE2 SWAP6 DUP7 DUP2 ADD SLOAD SWAP1 DUP4 LT ISZERO PUSH2 0x2333 JUMPI JUMPDEST DUP9 DUP7 MSTORE DUP1 DUP4 PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD SSTORE PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE DUP3 SLOAD SWAP4 DUP5 ISZERO PUSH2 0x231F JUMPI DUP5 ADD SWAP4 DUP1 DUP6 LT ISZERO PUSH2 0x2312 JUMPI JUMPDEST DUP4 DUP4 MSTORE ADD SSTORE SSTORE JUMP JUMPDEST PUSH2 0x231A PUSH2 0x202C JUMP JUMPDEST PUSH2 0x230A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH2 0x233B PUSH2 0x202C JUMP JUMPDEST PUSH2 0x22AB JUMP JUMPDEST PUSH2 0x2348 PUSH2 0x202C JUMP JUMPDEST PUSH2 0x2276 JUMP JUMPDEST PUSH2 0x2355 PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x2258 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xE JUMPI MLOAD PUSH2 0x318 DUP2 PUSH2 0xCD5 JUMP JUMPDEST ISZERO PUSH2 0x2376 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x1B5D5CDD0818994818481CDD185ADA5B99C81C1BDBDB PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x0 NOT DUP2 EQ PUSH2 0x23C4 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x23CC PUSH2 0x1C45 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x23D7 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2423 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x1B9BDD08195E1A5CDD PUSH1 0xBA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xE JUMPI MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0xE JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xE JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xE JUMPI DUP1 MLOAD PUSH2 0x2496 DUP2 PUSH2 0xE9A JUMP JUMPDEST SWAP3 PUSH2 0x24A4 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xE78 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0xE JUMPI PUSH2 0x318 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST SWAP1 PUSH2 0x23CC PUSH1 0x20 SWAP3 DUP3 DUP2 MLOAD SWAP5 DUP6 SWAP3 ADD PUSH2 0x2BF JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP1 MLOAD ISZERO PUSH2 0x24E3 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x23CC PUSH2 0x202C JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP1 MLOAD PUSH1 0x1 LT ISZERO PUSH2 0x24E3 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 DUP1 MLOAD PUSH1 0x2 LT ISZERO PUSH2 0x24E3 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 SWAP1 DUP1 MLOAD PUSH1 0x3 LT ISZERO PUSH2 0x24E3 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x252B DUP3 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x7 DUP3 MSTORE PUSH7 0x139BDD0814D95D PUSH1 0xCA SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x254E DUP3 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x1 DUP3 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x2568 DUP3 PUSH2 0xE9A JUMP JUMPDEST PUSH2 0x2575 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0xE78 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x2586 PUSH1 0x1F NOT SWAP2 PUSH2 0xE9A JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x25A2 JUMPI ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x25AA PUSH2 0x202C JUMP JUMPDEST ADD ADD SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x264B JUMPI PUSH1 0x0 DUP2 DUP2 DUP2 DUP1 JUMPDEST PUSH2 0x2633 JUMPI POP PUSH2 0x25CA DUP2 PUSH2 0x255E JUMP JUMPDEST SWAP4 JUMPDEST PUSH2 0x25D6 JUMPI POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0x2626 JUMPI JUMPDEST DUP1 SWAP2 PUSH1 0xA SWAP2 PUSH2 0x2610 PUSH1 0x30 DUP5 DUP5 MOD DUP2 ADD DUP1 SWAP2 GT PUSH2 0x2619 JUMPI JUMPDEST PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP7 BYTE SWAP2 DUP8 PUSH2 0x2590 JUMP JUMPDEST MSTORE8 DIV SWAP1 DUP2 PUSH2 0x25CC JUMP JUMPDEST PUSH2 0x2621 PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x25FA JUMP JUMPDEST PUSH2 0x262E PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x25E3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2640 PUSH1 0xA SWAP2 PUSH2 0x23B4 JUMP JUMPDEST SWAP2 DIV DUP1 DUP5 SWAP3 SWAP2 PUSH2 0x25BC JUMP JUMPDEST POP PUSH2 0x318 PUSH2 0x2541 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xFE SHL SUB DUP2 GT PUSH1 0x1 AND PUSH2 0x266C JUMPI JUMPDEST PUSH1 0x2 SHL SWAP1 JUMP JUMPDEST PUSH2 0x2674 PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x2666 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV PUSH1 0x2 GT DUP2 ISZERO ISZERO AND PUSH2 0x2690 JUMPI JUMPDEST PUSH1 0x1 SHL SWAP1 JUMP JUMPDEST PUSH2 0x2698 PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x268A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x26AB JUMPI JUMPDEST PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x26B3 PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x26A4 JUMP JUMPDEST ISZERO PUSH2 0x26BF JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x2710 DUP3 PUSH2 0xE5C JUMP JUMPDEST PUSH1 0x2A DUP3 MSTORE PUSH1 0x40 CALLDATASIZE PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x30 PUSH2 0x2727 DUP4 PUSH2 0x24D5 JUMP JUMPDEST MSTORE8 DUP2 MLOAD PUSH1 0x1 SWAP1 DUP2 LT ISZERO PUSH2 0x27A5 JUMPI JUMPDEST SWAP1 PUSH1 0x78 PUSH1 0x21 DUP5 ADD MSTORE8 PUSH1 0x29 SWAP2 JUMPDEST DUP1 DUP4 GT PUSH2 0x2754 JUMPI POP PUSH2 0x318 SWAP2 POP ISZERO PUSH2 0x26B8 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0xF PUSH2 0x2791 SWAP3 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2798 JUMPI JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2787 DUP6 DUP8 PUSH2 0x2590 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 PUSH2 0x269D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2741 JUMP JUMPDEST PUSH2 0x27A0 PUSH2 0x202C JUMP JUMPDEST PUSH2 0x2767 JUMP JUMPDEST PUSH2 0x27AD PUSH2 0x202C JUMP JUMPDEST PUSH2 0x2735 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2823 JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x40 DUP3 MSTORE PUSH32 0x6768696A6B6C6D6E6F707172737475767778797A303132333435363738392B2F PUSH1 0x40 DUP4 PUSH32 0x4142434445464748494A4B4C4D4E4F505152535455565758595A616263646566 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x282B PUSH2 0xE00 JUMP JUMPDEST PUSH2 0x27CE JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x2910 JUMPI PUSH2 0x283F PUSH2 0x27B2 JUMP JUMPDEST PUSH2 0x285B PUSH2 0x2856 PUSH2 0x284F DUP5 MLOAD PUSH2 0x1C81 JUMP JUMPDEST PUSH1 0x3 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH2 0x2654 JUMP JUMPDEST SWAP2 PUSH2 0x286D PUSH2 0x2868 DUP5 PUSH2 0x1C8F JUMP JUMPDEST PUSH2 0x255E JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP1 DUP2 MLOAD DUP3 ADD SWAP1 PUSH1 0x20 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP3 LT PUSH2 0x28BE JUMPI POP POP POP PUSH1 0x3 SWAP1 MLOAD MOD DUP1 PUSH1 0x1 EQ PUSH2 0x28AD JUMPI PUSH1 0x2 EQ PUSH2 0x289E JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x3D PUSH1 0xF8 SHL PUSH1 0x0 NOT SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST POP PUSH2 0x3D3D PUSH1 0xF0 SHL PUSH1 0x1 NOT SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP4 PUSH1 0x4 SWAP1 PUSH1 0x3 DUP1 SWAP5 ADD SWAP4 DUP5 MLOAD PUSH1 0x1 SWAP1 PUSH1 0x3F SWAP1 DUP3 DUP3 DUP3 PUSH1 0x12 SHR AND DUP9 ADD ADD MLOAD DUP6 MSTORE8 DUP3 DUP3 DUP3 PUSH1 0xC SHR AND DUP9 ADD ADD MLOAD DUP4 DUP7 ADD MSTORE8 DUP3 DUP3 DUP3 PUSH1 0x6 SHR AND DUP9 ADD ADD MLOAD PUSH1 0x2 DUP7 ADD MSTORE8 AND DUP6 ADD ADD MLOAD SWAP1 DUP3 ADD MSTORE8 ADD SWAP4 SWAP2 SWAP1 PUSH2 0x287C JUMP JUMPDEST POP PUSH2 0x318 PUSH2 0x1A4F JUMP JUMPDEST PUSH2 0x2922 SWAP1 PUSH2 0x29B5 JUMP JUMPDEST PUSH2 0x318 PUSH1 0x67 PUSH1 0x40 MLOAD DUP1 SWAP4 PUSH32 0x3C7376672077696474683D2234303022206865696768743D223430302220786D PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x6C6E733D22687474703A2F2F7777772E77332E6F72672F323030302F73766722 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x1F PUSH1 0xF9 SHL PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2996 DUP2 MLOAD DUP1 SWAP3 PUSH1 0x20 PUSH1 0x61 DUP7 ADD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST DUP2 ADD PUSH6 0x1E17B9BB339F PUSH1 0xD1 SHL PUSH1 0x61 DUP3 ADD MSTORE SUB PUSH1 0x47 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x29E1 PUSH2 0x29D5 PUSH2 0x29D5 PUSH2 0x29D5 PUSH2 0xF9F DUP6 PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x378DE45B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x20 SWAP2 SWAP1 PUSH2 0x2A1A SWAP1 DUP4 DUP2 PUSH1 0x24 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x5100 JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x50E9 JUMPI POP PUSH2 0x5256 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x33C71805 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH2 0x2A4F SWAP1 DUP5 DUP2 PUSH1 0x24 DUP2 DUP8 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x50DC JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x50C5 JUMPI POP PUSH2 0x5256 JUMP JUMPDEST SWAP2 PUSH2 0x2A59 SWAP1 PUSH2 0x510D JUMP JUMPDEST SWAP4 PUSH2 0x2A63 SWAP1 PUSH2 0x186D JUMP JUMPDEST PUSH2 0x2A6C SWAP1 PUSH2 0x510D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 DUP6 ADD PUSH2 0x3D59 SWAP1 PUSH2 0xF7F SWAP1 PUSH32 0x3C646566733E3C7374796C653E40666F6E742D666163657B666F6E742D66616D DUP2 MSTORE PUSH32 0x696C793A225065726D616E656E74204D61726B6572223B7372633A75726C2864 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6174613A6170706C69636174696F6E2F666F6E742D776F66663B636861727365 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x743D7574662D383B6261736536342C6430394752674142414141414141723441 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x41304141414141442F6741415142434141414141414141414141414141414141 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x414141414141414141425055793879414141424D414141414538414141426759 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x624C6A59324E745958414141414741414141415767414141566F4D35414D7059 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x335A3049414141416477414141414341414141416741564141426D6347647441 PUSH1 0xE0 DUP3 ADD MSTORE PUSH32 0x4141423441414141506341414146686B6B48612B6D64736557594141414C5941 PUSH2 0x100 DUP3 ADD MSTORE PUSH32 0x4141466F67414142395334327A5435614756685A414141434877414141413241 PUSH2 0x120 DUP3 ADD MSTORE PUSH32 0x4141414E6768495776746F614756684141414974414141414230414141416B42 PUSH2 0x140 DUP3 ADD MSTORE PUSH32 0x483042674768746448674141416A554141414148414141414277505A2F2F3662 PUSH2 0x160 DUP3 ADD MSTORE PUSH32 0x47396A595141414350414141414151414141414541555942304A745958687741 PUSH2 0x180 DUP3 ADD MSTORE PUSH32 0x41414A41414141414234414141416741685143475735686257554141416B6741 PUSH2 0x1A0 DUP3 ADD MSTORE PUSH32 0x414142757741414131525157384D396347397A64414141437477414141415541 PUSH2 0x1C0 DUP3 ADD MSTORE PUSH32 0x41414149502B3241447077636D56774141414B38414141414163414141414861 PUSH2 0x1E0 DUP3 ADD MSTORE PUSH32 0x41614D68586963593242684D6D6163774D444B774D433068366D4C6759476842 PUSH2 0x200 DUP3 ADD MSTORE PUSH32 0x30497A336D55775A6752796D5268676F49474251563241415146635050324347 PUSH2 0x220 DUP3 ADD MSTORE PUSH32 0x427759464269436D664C2B483261775A536C676441554B677A51784D42557966 PUSH2 0x240 DUP3 ADD MSTORE PUSH32 0x514E534367774D4145373644464141654A786A594742675A6F426747515A4742 PUSH2 0x260 DUP3 ADD MSTORE PUSH32 0x6841494166495977587757426773677A6358417763414568416F4D6267782B44 PUSH2 0x280 DUP3 ADD MSTORE PUSH32 0x4D482F2F77504646426863676579672F2F2F2F502F792F392F2B322F35756865 PUSH2 0x2A0 DUP3 ADD MSTORE PUSH32 0x7147416B5932424947416B7249534267596B5A796D4142596C59695442303841 PUSH2 0x2C0 DUP3 ADD MSTORE PUSH32 0x4143366F6734534141414146514141654A78646B44314F7844415168574D5346 PUSH2 0x2E0 DUP3 ADD MSTORE PUSH32 0x6E49444A41764A493273705672626F715649346B564361734B48774E50784975 PUSH2 0x300 DUP3 ADD MSTORE PUSH32 0x784C5A4F79436C6F584842576435324B584D78424E3445566B446A3858756A2B PUSH2 0x320 DUP3 ADD MSTORE PUSH32 0x66526D6B4A67616565503351727A7A4944376634433733656672345943474D55 PUSH2 0x340 DUP3 ADD MSTORE PUSH32 0x6D586E494A347354677A45696978536F79716B793272744E6175677775306D71 PUSH2 0x360 DUP3 ADD MSTORE PUSH32 0x45713950472B514C616361473976413177704A36377634336E744377664C3433 PUSH2 0x380 DUP3 ADD MSTORE PUSH32 0x544C665747514854445A68416B6641376875776D7742782F735069314E514B36 PUSH2 0x3A0 DUP3 ADD MSTORE PUSH32 0x56586A377A78364A3145346C6B5371784E68346A453453733858696D44485731 PUSH2 0x3C0 DUP3 ADD MSTORE PUSH32 0x2B3569546E746D7346685A6E4D2B4531714F515344694557576C434834494D63 PUSH2 0x3E0 DUP3 ADD MSTORE PUSH32 0x594D665066375667306A2B473856764931366748455466544A31656B7A77596D PUSH2 0x400 DUP3 ADD MSTORE PUSH32 0x6A5446684F7773636C4F33766F77526965305835574272584142346E48565653 PUSH2 0x420 DUP3 ADD MSTORE PUSH32 0x61386A3152583275664E55743062663876544B30334E562B2F48617A2F304747 PUSH2 0x440 DUP3 ADD MSTORE PUSH32 0x3770704E3639424345545343566B45435345577655445A52454C4A6868334C52 PUSH2 0x460 DUP3 ADD MSTORE PUSH32 0x454C38672F794E38414E677953714C6941314C64694151456B703265546C5668 PUSH2 0x480 DUP3 ADD MSTORE PUSH32 0x695775737374317A78322F345A78653731632B304E4E332F79582F494E2F302F PUSH2 0x4A0 DUP3 ADD MSTORE PUSH32 0x74377237546651624F6A2B514A73446C416536332B4366396E55664C712F4331 PUSH2 0x4C0 DUP3 ADD MSTORE PUSH32 0x58563963316E4272716D674442364B306E4E5A65394A346B454755596263506F PUSH2 0x4E0 DUP3 ADD MSTORE PUSH32 0x6C2F5266515853302B594D476C484C6574464644365138774C364E3062326E55 PUSH2 0x500 DUP3 ADD MSTORE PUSH32 0x74524C4478743455636D4953456B70305A6F54515A564D736C796C73574C434C PUSH2 0x520 DUP3 ADD MSTORE PUSH32 0x64626238665933627A79374173366F41694935413165584149516B363833567A PUSH2 0x540 DUP3 ADD MSTORE PUSH32 0x57366B4970383631626363364E6B48443444704A4D30635A37796F3139734A6C PUSH2 0x560 DUP3 ADD MSTORE PUSH32 0x397A4D72562F35624F6257752B3356616E67374D5437796C6C4D715648377836 PUSH2 0x580 DUP3 ADD MSTORE PUSH32 0x4D33374E6C6154337A3537593647436A4A76314F74564A6E4369774A4E536E71 PUSH2 0x5A0 DUP3 ADD MSTORE PUSH32 0x7A4A5A315532526C6245576357713170704A7951676A6C2F624852536D6F3172 PUSH2 0x5C0 DUP3 ADD MSTORE PUSH32 0x684B6C6B3451435930514B616F4E696D754469496B73746D4F43694D514C454F PUSH2 0x5E0 DUP3 ADD MSTORE PUSH32 0x4F57636A313661435349454F4A776D54523368336B6C6F7A6B7172434F65475A PUSH2 0x600 DUP3 ADD MSTORE PUSH32 0x42304864392F642F5964385458376F6658626B41424576455755454465393631 PUSH2 0x620 DUP3 ADD MSTORE PUSH32 0x7A59743671596C42793567763774753669657765774C484F4E3658752F304F6E PUSH2 0x640 DUP3 ADD MSTORE PUSH32 0x303867374B34753235455654434649447A4855692B58433479627843674A6270 PUSH2 0x660 DUP3 ADD MSTORE PUSH32 0x436A7864336F632B77686B4B64752B4F43516D54593052704B62725653385858 PUSH2 0x680 DUP3 ADD MSTORE PUSH32 0x58653853314573692F616C483436686268766462707136586665386D6847616A PUSH2 0x6A0 DUP3 ADD MSTORE PUSH32 0x795A527A433033694C455377496A6767676F576138345664344977536F674255 PUSH2 0x6C0 DUP3 ADD MSTORE PUSH32 0x32374C636A7451755A4B4F706B6E312F4846664F4847646D6B5279525A575677 PUSH2 0x6E0 DUP3 ADD MSTORE PUSH32 0x73736F696C5431757A38384F3145524663673441505252423579776F676D546C PUSH2 0x700 DUP3 ADD MSTORE PUSH32 0x36614E74674A3167774F41586769547079725467316B5331706C6C784252614D PUSH2 0x720 DUP3 ADD MSTORE PUSH32 0x494B43415130746159617A45436578776E30357168673344506B6A374D76304D PUSH2 0x740 DUP3 ADD MSTORE PUSH32 0x426D4D553430554B6359535A5950566E6E50417856415A796E486C554A755263 PUSH2 0x760 DUP3 ADD MSTORE PUSH32 0x4245784168735349536B514A70674B4850637A3437486B6B7168423656414249 PUSH2 0x780 DUP3 ADD MSTORE PUSH32 0x4B50634367354D59617356773456684D5935482F715747424156756147544E79 PUSH2 0x7A0 DUP3 ADD MSTORE PUSH32 0x3472696A72707A53416B674B4861566B6377494B432B596F466D5A6E796A3041 PUSH2 0x7C0 DUP3 ADD MSTORE PUSH32 0x61466742496138586C3655796E66362B504875662B5172386D33767236675064 PUSH2 0x7E0 DUP3 ADD MSTORE PUSH32 0x4A63495A53306B75764D365842336C557445532F5661424B4444534245394B5A PUSH2 0x800 DUP3 ADD MSTORE PUSH32 0x423266454D716A673745446B6F7A7538375438686549476659757A345179654C PUSH2 0x820 DUP3 ADD MSTORE PUSH32 0x6A3339703245697A6E462F33756C79577159615A632F6C79644E585835314F62 PUSH2 0x840 DUP3 ADD MSTORE PUSH32 0x73366E36464743414845384157654B4D795355747151532B634C4E4E4E553230 PUSH2 0x860 DUP3 ADD MSTORE PUSH32 0x6C706C777A44492F49414A495A326C7A696A516765664263594C2F6544716172 PUSH2 0x880 DUP3 ADD MSTORE PUSH32 0x7563506E7058474B4B57494E6678394E52796B434972435336374F4E796B444D PUSH2 0x8A0 DUP3 ADD MSTORE PUSH32 0x315348763333793657746D66487052436359454569537869302B694F4D4C3159 PUSH2 0x8C0 DUP3 ADD MSTORE PUSH32 0x48537A667A67642F76373568772F74624C48304A4F316E744669565A6A416F5A PUSH2 0x8E0 DUP3 ADD MSTORE PUSH32 0x485639755A75645042374635344768414C68546F7944643666757630434A6B4F PUSH2 0x900 DUP3 ADD MSTORE PUSH32 0x6F37526261526E3776364E2B653737337038364E424746712F71415542326762 PUSH2 0x920 DUP3 ADD MSTORE PUSH32 0x6F486364594231466972374C616F5636534E7178615673456353626F4A46325A PUSH2 0x940 DUP3 ADD MSTORE PUSH32 0x5A66474D466332527979524462456863674E7974794741516254584269616F66 PUSH2 0x960 DUP3 ADD MSTORE PUSH32 0x43756C6B5A4A7A436844464C6E5A2B797166624234664E344F56637863726E73 PUSH2 0x980 DUP3 ADD MSTORE PUSH32 0x6463454B47475033336C2B54354E7166724B6354706554326468365153556551 PUSH2 0x9A0 DUP3 ADD MSTORE PUSH32 0x526F546D644D5033336C68643238524B47414F4B684B724545466A7159687749 PUSH2 0x9C0 DUP3 ADD MSTORE PUSH32 0x4957336F396C30774D2F65572F4F7A50304B71776D6F357A36684E637A463965 PUSH2 0x9E0 DUP3 ADD MSTORE PUSH32 0x767434544B776176485A377964506D424E305A5238766D586971307475726D64 PUSH2 0xA00 DUP3 ADD MSTORE PUSH32 0x6E32534D7047464744656F4D632F6171686F7242734339642B42483832513050 PUSH2 0xA20 DUP3 ADD MSTORE PUSH32 0x436C41774C334C455555474F5759786E594B4F72494E2F35644E354D2B617264 PUSH2 0xA40 DUP3 ADD MSTORE PUSH32 0x48572F7179486D376966794F574C3663612B58483143516E5361764679693844 PUSH2 0xA60 DUP3 ADD MSTORE PUSH32 0x724E664D50713558496877424C4D46736B4D6152596E68665673565A4A64556C PUSH2 0xA80 DUP3 ADD MSTORE PUSH32 0x746559305459457634423135554261426550377A5161576D37617948484D6839 PUSH2 0xAA0 DUP3 ADD MSTORE PUSH32 0x6B5545304E52457238363366555632662F374C52302B5A6A7830345445574436 PUSH2 0xAC0 DUP3 ADD MSTORE PUSH32 0x503637703761617A37773978584D514F5267574E42746C43717546594F673161 PUSH2 0xAE0 DUP3 ADD MSTORE PUSH32 0x744A58336E37336E466D71792F45345568474B68684E6767496D4155794C382B PUSH2 0xB00 DUP3 ADD MSTORE PUSH32 0x73336252784D61656464366E32455247443073334341396532744A684A557866 PUSH2 0xB20 DUP3 ADD MSTORE PUSH32 0x42486E4E736D5330656B77465A6861366B726D4C76514C613464396C5567726D PUSH2 0xB40 DUP3 ADD MSTORE PUSH32 0x414F74695A486F6571476C514F445377646869436F726E656255747A312B2F61 PUSH2 0xB60 DUP3 ADD MSTORE PUSH32 0x5349736267673649537178594C476555496F7131384E52715667796D58737357 PUSH2 0xB80 DUP3 ADD MSTORE PUSH32 0x7A453255345A396F7377717859694C4255366139763450786465725151414141 PUSH2 0xBA0 DUP3 ADD MSTORE PUSH32 0x4145414141414241454A4178704157587738383951674C424141414141414179 PUSH2 0xBC0 DUP3 ADD MSTORE PUSH32 0x54564B49414141414144564B387A582F2B7A2F31514C63417538414141414A41 PUSH2 0xBE0 DUP3 ADD MSTORE PUSH32 0x41494141414141414142346E474E675A4742674B6669336D30476561652F2F4E PUSH2 0xC00 DUP3 ADD MSTORE PUSH32 0x777767774D694143746742684777464141414141414637414141426577414141 PUSH2 0xC20 DUP3 ADD MSTORE PUSH32 0x6F494143514A4E2F2B774376662F784170594143674A4F41416F414141414741 PUSH2 0xC40 DUP3 ADD MSTORE PUSH32 0x4177417A674865416F51444C675071654A786A594752675947426E324D374178 PUSH2 0xC60 DUP3 ADD MSTORE PUSH32 0x4141436A474353697748495A5577454D51455667774578414142346E4A56527A PUSH2 0xC80 DUP3 ADD MSTORE PUSH32 0x5772625142442B316E4653437133707261576E6F61656B7850727830546F4632 PUSH2 0xCA0 DUP3 ADD MSTORE PUSH32 0x7748527842696E354B346F6979796953474B6C32506A534A38674C3543333644 PUSH2 0xCC0 DUP3 ADD MSTORE PUSH32 0x44333049666F5966594A2B58692F426D4A52534C6276377A637733332B794D41 PUSH2 0xCE0 DUP3 ADD MSTORE PUSH32 0x4C7A445479687376346837697858396B634D64764D495868772F7743584F4875 PUSH2 0xD00 DUP3 ADD MSTORE PUSH32 0x2F694131754644764D576A773064346A796548652F694D37387853336465306C PUSH2 0xD20 DUP3 ADD MSTORE PUSH32 0x766A6C73494B6F6D634D643946547438414847367076445851547168384F482B PUSH2 0xD40 DUP3 ADD MSTORE PUSH32 0x4B682B4F337745722F50473452362B646F616A716C3662504675306370796579 PUSH2 0xD60 DUP3 ADD MSTORE PUSH32 0x43414941376C5A79336C56746A4C4F5332314F4A5335545438364B5169797445 PUSH2 0xD80 DUP3 ADD MSTORE PUSH32 0x614D62625A62363170747063352B556D737A4C784E78704D39665A5135475930 PUSH2 0xDA0 DUP3 ADD MSTORE PUSH32 0x4175434D42724830336E307A4E67532B6F36786E796A4F6636314E6B31656C57 PUSH2 0xDC0 DUP3 ADD MSTORE PUSH32 0x49572F35433761746837362F6D7131387049365352666171307A6D46336D7179 PUSH2 0xDE0 DUP3 ADD MSTORE PUSH32 0x3059332F6B55386D6B79764A76324246324345436A58574D4D69525963463543 PUSH2 0xE00 DUP3 ADD MSTORE PUSH32 0x343652346F5433414146436273454E47594A7A636B764C474A4E64516A50726C PUSH2 0xE20 DUP3 ADD MSTORE PUSH32 0x465A4D6E4D496A4F6B50424A5474716A6255303777313779664F577A4A6D3137 PUSH2 0xE40 DUP3 ADD MSTORE PUSH32 0x7046596C61336D4A5332444F78755A38387A77514B324E4C325247594E385373 PUSH2 0xE60 DUP3 ADD MSTORE PUSH32 0x584B4D4B65505243787137437630396A5839566C44332B746655323747505473 PUSH2 0xE80 DUP3 ADD MSTORE PUSH32 0x2B793834662F71626D625163734A442B467772757A7847617536555555327249 PUSH2 0xEA0 DUP3 ADD MSTORE PUSH32 0x69396A7447433131476F32646D492B4C746A7443424E32664D577A7A7A2F4356 PUSH2 0xEC0 DUP3 ADD MSTORE PUSH32 0x2F7742334B696B477742346E474E675A6743442F35735A6A426B77415473414C PUSH2 0xEE0 DUP3 ADD MSTORE PUSH32 0x4C4142384C67422F345777424930412920666F726D61742822776F666622293B PUSH2 0xF00 DUP3 ADD MSTORE PUSH32 0x20666F6E742D7765696768743A6E6F726D616C3B666F6E742D7374796C653A6E PUSH2 0xF20 DUP3 ADD MSTORE PUSH32 0x6F726D616C3B7D3C2F7374796C653E3C2F646566733E3C636972636C65206378 PUSH2 0xF40 DUP3 ADD MSTORE PUSH32 0x3D22323030222063793D223230302220723D22313730222066696C6C3D222300 PUSH2 0xF60 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0x3D63 SWAP1 DUP3 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x222F3E2C3C67207472616E73666F726D3D226D6174726978282E373037313037 DUP2 MSTORE PUSH32 0x202D2E3730373130363738202E3730373130363738202E373037313037203136 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x203135332922207374726F6B653D226E6F6E65222066696C6C2D72756C653D22 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6F6E7A65726F223E3C7061746820643D224D3139362E32353132203233332E PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x35353563382E33303039203020392E383236332D362E3939313320382E313337 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x322D31322E32342D312E363335312D352E303931352D362E353338382D392E32 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x3034312D31362E313435362D31332E343334322D31382E363531342D382E3138 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x36372D34342E393132342D31352E333733372D34342E393132342D31372E3838 PUSH1 0xE0 DUP3 ADD MSTORE PUSH32 0x31337331312E323539352D2E3636352032352E3935322D332E34363539633131 PUSH2 0x100 DUP3 ADD MSTORE PUSH32 0x2E313530342D322E313334322031322E3230342D362E343433342031332E3632 PUSH2 0x120 DUP3 ADD MSTORE PUSH32 0x31352D31332E3932343720312E363839312D382E383531362D342E303638392D PUSH2 0x140 DUP3 ADD MSTORE PUSH32 0x31352E353439332D342E303638392D31352E3534393373392E383938382D332E PUSH2 0x160 DUP3 ADD MSTORE PUSH32 0x3931373820392E383938382D31362E3039392D31312E343035372D31372E3634 PUSH2 0x180 DUP3 ADD MSTORE PUSH32 0x35332D31312E343035372D31372E3634353320342E363636382D332E30373437 PUSH2 0x1A0 DUP3 ADD MSTORE PUSH32 0x20352E3836362D31302E3234323563312E343839342D382E383331392D342E34 PUSH2 0x1C0 DUP3 ADD MSTORE PUSH32 0x3836352D31362E363636322D31322E363034352D32322E353231392D362E3834 PUSH2 0x1E0 DUP3 ADD MSTORE PUSH32 0x36372D342E393335322D31352E353237392D392E333631342D32312E39373431 PUSH2 0x200 DUP3 ADD MSTORE PUSH32 0x2D31322E303434362D352E353339332D322E333130322D392E363939342D332E PUSH2 0x220 DUP3 ADD MSTORE PUSH32 0x3933362D32332E333031392D332E373630322D31302E393531372E313337322D PUSH2 0x240 DUP3 ADD MSTORE PUSH32 0x31362E333038312D2E323135332D31372E3134342D332E393935312D2E363335 PUSH2 0x260 DUP3 ADD MSTORE PUSH32 0x362D322E3832303220312E363334372D352E3733383220332E3930342D31322E PUSH2 0x280 DUP3 ADD MSTORE PUSH32 0x3832373520322E383135372D382E373333392031302E303434312D33312E3235 PUSH2 0x2A0 DUP3 ADD MSTORE PUSH32 0x362D332E303837342D35312E333530332D352E303438312D372E373135352D31 PUSH2 0x2C0 DUP3 ADD MSTORE PUSH32 0x382E313234352D372E3539382D32302E373735362D342E393134382D352E3034 PUSH2 0x2E0 DUP3 ADD MSTORE PUSH32 0x393720352E3131303820312E353235332031352E333333382D312E3938203333 PUSH2 0x300 DUP3 ADD MSTORE PUSH32 0x2E3634352D322E343135312031322E363332312D352E333231342032312E3234 PUSH2 0x320 DUP3 ADD MSTORE PUSH32 0x392D31372E323136342033302E393832342D362E3836363120352E363230372D PUSH2 0x340 DUP3 ADD MSTORE PUSH32 0x32322E303835342031342E3936332D33332E383335362033302E363239372D34 PUSH2 0x360 DUP3 ADD MSTORE PUSH32 0x2E3335383720352E373937392D31372E3934323820342E373030342D32352E35 PUSH2 0x380 DUP3 ADD MSTORE PUSH32 0x33343820332E353635322D332E3033322D2E343530372D352E3838343120312E PUSH2 0x3A0 DUP3 ADD MSTORE PUSH32 0x373232372D362E3438333120342E393733392D362E303330312033322E333932 PUSH2 0x3C0 DUP3 ADD MSTORE PUSH32 0x322D312E393433332036362E323533342E303930352037392E333136352E3439 PUSH2 0x3E0 DUP3 ADD MSTORE PUSH32 0x313120332E3137323620332E3134323320352E3432343520362E313230382035 PUSH2 0x400 DUP3 ADD MSTORE PUSH32 0x2E3138393520362E373733372D2E353038362031382E323532362D312E323932 PUSH2 0x420 DUP3 ADD MSTORE PUSH32 0x352032312E383131392D2E3836313120372E313733382E383631312032312E39 PUSH2 0x440 DUP3 ADD MSTORE PUSH32 0x3338392031322E343535322034322E313639382031382E363233392031372E39 PUSH2 0x460 DUP3 ADD MSTORE PUSH32 0x36313520352E343833382034332E353135352031302E353535392035342E3933 PUSH2 0x480 DUP3 ADD MSTORE PUSH32 0x38372031312E323431337335392E383431312031342E353930332036372E3935 PUSH2 0x4A0 DUP3 ADD MSTORE PUSH32 0x38382031342E353930337A222066696C6C3D2223666663613238222F3E3C7061 PUSH2 0x4C0 DUP3 ADD MSTORE PUSH32 0x746820643D224D3133312E323135392037342E373836762E3331343163362E39 PUSH2 0x4E0 DUP3 ADD MSTORE PUSH32 0x3536362E303139322031332E3232313920372E303530322031322E3936373720 PUSH2 0x500 DUP3 ADD MSTORE PUSH32 0x31342E353531322D2E333120382E373333362D31312E363233342031322E3331 PUSH2 0x520 DUP3 ADD MSTORE PUSH32 0x38362D372E333138382032342E363735362E3837303620322E35323531203131 PUSH2 0x540 DUP3 ADD MSTORE PUSH32 0x2E3435393720362E3639373620382E383631362031392E323531322D322E3132 PUSH2 0x560 DUP3 ADD MSTORE PUSH32 0x34342031302E323832372D31302E3036313420392E353536322D31302E303631 PUSH2 0x580 DUP3 ADD MSTORE PUSH32 0x342031342E37303731203020382E3733353920392E343632342031342E353730 PUSH2 0x5A0 DUP3 ADD MSTORE PUSH32 0x342031302E313334352032342E35313937732D342E303637372031312E353334 PUSH2 0x5C0 DUP3 ADD MSTORE PUSH32 0x352D332E373432312031342E39383238632E3233363820322E3534363620312E PUSH2 0x5E0 DUP3 ADD MSTORE PUSH32 0x3237323920332E3436353220312E3237323920322E3139343120302D322E3530 PUSH2 0x600 DUP3 ADD MSTORE PUSH32 0x38322031312E323539342D2E363636362032352E3935312D332E343637352031 PUSH2 0x620 DUP3 ADD MSTORE PUSH32 0x312E313531342D322E313334322031322E323034392D362E343433342031332E PUSH2 0x640 DUP3 ADD MSTORE PUSH32 0x363232342D31332E3932353220312E363839312D382E383531312D342E303639 PUSH2 0x660 DUP3 ADD MSTORE PUSH32 0x352D31352E353438382D342E303639352D31352E3534383873392E383939352D PUSH2 0x680 DUP3 ADD MSTORE PUSH32 0x332E3931383320392E383939352D31362E303937392D31312E343035372D3137 PUSH2 0x6A0 DUP3 ADD MSTORE PUSH32 0x2E363436392D31312E343035372D31372E3634363920342E363636372D332E30 PUSH2 0x6C0 DUP3 ADD MSTORE PUSH32 0x37343320352E383634372D31302E32343263312E343930362D382E383331392D PUSH2 0x6E0 DUP3 ADD MSTORE PUSH32 0x342E343835362D31362E363636322D31322E363033372D32322E353232312D36 PUSH2 0x700 DUP3 ADD MSTORE PUSH32 0x2E383436392D342E393335312D31352E353237342D392E333631382D32312E39 PUSH2 0x720 DUP3 ADD MSTORE PUSH32 0x3733372D31322E303432392D342E3633322D312E39342D382E333337362D332E PUSH2 0x740 DUP3 ADD MSTORE PUSH32 0x333838342D31372E333939342D332E373032357A222066696C6C3D2223666662 PUSH2 0x760 DUP3 ADD MSTORE PUSH32 0x333030222F3E3C7061746820643D224D3133352E33303232203135302E393330 PUSH2 0x780 DUP3 ADD MSTORE PUSH32 0x34632D2E313633362D342E313332382E3039312D352E3236383220322E313037 PUSH2 0x7A0 DUP3 ADD MSTORE PUSH32 0x312D352E3831373373352E373032382E3939393820352E373032382E39393938 PUSH2 0x7C0 DUP3 ADD MSTORE PUSH32 0x6331342E383535332D312E333532342033302E3839323820322E303535322033 PUSH2 0x7E0 DUP3 ADD MSTORE PUSH32 0x352E373430382031302E39323737203020302D32332E3630392D312E38363037 PUSH2 0x800 DUP3 ADD MSTORE PUSH32 0x2D33322E343732332D312E333532332D362E393534392E343132322D31302E38 PUSH2 0x820 DUP3 ADD MSTORE PUSH32 0x3738312E343839322D31312E303738342D342E373537397A6D34322E30343333 PUSH2 0x840 DUP3 ADD MSTORE PUSH32 0x2D32372E36313435632D31342E353130342D352E343634372D33312E34373337 PUSH2 0x860 DUP3 ADD MSTORE PUSH32 0x2D362E343433322D33362E3438362D362E343433322D372E3131393320302D35 PUSH2 0x880 DUP3 ADD MSTORE PUSH32 0x2E373536382D31312E363732372D322E373234342D31332E3836353820322E30 PUSH2 0x8A0 DUP3 ADD MSTORE PUSH32 0x3838392D2E3932303320342E3535383120322E3331303620362E353031352033 PUSH2 0x8C0 DUP3 ADD MSTORE PUSH32 0x2E3037343820352E3737353920322E323930382033302E3138343120332E3734 PUSH2 0x8E0 DUP3 ADD MSTORE PUSH32 0x30372033322E373038392031372E323334327A6D2E39323633203130392E3539 PUSH2 0x900 DUP3 ADD MSTORE PUSH32 0x3339632D32362E363432332D352E303931342D36322E3134382D31352E313937 PUSH2 0x920 DUP3 ADD MSTORE PUSH32 0x382D39302E333334382D31392E313134362D32302E373339332D322E3837382D PUSH2 0x940 DUP3 ADD MSTORE PUSH32 0x33322E333435322D31312E353334362D34312E303830312D31362E3339322D34 PUSH2 0x960 DUP3 ADD MSTORE PUSH32 0x2E393232332D322E373431372D382E383038392D342E393134372D31322E3731 PUSH2 0x980 DUP3 ADD MSTORE PUSH32 0x332D352E393732322D31302E333334342D322E383230352D31382E323839312D PUSH2 0x9A0 DUP3 ADD MSTORE PUSH32 0x312E323334372D32342E373335362D312E34383973372E373534322D31302E30 PUSH2 0x9C0 DUP3 ADD MSTORE PUSH32 0x3237352032362E343937322D362E3035323363342E3735382E3939393820392E PUSH2 0x9E0 DUP3 ADD MSTORE PUSH32 0x3133353320332E373430392031342E3235363820362E3539393920382E383236 PUSH2 0xA00 DUP3 ADD MSTORE PUSH32 0x3220342E393136312031392E363134332031322E3234312033392E3331393320 PUSH2 0xA20 DUP3 ADD MSTORE PUSH32 0x31352E373036342031312E3034313720312E393539312032372E383034382033 PUSH2 0xA40 DUP3 ADD MSTORE PUSH32 0x2E393536362034332E3535303520382E323235312031322E3432323720332E33 PUSH2 0xA60 DUP3 ADD MSTORE PUSH32 0x352034362E393635332031352E323137382035382E393837342031362E383035 PUSH2 0xA80 DUP3 ADD MSTORE PUSH32 0x3120362E313537342E383232372031312E3538372D2E393830352031312E3630 PUSH2 0xAA0 DUP3 ADD MSTORE PUSH32 0x362D2E39383035203020302D312E3033363120322E363634312D352E32333039 PUSH2 0xAC0 DUP3 ADD MSTORE PUSH32 0x20342E303134392D342E3436373920312E34352D392E373136372E363436372D PUSH2 0xAE0 DUP3 ADD MSTORE PUSH32 0x32302E313232382D312E333530387A6D2D36322E303735332D3135382E333031 PUSH2 0xB00 DUP3 ADD MSTORE PUSH32 0x632D332E373737312E353837352D31312E3938362D322E303535322D382E3537 PUSH2 0xB20 DUP3 ADD MSTORE PUSH32 0x32342D31302E39343720352E383132322D31352E3131393420362E323834332D PUSH2 0xB40 DUP3 ADD MSTORE PUSH32 0x32302E3334373220362E303437362D33352E353435372D2E313831322D31302E PUSH2 0xB60 DUP3 ADD MSTORE PUSH32 0x383839342D332E333035322D31382E323332322D352E363437342D32322E3637 PUSH2 0xB80 DUP3 ADD MSTORE PUSH32 0x3831203020302031382E383531362031332E3730393420392E33313632203536 PUSH2 0xBA0 DUP3 ADD MSTORE PUSH32 0x2E353430342D312E3339383220362E323237362D312E3134342031322E363330 PUSH2 0xBC0 DUP3 ADD MSTORE PUSH32 0x342D312E3134342031322E363330347A6D36312E30353836203130392E313434 PUSH2 0xBE0 DUP3 ADD MSTORE PUSH32 0x31732D342E3238353420322E383339332D31302E3036313420352E3031343263 PUSH2 0xC00 DUP3 ADD MSTORE PUSH32 0x2D352E3739333420322E313732372D31352E3431393520332E393935312D3139 PUSH2 0xC20 DUP3 ADD MSTORE PUSH32 0x2E32333320342E30313433732D382E3335352D342E333238342D352E30383437 PUSH2 0xC40 DUP3 ADD MSTORE PUSH32 0x2D352E3935343263332E323531312D312E363034342033342E333739312D332E PUSH2 0xC60 DUP3 ADD MSTORE PUSH32 0x303734332033342E333739312D332E303734337A222066696C6C3D2223656461 PUSH2 0xC80 DUP3 ADD MSTORE PUSH10 0x1B181811179F1E17B39F PUSH1 0xB1 SHL PUSH2 0xCA0 DUP3 ADD MSTORE PUSH2 0xCAA ADD PUSH32 0x3C706F6C79676F6E20706F696E74733D223230302C3335392038302C32323020 DUP2 MSTORE PUSH32 0x39382C313935203230302C323536222066696C6C3D2223000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x37 ADD PUSH2 0x4D28 SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH3 0x11179F PUSH1 0xE9 SHL DUP2 MSTORE PUSH1 0x3 ADD PUSH32 0x3C706F6C79676F6E20706F696E74733D223230302C3335392039382C32313520 DUP2 MSTORE PUSH32 0x3230302C323736222066696C6C3D222338633863386322202F3E000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3A ADD PUSH32 0x3C706F6C79676F6E20706F696E74733D223230302C333539203330322C323135 DUP2 MSTORE PUSH32 0x203230302C323736222066696C6C3D222333633363336222202F3E0000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3B ADD PUSH32 0x3C7465787420666F6E742D73697A653D223132322220783D22352220793D2232 DUP2 MSTORE PUSH32 0x34302220666F6E742D66616D696C793D225065726D616E656E74204D61726B65 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x722220206F7061636974793D222E34222066696C6C3D22230000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x58 ADD PUSH2 0x4E48 SWAP1 DUP3 PUSH2 0x24C2 JUMP JUMPDEST PUSH14 0x111F232922A7299E17BA32BC3A1F PUSH1 0x91 SHL DUP2 MSTORE PUSH1 0xE ADD PUSH32 0x3C7465787420666F6E742D73697A653D223132322220783D22352220793D2232 DUP2 MSTORE PUSH32 0x34302220666F6E742D66616D696C793D225065726D616E656E74204D61726B65 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x72222066696C6C3D226E6F6E652220207374726F6B652D77696474683D223222 PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x207374726F6B653D2223 PUSH1 0xB0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x6A ADD PUSH2 0x4EED SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH32 0x223E4652454E533C2F746578743E3C7465787420666F6E742D73697A653D2235 DUP2 MSTORE PUSH32 0x302220746578742D616E63686F723D226D6964646C652220783D223230302220 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x793D22313335222066696C6C3D222346463639423422207374726F6B653D2223 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x3030454446352220666F6E742D7765696768743D22426F6C642220666F6E742D PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x66616D696C793D2253616E732D536572696622206F7061636974793D222E3822 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0xF9 SHL PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA1 ADD PUSH2 0x4FBE SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH4 0x408AE8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH7 0x1E17BA32BC3A1F PUSH1 0xC9 SHL DUP2 MSTORE PUSH1 0x7 ADD PUSH32 0x3C7465787420666F6E742D73697A653D2232352220746578742D616E63686F72 DUP2 MSTORE PUSH32 0x3D226D6964646C652220783D223230302220793D22333030222066696C6C3D22 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2346463639423422207374726F6B653D22233030454446352220666F6E742D77 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x65696768743D22426F6C642220666F6E742D66616D696C793D2253616E732D53 PUSH1 0x60 DUP3 ADD MSTORE PUSH7 0x32B934B311101F PUSH1 0xC9 SHL PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x87 ADD PUSH2 0x508C SWAP2 PUSH2 0x24C2 JUMP JUMPDEST PUSH14 0x2045746820436C61696D61626C65 PUSH1 0x90 SHL DUP2 MSTORE PUSH1 0xE ADD PUSH7 0x1E17BA32BC3A1F PUSH1 0xC9 SHL DUP2 MSTORE PUSH1 0x7 ADD SUB PUSH1 0x1F NOT DUP2 ADD DUP3 MSTORE PUSH2 0x318 SWAP1 DUP3 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x1607 SWAP2 POP DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x160D JUMPI PUSH2 0x15FF DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x50E4 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x2A42 JUMP JUMPDEST PUSH2 0x1607 SWAP2 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x160D JUMPI PUSH2 0x15FF DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x5108 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x2A0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 PUSH1 0x60 SHL AND DUP3 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH2 0x5137 DUP2 PUSH2 0xE40 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0xFF PUSH1 0xE8 SHL DUP2 PUSH1 0x2 BYTE PUSH1 0xE8 SHL AND SWAP1 PUSH1 0xFF PUSH1 0xF0 SHL DUP2 PUSH1 0x1 BYTE PUSH1 0xF0 SHL AND SWAP1 PUSH1 0xFF PUSH1 0xF8 SHL SWAP1 PUSH1 0x0 BYTE PUSH1 0xF8 SHL AND OR OR SWAP1 PUSH1 0x40 MLOAD PUSH2 0x5172 DUP2 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 CALLDATASIZE DUP2 DUP4 ADD CALLDATACOPY PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x518D JUMPI POP SWAP2 POP JUMP JUMPDEST PUSH2 0x51FF SWAP1 PUSH1 0xF DUP6 DUP3 BYTE DUP2 DUP2 AND SWAP2 PUSH1 0x10 SWAP2 DUP3 DUP5 LT ISZERO PUSH2 0x5211 JUMPI JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP4 DUP5 SWAP1 BYTE PUSH2 0x51D8 PUSH2 0x51D2 PUSH2 0x51CD DUP9 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0x1C73 JUMP JUMPDEST DUP10 PUSH2 0x2590 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR AND SWAP1 DUP2 LT ISZERO PUSH2 0x5204 JUMPI JUMPDEST BYTE PUSH2 0x51F9 PUSH2 0x51F3 DUP4 PUSH2 0x2679 JUMP JUMPDEST DUP6 PUSH2 0x2590 JUMP JUMPDEST MSTORE8 PUSH2 0x23B4 JUMP JUMPDEST PUSH2 0x5180 JUMP JUMPDEST PUSH2 0x520C PUSH2 0x202C JUMP JUMPDEST PUSH2 0x51E6 JUMP JUMPDEST PUSH2 0x5219 PUSH2 0x202C JUMP JUMPDEST PUSH2 0x51A6 JUMP JUMPDEST SWAP1 PUSH2 0x1A89 PUSH1 0x21 PUSH1 0x40 MLOAD DUP1 SWAP5 PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x5246 DUP2 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST DUP2 ADD SUB PUSH1 0x1 DUP2 ADD DUP6 MSTORE ADD DUP4 PUSH2 0xE78 JUMP JUMPDEST PUSH6 0x5AF3107A4000 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5271 DUP2 DUP5 DIV PUSH2 0x548E JUMP JUMPDEST SWAP3 MOD DIV SWAP1 PUSH2 0x527E DUP3 PUSH2 0x548E JUMP JUMPDEST SWAP2 PUSH2 0x3E8 DUP2 LT PUSH2 0x5313 JUMPI JUMPDEST PUSH1 0x64 DUP2 LT PUSH2 0x52FF JUMPI JUMPDEST PUSH1 0xA GT PUSH2 0x52E7 JUMPI JUMPDEST PUSH1 0x21 PUSH2 0x318 SWAP2 PUSH1 0x40 MLOAD SWAP4 DUP2 PUSH2 0x52B9 DUP7 SWAP4 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP1 DUP8 ADD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST DUP3 ADD PUSH1 0x17 PUSH1 0xF9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x52D8 DUP3 MLOAD DUP1 SWAP4 PUSH1 0x20 DUP8 DUP6 ADD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST ADD SUB PUSH1 0x1 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0xE78 JUMP JUMPDEST SWAP1 PUSH1 0x21 PUSH2 0x52F6 PUSH2 0x318 SWAP3 PUSH2 0x521E JUMP JUMPDEST SWAP3 SWAP2 POP POP PUSH2 0x529A JUMP JUMPDEST SWAP2 PUSH2 0x530B PUSH1 0xA SWAP2 PUSH2 0x521E JUMP JUMPDEST SWAP3 SWAP1 POP PUSH2 0x5292 JUMP JUMPDEST SWAP2 PUSH2 0x531D SWAP1 PUSH2 0x521E JUMP JUMPDEST SWAP2 PUSH2 0x5289 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP4 DUP3 SUB SLT PUSH2 0xE JUMPI DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP3 GT PUSH2 0xE JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xE JUMPI DUP1 MLOAD SWAP4 DUP5 GT PUSH2 0x53AD JUMPI JUMPDEST DUP4 PUSH1 0x5 SHL SWAP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x536E DUP6 DUP5 ADD DUP8 PUSH2 0xE78 JUMP JUMPDEST DUP6 MSTORE DUP4 DUP1 DUP7 ADD SWAP3 DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0xE JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x5391 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0xE JUMPI DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x5383 JUMP JUMPDEST PUSH2 0x53B5 PUSH2 0xE00 JUMP JUMPDEST PUSH2 0x5359 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4AD02EF1 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP3 SWAP1 DUP6 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 DUP6 AND GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x5481 JUMPI JUMPDEST DUP3 SWAP5 PUSH2 0x5465 JUMPI JUMPDEST POP PUSH1 0xE SLOAD AND DUP2 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH4 0x53E8349 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x20 PUSH1 0x4 DUP4 ADD MSTORE DUP2 DUP1 PUSH2 0x541C PUSH1 0x24 DUP3 ADD DUP11 PUSH2 0x2E2 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x5458 JUMPI JUMPDEST DUP1 SWAP3 PUSH2 0x5435 JUMPI JUMPDEST POP POP SWAP2 SWAP1 JUMP JUMPDEST PUSH2 0x5451 SWAP3 POP RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x5449 DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5323 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x542F JUMP JUMPDEST PUSH2 0x5460 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x5428 JUMP JUMPDEST PUSH2 0x547A SWAP2 SWAP5 POP RETURNDATASIZE DUP1 DUP5 DUP4 RETURNDATACOPY PUSH2 0x15CB DUP2 DUP4 PUSH2 0xE78 JUMP JUMPDEST SWAP3 CODESIZE PUSH2 0x53F1 JUMP JUMPDEST PUSH2 0x5489 PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x53EA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x264B JUMPI DUP1 PUSH1 0x0 DUP3 DUP2 SWAP4 JUMPDEST PUSH2 0x553D JUMPI POP DUP2 PUSH2 0x54AA DUP5 PUSH2 0x255E JUMP JUMPDEST SWAP4 SWAP1 JUMPDEST PUSH2 0x54B7 JUMPI POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x54C0 SWAP1 PUSH2 0x1C5C JUMP JUMPDEST SWAP2 DUP3 PUSH2 0x550E PUSH1 0xA SWAP3 DUP4 DUP2 DIV SWAP4 DUP5 PUSH1 0x0 NOT DIV DUP2 GT DUP6 ISZERO ISZERO AND PUSH2 0x5530 JUMPI JUMPDEST DUP5 MUL DUP2 SUB SWAP1 DUP2 GT PUSH2 0x5523 JUMPI JUMPDEST PUSH1 0xFF DUP1 SWAP2 AND PUSH1 0x30 ADD SWAP1 DUP2 GT PUSH2 0x5516 JUMPI JUMPDEST PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP5 BYTE SWAP2 DUP7 PUSH2 0x2590 JUMP JUMPDEST MSTORE8 SWAP2 DUP3 PUSH2 0x54AD JUMP JUMPDEST PUSH2 0x551E PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x54F8 JUMP JUMPDEST PUSH2 0x552B PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x54E8 JUMP JUMPDEST PUSH2 0x5538 PUSH2 0x1C45 JUMP JUMPDEST PUSH2 0x54DC JUMP JUMPDEST SWAP3 PUSH2 0x5549 PUSH1 0xA SWAP2 PUSH2 0x23B4 JUMP JUMPDEST SWAP4 DIV DUP1 PUSH2 0x549B JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 JUMP SWAP11 POP SWAP11 0x1F ADD DUP9 DUP2 0xE8 SWAP10 0xB3 0x22 DUP12 0xBF DUP4 PUSH22 0x1757BD896D33CAE2B178D20AC9ADFC64736F6C634300 ADDMOD LT STOP CALLER ",
              "sourceMap": "466:14881:14:-:0;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;;466:14881:14;;;;;:::o;:::-;;;;;;;-1:-1:-1;;466:14881:14;;;;;;;;;;:::i;:::-;;;;;1130:35:5;;;1115:50;;:90;;;;;466:14881:14;;;;;;;;;;1115:90:5;-1:-1:-1;;;1692:40:2;;;-1:-1:-1;1692:104:2;;;;1115:90:5;1692:156:2;;;;1115:90:5;;;;;1692:156:2;-1:-1:-1;;;937:40:11;;-1:-1:-1;1692:156:2;;;:104;-1:-1:-1;;;1748:48:2;;;-1:-1:-1;1692:104:2;;466:14881:14;;;;;;;;-1:-1:-1;;466:14881:14;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;466:14881:14;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;466:14881:14;;;-1:-1:-1;;;;466:14881:14;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;466:14881:14;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;466:14881:14;;;;;;;;;;-1:-1:-1;;;;;466:14881:14;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;466:14881:14;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;466:14881:14;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;466:14881:14;;;;;;:::i;:::-;;;3618:23:2;;;:::i;:::-;466:14881:14;-1:-1:-1;;;;;466:14881:14;;;;;;3659:11:2;;466:14881:14;;3908:7:2;719:10:9;3719:165:2;719:10:9;;3740:21:2;:62;;;;;466:14881:14;3719:165:2;;:::i;:::-;3908:7;:::i;:::-;466:14881:14;3740:62:2;-1:-1:-1;;;;;466:14881:14;;;;;4607:18:2;466:14881:14;;;;;4607:35:2;;-1:-1:-1;4607:35:2;;719:10:9;;4607:25:2;466:14881:14;;;;;;;;;;;;;;;;4607:35:2;466:14881:14;;;;;4607:35:2;3740:62;;;466:14881:14;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;-1:-1:-1;;466:14881:14;;;;;;-1:-1:-1;466:14881:14;1549:8;466:14881;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;;-1:-1:-1;;466:14881:14;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;1008:15;466:14881;;1332:20;466:14881;;1000:92;466:14881;;;;;;;1008:57;;1314:10;466:14881;1008:57;;466:14881;;;;1008:57;;;;;;;;;;466:14881;-1:-1:-1;1008:57:14;;;466:14881;1000:92;;:::i;:::-;-1:-1:-1;466:14881:14;;;1332:8;466:14881;;;;;;;-1:-1:-1;;;;;;466:14881:14;-1:-1:-1;;;;;466:14881:14;;;;;;;;;;1332:20;466:14881;;;;;;:::i;:::-;-1:-1:-1;466:14881:14;;;;9142:16:2;;;466:14881:14;;-1:-1:-1;9214:16:2;8583:151;8604:54;9214:16;;;;;9205:58;9213:17;9214:16;;-1:-1:-1;466:14881:14;7232:7:2;466:14881:14;;;;;;;;-1:-1:-1;466:14881:14;;;7232:30:2;;7144:125;;9214:16;9213:17;;466:14881:14;9213:17:2;9205:58;:::i;:::-;9311:7;;;;:::i;:::-;-1:-1:-1;;;;;466:14881:14;;;;;;9330:9:2;466:14881:14;;;;;9330:18:2;466:14881:14;;9330:18:2;:::i;:::-;466:14881:14;;9358:21:2;:16;;;466:14881:14;;9358:7:2;466:14881:14;;;;;;;9358:16:2;466:14881:14;;-1:-1:-1;;;;;;466:14881:14;-1:-1:-1;;;;;466:14881:14;;;;;;;;;;9358:21:2;466:14881:14;9395:33:2;466:14881:14;;;9395:33:2;8604:54;:::i;:::-;8583:151;:::i;:::-;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;1008:57;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;466:14881;;;;;;;-1:-1:-1;;466:14881:14;;;;;1702:10:5;466:14881:14;;;;;;;;;;;;;;;;-1:-1:-1;;;;;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;5026:7:2;466:14881:14;;;:::i;:::-;719:10:9;4892:103:2;4900:41;719:10:9;;4900:41:2;:::i;:::-;4892:103;:::i;:::-;5026:7;:::i;466:14881:14:-;;;;;;;-1:-1:-1;;466:14881:14;;;;;;:::i;:::-;;;1423:23:5;;;;:::i;:::-;1415:31;;466:14881:14;;;-1:-1:-1;;;;;466:14881:14;-1:-1:-1;466:14881:14;;;1511:12:5;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;5240:39:2;466:14881:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5240:39:2;:::i;466:14881:14:-;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;466:14881:14;;;;1008:15;466:14881;;;-1:-1:-1;;;1008:57:14;;1160:10;466:14881;1008:57;;466:14881;1000:92;;1008:57;;466:14881;;;;;;-1:-1:-1;;;;;466:14881:14;1008:57;;;;;;;466:14881;;1008:57;;;1000:92;;:::i;:::-;466:14881;1191:10;;466:14881;1191:10;:::i;:::-;466:14881;1191:10;466:14881;;;;;;;;;;;;;;;1008:57;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;466:14881;;;;;;;-1:-1:-1;;466:14881:14;;;;;;-1:-1:-1;466:14881:14;;;7232:7:2;466:14881:14;;;;;;;;;-1:-1:-1;;;;;466:14881:14;7232:30:2;;466:14881:14;;;;;;;;;;;;;;;-1:-1:-1;;466:14881:14;;;;;;1702:10:5;466:14881:14;1900:38:5;;466:14881:14;;;1702:10:5;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;-1:-1:-1;;466:14881:14;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;466:14881:14;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1108:6:0;466:14881:14;-1:-1:-1;;;;;466:14881:14;;;1240:68:0;719:10:9;1248:23:0;;1240:68;:::i;:::-;-1:-1:-1;;;;;;466:14881:14;1108:6:0;466:14881:14;;;;;;2410:40:0;466:14881:14;;2410:40:0;466:14881:14;;;;;;;;-1:-1:-1;;466:14881:14;;;;1108:6:0;466:14881:14;;;-1:-1:-1;;;;;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;2723:7:2;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2723:7:2;466:14881:14;;;-1:-1:-1;466:14881:14;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;466:14881:14;;;;;;:::i;:::-;;;;;;:::i;:::-;-1:-1:-1;;;;;466:14881:14;;;719:10:9;11442:17:2;;466:14881:14;;719:10:9;11499:35:2;:46;719:10:9;;-1:-1:-1;466:14881:14;11499:18:2;466:14881:14;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;;;11499:35:2;466:14881:14;;;;;;;;;;;;;;;11499:46:2;466:14881:14;;;;;;;719:10:9;;11560:41:2;;466:14881:14;;11560:41:2;466:14881:14;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;466:14881:14;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;466:14881:14;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;466:14881:14;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;7232:7:2;466:14881:14;;;;;;1668:33;;-1:-1:-1;;;;;466:14881:14;7232:30:2;;1668:33:14;:::i;:::-;1729:12;;;466:14881;;1729:8;466:14881;;;;;;;1729:12;466:14881;-1:-1:-1;;;;;466:14881:14;;;1729:12;466:14881;;;-1:-1:-1;;;1834:32:14;;466:14881;1834:32;;;466:14881;;;;;;;;;-1:-1:-1;;;;;466:14881:14;;;1902:33;;466:14881;;;;;1834:32;;;;;;;466:14881;-1:-1:-1;1834:32:14;;;466:14881;1902:33;;:::i;:::-;2030:31;466:14881;;;;;1959:37;;;;;;;;;;466:14881;;;;;;;;1959:37;;;;;;;;;;;466:14881;-1:-1:-1;1959:37:14;;;2030:31;;:::i;:::-;2102:45;-1:-1:-1;2208:32:14;2102:45;;;:::i;:::-;2208:32;;:::i;:::-;466:14881;;;;;;;;;;;2341:22;;;;;;;;;466:14881;-1:-1:-1;2341:22:14;;;466:14881;2434:13;;;;:::i;:::-;466:14881;;;2397:51;;;;;466:14881;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;2397:51;466:14881;;;2397:51;;;;;;;;;;:::i;:::-;466:14881;;2490:169;;;;;466:14881;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;466:14881:14;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;-1:-1:-1;;;466:14881:14;;;;2490:169;;;;;;;;;;:::i;:::-;2708:26;;;:::i;:::-;2688:48;;;:::i;:::-;3106:13;;;;:::i;:::-;466:14881;;;3589:25;:66;;;;466:14881;;:::i;:::-;3589:66;;466:14881;;3734:66;;466:14881;;:::i;:::-;3734:66;;466:14881;;3879:66;;466:14881;;:::i;:::-;3879:66;;466:14881;;4024:66;;466:14881;;;:::i;:::-;4024:66;;466:14881;-1:-1:-1;;;2891:1341:14;;;466:14881;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;466:14881:14;;;;;;;:::i;:::-;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;-1:-1:-1;;;466:14881:14;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;-1:-1:-1;;;466:14881:14;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;466:14881:14;;;;2891:1341;;;;;;;;;;:::i;:::-;2843:1415;;;:::i;:::-;466:14881;;;2772:1496;;;466:14881;;;;;;;;;;;;:::i;:::-;2772:1496;;;;;;;;;;:::i;:::-;466:14881;;;;;;:::i;4024:66::-;4064:26;4073:16;;4064:26;4073:16;;:::i;:::-;466:14881;;;;;4073:16;466:14881;;;;4064:26;;:::i;:::-;4024:66;;;3879;3919:26;;3928:16;;;;:::i;3919:26::-;3879:66;;;3734;3774:26;;3783:16;;;;:::i;3774:26::-;3734:66;;;3589;3629:26;;3638:16;;;;:::i;3629:26::-;3589:66;;;2341:22;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;1959:37;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;1834:32;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;466:14881;;;;;;;-1:-1:-1;;466:14881:14;;;;;;4607:35:2;466:14881:14;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;466:14881:14;;;-1:-1:-1;466:14881:14;;;4607:18:2;466:14881:14;;;;;;;;;;;;-1:-1:-1;466:14881:14;;;;;;;4607:35:2;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;466:14881:14;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;466:14881:14;;;;;;:::i;:::-;1108:6:0;466:14881:14;-1:-1:-1;;;;;466:14881:14;1240:68:0;;466:14881:14;;719:10:9;1248:23:0;1240:68;:::i;:::-;466:14881:14;;2006:22:0;466:14881:14;;2100:8:0;;;:::i;466:14881:14:-;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;2270:187:0;2362:6;466:14881:14;;;;;;;;;;;;;;;;;;2362:6:0;466:14881:14;;2410:40:0;-1:-1:-1;466:14881:14;;2410:40:0;2270:187::o;1914:205:2:-;-1:-1:-1;;;;;466:14881:14;2013:19:2;;466:14881:14;;2030:1:2;466:14881:14;2096:9:2;466:14881:14;;;2030:1:2;466:14881:14;;1914:205:2;:::o;466:14881:14:-;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;2176:235:2;-1:-1:-1;466:14881:14;;;2283:7:2;466:14881:14;;;;;;-1:-1:-1;;;;;466:14881:14;2317:19:2;;466:14881:14;;2176:235:2;:::o;466:14881:14:-;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;3984:217:2;-1:-1:-1;466:14881:14;;;7232:7:2;466:14881:14;;;;;;-1:-1:-1;;;;;466:14881:14;7232:30:2;466:14881:14;;-1:-1:-1;466:14881:14;;;4170:15:2;466:14881:14;;;;;;-1:-1:-1;;;;;466:14881:14;;3984:217:2:o;466:14881:14:-;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;:::i;:::-;879:1:13;466:14881:14;;:::o;5352:320:2:-;;6723:111;5352:320;;6731:48;5352:320;5513:103;5521:41;719:10:9;;5521:41:2;:::i;5513:103::-;6705:7;;;;;:::i;:::-;6731:48;:::i;6723:111::-;5352:320::o;466:14881:14:-;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;466:14881:14;;;;;;;;:::i;:::-;;;;7427:344:2;-1:-1:-1;466:14881:14;;;7232:7:2;466:14881:14;;;;;;-1:-1:-1;;;;;466:14881:14;7232:30:2;466:14881:14;;7635:23:2;;;:::i;:::-;-1:-1:-1;;;;;466:14881:14;;;;;;7676:16:2;;;466:14881:14;;;7676:51:2;;;;7427:344;7676:87;;;;;;;7668:96;;7427:344;:::o;7676:87::-;-1:-1:-1;;;;;466:14881:14;;;;;4607:18:2;466:14881:14;;;;;;;-1:-1:-1;4607:35:2;;:25;;466:14881:14;4607:35:2;466:14881:14;;7427:344:2;:::o;7676:51::-;7696:20;;;;;;;:::i;:::-;466:14881:14;7696:31:2;7676:51;;;;;;466:14881:14;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;466:14881:14;;;;;;;;:::o;:::-;;;:::i;:::-;;9347:1:2;466:14881:14;;;;;;;:::o;:::-;;1720:1:10;466:14881:14;;;;;;;:::o;:::-;;1198:2:13;466:14881:14;;;;;;;:::o;10324:560:2:-;;10451:23;;;:::i;:::-;-1:-1:-1;;;;;466:14881:14;;;;;;;;10451:31:2;;;466:14881:14;;10755:15:2;10813:21;466:14881:14;;;10546:16:2;10538:65;10546:16;;;10538:65;:::i;:::-;10645:7;;;;;:::i;:::-;10736;;;:::i;:::-;-1:-1:-1;;;;;466:14881:14;;;;;9330:9:2;466:14881:14;;;;;;;10755:15:2;:20;466:14881:14;;10755:20:2;:::i;:::-;466:14881:14;;-1:-1:-1;;;;;466:14881:14;;;;;;9330:9:2;466:14881:14;;;;;10785:18:2;466:14881:14;;10785:18:2;:::i;:::-;466:14881:14;;10813:16:2;;466:14881:14;;9358:7:2;466:14881:14;;;;;;;10813:21:2;10850:27;10560:1;466:14881:14;;10850:27:2;10324:560::o;466:14881:14:-;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;10995:171:2;466:14881:14;;;;11069:15:2;466:14881:14;;;;;;;-1:-1:-1;;;;;;466:14881:14;;;-1:-1:-1;;;;;11122:23:2;466:14881:14;11122:23:2;:::i;:::-;466:14881:14;11113:46:2;466:14881:14;;;11113:46:2;10995:171::o;:::-;-1:-1:-1;466:14881:14;;;11069:15:2;466:14881:14;;;;;;;-1:-1:-1;;;;;;466:14881:14;-1:-1:-1;;;;;466:14881:14;;;;;-1:-1:-1;;;;;466:14881:14;11122:23:2;;;:::i;:::-;466:14881:14;;;;11113:46:2;-1:-1:-1;466:14881:14;;11113:46:2;10995:171::o;466:14881:14:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;466:14881:14;;;;:::o;:::-;;;:::o;12161:778:2:-;;;;1056:61:8;;1133:8;12331:15:2;;12366:72;;466:14881:14;;;;;;;;;;;;;;12366:72:2;;;;719:10:9;12366:72:2;;;;:::i;:::-;;;-1:-1:-1;;;;;466:14881:14;12366:72:2;;466:14881:14;;12366:72:2;;;12327:606;-1:-1:-1;12362:519:2;;12555:326;;:::i;:::-;466:14881:14;;;12605:18:2;;;466:14881:14;;-1:-1:-1;;;12647:60:2;;466:14881:14;12647:60:2;12366:72;12647:60;;;:::i;12601:266::-;12366:72;12754:95;;12362:519;-1:-1:-1;;;;;;466:14881:14;12488:51:2;;12481:58::o;12366:72::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;12327:606;12911:11;;;12918:4;12911:11;:::o;12161:778::-;;;;;1056:61:8;;1133:8;12331:15:2;;12366:72;466:14881:14;12366:72:2;466:14881:14;;;;;;;;;;;;;12366:72:2;;;;719:10:9;12366:72:2;;;;:::i;12327:606::-;12911:11;;;;12918:4;12911:11;:::o;466:14881:14:-;;;;;;;;;;;;;2624:572:5;;2889:7;;;:::i;:::-;-1:-1:-1;;;;;466:14881:14;;;;3084:7:5;;;;:::i;3011:179::-;3171:7;;;:::i;2624:572::-;;;;-1:-1:-1;;;;;466:14881:14;;;;2823:18:5;;;2889:7;;;;:::i;:::-;466:14881:14;;3015:16:5;;;3084:7;;;;;;:::i;3011:179::-;3113:10;3109:81;;3011:179;;2624:572::o;2819:183::-;466:14881:14;;;2918:10:5;;2914:88;;2819:183;;;;2914:88;5609:34;4967:22;;;:::i;:::-;-1:-1:-1;;466:14881:14;;;;;;;2914:88:5;5609:18;466:14881:14;;;;;5024:17:5;466:14881:14;;;;;;5154:28:5;;;5150:323;;2914:88;5566:26;;;;466:14881:14;;5024:17:5;466:14881:14;;;;;;;5566:26:5;466:14881:14;-1:-1:-1;;;;;466:14881:14;;;;;5220:12:5;466:14881:14;;;;;;;5609:18:5;466:14881:14;;;;;;;;;;5609:34:5;466:14881:14;2914:88:5;;;5150:323;466:14881:14;;;5220:12:5;466:14881:14;;;;;;;;;;5385:30:5;466:14881:14;;;;5269:18:5;:30;:18;;;466:14881:14;;;;;;;;5220:12:5;466:14881:14;;;;;;;5269:30:5;466:14881:14;;;5024:17:5;466:14881:14;;;;;;;5385:30:5;466:14881:14;5150:323:5;;;466:14881:14;;;:::i;:::-;;;3490:217:5;466:14881:14;3490:217:5;3591:20;;;:::i;:::-;-1:-1:-1;;466:14881:14;;;;;;;;;3621:12:5;466:14881:14;;;;;;;;;;;;;;;;;3665:17:5;466:14881:14;;;;3490:217:5:o;3902:161::-;4005:10;466:14881:14;;-1:-1:-1;466:14881:14;3978:15:5;466:14881:14;;;;-1:-1:-1;466:14881:14;;;;;;;;3902:161:5;466:14881:14;;;;4005:10:5;466:14881:14;;;;;;3902:161:5;4005:10;-1:-1:-1;466:14881:14;;;;3902:161:5:o;466:14881:14:-;;;:::i;:::-;;;;;;:::i;:::-;;;5938:1061:5;6212:10;466:14881:14;;-1:-1:-1;;466:14881:14;;;;;;;;;;5938:1061:5;6942:24;466:14881:14;;;;;;;6264:15:5;466:14881:14;;;;;;;;;;;;5938:1061:5;466:14881:14;;;6773:28:5;466:14881:14;;;;;;;;;;;;5938:1061:5;466:14881:14;;;;;;;;;;6264:15:5;466:14881:14;;;;;;;6773:28:5;466:14881:14;;;6264:15:5;466:14881:14;;;;;;;6942:24:5;466:14881:14;;;;;;;;;;;;;;;;;5938:1061:5;466:14881:14;;;;;;5938:1061:5:o;466:14881:14:-;;;:::i;:::-;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;-1:-1:-1;;466:14881:14;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;3797:1;466:14881;;;;;;:::o;:::-;;;;;3942:1;466:14881;;;;;;:::o;:::-;;;;;4087:1;466:14881;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;;466:14881:14;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;;466:14881:14;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;:::o;328:703:10:-;601:10;;597:51;;610:1;657:20;610:1;657:20;;718:9;;;817:17;;;;:::i;:::-;844:150;851:10;;;1003:21;;;328:703;:::o;844:150::-;-1:-1:-1;;466:14881:14;;;;;;;844:150:10;877:11;773:2;;932;902:56;932:2;466:14881:14;;;;;;;;;;844:150:10;466:14881:14;;-1:-1:-1;;;;;;466:14881:14;902:56:10;;;;;:::i;:::-;;466:14881:14;844:150:10;;;;466:14881:14;;;:::i;:::-;;;;;;:::i;:::-;;;711:75:10;743:8;;;773:2;743:8;;:::i;:::-;466:14881:14;;711:75:10;;;;;;597:51;466:14881:14;;;:::i;:::-;-1:-1:-1;;;;;466:14881:14;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;321:1:17;466:14881:14;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;-1:-1:-1;;466:14881:14;;:::o;:::-;;;:::i;:::-;;;208:18:10;;;;:::o;:::-;;466:14881:14;;;;;208:18:10;;;;;;;;;;;466:14881:14;208:18:10;466:14881:14;;;208:18:10;;1588:441;466:14881:14;;;;;;:::i;:::-;;;;;;;;;;1745:15:10;;;;:::i;:::-;;466:14881:14;;1777:1:10;466:14881:14;;;;;;1588:441:10;466:14881:14;1770:15:10;466:14881:14;;;1770:15:10;466:14881:14;1795:132:10;1828:5;;;;;;1944:10;1936:55;1944:10;;;1936:55;:::i;1835:3::-;1879:11;;1887:3;1835;1879:11;;1866:25;;;;;;1835:3;-1:-1:-1;;;1866:25:10;;1854:37;;;;:::i;:::-;;466:14881:14;;1835:3:10;;:::i;:::-;1800:26;;;;1866:25;;;:::i;:::-;;;466:14881:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;777:1861:13;466:14881:14;;864:16:13;860:31;;466:14881:14;;:::i;:::-;1044:27:13;1049:21;1050:15;466:14881:14;;1050:15:13;:::i;:::-;1069:1;466:14881:14;;;;1049:21:13;1044:27;:::i;:::-;1185:15;1174:27;1185:15;;;:::i;:::-;1174:27;:::i;:::-;1212:1396;;;;;;;;;1198:2;1212:1396;;;;;;;;;;;;1069:1;1212:1396;;;1069:1;1212:1396;1069:1;;;1212:1396;;;;2618:13;777:1861;:::o;1212:1396::-;-1:-1:-1;;;;;1212:1396:13;;;;777:1861;:::o;1212:1396::-;-1:-1:-1;;;;;;1212:1396:13;;;;777:1861;:::o;1212:1396::-;1069:1;;;1044;1069;;1212:1396;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1064:1;1212:1396;;;;;;;;;;;;;;;;;;860:31;466:14881:14;;;:::i;4285:281::-;4502:19;4285:281;4502:19;:::i;:::-;4401:142;;466:14881;;4401:142;;466:14881;4401:142;;;466:14881;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;4401:142;466:14881;;;;;;:::i;:::-;;;-1:-1:-1;;;466:14881:14;;;;4401:142;;;;;;;;;:::i;5001:8970::-;5169:28;5108:35;5121:21;5129:12;;;466:14881;;1729:8;466:14881;;;;;;;5129:12;-1:-1:-1;;;;;466:14881:14;;;5169:28;466:14881;;-1:-1:-1;;;5169:32:14;;;;;466:14881;;;5169:32;;;5237:33;;5169:32;466:14881;;;5169:32;;;;;;;;5001:8970;-1:-1:-1;5169:32:14;;;5237:33;;:::i;:::-;466:14881;;-1:-1:-1;;;5294:37:14;;5169:32;5294:37;;466:14881;;;5365:31;;5294:37;466:14881;;;5294:37;;;;;;;;5001:8970;-1:-1:-1;5294:37:14;;;5365:31;;:::i;:::-;5428:30;;;;:::i;:::-;5499:11;;;;:::i;:::-;5490:21;;;:::iii;:::-;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;-1:-1:-1;;;466:14881:14;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;:::i;:::-;-1:-1:-1;;;466:14881:14;;;;-1:-1:-1;;;466:14881:14;;;;5548:8397;466:14881;;5548:8397;;;;;;;;:::i;5294:37::-;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;5169:32;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;4570:336;466:14881;;4677:28;;;466:14881;;;;;;;;;4677:28;;;;;;:::i;:::-;466:14881;4667:39;;466:14881;;;4808:18;4824:1;4808:18;466:14881;;;;;;;4770:18;4739;4770;466:14881;;;;;;;4739:18;-1:-1:-1;4739:18:14;466:14881;;;;4732:103;466:14881;;;;;;:::i;:::-;258:1:17;466:14881:14;;4677:28;466:14881;;;;;-1:-1:-1;288:5:17;292:1;288:5;;;;-1:-1:-1;4889:12:14;-1:-1:-1;4570:336:14:o;295:3:17:-;;;355;343:8;;;337:21;;;;328:31;;;;;;;;295:3;-1:-1:-1;;;466:14881:14;328:31:17;;;312:47;319:5;:3;;;:::i;:::-;:5;:::i;:::-;312:47;;:::i;:::-;;124:18;;;385:34;;;;;;295:3;385:34;371:48;378:3;;;:::i;:::-;371:48;;:::i;:::-;;295:3;:::i;:::-;273:13;;385:34;;;:::i;:::-;;;328:31;;;:::i;:::-;;;466:14881:14;;;;;;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;13976:494::-;14178:6;14116:7;14093:31;466:14881;;;14093:31;:::i;:::-;466:14881;;;14210:24;;;;:::i;:::-;14243:21;14260:4;14243:21;;14240:55;;13976:494;14321:3;14304:20;;14301:54;;13976:494;14381:2;-1:-1:-1;14361:53:14;;13976:494;466:14881;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;466:14881:14;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;14361:53::-;14391:23;466:14881;14391:23;466:14881;14391:23;;:::i;:::-;14361:53;;;;;;14301:54;14332:23;;14381:2;14332:23;;:::i;:::-;14301:54;;;;;14240:55;14272:23;;;;:::i;:::-;14240:55;;;466:14881;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14474:353;466:14881;;-1:-1:-1;;;14675:23:14;;466:14881;14474:353;14675:23;;-1:-1:-1;;;;;466:14881:14;14675:23;;466:14881;;14675:23;;466:14881;;;;14675:23;;;;;;;14474:353;14675:23;;;;14474:353;466:14881;14736:11;466:14881;;;;;;;;;;14736:47;;466:14881;14675:23;14736:47;;466:14881;;;;;;;;;:::i;:::-;14736:47;;;;;;;;;14474:353;14736:47;;;;14474:353;14789:33;;;14474:353;:::o;14736:47::-;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;14675:23;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;14832:513;14923:7;;14919:44;;14970:11;14929:1;14989:8;;15005:60;15012:6;;;15092:14;;;;;:::i;:::-;15114:12;15134:180;15141:7;;;15321:19;;;14832:513;:::o;15134:180::-;15166:3;;;:::i;:::-;15162:7;;15273:12;15054:2;466:14881;;;;;;;;;;;;;;;;;15134:180;466:14881;;;;;;;;;15134:180;466:14881;;;;;;;;;;;15134:180;466:14881;;-1:-1:-1;;;;;;466:14881:14;15273:12;;;;;:::i;:::-;;15134:180;;;;466:14881;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;15005:60;15032:5;;15054:2;15032:5;;:::i;:::-;466:14881;;15005:60;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "4379000",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "approve(address,uint256)": "infinite",
                "balanceOf(address)": "2774",
                "exists(uint256)": "2619",
                "getApproved(uint256)": "4654",
                "getEthDecimalString(uint256)": "infinite",
                "getOperatorsForPool(address)": "infinite",
                "getPoolById(uint256)": "2441",
                "incrementTokenId()": "infinite",
                "isApprovedForAll(address,address)": "3116",
                "mint(address,uint256,address)": "infinite",
                "name()": "infinite",
                "owner()": "2645",
                "ownerOf(uint256)": "2770",
                "renderTokenById(uint256)": "infinite",
                "renounceOwnership()": "26298",
                "safeTransferFrom(address,address,uint256)": "infinite",
                "safeTransferFrom(address,address,uint256,bytes)": "infinite",
                "setApprovalForAll(address,bool)": "26951",
                "supportsInterface(bytes4)": "436",
                "symbol()": "infinite",
                "tokenByIndex(uint256)": "4679",
                "tokenOfOwnerByIndex(address,uint256)": "4941",
                "tokenURI(uint256)": "infinite",
                "totalSupply()": "2401",
                "transferFrom(address,address,uint256)": "infinite",
                "transferOwnership(address)": "28756"
              },
              "internal": {
                "generateSVGofTokenById(uint256)": "infinite",
                "getColor(address)": "infinite",
                "uint2str(uint256)": "infinite"
              }
            },
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "exists(uint256)": "4f558e79",
              "getApproved(uint256)": "081812fc",
              "getEthDecimalString(uint256)": "edd148a2",
              "getOperatorsForPool(address)": "a090f9b4",
              "getPoolById(uint256)": "0bc59b38",
              "incrementTokenId()": "4f3130fa",
              "isApprovedForAll(address,address)": "e985e9c5",
              "mint(address,uint256,address)": "0d4d1513",
              "name()": "06fdde03",
              "owner()": "8da5cb5b",
              "ownerOf(uint256)": "6352211e",
              "renderTokenById(uint256)": "a2d6c6da",
              "renounceOwnership()": "715018a6",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "symbol()": "95d89b41",
              "tokenByIndex(uint256)": "4f6ccce7",
              "tokenOfOwnerByIndex(address,uint256)": "2f745c59",
              "tokenURI(uint256)": "c87b56dd",
              "totalSupply()": "18160ddd",
              "transferFrom(address,address,uint256)": "23b872dd",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ssvRegistryAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"getEthDecimalString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getOperatorsForPool\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPoolById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"renderTokenById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FrensPoolShare.sol\":\"FrensPoolShare\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/FrensPoolShare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\nimport \\\"./interfaces/ISSVRegistry.sol\\\";\\nimport \\\"./interfaces/IStakingPoolFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport 'base64-sol/base64.sol';\\nimport './ToColor.sol';\\n\\n\\ncontract FrensPoolShare is ERC721Enumerable, Ownable {\\n\\n  using Strings for uint256;\\n  using ToColor for bytes3;\\n\\n  uint private _tokenId;\\n  mapping(uint => address) poolById;\\n\\n  IStakingPoolFactory factoryContract;\\n  ISSVRegistry ssvRegistry;\\n\\n  constructor(address factoryAddress_, address ssvRegistryAddress_) ERC721(\\\"staking con amigos\\\", \\\"FRENS\\\") {\\n    factoryContract = IStakingPoolFactory(factoryAddress_);\\n    ssvRegistry = ISSVRegistry(ssvRegistryAddress_);\\n  }\\n\\n  modifier onlyStakingPools(address _stakingPoolAddress) {\\n    require(factoryContract.doesStakingPoolExist(_stakingPoolAddress), \\\"must be a staking pool\\\");\\n    _;\\n  }\\n\\n  function incrementTokenId() public onlyStakingPools(msg.sender) returns(uint){\\n    _tokenId++;\\n    return _tokenId;\\n  }\\n\\n  function mint(address userAddress, uint id, address _pool) public onlyStakingPools(msg.sender) {\\n    poolById[id] = _pool;\\n    _safeMint(userAddress,id);\\n  }\\n\\n  function exists(uint _id) public view returns(bool){\\n    return _exists(_id);\\n  }\\n\\n  function getPoolById(uint _id) public view returns(address){\\n    return poolById[_id];\\n  }\\n\\n  //art stuff\\n\\n\\n  function tokenURI(uint256 id) public view override returns (string memory) {\\n    require(_exists(id), \\\"not exist\\\");\\n    address poolAddress = poolById[id];\\n    IStakingPool stakingPool = IStakingPool(payable(poolAddress));\\n    uint depositForId = stakingPool.getDepositAmount(id);\\n    string memory depositString = getEthDecimalString(depositForId);\\n    uint shareForId = stakingPool.getDistributableShare(id);\\n    string memory shareString = getEthDecimalString(shareForId);\\n    string memory stakingPoolAddress = Strings.toHexString(uint160(poolAddress), 20);\\n    (uint32[] memory poolOperators, bytes memory pubKey) = getOperatorsForPool(poolAddress);\\n    //string memory pubKeyString = string(abi.encodePacked(pubKey));\\n    string memory poolState = stakingPool.getState();\\n    string memory name = string(abi.encodePacked('fren pool share #',id.toString()));\\n    string memory description = string(abi.encodePacked(\\n      'this fren has a deposit of ',depositString,\\n      ' Eth in pool ', stakingPoolAddress,\\n      ' with claimable balance of ', shareString, ' Eth'));\\n    string memory image = Base64.encode(bytes(generateSVGofTokenById(id)));\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\":\\\"',\\n                name,\\n                '\\\", \\\"description\\\":\\\"',\\n                description,\\n                '\\\", \\\"external_url\\\":\\\"https://frens.fun/token/',\\n                id.toString(),\\n                '\\\", \\\"attributes\\\": [{\\\"trait_type\\\": \\\"pool\\\", \\\"value\\\":\\\"',\\n                stakingPoolAddress,\\n                '\\\"},{\\\"trait_type\\\": \\\"deposit\\\", \\\"value\\\": \\\"',\\n                depositString, ' Eth',\\n                '\\\"},{\\\"trait_type\\\": \\\"claimable\\\", \\\"value\\\": \\\"',\\n                shareString, ' Eth',\\n                '\\\"},{\\\"trait_type\\\": \\\"pool state\\\", \\\"value\\\": \\\"',\\n                poolState,\\n                '\\\"},{\\\"trait_type\\\": \\\"operator1\\\", \\\"value\\\": \\\"',\\n                poolOperators.length == 0 ? \\\"Not Set\\\" : uint2str(poolOperators[0]),\\n                '\\\"},{\\\"trait_type\\\": \\\"operator2\\\", \\\"value\\\": \\\"',\\n                poolOperators.length == 0 ? \\\"Not Set\\\" : uint2str(poolOperators[1]),\\n                '\\\"},{\\\"trait_type\\\": \\\"operator3\\\", \\\"value\\\": \\\"',\\n                poolOperators.length == 0 ? \\\"Not Set\\\" : uint2str(poolOperators[2]),\\n                '\\\"},{\\\"trait_type\\\": \\\"operator4\\\", \\\"value\\\": \\\"',\\n                poolOperators.length == 0 ? \\\"Not Set\\\" : uint2str(poolOperators[3]),\\n                '\\\"}], \\\"image\\\": \\\"',\\n                'data:image/svg+xml;base64,',\\n                image,\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function generateSVGofTokenById(uint256 id) internal view returns (string memory) {\\n\\n    string memory svg = string(abi.encodePacked(\\n      '<svg width=\\\"400\\\" height=\\\"400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n        renderTokenById(id),\\n      '</svg>'\\n    ));\\n\\n    return svg;\\n  }\\n\\n  function getColor(address a) internal pure returns(string memory){\\n    bytes32 colorRandomness = keccak256(abi.encodePacked(address(a)));\\n    bytes3 colorBytes = bytes2(colorRandomness[0]) | ( bytes2(colorRandomness[1]) >> 8 ) | ( bytes3(colorRandomness[2]) >> 16 );\\n    string memory color = colorBytes.toColor();\\n    return color;\\n  }\\n\\n\\n  // Visibility is `public` to enable it being called by other contracts for composition.\\n  function renderTokenById(uint256 id) public view returns (string memory) {\\n\\n    IStakingPool stakingPool = IStakingPool(payable(poolById[id]));\\n    uint depositForId = stakingPool.getDepositAmount(id);\\n    string memory depositString = getEthDecimalString(depositForId);\\n    uint shareForId = stakingPool.getDistributableShare(id);\\n    string memory shareString = getEthDecimalString(shareForId);\\n    string memory poolColor = getColor(address(stakingPool));\\n    string memory textColor = getColor(ownerOf(id));\\n\\n    string memory render = string(abi.encodePacked(\\n\\n      //\\\"frens\\\" lettering stlying\\n      '<defs><style>@font-face{font-family:\\\"Permanent Marker\\\";src:url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAr4AA0AAAAAD/gAAQBCAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABMAAAAE8AAABgYbLjY2NtYXAAAAGAAAAAWgAAAVoM5AMpY3Z0IAAAAdwAAAACAAAAAgAVAABmcGdtAAAB4AAAAPcAAAFhkkHa+mdseWYAAALYAAAFogAAB9S42zT5aGVhZAAACHwAAAA2AAAANghIWvtoaGVhAAAItAAAAB0AAAAkBH0BgGhtdHgAAAjUAAAAHAAAABwPZ//6bG9jYQAACPAAAAAQAAAAEAUYB0JtYXhwAAAJAAAAAB4AAAAgAhQCGW5hbWUAAAkgAAABuwAAA1RQW8M9cG9zdAAACtwAAAAUAAAAIP+2ADpwcmVwAAAK8AAAAAcAAAAHaAaMhXicY2BhMmacwMDKwMC0h6mLgYGhB0Iz3mUwZgRymRhgoIGBQV2AAQFcPP2CGBwYFBiCmfL+H2awZSlgdAUKgzQxMBUyfQNSCgwMAE76DFAAeJxjYGBgZoBgGQZGBhAIAfIYwXwWBgsgzcXAwcAEhAoMbgx+DMH//wPFFBhcgeyg////P/y/9/+2/5uheqGAkY2BIGAkrISBgYkZymABYlYiTB08AAC6og4SAAAAFQAAeJxdkD1OxDAQhWMSFnIDJAvJI2spVrboqVI4kVCasKHwNPxIuxLZOyCloXHBWd52KXMxBN4EVkDj8Xuj+fRmkJgaeeP3QrzzID7f4C73efr4YCGMUmXnIJ4sTgzEiixSoyqky2rtNaugwu0mqEq9PG+QLacaG9vA1wpJ67v43ntCwfL43TLfWGQHTDZhAkfA7huwmwBx/sPi1NQK6VXj7zx6J1E4lkSqxNh4jE4Ss8XimDHW1+5iTntmsFhZnM+E1qOQSDiEWWlCH4IMcYMfPf7Vg0j+G8VvI16gHETfTJ1ekzwYmjTFhOwsclO3vowRie0X5WBrXAB4nHVVSa8j1RX2ufNUt0bf8vTK03NV+/Haz/0GG7ppN69BCETSCVkECSEWvUDZRELJhh3LREL8g/yN8ANgySqLiA1LdiAQEkp2eTlVhiWusst1zx2/4Zxe71c+0NN3/yX/IN/0/t7r7TfQbOj+QJsDlAe63+Cf9nUfLq/C1XV9c1nBrqmgDB6K0nNZe9J4kEGUYbcPol/RfQXS0+YMGlHLetFFD6Q8wL6N0b2nUtRLDxt4UcmISEkp0ZoTQZVMslylsWLCLdbb8fY3bzy7As6oAiI5A1eXAIQk683VzW6kIp861bcc6NkHD4DpJM0cZ7yo19sJl9zMrV/5bObWu+3Vang7MT7yllMqVH7x6M37NlaT3z57Y6GCjJv1OtVJnCiwJNSnqzJZ1U2RlbEWcWq1ppJyQgjl/bHRSmo1rhKlk4QCY0QKaoNimuDiIkstmOCiMQLEOOWcj16aCSIEOJwmTR3h3klozkqrCOeGZB0Hd9/d/Yd8TX7ofXbkABEvEWUEDe961zYt6qYlBy5gv7tu6iewewLHON6Xu/0On08g7K4u25EVTCFIDzHUi+XC4ybxCgJbpCjxd3oc+whkKdu+OCQmTY0RpKbrVS8XXXe8S1Esi/alH46hbhvdbpq6Xfe8mhGajyZRzC03iLESwIjgggoWa84Vd4IwSogBU27LcjtQuZKOpkn1/HFfOHGdmkRyRZWVwssoilT1uz88O1ERFcg4APRRB5ywogmTl6aNtgJ1gwOAXgiTpyrTg1kS1pllxBRaMIKCAQ0taYazECexwn05qhg3DPkj7Mv0MBmMU40UKcYSZYPVnnPAxVAZynHlUJuRcBExAhsSISkQJpgKHPcz47HkkqhB6VABIKPcCg5MYasVw4VhMY5H/qWGBAVuaGTNy4rijrpzSAkgKHaVkcwIKC+YoFmZnyj0AaFgBIa8Xl6Uynf6+PHuf+Qr8m3vr6gPdJcIZS0kuvM6XB3lUtES/VaBKDDSBE9KZB2fEMqjg7EDkozu87T8heIGfYuz4QyeLj39p2EiznF/3ulyWqYaZc/lydNXX51Obs6n6FGCAHE8AWeKMySUtqQS+cLNNNU20lplwzDI/IAJIZ2lzijQgefBcYL/eDqarucPnpXGKKWINfx9NRykCIrCS67ONykDM1SHv33y6WtmfHpRCcYEEiSxi0+iOML1YHSzfzgd/v75hw/tbLH0JO1ntFiVZjAoZHV9uZudPB7F54GhALhToyDd6fuv0CJkOo7RbaRn7v6N+e773p86NBGFq/qAUB2gboHcdYB1Fir7LaoV6SNqxaVsEcSboJF2ZZfGMFc2RyyRDbEhcgNytyGAQbTXBiaofCulkZJzChDFLnZ+yqfbB4fN4OVcxcrnsdcEKGGP33l+T5NqfrKcTpeT2dh6QSUeQRoTmdMP33lhd28RKGAOKhKrEEFjqYhwIIW3o9l0wM/eW/OzP0Kqwmo5z6hNczF9evt4TKwavHZ7ydPmBN0ZR8vmXiq0turmdn2SMpGFGDeoMc/aqhorBsC9d+BH82Q0PClAwL3LEUUGOWYxnYKOrIN/5dN5M+ardHW/qyHm7ifyOWL6ca+XH1CQnSavFyi8DrNfMPq5XIhwBLMFskMaRYnhfVsVZJdUlteY0TYEv4B15UBaBeP7zQaWm7ayHHMh9kUE0NREr863fUV2f/7LR0+Zjx04TEWD6P67p7aaz7w9xXMQORgWNBtlCquFYOg1atJX3n73nFmqy/E4UhGKhhNggImAUyL8+s3bRxMaedd6n2ERGD0s3CA9e2tJhJUxfBHnNsmS0ekwFZha6krmLvQLa4d9lUgrmAOtiZHoeqGlQODSwdhiCornebUtz1+/aSIsbgg6ISqxYLGeUIoq18NRqVgymXssWzE2U4Z9oswqxYiLBU6a9v4PxderQQAAAAEAAAABAEJAxpAWXw889QgLBAAAAAAAyTVKIAAAAADVK8zX/+z/1QLcAu8AAAAJAAIAAAAAAAB4nGNgZGBgKfi3m0Geae//NwwgwMiACtgBhGwFAAAAAAF7AAABewAAAoIACQJN/+wCvf/xApYACgJOAAoAAAAGAAwAzgHeAoQDLgPqeJxjYGRgYGBn2M7AxAACjGCSiwHIZUwEMQEVgwExAAB4nJVRzWrbQBD+1nFSCq3praWnoaekxPrx0ToF2wHRxBin5K4oiyyiSGKl2PjSJ8gL5C36DD30IfoYfYJ+Xi/BmJRSLbv7zcw33+yMALzDTyhsv4h7ixX9kcMdvMIXhw/wCXOHu/iA1uFDvMWjw0d4jyeHe/iM78xS3de0lvjlsIKomcMd9FTt8AHG6pvDXQTqh8OH+Kh+O3wEr/PG4R6+doajql6bPFu0cpyeyCAIA7lZy3lVtjLOS21OJS5TT86KQiytEaMbbZb61ptpc5+UmszLxNxpM9fZQ5GY0AuCMBrH03n0zNgS+o6xnyjOf61Nk1elWIW/5C7ath76/mq18pI6SRfaq0zmF3mqy0Y3/kU8mkyvJv2BF2CECjXWMMiRYcF5C46R4oT3AAFCbsENGYJzckvLGJNdQjPrlFZMnMIjOkPBJTtqjbU07w17yfOWzJm17pFYla3mJS2DOxuZ88zwQK2NL2RGYN8SsXKMKePRCxq7Cv09jX9VlD3+tfU27GPTs+y84f/qbmbQcsJD+FwruzxGau6UUU2rIi9jtGC11Go2dmI+LtjtCBN2fMWzzz/CV/wB3KikGwB4nGNgZgCD/5sZjBkwATsALLAB8LgB/4WwBI0A) format(\\\"woff\\\"); font-weight:normal;font-style:normal;}</style></defs>'\\n\\n      '<circle cx=\\\"200\\\" cy=\\\"200\\\" r=\\\"170\\\" fill=\\\"#',\\n        poolColor,\\n      '\\\"/>,'\\n      //shaka\\n      '<g transform=\\\"matrix(.707107 -.70710678 .70710678 .707107 16 153)\\\" stroke=\\\"none\\\" fill-rule=\\\"nonzero\\\"><path d=\\\"M196.2512 233.555c8.3009 0 9.8263-6.9913 8.1372-12.24-1.6351-5.0915-6.5388-9.2041-16.1456-13.4342-18.6514-8.1867-44.9124-15.3737-44.9124-17.8813s11.2595-.665 25.952-3.4659c11.1504-2.1342 12.204-6.4434 13.6215-13.9247 1.6891-8.8516-4.0689-15.5493-4.0689-15.5493s9.8988-3.9178 9.8988-16.099-11.4057-17.6453-11.4057-17.6453 4.6668-3.0747 5.866-10.2425c1.4894-8.8319-4.4865-16.6662-12.6045-22.5219-6.8467-4.9352-15.5279-9.3614-21.9741-12.0446-5.5393-2.3102-9.6994-3.936-23.3019-3.7602-10.9517.1372-16.3081-.2153-17.144-3.9951-.6356-2.8202 1.6347-5.7382 3.904-12.8275 2.8157-8.7339 10.0441-31.256-3.0874-51.3503-5.0481-7.7155-18.1245-7.598-20.7756-4.9148-5.0497 5.1108 1.5253 15.3338-1.98 33.645-2.4151 12.6321-5.3214 21.249-17.2164 30.9824-6.8661 5.6207-22.0854 14.963-33.8356 30.6297-4.3587 5.7979-17.9428 4.7004-25.5348 3.5652-3.032-.4507-5.8841 1.7227-6.4831 4.9739-6.0301 32.3922-1.9433 66.2534.0905 79.3165.4911 3.1726 3.1423 5.4245 6.1208 5.1895 6.7737-.5086 18.2526-1.2925 21.8119-.8611 7.1738.8611 21.9389 12.4552 42.1698 18.6239 17.9615 5.4838 43.5155 10.5559 54.9387 11.2413s59.8411 14.5903 67.9588 14.5903z\\\" fill=\\\"#ffca28\\\"/><path d=\\\"M131.2159 74.786v.3141c6.9566.0192 13.2219 7.0502 12.9677 14.5512-.31 8.7336-11.6234 12.3186-7.3188 24.6756.8706 2.5251 11.4597 6.6976 8.8616 19.2512-2.1244 10.2827-10.0614 9.5562-10.0614 14.7071 0 8.7359 9.4624 14.5704 10.1345 24.5197s-4.0677 11.5345-3.7421 14.9828c.2368 2.5466 1.2729 3.4652 1.2729 2.1941 0-2.5082 11.2594-.6666 25.951-3.4675 11.1514-2.1342 12.2049-6.4434 13.6224-13.9252 1.6891-8.8511-4.0695-15.5488-4.0695-15.5488s9.8995-3.9183 9.8995-16.0979-11.4057-17.6469-11.4057-17.6469 4.6667-3.0743 5.8647-10.242c1.4906-8.8319-4.4856-16.6662-12.6037-22.5221-6.8469-4.9351-15.5274-9.3618-21.9737-12.0429-4.632-1.94-8.3376-3.3884-17.3994-3.7025z\\\" fill=\\\"#ffb300\\\"/><path d=\\\"M135.3022 150.9304c-.1636-4.1328.091-5.2682 2.1071-5.8173s5.7028.9998 5.7028.9998c14.8553-1.3524 30.8928 2.0552 35.7408 10.9277 0 0-23.609-1.8607-32.4723-1.3523-6.9549.4122-10.8781.4892-11.0784-4.7579zm42.0433-27.6145c-14.5104-5.4647-31.4737-6.4432-36.486-6.4432-7.1193 0-5.7568-11.6727-2.7244-13.8658 2.0889-.9203 4.5581 2.3106 6.5015 3.0748 5.7759 2.2908 30.1841 3.7407 32.7089 17.2342zm.9263 109.5939c-26.6423-5.0914-62.148-15.1978-90.3348-19.1146-20.7393-2.878-32.3452-11.5346-41.0801-16.392-4.9223-2.7417-8.8089-4.9147-12.713-5.9722-10.3344-2.8205-18.2891-1.2347-24.7356-1.489s7.7542-10.0275 26.4972-6.0523c4.758.9998 9.1353 3.7409 14.2568 6.5999 8.8262 4.9161 19.6143 12.241 39.3193 15.7064 11.0417 1.9591 27.8048 3.9566 43.5505 8.2251 12.4227 3.35 46.9653 15.2178 58.9874 16.8051 6.1574.8227 11.587-.9805 11.606-.9805 0 0-1.0361 2.6641-5.2309 4.0149-4.4679 1.45-9.7167.6467-20.1228-1.3508zm-62.0753-158.301c-3.7771.5875-11.986-2.0552-8.5724-10.947 5.8122-15.1194 6.2843-20.3472 6.0476-35.5457-.1812-10.8894-3.3052-18.2322-5.6474-22.6781 0 0 18.8516 13.7094 9.3162 56.5404-1.3982 6.2276-1.144 12.6304-1.144 12.6304zm61.0586 109.1441s-4.2854 2.8393-10.0614 5.0142c-5.7934 2.1727-15.4195 3.9951-19.233 4.0143s-8.355-4.3284-5.0847-5.9542c3.2511-1.6044 34.3791-3.0743 34.3791-3.0743z\\\" fill=\\\"#eda600\\\"/></g>',\\n      //ethlogo (partial)\\n      '<polygon points=\\\"200,359 80,220 98,195 200,256\\\" fill=\\\"#',\\n        poolColor,\\n      '\\\"/>',\\n      '<polygon points=\\\"200,359 98,215 200,276\\\" fill=\\\"#8c8c8c\\\" />',\\n      '<polygon points=\\\"200,359 302,215 200,276\\\" fill=\\\"#3c3c3b\\\" />',\\n      //frens text\\n      '<text font-size=\\\"122\\\" x=\\\"5\\\" y=\\\"240\\\" font-family=\\\"Permanent Marker\\\"  opacity=\\\".4\\\" fill=\\\"#',\\n        textColor,\\n      '\\\">FRENS</text>',\\n      //frens Text outline\\n      '<text font-size=\\\"122\\\" x=\\\"5\\\" y=\\\"240\\\" font-family=\\\"Permanent Marker\\\" fill=\\\"none\\\"  stroke-width=\\\"2\\\" stroke=\\\"#',\\n        textColor,\\n      '\\\">FRENS</text>'\\n      //deposit text\\n      '<text font-size=\\\"50\\\" text-anchor=\\\"middle\\\" x=\\\"200\\\" y=\\\"135\\\" fill=\\\"#FF69B4\\\" stroke=\\\"#00EDF5\\\" font-weight=\\\"Bold\\\" font-family=\\\"Sans-Serif\\\" opacity=\\\".8\\\">',\\n        depositString, ' Eth',\\n      '</text>',\\n      //claimable text\\n      '<text font-size=\\\"25\\\" text-anchor=\\\"middle\\\" x=\\\"200\\\" y=\\\"300\\\" fill=\\\"#FF69B4\\\" stroke=\\\"#00EDF5\\\" font-weight=\\\"Bold\\\" font-family=\\\"Sans-Serif\\\" >',\\n        shareString, ' Eth Claimable',\\n      '</text>'\\n\\n\\n      ));\\n\\n    return render;\\n  }\\n\\n\\n  function getEthDecimalString(uint amountInWei) public pure returns(string memory){\\n    string memory leftOfDecimal = uint2str(amountInWei / 1 ether);\\n    uint rightOfDecimal = (amountInWei % 1 ether) / 10**14;\\n    string memory rod = uint2str(rightOfDecimal);\\n    if(rightOfDecimal < 1000) rod = string.concat(\\\"0\\\", rod);\\n    if(rightOfDecimal < 100) rod = string.concat(\\\"0\\\", rod);\\n    if(rightOfDecimal < 10) rod = string.concat(\\\"0\\\", rod);\\n    return string.concat(leftOfDecimal, \\\".\\\", rod);\\n  }\\n\\n  function getOperatorsForPool(address poolAddress) public view returns (uint32[] memory, bytes memory) {\\n    IStakingPool stakingPool = IStakingPool(payable(poolAddress));\\n    bytes memory poolPubKey = stakingPool.getPubKey();\\n    uint32[] memory poolOperators = ssvRegistry.getOperatorsByValidator(poolPubKey);\\n    return(poolOperators, poolPubKey);\\n  }\\n\\n\\n  function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n      if (_i == 0) {\\n          return \\\"0\\\";\\n      }\\n      uint j = _i;\\n      uint len;\\n      while (j != 0) {\\n          len++;\\n          j /= 10;\\n      }\\n      bytes memory bstr = new bytes(len);\\n      uint k = len;\\n      while (_i != 0) {\\n          k = k-1;\\n          uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n          bytes1 b1 = bytes1(temp);\\n          bstr[k] = b1;\\n          _i /= 10;\\n      }\\n      return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0x64a31dc60e3b04fd0cb8f7cdae0c1ad06ad58293d89e3822b59aa08da57b0234\",\"license\":\"MIT\"},\"contracts/ToColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary ToColor {\\n    bytes16 internal constant ALPHABET = '0123456789abcdef';\\n\\n    function toColor(bytes3 value) internal pure returns (string memory) {\\n      bytes memory buffer = new bytes(6);\\n      for (uint256 i = 0; i < 3; i++) {\\n          buffer[i*2+1] = ALPHABET[uint8(value[i]) & 0xf];\\n          buffer[i*2] = ALPHABET[uint8(value[i]>>4) & 0xf];\\n      }\\n      return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x80d48cfb10669856b687d9ed46b3571ba82505490b020fc1b5128dc2aaa70cbd\",\"license\":\"MIT\"},\"contracts/interfaces/ISSVRegistry.sol\":{\"content\":\"// File: contracts/ISSVRegistry.sol\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.2;\\n\\ninterface ISSVRegistry {\\n    struct Oess {\\n        uint32 operatorId;\\n        bytes sharedPublicKey;\\n        bytes encryptedKey;\\n    }\\n\\n    /** errors */\\n    error ExceedRegisteredOperatorsByAccountLimit();\\n    error OperatorDeleted();\\n    error ValidatorAlreadyExists();\\n    error ExceedValidatorLimit();\\n    error OperatorNotFound();\\n    error InvalidPublicKeyLength();\\n    error OessDataStructureInvalid();\\n\\n    /**\\n     * @dev Initializes the contract\\n     */\\n    function initialize() external;\\n\\n    /**\\n     * @dev Registers a new operator.\\n     * @param name Operator's display name.\\n     * @param ownerAddress Operator's ethereum address that can collect fees.\\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\\n     * @param fee The fee which the operator charges for each block.\\n     */\\n    function registerOperator(string calldata name, address ownerAddress, bytes calldata publicKey, uint64 fee) external returns (uint32);\\n\\n    /**\\n     * @dev removes an operator.\\n     * @param operatorId Operator id.\\n     */\\n    function removeOperator(uint32 operatorId) external;\\n\\n    /**\\n     * @dev Updates an operator fee.\\n     * @param operatorId Operator id.\\n     * @param fee New operator fee.\\n     */\\n    function updateOperatorFee(\\n        uint32 operatorId,\\n        uint64 fee\\n    ) external;\\n\\n    /**\\n     * @dev Updates an operator fee.\\n     * @param operatorId Operator id.\\n     * @param score New score.\\n     */\\n    function updateOperatorScore(\\n        uint32 operatorId,\\n        uint32 score\\n    ) external;\\n\\n    /**\\n     * @dev Registers a new validator.\\n     * @param ownerAddress The user's ethereum address that is the owner of the validator.\\n     * @param publicKey Validator public key.\\n     * @param operatorIds Operator ids.\\n     * @param sharesPublicKeys Shares public keys.\\n     * @param sharesEncrypted Encrypted private keys.\\n     */\\n    function registerValidator(\\n        address ownerAddress,\\n        bytes calldata publicKey,\\n        uint32[] calldata operatorIds,\\n        bytes[] calldata sharesPublicKeys,\\n        bytes[] calldata sharesEncrypted\\n    ) external;\\n\\n    /**\\n     * @dev removes a validator.\\n     * @param publicKey Validator's public key.\\n     */\\n    function removeValidator(bytes calldata publicKey) external;\\n\\n    function enableOwnerValidators(address ownerAddress) external;\\n\\n    function disableOwnerValidators(address ownerAddress) external;\\n\\n    function isLiquidated(address ownerAddress) external view returns (bool);\\n\\n    /**\\n     * @dev Gets an operator by operator id.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorById(uint32 operatorId)\\n        external view\\n        returns (\\n            string memory,\\n            address,\\n            bytes memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    /**\\n     * @dev Returns operators for owner.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function getOperatorsByOwnerAddress(address ownerAddress)\\n        external view\\n        returns (uint32[] memory);\\n\\n    /**\\n     * @dev Gets operators list which are in use by validator.\\n     * @param validatorPublicKey Validator's public key.\\n     */\\n    function getOperatorsByValidator(bytes calldata validatorPublicKey)\\n        external view\\n        returns (uint32[] memory);\\n\\n    /**\\n     * @dev Gets operator's owner.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorOwner(uint32 operatorId) external view returns (address);\\n\\n    /**\\n     * @dev Gets operator current fee.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorFee(uint32 operatorId)\\n        external view\\n        returns (uint64);\\n\\n    /**\\n     * @dev Gets active validator count.\\n     */\\n    function activeValidatorCount() external view returns (uint32);\\n\\n    /**\\n     * @dev Gets an validator by public key.\\n     * @param publicKey Validator's public key.\\n     */\\n    function validators(bytes calldata publicKey)\\n        external view\\n        returns (\\n            address,\\n            bytes memory,\\n            bool\\n        );\\n\\n    /**\\n     * @dev Gets a validator public keys by owner's address.\\n     * @param ownerAddress Owner's Address.\\n     */\\n    function getValidatorsByAddress(address ownerAddress)\\n        external view\\n        returns (bytes[] memory);\\n\\n    /**\\n     * @dev Get validator's owner.\\n     * @param publicKey Validator's public key.\\n     */\\n    function getValidatorOwner(bytes calldata publicKey) external view returns (address);\\n\\n    /**\\n     * @dev Get validators amount per operator.\\n     * @param operatorId Operator public key\\n     */\\n    function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32);\\n}\",\"keccak256\":\"0xc43589f0f38f8dcd2b808071bc46162081b6198be4baee9f44d5ff1556ffb10f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IStakingPool{\\n  function deposit(address userAddress) external payable;\\n\\n  function addToDeposit(uint _id) external payable;\\n\\n  function withdraw(uint _id, uint _amount) external;\\n\\n  function distribute() external;\\n\\n  function getShare(uint _id) external view returns(uint);\\n\\n  function getDistributableShare(uint _id) external view returns(uint);\\n\\n  function getPubKey() external view returns(bytes memory);\\n\\n  function getState() external view returns(string memory);\\n\\n  function getDepositAmount(uint _id) external view returns(uint);\\n\\n\\n  function stake(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) external;\\n\\n    function unstake() external;\\n\\n}\\n\",\"keccak256\":\"0xbf6d53e3751be73a2267c404636c6f403f9d2bae0328fd3043b9cb48f149593a\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPoolFactory.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IStakingPoolFactory {\\n\\n  function doesStakingPoolExist(address stakingPoolAddress) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x5291fed439a327be5ddb12cce60acf5641d4e04109c5d2c8bdcdc5098d9fa58f\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 133,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "_name",
                "offset": 0,
                "slot": "0",
                "type": "t_string_storage"
              },
              {
                "astId": 135,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "_symbol",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
              },
              {
                "astId": 139,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "_owners",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 143,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "_balances",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 147,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "_tokenApprovals",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 153,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "_operatorApprovals",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
              },
              {
                "astId": 1087,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "_ownedTokens",
                "offset": 0,
                "slot": "6",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
              },
              {
                "astId": 1091,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "_ownedTokensIndex",
                "offset": 0,
                "slot": "7",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "astId": 1094,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "_allTokens",
                "offset": 0,
                "slot": "8",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "astId": 1098,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "_allTokensIndex",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "astId": 7,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "_owner",
                "offset": 0,
                "slot": "10",
                "type": "t_address"
              },
              {
                "astId": 2163,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "_tokenId",
                "offset": 0,
                "slot": "11",
                "type": "t_uint256"
              },
              {
                "astId": 2167,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "poolById",
                "offset": 0,
                "slot": "12",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 2170,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "factoryContract",
                "offset": 0,
                "slot": "13",
                "type": "t_contract(IStakingPoolFactory)4130"
              },
              {
                "astId": 2173,
                "contract": "contracts/FrensPoolShare.sol:FrensPoolShare",
                "label": "ssvRegistry",
                "offset": 0,
                "slot": "14",
                "type": "t_contract(ISSVRegistry)4051"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_uint256)dyn_storage": {
                "base": "t_uint256",
                "encoding": "dynamic_array",
                "label": "uint256[]",
                "numberOfBytes": "32"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_contract(ISSVRegistry)4051": {
                "encoding": "inplace",
                "label": "contract ISSVRegistry",
                "numberOfBytes": "20"
              },
              "t_contract(IStakingPoolFactory)4130": {
                "encoding": "inplace",
                "label": "contract IStakingPoolFactory",
                "numberOfBytes": "20"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
              },
              "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => uint256))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_uint256)"
              },
              "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
              },
              "t_mapping(t_uint256,t_uint256)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "contracts/StakingPool.sol": {
        "StakingPool": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "depositContractAddress_",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "factory_",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "frensPoolShareAddress_",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "depositContractAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                }
              ],
              "name": "Deposit",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "addToDeposit",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "userAddress",
                  "type": "address"
                }
              ],
              "name": "deposit",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "depositAmount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "depositContractAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "distribute",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "getDepositAmount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "getDistributableShare",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getPubKey",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "getShare",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getState",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "idsInThisPool",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "rugpull",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "frensPoolShareAddress_",
                  "type": "address"
                }
              ],
              "name": "setFrensPoolShare",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "name": "setPubKey",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "pubkey",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "withdrawal_credentials",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "deposit_data_root",
                  "type": "bytes32"
                }
              ],
              "name": "stake",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalDeposits",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "unstake",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "validatorPubKey",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 285,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "60803461010257601f6200188f38819003918201601f19168301916001600160401b0383118484101761010757808492606094604052833981010312610102576100488161011d565b61006060406100596020850161011d565b930161011d565b600080546001600160a01b03198082163390811784556040519691956001600160a01b0395948694859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908ba360045490610100600160a81b039060081b169060018060a81b031916178060045560081c16856007541617600755168360085416176008551690600954161760095561175d9081620001328239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101025756fe6040608081526004908136101561001d575b5050361561001b57005b005b600090813560e01c80631865c57d14610fdf5780632a4dbd2b14610fb35780632def662014610f8b5780632edaf74d14610f3b578063378de45b146105b6578063441a3e7014610d915780634ad02ef114610d615780634b2b4e3614610947578063678e300a14610927578063715018a6146108c65780637be0b4a0146107ee5780637d882097146107d057806382a790cf146107975780638620891c146105de57806387f8ab26146105b65780638da5cb5b1461058f578063cfb5a5f814610563578063e2664e4914610513578063e32d2913146103de578063e4fc6b6d146103c2578063f2fde38b146102ed5763f340fa011461011c5750610011565b602092836003193601126102e9576001600160a01b03938135858116919082900361024a5760ff83541660038110156102d657610159901561129c565b341561029f579081859392876009541684875180978193632798987d60e11b83525af1938415610295578694610261575b506001908487525234848620556101a3346002546112e1565b600255600354956801000000000000000087101561024e57836101d0886001899a999899016003556111bd565b819291549060031b600019811b9283911b1691191617905560095416803b1561024a5784928360649288519687958694630d4d151360e01b865285015260248401523060448401525af1801561023d5761022957505051f35b610232906110a9565b6102395751f35b5080fd5b50505051903d90823e3d90fd5b8480fd5b634e487b7160e01b865260418352602486fd5b9080945081813d831161028e575b61027981836110ef565b8101031261028a575192600161018a565b8580fd5b503d61026f565b85513d88823e3d90fd5b9050606492519162461bcd60e51b8352820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152fd5b634e487b7160e01b865260218452602486fd5b8280fd5b5082346102e95760203660031901126102e9576001600160a01b038135818116929083900361024a57610324828654163314611251565b8215610370575060005492826bffffffffffffffffffffffff60a01b8516176000555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b50346102395781600319360112610239576103db611330565b51f35b5034610239576020806003193601126102e95767ffffffffffffffff90843582811161024a573660238201121561024a57610422903690602481890135910161120a565b9461043760018060a01b038654163314611251565b855192831161050057506104558261045060065461106f565b6115c6565b80601f83116001146104905750839482939492610485575b50508160011b916000199060031b1c19161760065551f35b01519050388061046d565b60068552601f19831695600080516020611708833981519152929186905b8882106104e8575050836001959697106104cf575b505050811b0160065551f35b015160001960f88460031b161c191690553880806104c3565b806001859682949686015181550195019301906104ae565b634e487b7160e01b855260419052602484fd5b503461023957816003193601126102395761053860018060a01b038354163314611251565b818080804781811561055a575b3390f1156105505751f35b51903d90823e3d90fd5b506108fc610545565b50903461058c57602036600319011261058c57506105856020924790356114f4565b9051908152f35b80fd5b5034610239578160031936011261023957905490516001600160a01b039091168152602090f35b5082346102e95760203660031901126102e95760209282913581526001845220549051908152f35b50826020806003193601126106a95781359160018060a01b03858382600954166024885180948193634f558e7960e01b83528a898401525af190811561072557879161075d575b501561072f57808360249260095416875193848092630178b36760e31b825289888301525afa9182156107255787926106f6575b50309116036106c05760ff8154169060038210156106ad57501561067c8161129c565b156106a9576001918452528082206106953482546112e1565b90556106a3346002546112e1565b60025551f35b8380fd5b634e487b7160e01b865260219052602485fd5b60649184519162461bcd60e51b835282015260126024820152711ddc9bdb99c81cdd185ada5b99c81c1bdbdb60721b6044820152fd5b610717919250843d861161071e575b61070f81836110ef565b810190611304565b9087610659565b503d610705565b86513d89823e3d90fd5b5060649184519162461bcd60e51b835282015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152fd5b90508381813d8311610790575b61077481836110ef565b8101031261078c5751801515810361078c5787610625565b8680fd5b503d61076a565b5082346102e95760203660031901126102e957359160035483101561058c57506107c26020926111bd565b90549060031b1c9051908152f35b50346102395781600319360112610239576020906002549051908152f35b50903461058c578060031936011261058c575080516000916006546108128161106f565b8084529060019081811690811561089e5750600114610853575b505061083d8261084f9403836110ef565b51918291602083526020830190610ffc565b0390f35b6006600090815294506000805160206117088339815191525b828610610886575050509181016020019161083d8261082c565b8054602087870181019190915290950194810161086c565b61084f9650859250602091509261083d9360ff191682840152151560051b820101945061082c565b5034610239578160031936011261023957600060018060a01b036108ee818554163314611251565b81546001600160a01b031981168355925192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50903461058c57602036600319011261058c575061058560209235611589565b50903461058c57600319916080368401126102395767ffffffffffffffff84358181116106a95761097b903690870161103c565b60249691873584811161078c57610995903690850161103c565b9260449889359a878c11610d5d576109b68a9b9c9a98999a3690890161103c565b926109cc60018060a01b03809b54163314611251565b6801bc16d674ec80000093844710610d285760ff8a54166003811015610d1657610ce4576109f8611111565b8051602091820120606051608020919d9114610c135750610a17611111565b8c8151910120610a2836888b61120a565b8d815191012003610bc5575b895460ff19166001178a5530600160f81b8101908110610bb3578d51908d82019081528d8252610a63826110d3565b8d610a6f368d8c61120a565b80519101209151902003610b70578d9e8b9d9e999a9b60079e9d9e541697883b15610b6c578f516304512a2360e31b81526080818f01529b8c9a8b998a989291610abd9160848b01916116e6565b91868984030190890152610ad0926116e6565b928584030190850152610ae2926116e6565b606435606483015203925af1801561029557610b33575b509183917f1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a44935460081c169082519182523390820152a151f35b917f1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a44939195610b6286946110a9565b9591935091610af9565b8a80fd5b505050867f7769746864726177616c2063726564656e7469616c206d69736d6174636800008d601e6064948d8f519562461bcd60e51b8752860152840152820152fd5b634e487b7160e01b8f5260118b52848ffd5b505050867f7075626b657920646f6573206e6f74206d617463682073746f7265642076616c8d60226084948d8f519562461bcd60e51b875286015284015282015261756560f01b6064820152fd5b8611610cd257858e610c2a8261045060065461106f565b80601f8311600114610c605791610c55575b508660011b906000198860031b1c191617600655610a34565b905088013538610c3c565b6006815260008051602061170883398151915292508e5b8b601f198b168310610cbc5750505087601f19811610610ca2575b5050600186811b01600655610a34565b890135600019600389901b60f8161c191690553880610c92565b830135845560019093019291820191018e610c77565b634e487b7160e01b8e5260418a52838efd5b505050866a77726f6e6720737461746560a81b8d600b60649460208f519562461bcd60e51b8752860152840152820152fd5b634e487b7160e01b8f5260218b52848ffd5b505050866d0dcdee840cadcdeeaced040cae8d60931b8d600e60649460208f519562461bcd60e51b8752860152840152820152fd5b8980fd5b503461023957816003193601126102395761084f90610d7e611111565b9051918291602083526020830190610ffc565b5082346102e957816003193601126102e957803560249081359260ff8154166003811015610f2957600114610ee75760095485516331a9108f60e11b8152828101849052602094916001600160a01b039190869082908590829086165afa908115610edd578991610ec0575b50163303610e8e5782875260018452848688205410610e55575050848093600182948394845252858220610e32828254611323565b9055610e4081600254611323565b60025581811561055a573390f1156105505751f35b855162461bcd60e51b8152918201849052601490820152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b855162461bcd60e51b8152918201849052600d908201526c3737ba103a34329037bbb732b960991b6044820152606490fd5b610ed79150863d881161071e5761070f81836110ef565b89610dfd565b88513d8b823e3d90fd5b606490601b84602088519362461bcd60e51b85528401528201527f63616e6e6f74207769746864726177206f6e6365207374616b656400000000006044820152fd5b634e487b7160e01b8752602182528387fd5b5082346102e95760203660031901126102e957356001600160a01b03818116918290036106a957610f70908454163314611251565b6bffffffffffffffffffffffff60a01b600954161760095551f35b5082346102e957826003193601126102e957610fa5611330565b805460ff1916600217905551f35b5082346102e957826003193601126102e95754905160089190911c6001600160a01b0316815260209150f35b503461023957816003193601126102395761084f90610d7e611625565b919082519283825260005b848110611028575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611007565b9181601f8401121561106a5782359167ffffffffffffffff831161106a576020838186019501011161106a57565b600080fd5b90600182811c9216801561109f575b602083101461108957565b634e487b7160e01b600052602260045260246000fd5b91607f169161107e565b67ffffffffffffffff81116110bd57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176110bd57604052565b90601f8019910116810190811067ffffffffffffffff8211176110bd57604052565b60405190600082600654916111258361106f565b8083529260019081811690811561119b575060011461114e575b5061114c925003836110ef565b565b6006600090815291506000805160206117088339815191525b848310611180575061114c93505081016020013861113f565b81935090816020925483858a01015201910190918592611167565b90506020925061114c94915060ff191682840152151560051b8201013861113f565b6003548110156111f45760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b634e487b7160e01b600052603260045260246000fd5b92919267ffffffffffffffff82116110bd5760405191611234601f8201601f1916602001846110ef565b82948184528183011161106a578281602093846000960137010152565b1561125857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156112a357565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b919082018092116112ee57565b634e487b7160e01b600052601160045260246000fd5b9081602091031261106a57516001600160a01b038116810361106a5790565b919082039182116112ee57565b60049060ff825416600392838210156114df57600180920361149b5747606481111561145757600094835b611368575b505050509050565b80548610156114525761137a866111bd565b905490821b1c60018060a01b03806009541691604092835180916331a9108f60e11b8252838983015281602460209485935afa9182156114475793600094938594938986959486958693611424575b50506113d591926114f4565b918391831561141a575b1690f115611410575060001986146113fb57948301948361135b565b601183634e487b7160e01b6000525260246000fd5b513d6000823e3d90fd5b6108fc92506113df565b6113d59350908161144092903d1061071e5761070f81836110ef565b91386113c9565b85513d6000823e3d90fd5b611360565b60405162461bcd60e51b8152602081840181905260248201527f6d696e696d756d206f66203130302077656920746f20646973747269627574656044820152606490fd5b60649060206040519162461bcd60e51b8352820152601c60248201527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152fd5b602190634e487b7160e01b6000525260246000fd5b6000908152600160205260408120541561158457604081205460001992908115158285048211166115705760025491821561155c570204916001831115611556578201918211611542575090565b634e487b7160e01b81526011600452602490fd5b50905090565b634e487b7160e01b84526012600452602484fd5b634e487b7160e01b83526011600452602483fd5b905090565b60ff6004541660038110156115b0576115a25750600090565b6115ad9047906114f4565b90565b634e487b7160e01b600052602160045260246000fd5b601f81116115d2575050565b60009060068252600080516020611708833981519152906020601f850160051c8301941061161b575b601f0160051c01915b82811061161057505050565b818155600101611604565b90925082906115fb565b60ff6004541660038110156115b057600181146116c35780156116945760021461167257604051611655816110d3565b600d81526c7374617465206661696c75726560981b602082015290565b60405161167e816110d3565b6006815265195e1a5d195960d21b602082015290565b506040516116a1816110d3565b6012815271616363657074696e67206465706f7369747360701b602082015290565b506040516116d0816110d3565b60068152651cdd185ad95960d21b602082015290565b908060209392818452848401376000828201840152601f01601f191601019056fef652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3fa26469706673582212206aeefd5076af57ae83cc08d9c152f8ebe5871d345c074b41c6351d15740428d664736f6c63430008100033",
              "opcodes": "PUSH1 0x80 CALLVALUE PUSH2 0x102 JUMPI PUSH1 0x1F PUSH3 0x188F CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x107 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x60 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x102 JUMPI PUSH2 0x48 DUP2 PUSH2 0x11D JUMP JUMPDEST PUSH2 0x60 PUSH1 0x40 PUSH2 0x59 PUSH1 0x20 DUP6 ADD PUSH2 0x11D JUMP JUMPDEST SWAP4 ADD PUSH2 0x11D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP3 AND CALLER SWAP1 DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP7 SWAP2 SWAP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP5 DUP7 SWAP5 DUP6 SWAP4 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP12 LOG3 PUSH1 0x4 SLOAD SWAP1 PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB SWAP1 PUSH1 0x8 SHL AND SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA8 SHL SUB NOT AND OR DUP1 PUSH1 0x4 SSTORE PUSH1 0x8 SHR AND DUP6 PUSH1 0x7 SLOAD AND OR PUSH1 0x7 SSTORE AND DUP4 PUSH1 0x8 SLOAD AND OR PUSH1 0x8 SSTORE AND SWAP1 PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE PUSH2 0x175D SWAP1 DUP2 PUSH3 0x132 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x102 JUMPI JUMP INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI STOP JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1865C57D EQ PUSH2 0xFDF JUMPI DUP1 PUSH4 0x2A4DBD2B EQ PUSH2 0xFB3 JUMPI DUP1 PUSH4 0x2DEF6620 EQ PUSH2 0xF8B JUMPI DUP1 PUSH4 0x2EDAF74D EQ PUSH2 0xF3B JUMPI DUP1 PUSH4 0x378DE45B EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0x441A3E70 EQ PUSH2 0xD91 JUMPI DUP1 PUSH4 0x4AD02EF1 EQ PUSH2 0xD61 JUMPI DUP1 PUSH4 0x4B2B4E36 EQ PUSH2 0x947 JUMPI DUP1 PUSH4 0x678E300A EQ PUSH2 0x927 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x8C6 JUMPI DUP1 PUSH4 0x7BE0B4A0 EQ PUSH2 0x7EE JUMPI DUP1 PUSH4 0x7D882097 EQ PUSH2 0x7D0 JUMPI DUP1 PUSH4 0x82A790CF EQ PUSH2 0x797 JUMPI DUP1 PUSH4 0x8620891C EQ PUSH2 0x5DE JUMPI DUP1 PUSH4 0x87F8AB26 EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x58F JUMPI DUP1 PUSH4 0xCFB5A5F8 EQ PUSH2 0x563 JUMPI DUP1 PUSH4 0xE2664E49 EQ PUSH2 0x513 JUMPI DUP1 PUSH4 0xE32D2913 EQ PUSH2 0x3DE JUMPI DUP1 PUSH4 0xE4FC6B6D EQ PUSH2 0x3C2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2ED JUMPI PUSH4 0xF340FA01 EQ PUSH2 0x11C JUMPI POP PUSH2 0x11 JUMP JUMPDEST PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP2 CALLDATALOAD DUP6 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x24A JUMPI PUSH1 0xFF DUP4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D6 JUMPI PUSH2 0x159 SWAP1 ISZERO PUSH2 0x129C JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x29F JUMPI SWAP1 DUP2 DUP6 SWAP4 SWAP3 DUP8 PUSH1 0x9 SLOAD AND DUP5 DUP8 MLOAD DUP1 SWAP8 DUP2 SWAP4 PUSH4 0x2798987D PUSH1 0xE1 SHL DUP4 MSTORE GAS CALL SWAP4 DUP5 ISZERO PUSH2 0x295 JUMPI DUP7 SWAP5 PUSH2 0x261 JUMPI JUMPDEST POP PUSH1 0x1 SWAP1 DUP5 DUP8 MSTORE MSTORE CALLVALUE DUP5 DUP7 KECCAK256 SSTORE PUSH2 0x1A3 CALLVALUE PUSH1 0x2 SLOAD PUSH2 0x12E1 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD SWAP6 PUSH9 0x10000000000000000 DUP8 LT ISZERO PUSH2 0x24E JUMPI DUP4 PUSH2 0x1D0 DUP9 PUSH1 0x1 DUP10 SWAP11 SWAP10 SWAP9 SWAP10 ADD PUSH1 0x3 SSTORE PUSH2 0x11BD JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL PUSH1 0x0 NOT DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE PUSH1 0x9 SLOAD AND DUP1 EXTCODESIZE ISZERO PUSH2 0x24A JUMPI DUP5 SWAP3 DUP4 PUSH1 0x64 SWAP3 DUP9 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0xD4D1513 PUSH1 0xE0 SHL DUP7 MSTORE DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE ADDRESS PUSH1 0x44 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x23D JUMPI PUSH2 0x229 JUMPI POP POP MLOAD RETURN JUMPDEST PUSH2 0x232 SWAP1 PUSH2 0x10A9 JUMP JUMPDEST PUSH2 0x239 JUMPI MLOAD RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP POP MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 DUP4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP1 DUP1 SWAP5 POP DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x28E JUMPI JUMPDEST PUSH2 0x279 DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x28A JUMPI MLOAD SWAP3 PUSH1 0x1 PUSH2 0x18A JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x26F JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x36BAB9BA103232B837B9B4BA1032BA3432B9 PUSH1 0x71 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 DUP5 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 DUP2 AND SWAP3 SWAP1 DUP4 SWAP1 SUB PUSH2 0x24A JUMPI PUSH2 0x324 DUP3 DUP7 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x370 JUMPI POP PUSH1 0x0 SLOAD SWAP3 DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP6 AND OR PUSH1 0x0 SSTORE MLOAD SWAP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP5 LOG3 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP6 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x3DB PUSH2 0x1330 JUMP JUMPDEST MLOAD RETURN JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP5 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x24A JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x24A JUMPI PUSH2 0x422 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 DUP2 DUP10 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x120A JUMP JUMPDEST SWAP5 PUSH2 0x437 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP6 MLOAD SWAP3 DUP4 GT PUSH2 0x500 JUMPI POP PUSH2 0x455 DUP3 PUSH2 0x450 PUSH1 0x6 SLOAD PUSH2 0x106F JUMP JUMPDEST PUSH2 0x15C6 JUMP JUMPDEST DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x490 JUMPI POP DUP4 SWAP5 DUP3 SWAP4 SWAP5 SWAP3 PUSH2 0x485 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x6 SSTORE MLOAD RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x46D JUMP JUMPDEST PUSH1 0x6 DUP6 MSTORE PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP7 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x4E8 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x4CF JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x6 SSTORE MLOAD RETURN JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x4C3 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x4AE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x538 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP2 DUP1 DUP1 DUP1 SELFBALANCE DUP2 DUP2 ISZERO PUSH2 0x55A JUMPI JUMPDEST CALLER SWAP1 CALL ISZERO PUSH2 0x550 JUMPI MLOAD RETURN JUMPDEST MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH2 0x545 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x58C JUMPI POP PUSH2 0x585 PUSH1 0x20 SWAP3 SELFBALANCE SWAP1 CALLDATALOAD PUSH2 0x14F4 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI SWAP1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI PUSH1 0x20 SWAP3 DUP3 SWAP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP3 PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x6A9 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 DUP4 DUP3 PUSH1 0x9 SLOAD AND PUSH1 0x24 DUP9 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x4F558E79 PUSH1 0xE0 SHL DUP4 MSTORE DUP11 DUP10 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x725 JUMPI DUP8 SWAP2 PUSH2 0x75D JUMPI JUMPDEST POP ISZERO PUSH2 0x72F JUMPI DUP1 DUP4 PUSH1 0x24 SWAP3 PUSH1 0x9 SLOAD AND DUP8 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x178B367 PUSH1 0xE3 SHL DUP3 MSTORE DUP10 DUP9 DUP4 ADD MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x725 JUMPI DUP8 SWAP3 PUSH2 0x6F6 JUMPI JUMPDEST POP ADDRESS SWAP2 AND SUB PUSH2 0x6C0 JUMPI PUSH1 0xFF DUP2 SLOAD AND SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x6AD JUMPI POP ISZERO PUSH2 0x67C DUP2 PUSH2 0x129C JUMP JUMPDEST ISZERO PUSH2 0x6A9 JUMPI PUSH1 0x1 SWAP2 DUP5 MSTORE MSTORE DUP1 DUP3 KECCAK256 PUSH2 0x695 CALLVALUE DUP3 SLOAD PUSH2 0x12E1 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x6A3 CALLVALUE PUSH1 0x2 SLOAD PUSH2 0x12E1 JUMP JUMPDEST PUSH1 0x2 SSTORE MLOAD RETURN JUMPDEST DUP4 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 SWAP1 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH1 0x64 SWAP2 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1DDC9BDB99C81CDD185ADA5B99C81C1BDBDB PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x717 SWAP2 SWAP3 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x71E JUMPI JUMPDEST PUSH2 0x70F DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1304 JUMP JUMPDEST SWAP1 DUP8 PUSH2 0x659 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x705 JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH1 0x64 SWAP2 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x1B9BDD08195E1A5CDD PUSH1 0xBA SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x790 JUMPI JUMPDEST PUSH2 0x774 DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x78C JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x78C JUMPI DUP8 PUSH2 0x625 JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x76A JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI CALLDATALOAD SWAP2 PUSH1 0x3 SLOAD DUP4 LT ISZERO PUSH2 0x58C JUMPI POP PUSH2 0x7C2 PUSH1 0x20 SWAP3 PUSH2 0x11BD JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x58C JUMPI POP DUP1 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x6 SLOAD PUSH2 0x812 DUP2 PUSH2 0x106F JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x89E JUMPI POP PUSH1 0x1 EQ PUSH2 0x853 JUMPI JUMPDEST POP POP PUSH2 0x83D DUP3 PUSH2 0x84F SWAP5 SUB DUP4 PUSH2 0x10EF JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xFFC JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP5 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST DUP3 DUP7 LT PUSH2 0x886 JUMPI POP POP POP SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 PUSH2 0x83D DUP3 PUSH2 0x82C JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0x86C JUMP JUMPDEST PUSH2 0x84F SWAP7 POP DUP6 SWAP3 POP PUSH1 0x20 SWAP2 POP SWAP3 PUSH2 0x83D SWAP4 PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 POP PUSH2 0x82C JUMP JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x8EE DUP2 DUP6 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 SSTORE SWAP3 MLOAD SWAP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP5 LOG3 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x58C JUMPI POP PUSH2 0x585 PUSH1 0x20 SWAP3 CALLDATALOAD PUSH2 0x1589 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI PUSH1 0x3 NOT SWAP2 PUSH1 0x80 CALLDATASIZE DUP5 ADD SLT PUSH2 0x239 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP5 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x6A9 JUMPI PUSH2 0x97B SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x103C JUMP JUMPDEST PUSH1 0x24 SWAP7 SWAP2 DUP8 CALLDATALOAD DUP5 DUP2 GT PUSH2 0x78C JUMPI PUSH2 0x995 SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x103C JUMP JUMPDEST SWAP3 PUSH1 0x44 SWAP9 DUP10 CALLDATALOAD SWAP11 DUP8 DUP13 GT PUSH2 0xD5D JUMPI PUSH2 0x9B6 DUP11 SWAP12 SWAP13 SWAP11 SWAP9 SWAP10 SWAP11 CALLDATASIZE SWAP1 DUP10 ADD PUSH2 0x103C JUMP JUMPDEST SWAP3 PUSH2 0x9CC PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP12 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST PUSH9 0x1BC16D674EC800000 SWAP4 DUP5 SELFBALANCE LT PUSH2 0xD28 JUMPI PUSH1 0xFF DUP11 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xD16 JUMPI PUSH2 0xCE4 JUMPI PUSH2 0x9F8 PUSH2 0x1111 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x60 MLOAD PUSH1 0x80 KECCAK256 SWAP2 SWAP14 SWAP2 EQ PUSH2 0xC13 JUMPI POP PUSH2 0xA17 PUSH2 0x1111 JUMP JUMPDEST DUP13 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH2 0xA28 CALLDATASIZE DUP9 DUP12 PUSH2 0x120A JUMP JUMPDEST DUP14 DUP2 MLOAD SWAP2 ADD KECCAK256 SUB PUSH2 0xBC5 JUMPI JUMPDEST DUP10 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP11 SSTORE ADDRESS PUSH1 0x1 PUSH1 0xF8 SHL DUP2 ADD SWAP1 DUP2 LT PUSH2 0xBB3 JUMPI DUP14 MLOAD SWAP1 DUP14 DUP3 ADD SWAP1 DUP2 MSTORE DUP14 DUP3 MSTORE PUSH2 0xA63 DUP3 PUSH2 0x10D3 JUMP JUMPDEST DUP14 PUSH2 0xA6F CALLDATASIZE DUP14 DUP13 PUSH2 0x120A JUMP JUMPDEST DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP2 MLOAD SWAP1 KECCAK256 SUB PUSH2 0xB70 JUMPI DUP14 SWAP15 DUP12 SWAP14 SWAP15 SWAP10 SWAP11 SWAP12 PUSH1 0x7 SWAP15 SWAP14 SWAP15 SLOAD AND SWAP8 DUP9 EXTCODESIZE ISZERO PUSH2 0xB6C JUMPI DUP16 MLOAD PUSH4 0x4512A23 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x80 DUP2 DUP16 ADD MSTORE SWAP12 DUP13 SWAP11 DUP12 SWAP10 DUP11 SWAP9 SWAP3 SWAP2 PUSH2 0xABD SWAP2 PUSH1 0x84 DUP12 ADD SWAP2 PUSH2 0x16E6 JUMP JUMPDEST SWAP2 DUP7 DUP10 DUP5 SUB ADD SWAP1 DUP10 ADD MSTORE PUSH2 0xAD0 SWAP3 PUSH2 0x16E6 JUMP JUMPDEST SWAP3 DUP6 DUP5 SUB ADD SWAP1 DUP6 ADD MSTORE PUSH2 0xAE2 SWAP3 PUSH2 0x16E6 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x64 DUP4 ADD MSTORE SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x295 JUMPI PUSH2 0xB33 JUMPI JUMPDEST POP SWAP2 DUP4 SWAP2 PUSH32 0x1944DEBB24A9AAFCF2708BE964E412CDB73FC36D6EA24577FD8DCC05B93B4A44 SWAP4 SLOAD PUSH1 0x8 SHR AND SWAP1 DUP3 MLOAD SWAP2 DUP3 MSTORE CALLER SWAP1 DUP3 ADD MSTORE LOG1 MLOAD RETURN JUMPDEST SWAP2 PUSH32 0x1944DEBB24A9AAFCF2708BE964E412CDB73FC36D6EA24577FD8DCC05B93B4A44 SWAP4 SWAP2 SWAP6 PUSH2 0xB62 DUP7 SWAP5 PUSH2 0x10A9 JUMP JUMPDEST SWAP6 SWAP2 SWAP4 POP SWAP2 PUSH2 0xAF9 JUMP JUMPDEST DUP11 DUP1 REVERT JUMPDEST POP POP POP DUP7 PUSH32 0x7769746864726177616C2063726564656E7469616C206D69736D617463680000 DUP14 PUSH1 0x1E PUSH1 0x64 SWAP5 DUP14 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP16 MSTORE PUSH1 0x11 DUP12 MSTORE DUP5 DUP16 REVERT JUMPDEST POP POP POP DUP7 PUSH32 0x7075626B657920646F6573206E6F74206D617463682073746F7265642076616C DUP14 PUSH1 0x22 PUSH1 0x84 SWAP5 DUP14 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP7 GT PUSH2 0xCD2 JUMPI DUP6 DUP15 PUSH2 0xC2A DUP3 PUSH2 0x450 PUSH1 0x6 SLOAD PUSH2 0x106F JUMP JUMPDEST DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xC60 JUMPI SWAP2 PUSH2 0xC55 JUMPI JUMPDEST POP DUP7 PUSH1 0x1 SHL SWAP1 PUSH1 0x0 NOT DUP9 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x6 SSTORE PUSH2 0xA34 JUMP JUMPDEST SWAP1 POP DUP9 ADD CALLDATALOAD CODESIZE PUSH2 0xC3C JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 POP DUP15 JUMPDEST DUP12 PUSH1 0x1F NOT DUP12 AND DUP4 LT PUSH2 0xCBC JUMPI POP POP POP DUP8 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xCA2 JUMPI JUMPDEST POP POP PUSH1 0x1 DUP7 DUP2 SHL ADD PUSH1 0x6 SSTORE PUSH2 0xA34 JUMP JUMPDEST DUP10 ADD CALLDATALOAD PUSH1 0x0 NOT PUSH1 0x3 DUP10 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH2 0xC92 JUMP JUMPDEST DUP4 ADD CALLDATALOAD DUP5 SSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 ADD DUP15 PUSH2 0xC77 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP15 MSTORE PUSH1 0x41 DUP11 MSTORE DUP4 DUP15 REVERT JUMPDEST POP POP POP DUP7 PUSH11 0x77726F6E67207374617465 PUSH1 0xA8 SHL DUP14 PUSH1 0xB PUSH1 0x64 SWAP5 PUSH1 0x20 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP16 MSTORE PUSH1 0x21 DUP12 MSTORE DUP5 DUP16 REVERT JUMPDEST POP POP POP DUP7 PUSH14 0xDCDEE840CADCDEEACED040CAE8D PUSH1 0x93 SHL DUP14 PUSH1 0xE PUSH1 0x64 SWAP5 PUSH1 0x20 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST DUP10 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x84F SWAP1 PUSH2 0xD7E PUSH2 0x1111 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xFFC JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI DUP1 CALLDATALOAD PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP3 PUSH1 0xFF DUP2 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xF29 JUMPI PUSH1 0x1 EQ PUSH2 0xEE7 JUMPI PUSH1 0x9 SLOAD DUP6 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE DUP3 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x20 SWAP5 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 DUP7 SWAP1 DUP3 SWAP1 DUP6 SWAP1 DUP3 SWAP1 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xEDD JUMPI DUP10 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP AND CALLER SUB PUSH2 0xE8E JUMPI DUP3 DUP8 MSTORE PUSH1 0x1 DUP5 MSTORE DUP5 DUP7 DUP9 KECCAK256 SLOAD LT PUSH2 0xE55 JUMPI POP POP DUP5 DUP1 SWAP4 PUSH1 0x1 DUP3 SWAP5 DUP4 SWAP5 DUP5 MSTORE MSTORE DUP6 DUP3 KECCAK256 PUSH2 0xE32 DUP3 DUP3 SLOAD PUSH2 0x1323 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xE40 DUP2 PUSH1 0x2 SLOAD PUSH2 0x1323 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP2 DUP2 ISZERO PUSH2 0x55A JUMPI CALLER SWAP1 CALL ISZERO PUSH2 0x550 JUMPI MLOAD RETURN JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x1B9BDD08195B9BDD59DA0819195C1BDCDA5D1959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x3737BA103A34329037BBB732B9 PUSH1 0x99 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xED7 SWAP2 POP DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x71E JUMPI PUSH2 0x70F DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP10 PUSH2 0xDFD JUMP JUMPDEST DUP9 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x1B DUP5 PUSH1 0x20 DUP9 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x63616E6E6F74207769746864726177206F6E6365207374616B65640000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x21 DUP3 MSTORE DUP4 DUP8 REVERT JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0x6A9 JUMPI PUSH2 0xF70 SWAP1 DUP5 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE MLOAD RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI PUSH2 0xFA5 PUSH2 0x1330 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x2 OR SWAP1 SSTORE MLOAD RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI SLOAD SWAP1 MLOAD PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP2 POP RETURN JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x84F SWAP1 PUSH2 0xD7E PUSH2 0x1625 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x1028 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1007 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x106A JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x106A JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x106A JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x109F JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1089 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x107E JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x10BD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x10BD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x10BD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP3 PUSH1 0x6 SLOAD SWAP2 PUSH2 0x1125 DUP4 PUSH2 0x106F JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x119B JUMPI POP PUSH1 0x1 EQ PUSH2 0x114E JUMPI JUMPDEST POP PUSH2 0x114C SWAP3 POP SUB DUP4 PUSH2 0x10EF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST DUP5 DUP4 LT PUSH2 0x1180 JUMPI POP PUSH2 0x114C SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x113F JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 SWAP3 PUSH2 0x1167 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x114C SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x113F JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0x11F4 JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x10BD JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1234 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x10EF JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x106A JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x1258 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x12A3 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x6E6F7420616363657074696E67206465706F73697473 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x12EE JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x106A JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x106A JUMPI SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x12EE JUMPI JUMP JUMPDEST PUSH1 0x4 SWAP1 PUSH1 0xFF DUP3 SLOAD AND PUSH1 0x3 SWAP3 DUP4 DUP3 LT ISZERO PUSH2 0x14DF JUMPI PUSH1 0x1 DUP1 SWAP3 SUB PUSH2 0x149B JUMPI SELFBALANCE PUSH1 0x64 DUP2 GT ISZERO PUSH2 0x1457 JUMPI PUSH1 0x0 SWAP5 DUP4 JUMPDEST PUSH2 0x1368 JUMPI JUMPDEST POP POP POP POP SWAP1 POP JUMP JUMPDEST DUP1 SLOAD DUP7 LT ISZERO PUSH2 0x1452 JUMPI PUSH2 0x137A DUP7 PUSH2 0x11BD JUMP JUMPDEST SWAP1 SLOAD SWAP1 DUP3 SHL SHR PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x9 SLOAD AND SWAP2 PUSH1 0x40 SWAP3 DUP4 MLOAD DUP1 SWAP2 PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP3 MSTORE DUP4 DUP10 DUP4 ADD MSTORE DUP2 PUSH1 0x24 PUSH1 0x20 SWAP5 DUP6 SWAP4 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x1447 JUMPI SWAP4 PUSH1 0x0 SWAP5 SWAP4 DUP6 SWAP5 SWAP4 DUP10 DUP7 SWAP6 SWAP5 DUP7 SWAP6 DUP7 SWAP4 PUSH2 0x1424 JUMPI JUMPDEST POP POP PUSH2 0x13D5 SWAP2 SWAP3 PUSH2 0x14F4 JUMP JUMPDEST SWAP2 DUP4 SWAP2 DUP4 ISZERO PUSH2 0x141A JUMPI JUMPDEST AND SWAP1 CALL ISZERO PUSH2 0x1410 JUMPI POP PUSH1 0x0 NOT DUP7 EQ PUSH2 0x13FB JUMPI SWAP5 DUP4 ADD SWAP5 DUP4 PUSH2 0x135B JUMP JUMPDEST PUSH1 0x11 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x8FC SWAP3 POP PUSH2 0x13DF JUMP JUMPDEST PUSH2 0x13D5 SWAP4 POP SWAP1 DUP2 PUSH2 0x1440 SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x71E JUMPI PUSH2 0x70F DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST SWAP2 CODESIZE PUSH2 0x13C9 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x1360 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D696E696D756D206F66203130302077656920746F2064697374726962757465 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x757365207769746864726177207768656E206E6F74207374616B656400000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x21 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO PUSH2 0x1584 JUMPI PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x0 NOT SWAP3 SWAP1 DUP2 ISZERO ISZERO DUP3 DUP6 DIV DUP3 GT AND PUSH2 0x1570 JUMPI PUSH1 0x2 SLOAD SWAP2 DUP3 ISZERO PUSH2 0x155C JUMPI MUL DIV SWAP2 PUSH1 0x1 DUP4 GT ISZERO PUSH2 0x1556 JUMPI DUP3 ADD SWAP2 DUP3 GT PUSH2 0x1542 JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x15B0 JUMPI PUSH2 0x15A2 JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x15AD SWAP1 SELFBALANCE SWAP1 PUSH2 0x14F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x15D2 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x6 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x161B JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x1610 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1604 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x15FB JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x15B0 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x16C3 JUMPI DUP1 ISZERO PUSH2 0x1694 JUMPI PUSH1 0x2 EQ PUSH2 0x1672 JUMPI PUSH1 0x40 MLOAD PUSH2 0x1655 DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0xD DUP2 MSTORE PUSH13 0x7374617465206661696C757265 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167E DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH6 0x195E1A5D1959 PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x16A1 DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH18 0x616363657074696E67206465706F73697473 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x16D0 DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH6 0x1CDD185AD959 PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP INVALID 0xF6 MSTORE 0x22 0x23 SGT 0xE2 DUP5 MSIZE MSTORE DUP14 SWAP3 SIGNEXTEND PUSH6 0x115C16C04F3E 0xFC DUP3 0xAA 0xED 0xC9 PUSH28 0xE59F3F377C0D3FA26469706673582212206AEEFD5076AF57AE83CC08 0xD9 0xC1 MSTORE 0xF8 0xEB 0xE5 DUP8 SAR CALLVALUE 0x5C SMOD 0x4B COINBASE 0xC6 CALLDATALOAD SAR ISZERO PUSH21 0x428D664736F6C6343000810003300000000000000 ",
              "sourceMap": "352:6004:15:-:0;;;;;;;;;;;;;-1:-1:-1;;352:6004:15;;;;-1:-1:-1;;;;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;352:6004:15;;-1:-1:-1;;;;;;352:6004:15;;;719:10:9;352:6004:15;;;;;;;;;;-1:-1:-1;;;;;352:6004:15;;;;;;719:10:9;352:6004:15;;;;2410:40:0;;352:6004:15;2410:40:0;955:38:15;352:6004;;;;;;;;;;;;;;;;;;;;;955:38;352:6004;;;;;1053:58;352:6004;;;1053:58;352:6004;;;;;;;;;;;1170:56;352:6004;;;1170:56;352:6004;;;;;;;;;-1:-1:-1;352:6004:15;;;;;;-1:-1:-1;352:6004:15;;;;;-1:-1:-1;352:6004:15;;;;-1:-1:-1;;;;;352:6004:15;;;;;;:::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 4868,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_available_length_bytes": {
                  "entryPoint": 4618,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes_calldata": {
                  "entryPoint": 4156,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_encode_bytes_calldata": {
                  "entryPoint": 5862,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 4092,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_add_uint256": {
                  "entryPoint": 4833,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_uint256": {
                  "entryPoint": 4899,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "clean_up_bytearray_end_slots_bytes_storage": {
                  "entryPoint": 5574,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_array_from_storage_to_memory_bytes": {
                  "entryPoint": 4369,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "extract_byte_array_length": {
                  "entryPoint": 4207,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 4335,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "finalize_allocation_14983": {
                  "entryPoint": 4265,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "finalize_allocation_21284": {
                  "entryPoint": 4307,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_distribute": {
                  "entryPoint": 4912,
                  "id": 3198,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_getDistributableShare": {
                  "entryPoint": 5513,
                  "id": 3280,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getShare": {
                  "entryPoint": 5364,
                  "id": 3238,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_getState": {
                  "entryPoint": 5669,
                  "id": 3329,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 4764,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_9924": {
                  "entryPoint": 4689,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "storage_array_index_access_uint256_dyn": {
                  "entryPoint": 4541,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6040608081526004908136101561001d575b5050361561001b57005b005b600090813560e01c80631865c57d14610fdf5780632a4dbd2b14610fb35780632def662014610f8b5780632edaf74d14610f3b578063378de45b146105b6578063441a3e7014610d915780634ad02ef114610d615780634b2b4e3614610947578063678e300a14610927578063715018a6146108c65780637be0b4a0146107ee5780637d882097146107d057806382a790cf146107975780638620891c146105de57806387f8ab26146105b65780638da5cb5b1461058f578063cfb5a5f814610563578063e2664e4914610513578063e32d2913146103de578063e4fc6b6d146103c2578063f2fde38b146102ed5763f340fa011461011c5750610011565b602092836003193601126102e9576001600160a01b03938135858116919082900361024a5760ff83541660038110156102d657610159901561129c565b341561029f579081859392876009541684875180978193632798987d60e11b83525af1938415610295578694610261575b506001908487525234848620556101a3346002546112e1565b600255600354956801000000000000000087101561024e57836101d0886001899a999899016003556111bd565b819291549060031b600019811b9283911b1691191617905560095416803b1561024a5784928360649288519687958694630d4d151360e01b865285015260248401523060448401525af1801561023d5761022957505051f35b610232906110a9565b6102395751f35b5080fd5b50505051903d90823e3d90fd5b8480fd5b634e487b7160e01b865260418352602486fd5b9080945081813d831161028e575b61027981836110ef565b8101031261028a575192600161018a565b8580fd5b503d61026f565b85513d88823e3d90fd5b9050606492519162461bcd60e51b8352820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152fd5b634e487b7160e01b865260218452602486fd5b8280fd5b5082346102e95760203660031901126102e9576001600160a01b038135818116929083900361024a57610324828654163314611251565b8215610370575060005492826bffffffffffffffffffffffff60a01b8516176000555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b50346102395781600319360112610239576103db611330565b51f35b5034610239576020806003193601126102e95767ffffffffffffffff90843582811161024a573660238201121561024a57610422903690602481890135910161120a565b9461043760018060a01b038654163314611251565b855192831161050057506104558261045060065461106f565b6115c6565b80601f83116001146104905750839482939492610485575b50508160011b916000199060031b1c19161760065551f35b01519050388061046d565b60068552601f19831695600080516020611708833981519152929186905b8882106104e8575050836001959697106104cf575b505050811b0160065551f35b015160001960f88460031b161c191690553880806104c3565b806001859682949686015181550195019301906104ae565b634e487b7160e01b855260419052602484fd5b503461023957816003193601126102395761053860018060a01b038354163314611251565b818080804781811561055a575b3390f1156105505751f35b51903d90823e3d90fd5b506108fc610545565b50903461058c57602036600319011261058c57506105856020924790356114f4565b9051908152f35b80fd5b5034610239578160031936011261023957905490516001600160a01b039091168152602090f35b5082346102e95760203660031901126102e95760209282913581526001845220549051908152f35b50826020806003193601126106a95781359160018060a01b03858382600954166024885180948193634f558e7960e01b83528a898401525af190811561072557879161075d575b501561072f57808360249260095416875193848092630178b36760e31b825289888301525afa9182156107255787926106f6575b50309116036106c05760ff8154169060038210156106ad57501561067c8161129c565b156106a9576001918452528082206106953482546112e1565b90556106a3346002546112e1565b60025551f35b8380fd5b634e487b7160e01b865260219052602485fd5b60649184519162461bcd60e51b835282015260126024820152711ddc9bdb99c81cdd185ada5b99c81c1bdbdb60721b6044820152fd5b610717919250843d861161071e575b61070f81836110ef565b810190611304565b9087610659565b503d610705565b86513d89823e3d90fd5b5060649184519162461bcd60e51b835282015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152fd5b90508381813d8311610790575b61077481836110ef565b8101031261078c5751801515810361078c5787610625565b8680fd5b503d61076a565b5082346102e95760203660031901126102e957359160035483101561058c57506107c26020926111bd565b90549060031b1c9051908152f35b50346102395781600319360112610239576020906002549051908152f35b50903461058c578060031936011261058c575080516000916006546108128161106f565b8084529060019081811690811561089e5750600114610853575b505061083d8261084f9403836110ef565b51918291602083526020830190610ffc565b0390f35b6006600090815294506000805160206117088339815191525b828610610886575050509181016020019161083d8261082c565b8054602087870181019190915290950194810161086c565b61084f9650859250602091509261083d9360ff191682840152151560051b820101945061082c565b5034610239578160031936011261023957600060018060a01b036108ee818554163314611251565b81546001600160a01b031981168355925192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50903461058c57602036600319011261058c575061058560209235611589565b50903461058c57600319916080368401126102395767ffffffffffffffff84358181116106a95761097b903690870161103c565b60249691873584811161078c57610995903690850161103c565b9260449889359a878c11610d5d576109b68a9b9c9a98999a3690890161103c565b926109cc60018060a01b03809b54163314611251565b6801bc16d674ec80000093844710610d285760ff8a54166003811015610d1657610ce4576109f8611111565b8051602091820120606051608020919d9114610c135750610a17611111565b8c8151910120610a2836888b61120a565b8d815191012003610bc5575b895460ff19166001178a5530600160f81b8101908110610bb3578d51908d82019081528d8252610a63826110d3565b8d610a6f368d8c61120a565b80519101209151902003610b70578d9e8b9d9e999a9b60079e9d9e541697883b15610b6c578f516304512a2360e31b81526080818f01529b8c9a8b998a989291610abd9160848b01916116e6565b91868984030190890152610ad0926116e6565b928584030190850152610ae2926116e6565b606435606483015203925af1801561029557610b33575b509183917f1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a44935460081c169082519182523390820152a151f35b917f1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a44939195610b6286946110a9565b9591935091610af9565b8a80fd5b505050867f7769746864726177616c2063726564656e7469616c206d69736d6174636800008d601e6064948d8f519562461bcd60e51b8752860152840152820152fd5b634e487b7160e01b8f5260118b52848ffd5b505050867f7075626b657920646f6573206e6f74206d617463682073746f7265642076616c8d60226084948d8f519562461bcd60e51b875286015284015282015261756560f01b6064820152fd5b8611610cd257858e610c2a8261045060065461106f565b80601f8311600114610c605791610c55575b508660011b906000198860031b1c191617600655610a34565b905088013538610c3c565b6006815260008051602061170883398151915292508e5b8b601f198b168310610cbc5750505087601f19811610610ca2575b5050600186811b01600655610a34565b890135600019600389901b60f8161c191690553880610c92565b830135845560019093019291820191018e610c77565b634e487b7160e01b8e5260418a52838efd5b505050866a77726f6e6720737461746560a81b8d600b60649460208f519562461bcd60e51b8752860152840152820152fd5b634e487b7160e01b8f5260218b52848ffd5b505050866d0dcdee840cadcdeeaced040cae8d60931b8d600e60649460208f519562461bcd60e51b8752860152840152820152fd5b8980fd5b503461023957816003193601126102395761084f90610d7e611111565b9051918291602083526020830190610ffc565b5082346102e957816003193601126102e957803560249081359260ff8154166003811015610f2957600114610ee75760095485516331a9108f60e11b8152828101849052602094916001600160a01b039190869082908590829086165afa908115610edd578991610ec0575b50163303610e8e5782875260018452848688205410610e55575050848093600182948394845252858220610e32828254611323565b9055610e4081600254611323565b60025581811561055a573390f1156105505751f35b855162461bcd60e51b8152918201849052601490820152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b855162461bcd60e51b8152918201849052600d908201526c3737ba103a34329037bbb732b960991b6044820152606490fd5b610ed79150863d881161071e5761070f81836110ef565b89610dfd565b88513d8b823e3d90fd5b606490601b84602088519362461bcd60e51b85528401528201527f63616e6e6f74207769746864726177206f6e6365207374616b656400000000006044820152fd5b634e487b7160e01b8752602182528387fd5b5082346102e95760203660031901126102e957356001600160a01b03818116918290036106a957610f70908454163314611251565b6bffffffffffffffffffffffff60a01b600954161760095551f35b5082346102e957826003193601126102e957610fa5611330565b805460ff1916600217905551f35b5082346102e957826003193601126102e95754905160089190911c6001600160a01b0316815260209150f35b503461023957816003193601126102395761084f90610d7e611625565b919082519283825260005b848110611028575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611007565b9181601f8401121561106a5782359167ffffffffffffffff831161106a576020838186019501011161106a57565b600080fd5b90600182811c9216801561109f575b602083101461108957565b634e487b7160e01b600052602260045260246000fd5b91607f169161107e565b67ffffffffffffffff81116110bd57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176110bd57604052565b90601f8019910116810190811067ffffffffffffffff8211176110bd57604052565b60405190600082600654916111258361106f565b8083529260019081811690811561119b575060011461114e575b5061114c925003836110ef565b565b6006600090815291506000805160206117088339815191525b848310611180575061114c93505081016020013861113f565b81935090816020925483858a01015201910190918592611167565b90506020925061114c94915060ff191682840152151560051b8201013861113f565b6003548110156111f45760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b634e487b7160e01b600052603260045260246000fd5b92919267ffffffffffffffff82116110bd5760405191611234601f8201601f1916602001846110ef565b82948184528183011161106a578281602093846000960137010152565b1561125857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156112a357565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b919082018092116112ee57565b634e487b7160e01b600052601160045260246000fd5b9081602091031261106a57516001600160a01b038116810361106a5790565b919082039182116112ee57565b60049060ff825416600392838210156114df57600180920361149b5747606481111561145757600094835b611368575b505050509050565b80548610156114525761137a866111bd565b905490821b1c60018060a01b03806009541691604092835180916331a9108f60e11b8252838983015281602460209485935afa9182156114475793600094938594938986959486958693611424575b50506113d591926114f4565b918391831561141a575b1690f115611410575060001986146113fb57948301948361135b565b601183634e487b7160e01b6000525260246000fd5b513d6000823e3d90fd5b6108fc92506113df565b6113d59350908161144092903d1061071e5761070f81836110ef565b91386113c9565b85513d6000823e3d90fd5b611360565b60405162461bcd60e51b8152602081840181905260248201527f6d696e696d756d206f66203130302077656920746f20646973747269627574656044820152606490fd5b60649060206040519162461bcd60e51b8352820152601c60248201527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152fd5b602190634e487b7160e01b6000525260246000fd5b6000908152600160205260408120541561158457604081205460001992908115158285048211166115705760025491821561155c570204916001831115611556578201918211611542575090565b634e487b7160e01b81526011600452602490fd5b50905090565b634e487b7160e01b84526012600452602484fd5b634e487b7160e01b83526011600452602483fd5b905090565b60ff6004541660038110156115b0576115a25750600090565b6115ad9047906114f4565b90565b634e487b7160e01b600052602160045260246000fd5b601f81116115d2575050565b60009060068252600080516020611708833981519152906020601f850160051c8301941061161b575b601f0160051c01915b82811061161057505050565b818155600101611604565b90925082906115fb565b60ff6004541660038110156115b057600181146116c35780156116945760021461167257604051611655816110d3565b600d81526c7374617465206661696c75726560981b602082015290565b60405161167e816110d3565b6006815265195e1a5d195960d21b602082015290565b506040516116a1816110d3565b6012815271616363657074696e67206465706f7369747360701b602082015290565b506040516116d0816110d3565b60068152651cdd185ad95960d21b602082015290565b908060209392818452848401376000828201840152601f01601f191601019056fef652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3fa26469706673582212206aeefd5076af57ae83cc08d9c152f8ebe5871d345c074b41c6351d15740428d664736f6c63430008100033",
              "opcodes": "PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI STOP JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1865C57D EQ PUSH2 0xFDF JUMPI DUP1 PUSH4 0x2A4DBD2B EQ PUSH2 0xFB3 JUMPI DUP1 PUSH4 0x2DEF6620 EQ PUSH2 0xF8B JUMPI DUP1 PUSH4 0x2EDAF74D EQ PUSH2 0xF3B JUMPI DUP1 PUSH4 0x378DE45B EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0x441A3E70 EQ PUSH2 0xD91 JUMPI DUP1 PUSH4 0x4AD02EF1 EQ PUSH2 0xD61 JUMPI DUP1 PUSH4 0x4B2B4E36 EQ PUSH2 0x947 JUMPI DUP1 PUSH4 0x678E300A EQ PUSH2 0x927 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x8C6 JUMPI DUP1 PUSH4 0x7BE0B4A0 EQ PUSH2 0x7EE JUMPI DUP1 PUSH4 0x7D882097 EQ PUSH2 0x7D0 JUMPI DUP1 PUSH4 0x82A790CF EQ PUSH2 0x797 JUMPI DUP1 PUSH4 0x8620891C EQ PUSH2 0x5DE JUMPI DUP1 PUSH4 0x87F8AB26 EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x58F JUMPI DUP1 PUSH4 0xCFB5A5F8 EQ PUSH2 0x563 JUMPI DUP1 PUSH4 0xE2664E49 EQ PUSH2 0x513 JUMPI DUP1 PUSH4 0xE32D2913 EQ PUSH2 0x3DE JUMPI DUP1 PUSH4 0xE4FC6B6D EQ PUSH2 0x3C2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2ED JUMPI PUSH4 0xF340FA01 EQ PUSH2 0x11C JUMPI POP PUSH2 0x11 JUMP JUMPDEST PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP2 CALLDATALOAD DUP6 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x24A JUMPI PUSH1 0xFF DUP4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D6 JUMPI PUSH2 0x159 SWAP1 ISZERO PUSH2 0x129C JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x29F JUMPI SWAP1 DUP2 DUP6 SWAP4 SWAP3 DUP8 PUSH1 0x9 SLOAD AND DUP5 DUP8 MLOAD DUP1 SWAP8 DUP2 SWAP4 PUSH4 0x2798987D PUSH1 0xE1 SHL DUP4 MSTORE GAS CALL SWAP4 DUP5 ISZERO PUSH2 0x295 JUMPI DUP7 SWAP5 PUSH2 0x261 JUMPI JUMPDEST POP PUSH1 0x1 SWAP1 DUP5 DUP8 MSTORE MSTORE CALLVALUE DUP5 DUP7 KECCAK256 SSTORE PUSH2 0x1A3 CALLVALUE PUSH1 0x2 SLOAD PUSH2 0x12E1 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD SWAP6 PUSH9 0x10000000000000000 DUP8 LT ISZERO PUSH2 0x24E JUMPI DUP4 PUSH2 0x1D0 DUP9 PUSH1 0x1 DUP10 SWAP11 SWAP10 SWAP9 SWAP10 ADD PUSH1 0x3 SSTORE PUSH2 0x11BD JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL PUSH1 0x0 NOT DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE PUSH1 0x9 SLOAD AND DUP1 EXTCODESIZE ISZERO PUSH2 0x24A JUMPI DUP5 SWAP3 DUP4 PUSH1 0x64 SWAP3 DUP9 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0xD4D1513 PUSH1 0xE0 SHL DUP7 MSTORE DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE ADDRESS PUSH1 0x44 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x23D JUMPI PUSH2 0x229 JUMPI POP POP MLOAD RETURN JUMPDEST PUSH2 0x232 SWAP1 PUSH2 0x10A9 JUMP JUMPDEST PUSH2 0x239 JUMPI MLOAD RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP POP MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 DUP4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP1 DUP1 SWAP5 POP DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x28E JUMPI JUMPDEST PUSH2 0x279 DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x28A JUMPI MLOAD SWAP3 PUSH1 0x1 PUSH2 0x18A JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x26F JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x36BAB9BA103232B837B9B4BA1032BA3432B9 PUSH1 0x71 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 DUP5 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 DUP2 AND SWAP3 SWAP1 DUP4 SWAP1 SUB PUSH2 0x24A JUMPI PUSH2 0x324 DUP3 DUP7 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x370 JUMPI POP PUSH1 0x0 SLOAD SWAP3 DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP6 AND OR PUSH1 0x0 SSTORE MLOAD SWAP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP5 LOG3 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP6 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x3DB PUSH2 0x1330 JUMP JUMPDEST MLOAD RETURN JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP5 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x24A JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x24A JUMPI PUSH2 0x422 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 DUP2 DUP10 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x120A JUMP JUMPDEST SWAP5 PUSH2 0x437 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP6 MLOAD SWAP3 DUP4 GT PUSH2 0x500 JUMPI POP PUSH2 0x455 DUP3 PUSH2 0x450 PUSH1 0x6 SLOAD PUSH2 0x106F JUMP JUMPDEST PUSH2 0x15C6 JUMP JUMPDEST DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x490 JUMPI POP DUP4 SWAP5 DUP3 SWAP4 SWAP5 SWAP3 PUSH2 0x485 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x6 SSTORE MLOAD RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x46D JUMP JUMPDEST PUSH1 0x6 DUP6 MSTORE PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP7 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x4E8 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x4CF JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x6 SSTORE MLOAD RETURN JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x4C3 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x4AE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x538 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP2 DUP1 DUP1 DUP1 SELFBALANCE DUP2 DUP2 ISZERO PUSH2 0x55A JUMPI JUMPDEST CALLER SWAP1 CALL ISZERO PUSH2 0x550 JUMPI MLOAD RETURN JUMPDEST MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH2 0x545 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x58C JUMPI POP PUSH2 0x585 PUSH1 0x20 SWAP3 SELFBALANCE SWAP1 CALLDATALOAD PUSH2 0x14F4 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI SWAP1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI PUSH1 0x20 SWAP3 DUP3 SWAP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP3 PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x6A9 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 DUP4 DUP3 PUSH1 0x9 SLOAD AND PUSH1 0x24 DUP9 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x4F558E79 PUSH1 0xE0 SHL DUP4 MSTORE DUP11 DUP10 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x725 JUMPI DUP8 SWAP2 PUSH2 0x75D JUMPI JUMPDEST POP ISZERO PUSH2 0x72F JUMPI DUP1 DUP4 PUSH1 0x24 SWAP3 PUSH1 0x9 SLOAD AND DUP8 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x178B367 PUSH1 0xE3 SHL DUP3 MSTORE DUP10 DUP9 DUP4 ADD MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x725 JUMPI DUP8 SWAP3 PUSH2 0x6F6 JUMPI JUMPDEST POP ADDRESS SWAP2 AND SUB PUSH2 0x6C0 JUMPI PUSH1 0xFF DUP2 SLOAD AND SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x6AD JUMPI POP ISZERO PUSH2 0x67C DUP2 PUSH2 0x129C JUMP JUMPDEST ISZERO PUSH2 0x6A9 JUMPI PUSH1 0x1 SWAP2 DUP5 MSTORE MSTORE DUP1 DUP3 KECCAK256 PUSH2 0x695 CALLVALUE DUP3 SLOAD PUSH2 0x12E1 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x6A3 CALLVALUE PUSH1 0x2 SLOAD PUSH2 0x12E1 JUMP JUMPDEST PUSH1 0x2 SSTORE MLOAD RETURN JUMPDEST DUP4 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 SWAP1 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH1 0x64 SWAP2 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1DDC9BDB99C81CDD185ADA5B99C81C1BDBDB PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x717 SWAP2 SWAP3 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x71E JUMPI JUMPDEST PUSH2 0x70F DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1304 JUMP JUMPDEST SWAP1 DUP8 PUSH2 0x659 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x705 JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH1 0x64 SWAP2 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x1B9BDD08195E1A5CDD PUSH1 0xBA SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x790 JUMPI JUMPDEST PUSH2 0x774 DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x78C JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x78C JUMPI DUP8 PUSH2 0x625 JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x76A JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI CALLDATALOAD SWAP2 PUSH1 0x3 SLOAD DUP4 LT ISZERO PUSH2 0x58C JUMPI POP PUSH2 0x7C2 PUSH1 0x20 SWAP3 PUSH2 0x11BD JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x58C JUMPI POP DUP1 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x6 SLOAD PUSH2 0x812 DUP2 PUSH2 0x106F JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x89E JUMPI POP PUSH1 0x1 EQ PUSH2 0x853 JUMPI JUMPDEST POP POP PUSH2 0x83D DUP3 PUSH2 0x84F SWAP5 SUB DUP4 PUSH2 0x10EF JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xFFC JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP5 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST DUP3 DUP7 LT PUSH2 0x886 JUMPI POP POP POP SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 PUSH2 0x83D DUP3 PUSH2 0x82C JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0x86C JUMP JUMPDEST PUSH2 0x84F SWAP7 POP DUP6 SWAP3 POP PUSH1 0x20 SWAP2 POP SWAP3 PUSH2 0x83D SWAP4 PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 POP PUSH2 0x82C JUMP JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x8EE DUP2 DUP6 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 SSTORE SWAP3 MLOAD SWAP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP5 LOG3 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x58C JUMPI POP PUSH2 0x585 PUSH1 0x20 SWAP3 CALLDATALOAD PUSH2 0x1589 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI PUSH1 0x3 NOT SWAP2 PUSH1 0x80 CALLDATASIZE DUP5 ADD SLT PUSH2 0x239 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP5 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x6A9 JUMPI PUSH2 0x97B SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x103C JUMP JUMPDEST PUSH1 0x24 SWAP7 SWAP2 DUP8 CALLDATALOAD DUP5 DUP2 GT PUSH2 0x78C JUMPI PUSH2 0x995 SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x103C JUMP JUMPDEST SWAP3 PUSH1 0x44 SWAP9 DUP10 CALLDATALOAD SWAP11 DUP8 DUP13 GT PUSH2 0xD5D JUMPI PUSH2 0x9B6 DUP11 SWAP12 SWAP13 SWAP11 SWAP9 SWAP10 SWAP11 CALLDATASIZE SWAP1 DUP10 ADD PUSH2 0x103C JUMP JUMPDEST SWAP3 PUSH2 0x9CC PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP12 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST PUSH9 0x1BC16D674EC800000 SWAP4 DUP5 SELFBALANCE LT PUSH2 0xD28 JUMPI PUSH1 0xFF DUP11 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xD16 JUMPI PUSH2 0xCE4 JUMPI PUSH2 0x9F8 PUSH2 0x1111 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x60 MLOAD PUSH1 0x80 KECCAK256 SWAP2 SWAP14 SWAP2 EQ PUSH2 0xC13 JUMPI POP PUSH2 0xA17 PUSH2 0x1111 JUMP JUMPDEST DUP13 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH2 0xA28 CALLDATASIZE DUP9 DUP12 PUSH2 0x120A JUMP JUMPDEST DUP14 DUP2 MLOAD SWAP2 ADD KECCAK256 SUB PUSH2 0xBC5 JUMPI JUMPDEST DUP10 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP11 SSTORE ADDRESS PUSH1 0x1 PUSH1 0xF8 SHL DUP2 ADD SWAP1 DUP2 LT PUSH2 0xBB3 JUMPI DUP14 MLOAD SWAP1 DUP14 DUP3 ADD SWAP1 DUP2 MSTORE DUP14 DUP3 MSTORE PUSH2 0xA63 DUP3 PUSH2 0x10D3 JUMP JUMPDEST DUP14 PUSH2 0xA6F CALLDATASIZE DUP14 DUP13 PUSH2 0x120A JUMP JUMPDEST DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP2 MLOAD SWAP1 KECCAK256 SUB PUSH2 0xB70 JUMPI DUP14 SWAP15 DUP12 SWAP14 SWAP15 SWAP10 SWAP11 SWAP12 PUSH1 0x7 SWAP15 SWAP14 SWAP15 SLOAD AND SWAP8 DUP9 EXTCODESIZE ISZERO PUSH2 0xB6C JUMPI DUP16 MLOAD PUSH4 0x4512A23 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x80 DUP2 DUP16 ADD MSTORE SWAP12 DUP13 SWAP11 DUP12 SWAP10 DUP11 SWAP9 SWAP3 SWAP2 PUSH2 0xABD SWAP2 PUSH1 0x84 DUP12 ADD SWAP2 PUSH2 0x16E6 JUMP JUMPDEST SWAP2 DUP7 DUP10 DUP5 SUB ADD SWAP1 DUP10 ADD MSTORE PUSH2 0xAD0 SWAP3 PUSH2 0x16E6 JUMP JUMPDEST SWAP3 DUP6 DUP5 SUB ADD SWAP1 DUP6 ADD MSTORE PUSH2 0xAE2 SWAP3 PUSH2 0x16E6 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x64 DUP4 ADD MSTORE SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x295 JUMPI PUSH2 0xB33 JUMPI JUMPDEST POP SWAP2 DUP4 SWAP2 PUSH32 0x1944DEBB24A9AAFCF2708BE964E412CDB73FC36D6EA24577FD8DCC05B93B4A44 SWAP4 SLOAD PUSH1 0x8 SHR AND SWAP1 DUP3 MLOAD SWAP2 DUP3 MSTORE CALLER SWAP1 DUP3 ADD MSTORE LOG1 MLOAD RETURN JUMPDEST SWAP2 PUSH32 0x1944DEBB24A9AAFCF2708BE964E412CDB73FC36D6EA24577FD8DCC05B93B4A44 SWAP4 SWAP2 SWAP6 PUSH2 0xB62 DUP7 SWAP5 PUSH2 0x10A9 JUMP JUMPDEST SWAP6 SWAP2 SWAP4 POP SWAP2 PUSH2 0xAF9 JUMP JUMPDEST DUP11 DUP1 REVERT JUMPDEST POP POP POP DUP7 PUSH32 0x7769746864726177616C2063726564656E7469616C206D69736D617463680000 DUP14 PUSH1 0x1E PUSH1 0x64 SWAP5 DUP14 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP16 MSTORE PUSH1 0x11 DUP12 MSTORE DUP5 DUP16 REVERT JUMPDEST POP POP POP DUP7 PUSH32 0x7075626B657920646F6573206E6F74206D617463682073746F7265642076616C DUP14 PUSH1 0x22 PUSH1 0x84 SWAP5 DUP14 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP7 GT PUSH2 0xCD2 JUMPI DUP6 DUP15 PUSH2 0xC2A DUP3 PUSH2 0x450 PUSH1 0x6 SLOAD PUSH2 0x106F JUMP JUMPDEST DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xC60 JUMPI SWAP2 PUSH2 0xC55 JUMPI JUMPDEST POP DUP7 PUSH1 0x1 SHL SWAP1 PUSH1 0x0 NOT DUP9 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x6 SSTORE PUSH2 0xA34 JUMP JUMPDEST SWAP1 POP DUP9 ADD CALLDATALOAD CODESIZE PUSH2 0xC3C JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 POP DUP15 JUMPDEST DUP12 PUSH1 0x1F NOT DUP12 AND DUP4 LT PUSH2 0xCBC JUMPI POP POP POP DUP8 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xCA2 JUMPI JUMPDEST POP POP PUSH1 0x1 DUP7 DUP2 SHL ADD PUSH1 0x6 SSTORE PUSH2 0xA34 JUMP JUMPDEST DUP10 ADD CALLDATALOAD PUSH1 0x0 NOT PUSH1 0x3 DUP10 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH2 0xC92 JUMP JUMPDEST DUP4 ADD CALLDATALOAD DUP5 SSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 ADD DUP15 PUSH2 0xC77 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP15 MSTORE PUSH1 0x41 DUP11 MSTORE DUP4 DUP15 REVERT JUMPDEST POP POP POP DUP7 PUSH11 0x77726F6E67207374617465 PUSH1 0xA8 SHL DUP14 PUSH1 0xB PUSH1 0x64 SWAP5 PUSH1 0x20 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP16 MSTORE PUSH1 0x21 DUP12 MSTORE DUP5 DUP16 REVERT JUMPDEST POP POP POP DUP7 PUSH14 0xDCDEE840CADCDEEACED040CAE8D PUSH1 0x93 SHL DUP14 PUSH1 0xE PUSH1 0x64 SWAP5 PUSH1 0x20 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST DUP10 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x84F SWAP1 PUSH2 0xD7E PUSH2 0x1111 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xFFC JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI DUP1 CALLDATALOAD PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP3 PUSH1 0xFF DUP2 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xF29 JUMPI PUSH1 0x1 EQ PUSH2 0xEE7 JUMPI PUSH1 0x9 SLOAD DUP6 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE DUP3 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x20 SWAP5 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 DUP7 SWAP1 DUP3 SWAP1 DUP6 SWAP1 DUP3 SWAP1 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xEDD JUMPI DUP10 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP AND CALLER SUB PUSH2 0xE8E JUMPI DUP3 DUP8 MSTORE PUSH1 0x1 DUP5 MSTORE DUP5 DUP7 DUP9 KECCAK256 SLOAD LT PUSH2 0xE55 JUMPI POP POP DUP5 DUP1 SWAP4 PUSH1 0x1 DUP3 SWAP5 DUP4 SWAP5 DUP5 MSTORE MSTORE DUP6 DUP3 KECCAK256 PUSH2 0xE32 DUP3 DUP3 SLOAD PUSH2 0x1323 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xE40 DUP2 PUSH1 0x2 SLOAD PUSH2 0x1323 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP2 DUP2 ISZERO PUSH2 0x55A JUMPI CALLER SWAP1 CALL ISZERO PUSH2 0x550 JUMPI MLOAD RETURN JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x1B9BDD08195B9BDD59DA0819195C1BDCDA5D1959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x3737BA103A34329037BBB732B9 PUSH1 0x99 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xED7 SWAP2 POP DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x71E JUMPI PUSH2 0x70F DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP10 PUSH2 0xDFD JUMP JUMPDEST DUP9 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x1B DUP5 PUSH1 0x20 DUP9 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x63616E6E6F74207769746864726177206F6E6365207374616B65640000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x21 DUP3 MSTORE DUP4 DUP8 REVERT JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0x6A9 JUMPI PUSH2 0xF70 SWAP1 DUP5 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE MLOAD RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI PUSH2 0xFA5 PUSH2 0x1330 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x2 OR SWAP1 SSTORE MLOAD RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI SLOAD SWAP1 MLOAD PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP2 POP RETURN JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x84F SWAP1 PUSH2 0xD7E PUSH2 0x1625 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x1028 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1007 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x106A JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x106A JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x106A JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x109F JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1089 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x107E JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x10BD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x10BD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x10BD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP3 PUSH1 0x6 SLOAD SWAP2 PUSH2 0x1125 DUP4 PUSH2 0x106F JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x119B JUMPI POP PUSH1 0x1 EQ PUSH2 0x114E JUMPI JUMPDEST POP PUSH2 0x114C SWAP3 POP SUB DUP4 PUSH2 0x10EF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST DUP5 DUP4 LT PUSH2 0x1180 JUMPI POP PUSH2 0x114C SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x113F JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 SWAP3 PUSH2 0x1167 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x114C SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x113F JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0x11F4 JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x10BD JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1234 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x10EF JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x106A JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x1258 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x12A3 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x6E6F7420616363657074696E67206465706F73697473 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x12EE JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x106A JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x106A JUMPI SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x12EE JUMPI JUMP JUMPDEST PUSH1 0x4 SWAP1 PUSH1 0xFF DUP3 SLOAD AND PUSH1 0x3 SWAP3 DUP4 DUP3 LT ISZERO PUSH2 0x14DF JUMPI PUSH1 0x1 DUP1 SWAP3 SUB PUSH2 0x149B JUMPI SELFBALANCE PUSH1 0x64 DUP2 GT ISZERO PUSH2 0x1457 JUMPI PUSH1 0x0 SWAP5 DUP4 JUMPDEST PUSH2 0x1368 JUMPI JUMPDEST POP POP POP POP SWAP1 POP JUMP JUMPDEST DUP1 SLOAD DUP7 LT ISZERO PUSH2 0x1452 JUMPI PUSH2 0x137A DUP7 PUSH2 0x11BD JUMP JUMPDEST SWAP1 SLOAD SWAP1 DUP3 SHL SHR PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x9 SLOAD AND SWAP2 PUSH1 0x40 SWAP3 DUP4 MLOAD DUP1 SWAP2 PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP3 MSTORE DUP4 DUP10 DUP4 ADD MSTORE DUP2 PUSH1 0x24 PUSH1 0x20 SWAP5 DUP6 SWAP4 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x1447 JUMPI SWAP4 PUSH1 0x0 SWAP5 SWAP4 DUP6 SWAP5 SWAP4 DUP10 DUP7 SWAP6 SWAP5 DUP7 SWAP6 DUP7 SWAP4 PUSH2 0x1424 JUMPI JUMPDEST POP POP PUSH2 0x13D5 SWAP2 SWAP3 PUSH2 0x14F4 JUMP JUMPDEST SWAP2 DUP4 SWAP2 DUP4 ISZERO PUSH2 0x141A JUMPI JUMPDEST AND SWAP1 CALL ISZERO PUSH2 0x1410 JUMPI POP PUSH1 0x0 NOT DUP7 EQ PUSH2 0x13FB JUMPI SWAP5 DUP4 ADD SWAP5 DUP4 PUSH2 0x135B JUMP JUMPDEST PUSH1 0x11 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x8FC SWAP3 POP PUSH2 0x13DF JUMP JUMPDEST PUSH2 0x13D5 SWAP4 POP SWAP1 DUP2 PUSH2 0x1440 SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x71E JUMPI PUSH2 0x70F DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST SWAP2 CODESIZE PUSH2 0x13C9 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x1360 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D696E696D756D206F66203130302077656920746F2064697374726962757465 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x757365207769746864726177207768656E206E6F74207374616B656400000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x21 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO PUSH2 0x1584 JUMPI PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x0 NOT SWAP3 SWAP1 DUP2 ISZERO ISZERO DUP3 DUP6 DIV DUP3 GT AND PUSH2 0x1570 JUMPI PUSH1 0x2 SLOAD SWAP2 DUP3 ISZERO PUSH2 0x155C JUMPI MUL DIV SWAP2 PUSH1 0x1 DUP4 GT ISZERO PUSH2 0x1556 JUMPI DUP3 ADD SWAP2 DUP3 GT PUSH2 0x1542 JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x15B0 JUMPI PUSH2 0x15A2 JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x15AD SWAP1 SELFBALANCE SWAP1 PUSH2 0x14F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x15D2 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x6 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x161B JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x1610 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1604 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x15FB JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x15B0 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x16C3 JUMPI DUP1 ISZERO PUSH2 0x1694 JUMPI PUSH1 0x2 EQ PUSH2 0x1672 JUMPI PUSH1 0x40 MLOAD PUSH2 0x1655 DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0xD DUP2 MSTORE PUSH13 0x7374617465206661696C757265 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167E DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH6 0x195E1A5D1959 PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x16A1 DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH18 0x616363657074696E67206465706F73697473 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x16D0 DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH6 0x1CDD185AD959 PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP INVALID 0xF6 MSTORE 0x22 0x23 SGT 0xE2 DUP5 MSIZE MSTORE DUP14 SWAP3 SIGNEXTEND PUSH6 0x115C16C04F3E 0xFC DUP3 0xAA 0xED 0xC9 PUSH28 0xE59F3F377C0D3FA26469706673582212206AEEFD5076AF57AE83CC08 0xD9 0xC1 MSTORE 0xF8 0xEB 0xE5 DUP8 SAR CALLVALUE 0x5C SMOD 0x4B COINBASE 0xC6 CALLDATALOAD SAR ISZERO PUSH21 0x428D664736F6C6343000810003300000000000000 ",
              "sourceMap": "352:6004:15:-:0;;;;;;;;;;;;-1:-1:-1;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;1295:74;1303:39;;1295:74;:::i;:::-;1383:9;:14;352:6004;;;;;;;;1436:14;352:6004;;;;;;;;;;;;1436:33;;;;;;;;;;;;;352:6004;;;;;;;;1383:9;352:6004;;;;1510:26;1383:9;1510:26;352:6004;1510:26;:::i;:::-;;352:6004;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1436:14;352:6004;;1570:51;;;;;352:6004;;;;;;;;;;;;;;;1570:51;;;;352:6004;;;;;1615:4;352:6004;;;;1570:51;;;;;;;;352:6004;;;;1570:51;;;;:::i;:::-;352:6004;;;;;;;;1570:51;352:6004;;;;;;;;;;;;1570:51;352:6004;;;;-1:-1:-1;;;352:6004:15;;;;;;;;1436:33;;;;;;;;;;;;;;;;;:::i;:::-;;;352:6004;;;;;;;1436:33;;352:6004;;;;1436:33;;;;;;352:6004;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;352:6004:15;;;;-1:-1:-1;;;;;352:6004:15;;;;;;;;;;;;1240:68:0;352:6004:15;;;;719:10:9;1248:23:0;1240:68;:::i;:::-;2006:22;;352:6004:15;;;;;;;;;;;;;;;;;;2410:40:0;352:6004:15;2410:40:0;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1240:68:0;352:6004:15;;;;;;;;719:10:9;1248:23:0;1240:68;:::i;:::-;352:6004:15;;;;;;;;;;;3734:27;352:6004;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3734:27;352:6004;;;;;;;-1:-1:-1;352:6004:15;;;;;3734:27;352:6004;;-1:-1:-1;;352:6004:15;;;-1:-1:-1;;;;;;;;;;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;;;3734:27;352:6004;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;;;;;;;;;1240:68:0;352:6004:15;;;;;;;;719:10:9;1248:23:0;1240:68;:::i;:::-;5683:21:15;;;;;5654:51;;;;;352:6004;719:10:9;5654:51:15;;;;;352:6004;;5654:51;352:6004;;;;;;;;;5654:51;;;;;352:6004;;;;;;;;-1:-1:-1;;352:6004:15;;;;3315:21;3349:31;352:6004;3315:21;;352:6004;;3349:31;:::i;:::-;352:6004;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;352:6004:15;;;;;;;;;;;;;;;;-1:-1:-1;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1691:14;352:6004;;;;;;;;;;;;1691:26;;;;;;352:6004;1691:26;;;;;;;;;;;352:6004;;;;;;;;;1691:14;352:6004;;;;;;;;;;;1745:31;;;;;;352:6004;1745:31;;;;;;;;;;;352:6004;1788:4;;352:6004;;1745:48;352:6004;;;;;;;;;;;;;1830:39;;1822:74;;;:::i;:::-;352:6004;;;;;;;;;;;1956:31;1978:9;352:6004;;1956:31;:::i;:::-;352:6004;;1993:26;1978:9;1993:26;352:6004;1993:26;:::i;:::-;;352:6004;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;1745:31;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;352:6004;;;;;;;;;;;;;;;;;;;;;;;;1691:14;352:6004;;;;-1:-1:-1;;;352:6004:15;;;;;1691:26;;;;;;;;;;;;;;;;:::i;:::-;;;352:6004;;;;;;;;;;;;1691:26;;;352:6004;;;;1691:26;;;;;352:6004;;;;;;;;-1:-1:-1;;352:6004:15;;;;;;;;531:27;;;;;;;352:6004;531:27;;:::i;:::-;352:6004;;;;;;;;;;;;;;;;;;;;;;;;;;;502:25;352:6004;;;;;;;;;;;;;;;;;;;;;;;;;;711:28;352:6004;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;711:28;352:6004;;;;;-1:-1:-1;;;;;;;;;;;;352:6004:15;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1240:68:0;352:6004:15;;;;719:10:9;1248:23:0;1240:68;:::i;:::-;352:6004:15;;-1:-1:-1;;;;;;352:6004:15;;;;;;;;2410:40:0;352:6004:15;;2410:40:0;352:6004:15;;;;;;;;;-1:-1:-1;;352:6004:15;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1240:68:0;352:6004:15;;;;;;;;;719:10:9;1248:23:0;1240:68;:::i;:::-;4375:8:15;4350:21;;;:33;352:6004;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;4503:26;352:6004;;;4533:15;352:6004;;;4503:45;352:6004;;;;;:::i;:::-;;;;;;4565:26;352:6004;;;;;:::i;:::-;;;;;;4595:17;4565:47;352:6004;;4500:188;352:6004;;-1:-1:-1;;352:6004:15;;;;;4358:4;-1:-1:-1;;;352:6004:15;;;;-1:-1:-1;352:6004:15;;;;5396:102;;;;352:6004;;;5396:102;;;;;;:::i;:::-;352:6004;;;;;;:::i;:::-;;;;;4964:33;352:6004;;5001:33;;4964:70;352:6004;;;;;;;;;;5075:15;352:6004;;;;;5075:99;;;;;;352:6004;;-1:-1:-1;;;5075:99:15;;352:6004;5075:99;;;352:6004;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;5075:99;;;;;;;;;;4500:188;352:6004;;;;5185:43;352:6004;;;;;;;;;;;719:10:9;352:6004:15;;;;5185:43;352:6004;;5075:99;;5185:43;5075:99;;;;;;;:::i;:::-;;;;;;;;;352:6004;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;4500:188;352:6004;;;;;;;;;4513:15;352:6004;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;4513:15;352:6004;4500:188;;352:6004;;;;;;;;;;4513:15;352:6004;;-1:-1:-1;;;;;;;;;;;352:6004:15;-1:-1:-1;352:6004:15;;;-1:-1:-1;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;4513:15;352:6004;4500:188;;352:6004;;;;-1:-1:-1;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2091:28;352:6004;;2179:14;352:6004;;;-1:-1:-1;;;2179:27:15;;;;;352:6004;;;;;;-1:-1:-1;;;;;352:6004:15;;;;;;;;;;;;2179:27;;;;;;;;;;;352:6004;;;2165:10;:41;352:6004;;;;;;;;;;;;;2238:29;352:6004;;;;;;;;;;;;;;;;;;2298:29;352:6004;;;2298:29;:::i;:::-;352:6004;;2333:24;352:6004;2333:24;352:6004;2333:24;:::i;:::-;;352:6004;2363:37;;;;;2165:10;2363:37;;;;;352:6004;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;2179:27;;;;;;;;;;;;;;:::i;:::-;;;;;352:6004;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;;;;-1:-1:-1;;352:6004:15;;;;;-1:-1:-1;;;;;352:6004:15;;;;;;;;;1240:68:0;352:6004:15;;;;719:10:9;1248:23:0;1240:68;:::i;:::-;352:6004:15;;;5883:56;352:6004;;;5883:56;352:6004;;;;;;;;;;;;;;;;;5948:175;;:::i;:::-;352:6004;;-1:-1:-1;;352:6004:15;6013:12;352:6004;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;352:6004:15;;;;;-1:-1:-1;352:6004:15;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;352:6004:15;3645:15;352:6004;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;3645:15;-1:-1:-1;352:6004:15;;;-1:-1:-1;;;;;;;;;;;;;352:6004:15;;;;;;-1:-1:-1;352:6004:15;;-1:-1:-1;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;531:27;352:6004;;;;;;531:27;-1:-1:-1;352:6004:15;;;;-1:-1:-1;352:6004:15;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;352:6004:15;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;352:6004:15;;;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;352:6004:15;;;;;;;:::o;:::-;;;;;;;;;;:::o;2409:469::-;2452:12;352:6004;;;;;;;;;;;;;2468:12;2452:28;;;352:6004;;2542:21;2595:3;2577:21;;352:6004;;;-1:-1:-1;;2645:8:15;2468:12;;;2641:233;2409:469;;;;;;:::o;2679:3::-;352:6004;;2655:22;;;;;2702:16;;;:::i;:::-;352:6004;;;;;;;;;;;;2747:14;352:6004;;;;;;;;;;;;2747:26;;;;;;352:6004;2747:26;352:6004;2747:26;;;;;;;;;;;;-1:-1:-1;2747:26:15;;;;;;;;;;;;;;;2679:3;2794:30;;;;;;:::i;:::-;2832:35;;;;;;;2679:3;352:6004;2832:35;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;;2645:8;;352:6004;;;;;;-1:-1:-1;352:6004:15;;;-1:-1:-1;352:6004:15;2832:35;352:6004;;-1:-1:-1;352:6004:15;;;;;2832:35;;;-1:-1:-1;2832:35:15;;2747:26;2794:30;2747:26;;;;;;;;-1:-1:-1;2747:26:15;;;;;;:::i;:::-;;;;;;352:6004;;;-1:-1:-1;352:6004:15;;;;;2655:22;;;352:6004;;;-1:-1:-1;;;352:6004:15;;;;;;;;;;;;;;;;;;2595:3;;352:6004;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;352:6004:15;;;-1:-1:-1;352:6004:15;2882:346;-1:-1:-1;352:6004:15;;;2971:13;352:6004;;;;;;2971:23;2968:36;;352:6004;;;;-1:-1:-1;;352:6004:15;;;;;;;;;;;;;3070:13;352:6004;;;;;;;;;2971:13;3092:15;;2971:13;;;352:6004;;;;;;;3116:23;;:::o;352:6004::-;-1:-1:-1;;;352:6004:15;;;;;;;;3089:134;3215:8;;;;:::o;352:6004::-;-1:-1:-1;;;352:6004:15;;;;;;;;;-1:-1:-1;;;352:6004:15;;;;;;;;2968:36;2996:8;;;:::o;3389:185::-;352:6004;3465:12;352:6004;;;;;;;;3465:39;;3514:8;-1:-1:-1;3514:8:15;:::o;3462:108::-;3349:31;3315:21;;3349:31;;:::i;:::-;3543:20;:::o;352:6004::-;;;;-1:-1:-1;352:6004:15;;3465:12;352:6004;;-1:-1:-1;352:6004:15;;;;;;;;;:::o;:::-;-1:-1:-1;352:6004:15;4513:15;352:6004;;-1:-1:-1;;;;;;;;;;;352:6004:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;352:6004:15;;;;3770:294;352:6004;3833:12;352:6004;;;;;;;;3849:12;3833:28;;3830:48;;3887:39;;3884:71;;3980:12;3964:28;3961:48;;352:6004;;;;;:::i;:::-;;;;-1:-1:-1;;;352:6004:15;;;;3770:294;:::o;3961:48::-;352:6004;;;;;:::i;:::-;;;;-1:-1:-1;;;352:6004:15;;;;3994:15;:::o;3884:71::-;352:6004;;;;;;:::i;:::-;;;;-1:-1:-1;;;352:6004:15;;;;3928:27;:::o;3830:48::-;352:6004;;;;;;:::i;:::-;;;;-1:-1:-1;;;352:6004:15;;;;3863:15;:::o;352:6004::-;;;;;;;;;;;;;-1:-1:-1;352:6004:15;;;;;;;;-1:-1:-1;;352:6004:15;;;;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "1196200",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "": "588",
                "addToDeposit(uint256)": "infinite",
                "deposit(address)": "infinite",
                "depositAmount(uint256)": "2644",
                "depositContractAddress()": "2324",
                "distribute()": "infinite",
                "getDepositAmount(uint256)": "2424",
                "getDistributableShare(uint256)": "9144",
                "getPubKey()": "infinite",
                "getShare(uint256)": "7142",
                "getState()": "infinite",
                "idsInThisPool(uint256)": "6855",
                "owner()": "2621",
                "renounceOwnership()": "28261",
                "rugpull()": "infinite",
                "setFrensPoolShare(address)": "26639",
                "setPubKey(bytes)": "infinite",
                "stake(bytes,bytes,bytes,bytes32)": "infinite",
                "totalDeposits()": "2512",
                "transferOwnership(address)": "28564",
                "unstake()": "infinite",
                "validatorPubKey()": "infinite",
                "withdraw(uint256,uint256)": "infinite"
              },
              "internal": {
                "_getShare(uint256,uint256)": "6616",
                "_toWithdrawalCred(address)": "infinite"
              }
            },
            "methodIdentifiers": {
              "addToDeposit(uint256)": "8620891c",
              "deposit(address)": "f340fa01",
              "depositAmount(uint256)": "87f8ab26",
              "depositContractAddress()": "2a4dbd2b",
              "distribute()": "e4fc6b6d",
              "getDepositAmount(uint256)": "378de45b",
              "getDistributableShare(uint256)": "678e300a",
              "getPubKey()": "4ad02ef1",
              "getShare(uint256)": "cfb5a5f8",
              "getState()": "1865c57d",
              "idsInThisPool(uint256)": "82a790cf",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "rugpull()": "e2664e49",
              "setFrensPoolShare(address)": "2edaf74d",
              "setPubKey(bytes)": "e32d2913",
              "stake(bytes,bytes,bytes,bytes32)": "4b2b4e36",
              "totalDeposits()": "7d882097",
              "transferOwnership(address)": "f2fde38b",
              "unstake()": "2def6620",
              "validatorPubKey()": "7be0b4a0",
              "withdraw(uint256,uint256)": "441a3e70"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositContractAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"frensPoolShareAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDistributableShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPubKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idsInThisPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rugpull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"frensPoolShareAddress_\",\"type\":\"address\"}],\"name\":\"setFrensPoolShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"setPubKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorPubKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPool.sol\":\"StakingPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\",\"keccak256\":\"0xf0f689f041c9970ece22ba42dc66cacf2aee78699e1eab26658becb738322356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"./interfaces/IStakingPoolFactory.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\n\\n\\ncontract StakingPool is Ownable {\\n\\n  event Deposit(address depositContractAddress, address caller);\\n\\n  mapping (uint => uint) public depositAmount;\\n  uint public totalDeposits;\\n  uint[] public idsInThisPool;\\n\\n  enum State { acceptingDeposits, staked, exited }\\n  State currentState;\\n\\n  address public depositContractAddress;\\n  address private rightfulOwner;\\n  bytes public validatorPubKey;\\n\\n  IDepositContract depositContract;\\n  IStakingPoolFactory factoryContract;\\n  IFrensPoolShare frensPoolShare;\\n\\n  constructor(address depositContractAddress_, address factory_, address frensPoolShareAddress_) {\\n    currentState = State.acceptingDeposits;\\n    depositContractAddress = depositContractAddress_;\\n    depositContract = IDepositContract(depositContractAddress);\\n    factoryContract = IStakingPoolFactory(factory_);\\n    frensPoolShare = IFrensPoolShare(frensPoolShareAddress_);\\n\\n  }\\n\\n  function deposit(address userAddress) public payable {\\n    require(currentState == State.acceptingDeposits, \\\"not accepting deposits\\\");\\n    require(msg.value != 0, \\\"must deposit ether\\\");\\n    uint id = frensPoolShare.incrementTokenId();\\n    depositAmount[id] = msg.value;\\n    totalDeposits += msg.value;\\n    idsInThisPool.push(id);\\n    frensPoolShare.mint(userAddress, id, address(this));\\n  }\\n\\n  function addToDeposit(uint _id) public payable {\\n    require(frensPoolShare.exists(_id), \\\"not exist\\\");\\n    require(frensPoolShare.getPoolById(_id) == address(this), \\\"wrong staking pool\\\");\\n    require(currentState == State.acceptingDeposits, \\\"not accepting deposits\\\");\\n    require(currentState == State.acceptingDeposits);\\n    depositAmount[_id] += msg.value;\\n    totalDeposits += msg.value;\\n  }\\n\\n  function withdraw(uint _id, uint _amount) public {\\n    require(currentState != State.staked, \\\"cannot withdraw once staked\\\");\\n    require(msg.sender == frensPoolShare.ownerOf(_id), \\\"not the owner\\\");\\n    require(depositAmount[_id] >= _amount, \\\"not enough deposited\\\");\\n    depositAmount[_id] -= _amount;\\n    totalDeposits -= _amount;\\n    payable(msg.sender).transfer(_amount);\\n  }\\n\\n  function distribute() public {\\n    require(currentState == State.staked, \\\"use withdraw when not staked\\\");\\n    uint contractBalance = address(this).balance;\\n    require(contractBalance > 100, \\\"minimum of 100 wei to distribute\\\");\\n    for(uint i=0; i<idsInThisPool.length; i++) {\\n      uint id = idsInThisPool[i];\\n      address tokenOwner = frensPoolShare.ownerOf(id);\\n      uint share = _getShare(id, contractBalance);\\n      payable(tokenOwner).transfer(share);\\n    }\\n  }\\n\\n  function _getShare(uint _id, uint _contractBalance) internal view returns(uint) {\\n    if(depositAmount[_id] == 0) return 0;\\n    uint calcedShare =  _contractBalance * depositAmount[_id] / totalDeposits;\\n    if(calcedShare > 1){\\n      return(calcedShare - 1); //steal 1 wei to avoid rounding errors drawing balance negative\\n    }else return 0;\\n  }\\n\\n  function getShare(uint _id) public view returns(uint) {\\n    uint contractBalance = address(this).balance;\\n    return _getShare(_id, contractBalance);\\n  }\\n\\n  function getDistributableShare(uint _id) public view returns(uint) {\\n    if(currentState == State.acceptingDeposits) {\\n      return 0;\\n    } else {\\n      return getShare(_id);\\n    }\\n  }\\n\\n  function getPubKey() public view returns(bytes memory){\\n    return validatorPubKey;\\n  }\\n\\n  function setPubKey(bytes memory publicKey) public onlyOwner{\\n    validatorPubKey = publicKey;\\n  }\\n\\n  function getState() public view returns(string memory){\\n    if(currentState == State.staked) return \\\"staked\\\";\\n    if(currentState == State.acceptingDeposits) return \\\"accepting deposits\\\";\\n    if(currentState == State.exited) return \\\"exited\\\";\\n    return \\\"state failure\\\"; //should never happen\\n  }\\n\\n  function getDepositAmount(uint _id) public view returns(uint){\\n    return depositAmount[_id];\\n  }\\n\\n\\n  function stake(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) public onlyOwner{\\n    require(address(this).balance >= 32 ether, \\\"not enough eth\\\");\\n    require(currentState == State.acceptingDeposits, \\\"wrong state\\\");\\n    bytes memory zero;\\n    if(keccak256(validatorPubKey) != keccak256(zero)){\\n      require(keccak256(validatorPubKey) == keccak256(pubkey), \\\"pubkey does not match stored value\\\");\\n    } else validatorPubKey = pubkey;\\n    currentState = State.staked;\\n    uint value = 32 ether;\\n    //get expected withdrawal_credentials based on contract address\\n    bytes memory withdrawalCredFromAddr = _toWithdrawalCred(address(this));\\n    //compare expected withdrawal_credentials to provided\\n    require(keccak256(withdrawal_credentials) == keccak256(withdrawalCredFromAddr), \\\"withdrawal credential mismatch\\\");\\n    depositContract.deposit{value: value}(pubkey, withdrawal_credentials, signature, deposit_data_root);\\n    emit Deposit(depositContractAddress, msg.sender);\\n  }\\n\\n  function _toWithdrawalCred(address a) private pure returns (bytes memory) {\\n    uint uintFromAddress = uint256(uint160(a));\\n    bytes memory withdralDesired = abi.encodePacked(uintFromAddress + 0x0100000000000000000000000000000000000000000000000000000000000000);\\n    return withdralDesired;\\n  }\\n\\n//REMOVE rugpull is for testing only and should not be in the mainnet version\\n  function rugpull() public onlyOwner{\\n    payable(msg.sender).transfer(address(this).balance);\\n  }\\n//REMOVE setFrensPoolShare is for testing only and should not be in the mainnet version\\n  function setFrensPoolShare(address frensPoolShareAddress_) public onlyOwner {\\n    frensPoolShare = IFrensPoolShare(frensPoolShareAddress_);\\n  }\\n\\n  function unstake() public {\\n    distribute();\\n    currentState = State.exited;\\n    //TODO what else needs to be in here (probably a limiting modifier and/or some requires)\\n  }\\n\\n\\n  // to support receiving ETH by default\\n  receive() external payable {\\n    /*\\n    _tokenId++;\\n    uint256 id = _tokenId;\\n    depositAmount[id] = msg.value;\\n    _mint(msg.sender, id);\\n    */\\n  }\\n\\n  fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x06c3b6e938c569f7fd3cf2f1603a22a6d973d78eac76eb4061b8dc69a886f4a9\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"\\npragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IDepositContract {\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n}\\n\",\"keccak256\":\"0x4b619bae881edf06faa291e696d317c2321d9f315352439ab34e00f570a012c1\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensPoolShare.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\n\\ninterface IFrensPoolShare is IERC721Enumerable{\\n  function incrementTokenId() external returns(uint);\\n\\n  function mint(address userAddress, uint id, address _pool) external;\\n\\n  function exists(uint _id) external returns(bool);\\n\\n  function getPoolById(uint _id) external view returns(address);\\n\\n\\n}\\n\",\"keccak256\":\"0x07640dc8de1a1f5294413f60018e044f78ca3298c7a1ec91b6df4f8ae119b08e\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPoolFactory.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IStakingPoolFactory {\\n\\n  function doesStakingPoolExist(address stakingPoolAddress) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x5291fed439a327be5ddb12cce60acf5641d4e04109c5d2c8bdcdc5098d9fa58f\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 7,
                "contract": "contracts/StakingPool.sol:StakingPool",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 2900,
                "contract": "contracts/StakingPool.sol:StakingPool",
                "label": "depositAmount",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "astId": 2902,
                "contract": "contracts/StakingPool.sol:StakingPool",
                "label": "totalDeposits",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 2905,
                "contract": "contracts/StakingPool.sol:StakingPool",
                "label": "idsInThisPool",
                "offset": 0,
                "slot": "3",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "astId": 2912,
                "contract": "contracts/StakingPool.sol:StakingPool",
                "label": "currentState",
                "offset": 0,
                "slot": "4",
                "type": "t_enum(State)2909"
              },
              {
                "astId": 2914,
                "contract": "contracts/StakingPool.sol:StakingPool",
                "label": "depositContractAddress",
                "offset": 1,
                "slot": "4",
                "type": "t_address"
              },
              {
                "astId": 2916,
                "contract": "contracts/StakingPool.sol:StakingPool",
                "label": "rightfulOwner",
                "offset": 0,
                "slot": "5",
                "type": "t_address"
              },
              {
                "astId": 2918,
                "contract": "contracts/StakingPool.sol:StakingPool",
                "label": "validatorPubKey",
                "offset": 0,
                "slot": "6",
                "type": "t_bytes_storage"
              },
              {
                "astId": 2921,
                "contract": "contracts/StakingPool.sol:StakingPool",
                "label": "depositContract",
                "offset": 0,
                "slot": "7",
                "type": "t_contract(IDepositContract)3815"
              },
              {
                "astId": 2924,
                "contract": "contracts/StakingPool.sol:StakingPool",
                "label": "factoryContract",
                "offset": 0,
                "slot": "8",
                "type": "t_contract(IStakingPoolFactory)4130"
              },
              {
                "astId": 2927,
                "contract": "contracts/StakingPool.sol:StakingPool",
                "label": "frensPoolShare",
                "offset": 0,
                "slot": "9",
                "type": "t_contract(IFrensPoolShare)3849"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_uint256)dyn_storage": {
                "base": "t_uint256",
                "encoding": "dynamic_array",
                "label": "uint256[]",
                "numberOfBytes": "32"
              },
              "t_bytes_storage": {
                "encoding": "bytes",
                "label": "bytes",
                "numberOfBytes": "32"
              },
              "t_contract(IDepositContract)3815": {
                "encoding": "inplace",
                "label": "contract IDepositContract",
                "numberOfBytes": "20"
              },
              "t_contract(IFrensPoolShare)3849": {
                "encoding": "inplace",
                "label": "contract IFrensPoolShare",
                "numberOfBytes": "20"
              },
              "t_contract(IStakingPoolFactory)4130": {
                "encoding": "inplace",
                "label": "contract IStakingPoolFactory",
                "numberOfBytes": "20"
              },
              "t_enum(State)2909": {
                "encoding": "inplace",
                "label": "enum StakingPool.State",
                "numberOfBytes": "1"
              },
              "t_mapping(t_uint256,t_uint256)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "contracts/StakingPoolFactory.sol": {
        "StakingPoolFactory": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "depContAddress_",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "ssvRegistryAddress_",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "contractId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "creator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "depositContractAddress",
                  "type": "address"
                }
              ],
              "name": "Create",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address[]",
                  "name": "owners",
                  "type": "address[]"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "signaturesRequired",
                  "type": "uint256"
                }
              ],
              "name": "Owners",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner_",
                  "type": "address"
                }
              ],
              "name": "create",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_stakingPoolAddress",
                  "type": "address"
                }
              ],
              "name": "doesStakingPoolExist",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_index",
                  "type": "uint256"
                }
              ],
              "name": "getStakingPool",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "stakingPoolAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "numberOfStakingPools",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "frensPoolShareAddress_",
                  "type": "address"
                }
              ],
              "name": "setFrensPoolShare",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "stakingPools",
              "outputs": [
                {
                  "internalType": "contract StakingPool",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 222,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "6080346100c357601f61202838819003918201601f19168301916001600160401b038311848410176100c85780849260409485528339810103126100c357610052602061004b836100de565b92016100de565b60008054336001600160a01b0319808316821784556040519590946001600160a01b03949093859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09089a31683600354161760035516906004541617600455611f3590816100f38239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100c35756fe60406080815260048036101561001457600080fd5b600091823560e01c80632edaf74d146105885780635aad6cf0146105315780636202d39614610512578063715018a6146104b257806376f42f8a146104735780638da5cb5b1461044b5780639ed9331814610240578063a2b44d75146101525763f2fde38b1461008357600080fd5b3461014e57602036600319011261014e5781356001600160a01b03818116929183900361014a578454908116936100bb338614610625565b83156100f857506001600160a01b0319168217845551917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b608490602084519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b503461014e576020918260031936011261023c5761017081356105d8565b90548351638da5cb5b60e01b815260039290921b1c6001600160a01b039081169490929185319190818185818a5afa9384156102325788946101c2575b50506060965084519586528501521690820152f35b9091809450903d851161022a575b601f8201601f191683019067ffffffffffffffff8211848310176102175750849183918852810103126102135751838116810361021357606096509138806101ad565b8680fd5b634e487b7160e01b8a5260419052602489fd5b3d91506101d0565b86513d8a823e3d90fd5b8380fd5b50919034610447576020366003190112610447576001600160a01b03918135908382169081830361044457600154938560035416866005541688519061188f928383019067ffffffffffffffff948483108684111761043157918493916102c79361067186396001600160a01b039081168252306020830152909116604082015260600190565b039084f08015610427576001546801000000000000000081101561041457906102fb8260018b9897969594016001556105d8565b99909116809982549060031b88811b9283911b169119161790558783526002602052888320600160ff19825416179055873b1561014e5788519363f2fde38b60e01b8552828501528284602481838c5af1801561040a579187959391899795936103b8575b505060035489513381526001600160a01b03958616602082015293169093166040830152507f18cc83251b20febb5b0c01f457a3e15b6e2eb22f48b01a0b9e5a24012cc2f6929150606090a382519182526020820152f35b919395509180949650116103f75750508552839183917f18cc83251b20febb5b0c01f457a3e15b6e2eb22f48b01a0b9e5a24012cc2f692388080610360565b634e487b7160e01b825260419052602490fd5b89513d85823e3d90fd5b634e487b7160e01b855260418452602485fd5b88513d85823e3d90fd5b634e487b7160e01b885260418752602488fd5b80fd5b5080fd5b838234610447578160031936011261044757905490516001600160a01b039091168152602090f35b50903461014e57602036600319011261014e57356001600160a01b0381169081900361014e57818360ff92602095526002855220541690519015158152f35b83823461044757816003193601126104475781546001600160a01b0381169183916104de338514610625565b6001600160a01b031916825551917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b8382346104475781600319360112610447576020906001549051908152f35b50903461014e57602036600319011261014e573560015481101561014e5760016020935260018060a01b03907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154169051908152f35b50903461014e57602036600319011261014e57356001600160a01b038181169182900361023c576105bd908454163314610625565b6bffffffffffffffffffffffff60a01b600554161760055551f35b60015481101561060f5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b1561062c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe60803461010257601f6200188f38819003918201601f19168301916001600160401b0383118484101761010757808492606094604052833981010312610102576100488161011d565b61006060406100596020850161011d565b930161011d565b600080546001600160a01b03198082163390811784556040519691956001600160a01b0395948694859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908ba360045490610100600160a81b039060081b169060018060a81b031916178060045560081c16856007541617600755168360085416176008551690600954161760095561175d9081620001328239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101025756fe6040608081526004908136101561001d575b5050361561001b57005b005b600090813560e01c80631865c57d14610fdf5780632a4dbd2b14610fb35780632def662014610f8b5780632edaf74d14610f3b578063378de45b146105b6578063441a3e7014610d915780634ad02ef114610d615780634b2b4e3614610947578063678e300a14610927578063715018a6146108c65780637be0b4a0146107ee5780637d882097146107d057806382a790cf146107975780638620891c146105de57806387f8ab26146105b65780638da5cb5b1461058f578063cfb5a5f814610563578063e2664e4914610513578063e32d2913146103de578063e4fc6b6d146103c2578063f2fde38b146102ed5763f340fa011461011c5750610011565b602092836003193601126102e9576001600160a01b03938135858116919082900361024a5760ff83541660038110156102d657610159901561129c565b341561029f579081859392876009541684875180978193632798987d60e11b83525af1938415610295578694610261575b506001908487525234848620556101a3346002546112e1565b600255600354956801000000000000000087101561024e57836101d0886001899a999899016003556111bd565b819291549060031b600019811b9283911b1691191617905560095416803b1561024a5784928360649288519687958694630d4d151360e01b865285015260248401523060448401525af1801561023d5761022957505051f35b610232906110a9565b6102395751f35b5080fd5b50505051903d90823e3d90fd5b8480fd5b634e487b7160e01b865260418352602486fd5b9080945081813d831161028e575b61027981836110ef565b8101031261028a575192600161018a565b8580fd5b503d61026f565b85513d88823e3d90fd5b9050606492519162461bcd60e51b8352820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152fd5b634e487b7160e01b865260218452602486fd5b8280fd5b5082346102e95760203660031901126102e9576001600160a01b038135818116929083900361024a57610324828654163314611251565b8215610370575060005492826bffffffffffffffffffffffff60a01b8516176000555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b50346102395781600319360112610239576103db611330565b51f35b5034610239576020806003193601126102e95767ffffffffffffffff90843582811161024a573660238201121561024a57610422903690602481890135910161120a565b9461043760018060a01b038654163314611251565b855192831161050057506104558261045060065461106f565b6115c6565b80601f83116001146104905750839482939492610485575b50508160011b916000199060031b1c19161760065551f35b01519050388061046d565b60068552601f19831695600080516020611708833981519152929186905b8882106104e8575050836001959697106104cf575b505050811b0160065551f35b015160001960f88460031b161c191690553880806104c3565b806001859682949686015181550195019301906104ae565b634e487b7160e01b855260419052602484fd5b503461023957816003193601126102395761053860018060a01b038354163314611251565b818080804781811561055a575b3390f1156105505751f35b51903d90823e3d90fd5b506108fc610545565b50903461058c57602036600319011261058c57506105856020924790356114f4565b9051908152f35b80fd5b5034610239578160031936011261023957905490516001600160a01b039091168152602090f35b5082346102e95760203660031901126102e95760209282913581526001845220549051908152f35b50826020806003193601126106a95781359160018060a01b03858382600954166024885180948193634f558e7960e01b83528a898401525af190811561072557879161075d575b501561072f57808360249260095416875193848092630178b36760e31b825289888301525afa9182156107255787926106f6575b50309116036106c05760ff8154169060038210156106ad57501561067c8161129c565b156106a9576001918452528082206106953482546112e1565b90556106a3346002546112e1565b60025551f35b8380fd5b634e487b7160e01b865260219052602485fd5b60649184519162461bcd60e51b835282015260126024820152711ddc9bdb99c81cdd185ada5b99c81c1bdbdb60721b6044820152fd5b610717919250843d861161071e575b61070f81836110ef565b810190611304565b9087610659565b503d610705565b86513d89823e3d90fd5b5060649184519162461bcd60e51b835282015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152fd5b90508381813d8311610790575b61077481836110ef565b8101031261078c5751801515810361078c5787610625565b8680fd5b503d61076a565b5082346102e95760203660031901126102e957359160035483101561058c57506107c26020926111bd565b90549060031b1c9051908152f35b50346102395781600319360112610239576020906002549051908152f35b50903461058c578060031936011261058c575080516000916006546108128161106f565b8084529060019081811690811561089e5750600114610853575b505061083d8261084f9403836110ef565b51918291602083526020830190610ffc565b0390f35b6006600090815294506000805160206117088339815191525b828610610886575050509181016020019161083d8261082c565b8054602087870181019190915290950194810161086c565b61084f9650859250602091509261083d9360ff191682840152151560051b820101945061082c565b5034610239578160031936011261023957600060018060a01b036108ee818554163314611251565b81546001600160a01b031981168355925192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50903461058c57602036600319011261058c575061058560209235611589565b50903461058c57600319916080368401126102395767ffffffffffffffff84358181116106a95761097b903690870161103c565b60249691873584811161078c57610995903690850161103c565b9260449889359a878c11610d5d576109b68a9b9c9a98999a3690890161103c565b926109cc60018060a01b03809b54163314611251565b6801bc16d674ec80000093844710610d285760ff8a54166003811015610d1657610ce4576109f8611111565b8051602091820120606051608020919d9114610c135750610a17611111565b8c8151910120610a2836888b61120a565b8d815191012003610bc5575b895460ff19166001178a5530600160f81b8101908110610bb3578d51908d82019081528d8252610a63826110d3565b8d610a6f368d8c61120a565b80519101209151902003610b70578d9e8b9d9e999a9b60079e9d9e541697883b15610b6c578f516304512a2360e31b81526080818f01529b8c9a8b998a989291610abd9160848b01916116e6565b91868984030190890152610ad0926116e6565b928584030190850152610ae2926116e6565b606435606483015203925af1801561029557610b33575b509183917f1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a44935460081c169082519182523390820152a151f35b917f1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a44939195610b6286946110a9565b9591935091610af9565b8a80fd5b505050867f7769746864726177616c2063726564656e7469616c206d69736d6174636800008d601e6064948d8f519562461bcd60e51b8752860152840152820152fd5b634e487b7160e01b8f5260118b52848ffd5b505050867f7075626b657920646f6573206e6f74206d617463682073746f7265642076616c8d60226084948d8f519562461bcd60e51b875286015284015282015261756560f01b6064820152fd5b8611610cd257858e610c2a8261045060065461106f565b80601f8311600114610c605791610c55575b508660011b906000198860031b1c191617600655610a34565b905088013538610c3c565b6006815260008051602061170883398151915292508e5b8b601f198b168310610cbc5750505087601f19811610610ca2575b5050600186811b01600655610a34565b890135600019600389901b60f8161c191690553880610c92565b830135845560019093019291820191018e610c77565b634e487b7160e01b8e5260418a52838efd5b505050866a77726f6e6720737461746560a81b8d600b60649460208f519562461bcd60e51b8752860152840152820152fd5b634e487b7160e01b8f5260218b52848ffd5b505050866d0dcdee840cadcdeeaced040cae8d60931b8d600e60649460208f519562461bcd60e51b8752860152840152820152fd5b8980fd5b503461023957816003193601126102395761084f90610d7e611111565b9051918291602083526020830190610ffc565b5082346102e957816003193601126102e957803560249081359260ff8154166003811015610f2957600114610ee75760095485516331a9108f60e11b8152828101849052602094916001600160a01b039190869082908590829086165afa908115610edd578991610ec0575b50163303610e8e5782875260018452848688205410610e55575050848093600182948394845252858220610e32828254611323565b9055610e4081600254611323565b60025581811561055a573390f1156105505751f35b855162461bcd60e51b8152918201849052601490820152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b855162461bcd60e51b8152918201849052600d908201526c3737ba103a34329037bbb732b960991b6044820152606490fd5b610ed79150863d881161071e5761070f81836110ef565b89610dfd565b88513d8b823e3d90fd5b606490601b84602088519362461bcd60e51b85528401528201527f63616e6e6f74207769746864726177206f6e6365207374616b656400000000006044820152fd5b634e487b7160e01b8752602182528387fd5b5082346102e95760203660031901126102e957356001600160a01b03818116918290036106a957610f70908454163314611251565b6bffffffffffffffffffffffff60a01b600954161760095551f35b5082346102e957826003193601126102e957610fa5611330565b805460ff1916600217905551f35b5082346102e957826003193601126102e95754905160089190911c6001600160a01b0316815260209150f35b503461023957816003193601126102395761084f90610d7e611625565b919082519283825260005b848110611028575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611007565b9181601f8401121561106a5782359167ffffffffffffffff831161106a576020838186019501011161106a57565b600080fd5b90600182811c9216801561109f575b602083101461108957565b634e487b7160e01b600052602260045260246000fd5b91607f169161107e565b67ffffffffffffffff81116110bd57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176110bd57604052565b90601f8019910116810190811067ffffffffffffffff8211176110bd57604052565b60405190600082600654916111258361106f565b8083529260019081811690811561119b575060011461114e575b5061114c925003836110ef565b565b6006600090815291506000805160206117088339815191525b848310611180575061114c93505081016020013861113f565b81935090816020925483858a01015201910190918592611167565b90506020925061114c94915060ff191682840152151560051b8201013861113f565b6003548110156111f45760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b634e487b7160e01b600052603260045260246000fd5b92919267ffffffffffffffff82116110bd5760405191611234601f8201601f1916602001846110ef565b82948184528183011161106a578281602093846000960137010152565b1561125857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156112a357565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b919082018092116112ee57565b634e487b7160e01b600052601160045260246000fd5b9081602091031261106a57516001600160a01b038116810361106a5790565b919082039182116112ee57565b60049060ff825416600392838210156114df57600180920361149b5747606481111561145757600094835b611368575b505050509050565b80548610156114525761137a866111bd565b905490821b1c60018060a01b03806009541691604092835180916331a9108f60e11b8252838983015281602460209485935afa9182156114475793600094938594938986959486958693611424575b50506113d591926114f4565b918391831561141a575b1690f115611410575060001986146113fb57948301948361135b565b601183634e487b7160e01b6000525260246000fd5b513d6000823e3d90fd5b6108fc92506113df565b6113d59350908161144092903d1061071e5761070f81836110ef565b91386113c9565b85513d6000823e3d90fd5b611360565b60405162461bcd60e51b8152602081840181905260248201527f6d696e696d756d206f66203130302077656920746f20646973747269627574656044820152606490fd5b60649060206040519162461bcd60e51b8352820152601c60248201527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152fd5b602190634e487b7160e01b6000525260246000fd5b6000908152600160205260408120541561158457604081205460001992908115158285048211166115705760025491821561155c570204916001831115611556578201918211611542575090565b634e487b7160e01b81526011600452602490fd5b50905090565b634e487b7160e01b84526012600452602484fd5b634e487b7160e01b83526011600452602483fd5b905090565b60ff6004541660038110156115b0576115a25750600090565b6115ad9047906114f4565b90565b634e487b7160e01b600052602160045260246000fd5b601f81116115d2575050565b60009060068252600080516020611708833981519152906020601f850160051c8301941061161b575b601f0160051c01915b82811061161057505050565b818155600101611604565b90925082906115fb565b60ff6004541660038110156115b057600181146116c35780156116945760021461167257604051611655816110d3565b600d81526c7374617465206661696c75726560981b602082015290565b60405161167e816110d3565b6006815265195e1a5d195960d21b602082015290565b506040516116a1816110d3565b6012815271616363657074696e67206465706f7369747360701b602082015290565b506040516116d0816110d3565b60068152651cdd185ad95960d21b602082015290565b908060209392818452848401376000828201840152601f01601f191601019056fef652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3fa26469706673582212206aeefd5076af57ae83cc08d9c152f8ebe5871d345c074b41c6351d15740428d664736f6c63430008100033a26469706673582212209bb9977b874d7836b1c619322b73cfda86513f0fd3f546f5875074bcb23436d764736f6c63430008100033",
              "opcodes": "PUSH1 0x80 CALLVALUE PUSH2 0xC3 JUMPI PUSH1 0x1F PUSH2 0x2028 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0xC8 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0xC3 JUMPI PUSH2 0x52 PUSH1 0x20 PUSH2 0x4B DUP4 PUSH2 0xDE JUMP JUMPDEST SWAP3 ADD PUSH2 0xDE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP6 SWAP1 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP4 DUP6 SWAP4 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP10 LOG3 AND DUP4 PUSH1 0x3 SLOAD AND OR PUSH1 0x3 SSTORE AND SWAP1 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH2 0x1F35 SWAP1 DUP2 PUSH2 0xF3 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC3 JUMPI JUMP INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2EDAF74D EQ PUSH2 0x588 JUMPI DUP1 PUSH4 0x5AAD6CF0 EQ PUSH2 0x531 JUMPI DUP1 PUSH4 0x6202D396 EQ PUSH2 0x512 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x4B2 JUMPI DUP1 PUSH4 0x76F42F8A EQ PUSH2 0x473 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x44B JUMPI DUP1 PUSH4 0x9ED93318 EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xA2B44D75 EQ PUSH2 0x152 JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x14E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x14E JUMPI DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP3 SWAP2 DUP4 SWAP1 SUB PUSH2 0x14A JUMPI DUP5 SLOAD SWAP1 DUP2 AND SWAP4 PUSH2 0xBB CALLER DUP7 EQ PUSH2 0x625 JUMP JUMPDEST DUP4 ISZERO PUSH2 0xF8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR DUP5 SSTORE MLOAD SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP5 DUP5 LOG3 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x14E JUMPI PUSH1 0x20 SWAP2 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x23C JUMPI PUSH2 0x170 DUP2 CALLDATALOAD PUSH2 0x5D8 JUMP JUMPDEST SWAP1 SLOAD DUP4 MLOAD PUSH4 0x8DA5CB5B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 SWAP1 SWAP3 SWAP2 DUP6 BALANCE SWAP2 SWAP1 DUP2 DUP2 DUP6 DUP2 DUP11 GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x232 JUMPI DUP9 SWAP5 PUSH2 0x1C2 JUMPI JUMPDEST POP POP PUSH1 0x60 SWAP7 POP DUP5 MLOAD SWAP6 DUP7 MSTORE DUP6 ADD MSTORE AND SWAP1 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 SWAP2 DUP1 SWAP5 POP SWAP1 RETURNDATASIZE DUP6 GT PUSH2 0x22A JUMPI JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT DUP5 DUP4 LT OR PUSH2 0x217 JUMPI POP DUP5 SWAP2 DUP4 SWAP2 DUP9 MSTORE DUP2 ADD SUB SLT PUSH2 0x213 JUMPI MLOAD DUP4 DUP2 AND DUP2 SUB PUSH2 0x213 JUMPI PUSH1 0x60 SWAP7 POP SWAP2 CODESIZE DUP1 PUSH2 0x1AD JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1D0 JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP11 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x447 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x447 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP2 CALLDATALOAD SWAP1 DUP4 DUP3 AND SWAP1 DUP2 DUP4 SUB PUSH2 0x444 JUMPI PUSH1 0x1 SLOAD SWAP4 DUP6 PUSH1 0x3 SLOAD AND DUP7 PUSH1 0x5 SLOAD AND DUP9 MLOAD SWAP1 PUSH2 0x188F SWAP3 DUP4 DUP4 ADD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF SWAP5 DUP5 DUP4 LT DUP7 DUP5 GT OR PUSH2 0x431 JUMPI SWAP2 DUP5 SWAP4 SWAP2 PUSH2 0x2C7 SWAP4 PUSH2 0x671 DUP7 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE ADDRESS PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 DUP5 CREATE DUP1 ISZERO PUSH2 0x427 JUMPI PUSH1 0x1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x414 JUMPI SWAP1 PUSH2 0x2FB DUP3 PUSH1 0x1 DUP12 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 ADD PUSH1 0x1 SSTORE PUSH2 0x5D8 JUMP JUMPDEST SWAP10 SWAP1 SWAP2 AND DUP1 SWAP10 DUP3 SLOAD SWAP1 PUSH1 0x3 SHL DUP9 DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE DUP8 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE DUP9 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE DUP8 EXTCODESIZE ISZERO PUSH2 0x14E JUMPI DUP9 MLOAD SWAP4 PUSH4 0xF2FDE38B PUSH1 0xE0 SHL DUP6 MSTORE DUP3 DUP6 ADD MSTORE DUP3 DUP5 PUSH1 0x24 DUP2 DUP4 DUP13 GAS CALL DUP1 ISZERO PUSH2 0x40A JUMPI SWAP2 DUP8 SWAP6 SWAP4 SWAP2 DUP10 SWAP8 SWAP6 SWAP4 PUSH2 0x3B8 JUMPI JUMPDEST POP POP PUSH1 0x3 SLOAD DUP10 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP4 AND SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH32 0x18CC83251B20FEBB5B0C01F457A3E15B6E2EB22F48B01A0B9E5A24012CC2F692 SWAP2 POP PUSH1 0x60 SWAP1 LOG3 DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST SWAP2 SWAP4 SWAP6 POP SWAP2 DUP1 SWAP5 SWAP7 POP GT PUSH2 0x3F7 JUMPI POP POP DUP6 MSTORE DUP4 SWAP2 DUP4 SWAP2 PUSH32 0x18CC83251B20FEBB5B0C01F457A3E15B6E2EB22F48B01A0B9E5A24012CC2F692 CODESIZE DUP1 DUP1 PUSH2 0x360 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP10 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 DUP5 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP9 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 DUP8 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x447 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x447 JUMPI SWAP1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x14E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x14E JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x14E JUMPI DUP2 DUP4 PUSH1 0xFF SWAP3 PUSH1 0x20 SWAP6 MSTORE PUSH1 0x2 DUP6 MSTORE KECCAK256 SLOAD AND SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x447 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x447 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 DUP4 SWAP2 PUSH2 0x4DE CALLER DUP6 EQ PUSH2 0x625 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 SSTORE MLOAD SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP5 LOG3 RETURN JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x447 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x447 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x1 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x14E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x14E JUMPI CALLDATALOAD PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x14E JUMPI PUSH1 0x1 PUSH1 0x20 SWAP4 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 ADD SLOAD AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x14E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x14E JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0x23C JUMPI PUSH2 0x5BD SWAP1 DUP5 SLOAD AND CALLER EQ PUSH2 0x625 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL PUSH1 0x5 SLOAD AND OR PUSH1 0x5 SSTORE MLOAD RETURN JUMPDEST PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x60F JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x62C JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT INVALID PUSH1 0x80 CALLVALUE PUSH2 0x102 JUMPI PUSH1 0x1F PUSH3 0x188F CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x107 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x60 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x102 JUMPI PUSH2 0x48 DUP2 PUSH2 0x11D JUMP JUMPDEST PUSH2 0x60 PUSH1 0x40 PUSH2 0x59 PUSH1 0x20 DUP6 ADD PUSH2 0x11D JUMP JUMPDEST SWAP4 ADD PUSH2 0x11D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP3 AND CALLER SWAP1 DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP7 SWAP2 SWAP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP5 DUP7 SWAP5 DUP6 SWAP4 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP12 LOG3 PUSH1 0x4 SLOAD SWAP1 PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB SWAP1 PUSH1 0x8 SHL AND SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA8 SHL SUB NOT AND OR DUP1 PUSH1 0x4 SSTORE PUSH1 0x8 SHR AND DUP6 PUSH1 0x7 SLOAD AND OR PUSH1 0x7 SSTORE AND DUP4 PUSH1 0x8 SLOAD AND OR PUSH1 0x8 SSTORE AND SWAP1 PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE PUSH2 0x175D SWAP1 DUP2 PUSH3 0x132 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x102 JUMPI JUMP INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI STOP JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1865C57D EQ PUSH2 0xFDF JUMPI DUP1 PUSH4 0x2A4DBD2B EQ PUSH2 0xFB3 JUMPI DUP1 PUSH4 0x2DEF6620 EQ PUSH2 0xF8B JUMPI DUP1 PUSH4 0x2EDAF74D EQ PUSH2 0xF3B JUMPI DUP1 PUSH4 0x378DE45B EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0x441A3E70 EQ PUSH2 0xD91 JUMPI DUP1 PUSH4 0x4AD02EF1 EQ PUSH2 0xD61 JUMPI DUP1 PUSH4 0x4B2B4E36 EQ PUSH2 0x947 JUMPI DUP1 PUSH4 0x678E300A EQ PUSH2 0x927 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x8C6 JUMPI DUP1 PUSH4 0x7BE0B4A0 EQ PUSH2 0x7EE JUMPI DUP1 PUSH4 0x7D882097 EQ PUSH2 0x7D0 JUMPI DUP1 PUSH4 0x82A790CF EQ PUSH2 0x797 JUMPI DUP1 PUSH4 0x8620891C EQ PUSH2 0x5DE JUMPI DUP1 PUSH4 0x87F8AB26 EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x58F JUMPI DUP1 PUSH4 0xCFB5A5F8 EQ PUSH2 0x563 JUMPI DUP1 PUSH4 0xE2664E49 EQ PUSH2 0x513 JUMPI DUP1 PUSH4 0xE32D2913 EQ PUSH2 0x3DE JUMPI DUP1 PUSH4 0xE4FC6B6D EQ PUSH2 0x3C2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2ED JUMPI PUSH4 0xF340FA01 EQ PUSH2 0x11C JUMPI POP PUSH2 0x11 JUMP JUMPDEST PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP2 CALLDATALOAD DUP6 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x24A JUMPI PUSH1 0xFF DUP4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D6 JUMPI PUSH2 0x159 SWAP1 ISZERO PUSH2 0x129C JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x29F JUMPI SWAP1 DUP2 DUP6 SWAP4 SWAP3 DUP8 PUSH1 0x9 SLOAD AND DUP5 DUP8 MLOAD DUP1 SWAP8 DUP2 SWAP4 PUSH4 0x2798987D PUSH1 0xE1 SHL DUP4 MSTORE GAS CALL SWAP4 DUP5 ISZERO PUSH2 0x295 JUMPI DUP7 SWAP5 PUSH2 0x261 JUMPI JUMPDEST POP PUSH1 0x1 SWAP1 DUP5 DUP8 MSTORE MSTORE CALLVALUE DUP5 DUP7 KECCAK256 SSTORE PUSH2 0x1A3 CALLVALUE PUSH1 0x2 SLOAD PUSH2 0x12E1 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD SWAP6 PUSH9 0x10000000000000000 DUP8 LT ISZERO PUSH2 0x24E JUMPI DUP4 PUSH2 0x1D0 DUP9 PUSH1 0x1 DUP10 SWAP11 SWAP10 SWAP9 SWAP10 ADD PUSH1 0x3 SSTORE PUSH2 0x11BD JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL PUSH1 0x0 NOT DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE PUSH1 0x9 SLOAD AND DUP1 EXTCODESIZE ISZERO PUSH2 0x24A JUMPI DUP5 SWAP3 DUP4 PUSH1 0x64 SWAP3 DUP9 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0xD4D1513 PUSH1 0xE0 SHL DUP7 MSTORE DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE ADDRESS PUSH1 0x44 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x23D JUMPI PUSH2 0x229 JUMPI POP POP MLOAD RETURN JUMPDEST PUSH2 0x232 SWAP1 PUSH2 0x10A9 JUMP JUMPDEST PUSH2 0x239 JUMPI MLOAD RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP POP MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 DUP4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP1 DUP1 SWAP5 POP DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x28E JUMPI JUMPDEST PUSH2 0x279 DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x28A JUMPI MLOAD SWAP3 PUSH1 0x1 PUSH2 0x18A JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x26F JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x36BAB9BA103232B837B9B4BA1032BA3432B9 PUSH1 0x71 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 DUP5 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 DUP2 AND SWAP3 SWAP1 DUP4 SWAP1 SUB PUSH2 0x24A JUMPI PUSH2 0x324 DUP3 DUP7 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x370 JUMPI POP PUSH1 0x0 SLOAD SWAP3 DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP6 AND OR PUSH1 0x0 SSTORE MLOAD SWAP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP5 LOG3 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP6 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x3DB PUSH2 0x1330 JUMP JUMPDEST MLOAD RETURN JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP5 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x24A JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x24A JUMPI PUSH2 0x422 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 DUP2 DUP10 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x120A JUMP JUMPDEST SWAP5 PUSH2 0x437 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP6 MLOAD SWAP3 DUP4 GT PUSH2 0x500 JUMPI POP PUSH2 0x455 DUP3 PUSH2 0x450 PUSH1 0x6 SLOAD PUSH2 0x106F JUMP JUMPDEST PUSH2 0x15C6 JUMP JUMPDEST DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x490 JUMPI POP DUP4 SWAP5 DUP3 SWAP4 SWAP5 SWAP3 PUSH2 0x485 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x6 SSTORE MLOAD RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x46D JUMP JUMPDEST PUSH1 0x6 DUP6 MSTORE PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP7 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x4E8 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x4CF JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x6 SSTORE MLOAD RETURN JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x4C3 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x4AE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x538 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP2 DUP1 DUP1 DUP1 SELFBALANCE DUP2 DUP2 ISZERO PUSH2 0x55A JUMPI JUMPDEST CALLER SWAP1 CALL ISZERO PUSH2 0x550 JUMPI MLOAD RETURN JUMPDEST MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH2 0x545 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x58C JUMPI POP PUSH2 0x585 PUSH1 0x20 SWAP3 SELFBALANCE SWAP1 CALLDATALOAD PUSH2 0x14F4 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI SWAP1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI PUSH1 0x20 SWAP3 DUP3 SWAP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP3 PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x6A9 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 DUP4 DUP3 PUSH1 0x9 SLOAD AND PUSH1 0x24 DUP9 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x4F558E79 PUSH1 0xE0 SHL DUP4 MSTORE DUP11 DUP10 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x725 JUMPI DUP8 SWAP2 PUSH2 0x75D JUMPI JUMPDEST POP ISZERO PUSH2 0x72F JUMPI DUP1 DUP4 PUSH1 0x24 SWAP3 PUSH1 0x9 SLOAD AND DUP8 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x178B367 PUSH1 0xE3 SHL DUP3 MSTORE DUP10 DUP9 DUP4 ADD MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x725 JUMPI DUP8 SWAP3 PUSH2 0x6F6 JUMPI JUMPDEST POP ADDRESS SWAP2 AND SUB PUSH2 0x6C0 JUMPI PUSH1 0xFF DUP2 SLOAD AND SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x6AD JUMPI POP ISZERO PUSH2 0x67C DUP2 PUSH2 0x129C JUMP JUMPDEST ISZERO PUSH2 0x6A9 JUMPI PUSH1 0x1 SWAP2 DUP5 MSTORE MSTORE DUP1 DUP3 KECCAK256 PUSH2 0x695 CALLVALUE DUP3 SLOAD PUSH2 0x12E1 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x6A3 CALLVALUE PUSH1 0x2 SLOAD PUSH2 0x12E1 JUMP JUMPDEST PUSH1 0x2 SSTORE MLOAD RETURN JUMPDEST DUP4 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 SWAP1 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH1 0x64 SWAP2 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1DDC9BDB99C81CDD185ADA5B99C81C1BDBDB PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x717 SWAP2 SWAP3 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x71E JUMPI JUMPDEST PUSH2 0x70F DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1304 JUMP JUMPDEST SWAP1 DUP8 PUSH2 0x659 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x705 JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH1 0x64 SWAP2 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x1B9BDD08195E1A5CDD PUSH1 0xBA SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x790 JUMPI JUMPDEST PUSH2 0x774 DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x78C JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x78C JUMPI DUP8 PUSH2 0x625 JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x76A JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI CALLDATALOAD SWAP2 PUSH1 0x3 SLOAD DUP4 LT ISZERO PUSH2 0x58C JUMPI POP PUSH2 0x7C2 PUSH1 0x20 SWAP3 PUSH2 0x11BD JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x58C JUMPI POP DUP1 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x6 SLOAD PUSH2 0x812 DUP2 PUSH2 0x106F JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x89E JUMPI POP PUSH1 0x1 EQ PUSH2 0x853 JUMPI JUMPDEST POP POP PUSH2 0x83D DUP3 PUSH2 0x84F SWAP5 SUB DUP4 PUSH2 0x10EF JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xFFC JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP5 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST DUP3 DUP7 LT PUSH2 0x886 JUMPI POP POP POP SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 PUSH2 0x83D DUP3 PUSH2 0x82C JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0x86C JUMP JUMPDEST PUSH2 0x84F SWAP7 POP DUP6 SWAP3 POP PUSH1 0x20 SWAP2 POP SWAP3 PUSH2 0x83D SWAP4 PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 POP PUSH2 0x82C JUMP JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x8EE DUP2 DUP6 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 SSTORE SWAP3 MLOAD SWAP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP5 LOG3 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x58C JUMPI POP PUSH2 0x585 PUSH1 0x20 SWAP3 CALLDATALOAD PUSH2 0x1589 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI PUSH1 0x3 NOT SWAP2 PUSH1 0x80 CALLDATASIZE DUP5 ADD SLT PUSH2 0x239 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP5 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x6A9 JUMPI PUSH2 0x97B SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x103C JUMP JUMPDEST PUSH1 0x24 SWAP7 SWAP2 DUP8 CALLDATALOAD DUP5 DUP2 GT PUSH2 0x78C JUMPI PUSH2 0x995 SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x103C JUMP JUMPDEST SWAP3 PUSH1 0x44 SWAP9 DUP10 CALLDATALOAD SWAP11 DUP8 DUP13 GT PUSH2 0xD5D JUMPI PUSH2 0x9B6 DUP11 SWAP12 SWAP13 SWAP11 SWAP9 SWAP10 SWAP11 CALLDATASIZE SWAP1 DUP10 ADD PUSH2 0x103C JUMP JUMPDEST SWAP3 PUSH2 0x9CC PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP12 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST PUSH9 0x1BC16D674EC800000 SWAP4 DUP5 SELFBALANCE LT PUSH2 0xD28 JUMPI PUSH1 0xFF DUP11 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xD16 JUMPI PUSH2 0xCE4 JUMPI PUSH2 0x9F8 PUSH2 0x1111 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x60 MLOAD PUSH1 0x80 KECCAK256 SWAP2 SWAP14 SWAP2 EQ PUSH2 0xC13 JUMPI POP PUSH2 0xA17 PUSH2 0x1111 JUMP JUMPDEST DUP13 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH2 0xA28 CALLDATASIZE DUP9 DUP12 PUSH2 0x120A JUMP JUMPDEST DUP14 DUP2 MLOAD SWAP2 ADD KECCAK256 SUB PUSH2 0xBC5 JUMPI JUMPDEST DUP10 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP11 SSTORE ADDRESS PUSH1 0x1 PUSH1 0xF8 SHL DUP2 ADD SWAP1 DUP2 LT PUSH2 0xBB3 JUMPI DUP14 MLOAD SWAP1 DUP14 DUP3 ADD SWAP1 DUP2 MSTORE DUP14 DUP3 MSTORE PUSH2 0xA63 DUP3 PUSH2 0x10D3 JUMP JUMPDEST DUP14 PUSH2 0xA6F CALLDATASIZE DUP14 DUP13 PUSH2 0x120A JUMP JUMPDEST DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP2 MLOAD SWAP1 KECCAK256 SUB PUSH2 0xB70 JUMPI DUP14 SWAP15 DUP12 SWAP14 SWAP15 SWAP10 SWAP11 SWAP12 PUSH1 0x7 SWAP15 SWAP14 SWAP15 SLOAD AND SWAP8 DUP9 EXTCODESIZE ISZERO PUSH2 0xB6C JUMPI DUP16 MLOAD PUSH4 0x4512A23 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x80 DUP2 DUP16 ADD MSTORE SWAP12 DUP13 SWAP11 DUP12 SWAP10 DUP11 SWAP9 SWAP3 SWAP2 PUSH2 0xABD SWAP2 PUSH1 0x84 DUP12 ADD SWAP2 PUSH2 0x16E6 JUMP JUMPDEST SWAP2 DUP7 DUP10 DUP5 SUB ADD SWAP1 DUP10 ADD MSTORE PUSH2 0xAD0 SWAP3 PUSH2 0x16E6 JUMP JUMPDEST SWAP3 DUP6 DUP5 SUB ADD SWAP1 DUP6 ADD MSTORE PUSH2 0xAE2 SWAP3 PUSH2 0x16E6 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x64 DUP4 ADD MSTORE SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x295 JUMPI PUSH2 0xB33 JUMPI JUMPDEST POP SWAP2 DUP4 SWAP2 PUSH32 0x1944DEBB24A9AAFCF2708BE964E412CDB73FC36D6EA24577FD8DCC05B93B4A44 SWAP4 SLOAD PUSH1 0x8 SHR AND SWAP1 DUP3 MLOAD SWAP2 DUP3 MSTORE CALLER SWAP1 DUP3 ADD MSTORE LOG1 MLOAD RETURN JUMPDEST SWAP2 PUSH32 0x1944DEBB24A9AAFCF2708BE964E412CDB73FC36D6EA24577FD8DCC05B93B4A44 SWAP4 SWAP2 SWAP6 PUSH2 0xB62 DUP7 SWAP5 PUSH2 0x10A9 JUMP JUMPDEST SWAP6 SWAP2 SWAP4 POP SWAP2 PUSH2 0xAF9 JUMP JUMPDEST DUP11 DUP1 REVERT JUMPDEST POP POP POP DUP7 PUSH32 0x7769746864726177616C2063726564656E7469616C206D69736D617463680000 DUP14 PUSH1 0x1E PUSH1 0x64 SWAP5 DUP14 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP16 MSTORE PUSH1 0x11 DUP12 MSTORE DUP5 DUP16 REVERT JUMPDEST POP POP POP DUP7 PUSH32 0x7075626B657920646F6573206E6F74206D617463682073746F7265642076616C DUP14 PUSH1 0x22 PUSH1 0x84 SWAP5 DUP14 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP7 GT PUSH2 0xCD2 JUMPI DUP6 DUP15 PUSH2 0xC2A DUP3 PUSH2 0x450 PUSH1 0x6 SLOAD PUSH2 0x106F JUMP JUMPDEST DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xC60 JUMPI SWAP2 PUSH2 0xC55 JUMPI JUMPDEST POP DUP7 PUSH1 0x1 SHL SWAP1 PUSH1 0x0 NOT DUP9 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x6 SSTORE PUSH2 0xA34 JUMP JUMPDEST SWAP1 POP DUP9 ADD CALLDATALOAD CODESIZE PUSH2 0xC3C JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 POP DUP15 JUMPDEST DUP12 PUSH1 0x1F NOT DUP12 AND DUP4 LT PUSH2 0xCBC JUMPI POP POP POP DUP8 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xCA2 JUMPI JUMPDEST POP POP PUSH1 0x1 DUP7 DUP2 SHL ADD PUSH1 0x6 SSTORE PUSH2 0xA34 JUMP JUMPDEST DUP10 ADD CALLDATALOAD PUSH1 0x0 NOT PUSH1 0x3 DUP10 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH2 0xC92 JUMP JUMPDEST DUP4 ADD CALLDATALOAD DUP5 SSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 ADD DUP15 PUSH2 0xC77 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP15 MSTORE PUSH1 0x41 DUP11 MSTORE DUP4 DUP15 REVERT JUMPDEST POP POP POP DUP7 PUSH11 0x77726F6E67207374617465 PUSH1 0xA8 SHL DUP14 PUSH1 0xB PUSH1 0x64 SWAP5 PUSH1 0x20 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP16 MSTORE PUSH1 0x21 DUP12 MSTORE DUP5 DUP16 REVERT JUMPDEST POP POP POP DUP7 PUSH14 0xDCDEE840CADCDEEACED040CAE8D PUSH1 0x93 SHL DUP14 PUSH1 0xE PUSH1 0x64 SWAP5 PUSH1 0x20 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST DUP10 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x84F SWAP1 PUSH2 0xD7E PUSH2 0x1111 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xFFC JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI DUP1 CALLDATALOAD PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP3 PUSH1 0xFF DUP2 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xF29 JUMPI PUSH1 0x1 EQ PUSH2 0xEE7 JUMPI PUSH1 0x9 SLOAD DUP6 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE DUP3 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x20 SWAP5 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 DUP7 SWAP1 DUP3 SWAP1 DUP6 SWAP1 DUP3 SWAP1 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xEDD JUMPI DUP10 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP AND CALLER SUB PUSH2 0xE8E JUMPI DUP3 DUP8 MSTORE PUSH1 0x1 DUP5 MSTORE DUP5 DUP7 DUP9 KECCAK256 SLOAD LT PUSH2 0xE55 JUMPI POP POP DUP5 DUP1 SWAP4 PUSH1 0x1 DUP3 SWAP5 DUP4 SWAP5 DUP5 MSTORE MSTORE DUP6 DUP3 KECCAK256 PUSH2 0xE32 DUP3 DUP3 SLOAD PUSH2 0x1323 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xE40 DUP2 PUSH1 0x2 SLOAD PUSH2 0x1323 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP2 DUP2 ISZERO PUSH2 0x55A JUMPI CALLER SWAP1 CALL ISZERO PUSH2 0x550 JUMPI MLOAD RETURN JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x1B9BDD08195B9BDD59DA0819195C1BDCDA5D1959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x3737BA103A34329037BBB732B9 PUSH1 0x99 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xED7 SWAP2 POP DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x71E JUMPI PUSH2 0x70F DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP10 PUSH2 0xDFD JUMP JUMPDEST DUP9 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x1B DUP5 PUSH1 0x20 DUP9 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x63616E6E6F74207769746864726177206F6E6365207374616B65640000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x21 DUP3 MSTORE DUP4 DUP8 REVERT JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0x6A9 JUMPI PUSH2 0xF70 SWAP1 DUP5 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE MLOAD RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI PUSH2 0xFA5 PUSH2 0x1330 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x2 OR SWAP1 SSTORE MLOAD RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI SLOAD SWAP1 MLOAD PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP2 POP RETURN JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x84F SWAP1 PUSH2 0xD7E PUSH2 0x1625 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x1028 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1007 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x106A JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x106A JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x106A JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x109F JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1089 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x107E JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x10BD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x10BD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x10BD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP3 PUSH1 0x6 SLOAD SWAP2 PUSH2 0x1125 DUP4 PUSH2 0x106F JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x119B JUMPI POP PUSH1 0x1 EQ PUSH2 0x114E JUMPI JUMPDEST POP PUSH2 0x114C SWAP3 POP SUB DUP4 PUSH2 0x10EF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST DUP5 DUP4 LT PUSH2 0x1180 JUMPI POP PUSH2 0x114C SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x113F JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 SWAP3 PUSH2 0x1167 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x114C SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x113F JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0x11F4 JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x10BD JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1234 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x10EF JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x106A JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x1258 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x12A3 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x6E6F7420616363657074696E67206465706F73697473 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x12EE JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x106A JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x106A JUMPI SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x12EE JUMPI JUMP JUMPDEST PUSH1 0x4 SWAP1 PUSH1 0xFF DUP3 SLOAD AND PUSH1 0x3 SWAP3 DUP4 DUP3 LT ISZERO PUSH2 0x14DF JUMPI PUSH1 0x1 DUP1 SWAP3 SUB PUSH2 0x149B JUMPI SELFBALANCE PUSH1 0x64 DUP2 GT ISZERO PUSH2 0x1457 JUMPI PUSH1 0x0 SWAP5 DUP4 JUMPDEST PUSH2 0x1368 JUMPI JUMPDEST POP POP POP POP SWAP1 POP JUMP JUMPDEST DUP1 SLOAD DUP7 LT ISZERO PUSH2 0x1452 JUMPI PUSH2 0x137A DUP7 PUSH2 0x11BD JUMP JUMPDEST SWAP1 SLOAD SWAP1 DUP3 SHL SHR PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x9 SLOAD AND SWAP2 PUSH1 0x40 SWAP3 DUP4 MLOAD DUP1 SWAP2 PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP3 MSTORE DUP4 DUP10 DUP4 ADD MSTORE DUP2 PUSH1 0x24 PUSH1 0x20 SWAP5 DUP6 SWAP4 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x1447 JUMPI SWAP4 PUSH1 0x0 SWAP5 SWAP4 DUP6 SWAP5 SWAP4 DUP10 DUP7 SWAP6 SWAP5 DUP7 SWAP6 DUP7 SWAP4 PUSH2 0x1424 JUMPI JUMPDEST POP POP PUSH2 0x13D5 SWAP2 SWAP3 PUSH2 0x14F4 JUMP JUMPDEST SWAP2 DUP4 SWAP2 DUP4 ISZERO PUSH2 0x141A JUMPI JUMPDEST AND SWAP1 CALL ISZERO PUSH2 0x1410 JUMPI POP PUSH1 0x0 NOT DUP7 EQ PUSH2 0x13FB JUMPI SWAP5 DUP4 ADD SWAP5 DUP4 PUSH2 0x135B JUMP JUMPDEST PUSH1 0x11 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x8FC SWAP3 POP PUSH2 0x13DF JUMP JUMPDEST PUSH2 0x13D5 SWAP4 POP SWAP1 DUP2 PUSH2 0x1440 SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x71E JUMPI PUSH2 0x70F DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST SWAP2 CODESIZE PUSH2 0x13C9 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x1360 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D696E696D756D206F66203130302077656920746F2064697374726962757465 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x757365207769746864726177207768656E206E6F74207374616B656400000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x21 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO PUSH2 0x1584 JUMPI PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x0 NOT SWAP3 SWAP1 DUP2 ISZERO ISZERO DUP3 DUP6 DIV DUP3 GT AND PUSH2 0x1570 JUMPI PUSH1 0x2 SLOAD SWAP2 DUP3 ISZERO PUSH2 0x155C JUMPI MUL DIV SWAP2 PUSH1 0x1 DUP4 GT ISZERO PUSH2 0x1556 JUMPI DUP3 ADD SWAP2 DUP3 GT PUSH2 0x1542 JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x15B0 JUMPI PUSH2 0x15A2 JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x15AD SWAP1 SELFBALANCE SWAP1 PUSH2 0x14F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x15D2 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x6 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x161B JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x1610 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1604 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x15FB JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x15B0 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x16C3 JUMPI DUP1 ISZERO PUSH2 0x1694 JUMPI PUSH1 0x2 EQ PUSH2 0x1672 JUMPI PUSH1 0x40 MLOAD PUSH2 0x1655 DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0xD DUP2 MSTORE PUSH13 0x7374617465206661696C757265 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167E DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH6 0x195E1A5D1959 PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x16A1 DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH18 0x616363657074696E67206465706F73697473 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x16D0 DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH6 0x1CDD185AD959 PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP INVALID 0xF6 MSTORE 0x22 0x23 SGT 0xE2 DUP5 MSIZE MSTORE DUP14 SWAP3 SIGNEXTEND PUSH6 0x115C16C04F3E 0xFC DUP3 0xAA 0xED 0xC9 PUSH28 0xE59F3F377C0D3FA26469706673582212206AEEFD5076AF57AE83CC08 0xD9 0xC1 MSTORE 0xF8 0xEB 0xE5 DUP8 SAR CALLVALUE 0x5C SMOD 0x4B COINBASE 0xC6 CALLDATALOAD SAR ISZERO PUSH21 0x428D664736F6C63430008100033A2646970667358 0x22 SLT KECCAK256 SWAP12 0xB9 SWAP8 PUSH28 0x874D7836B1C619322B73CFDA86513F0FD3F546F5875074BCB23436D7 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ",
              "sourceMap": "148:1868:16:-:0;;;;;;;;;;;;;-1:-1:-1;;148:1868:16;;;;-1:-1:-1;;;;;148:1868:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;148:1868:16;;719:10:9;-1:-1:-1;;;;;;148:1868:16;;;;;;;;;;;;-1:-1:-1;;;;;148:1868:16;;;;;719:10:9;148:1868:16;;;;2410:40:0;;148:1868:16;2410:40:0;148:1868:16;;763:40;148:1868;;;763:40;148:1868;;;809:40;148:1868;;;809:40;148:1868;;;;;;;;;-1:-1:-1;148:1868:16;;;;;;-1:-1:-1;148:1868:16;;;;;-1:-1:-1;148:1868:16;;;;-1:-1:-1;;;;;148:1868:16;;;;;;:::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_encode_address_address_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 1573,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "storage_array_index_access_contract_StakingPool_dyn": {
                  "entryPoint": 1496,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60406080815260048036101561001457600080fd5b600091823560e01c80632edaf74d146105885780635aad6cf0146105315780636202d39614610512578063715018a6146104b257806376f42f8a146104735780638da5cb5b1461044b5780639ed9331814610240578063a2b44d75146101525763f2fde38b1461008357600080fd5b3461014e57602036600319011261014e5781356001600160a01b03818116929183900361014a578454908116936100bb338614610625565b83156100f857506001600160a01b0319168217845551917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b608490602084519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b503461014e576020918260031936011261023c5761017081356105d8565b90548351638da5cb5b60e01b815260039290921b1c6001600160a01b039081169490929185319190818185818a5afa9384156102325788946101c2575b50506060965084519586528501521690820152f35b9091809450903d851161022a575b601f8201601f191683019067ffffffffffffffff8211848310176102175750849183918852810103126102135751838116810361021357606096509138806101ad565b8680fd5b634e487b7160e01b8a5260419052602489fd5b3d91506101d0565b86513d8a823e3d90fd5b8380fd5b50919034610447576020366003190112610447576001600160a01b03918135908382169081830361044457600154938560035416866005541688519061188f928383019067ffffffffffffffff948483108684111761043157918493916102c79361067186396001600160a01b039081168252306020830152909116604082015260600190565b039084f08015610427576001546801000000000000000081101561041457906102fb8260018b9897969594016001556105d8565b99909116809982549060031b88811b9283911b169119161790558783526002602052888320600160ff19825416179055873b1561014e5788519363f2fde38b60e01b8552828501528284602481838c5af1801561040a579187959391899795936103b8575b505060035489513381526001600160a01b03958616602082015293169093166040830152507f18cc83251b20febb5b0c01f457a3e15b6e2eb22f48b01a0b9e5a24012cc2f6929150606090a382519182526020820152f35b919395509180949650116103f75750508552839183917f18cc83251b20febb5b0c01f457a3e15b6e2eb22f48b01a0b9e5a24012cc2f692388080610360565b634e487b7160e01b825260419052602490fd5b89513d85823e3d90fd5b634e487b7160e01b855260418452602485fd5b88513d85823e3d90fd5b634e487b7160e01b885260418752602488fd5b80fd5b5080fd5b838234610447578160031936011261044757905490516001600160a01b039091168152602090f35b50903461014e57602036600319011261014e57356001600160a01b0381169081900361014e57818360ff92602095526002855220541690519015158152f35b83823461044757816003193601126104475781546001600160a01b0381169183916104de338514610625565b6001600160a01b031916825551917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b8382346104475781600319360112610447576020906001549051908152f35b50903461014e57602036600319011261014e573560015481101561014e5760016020935260018060a01b03907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154169051908152f35b50903461014e57602036600319011261014e57356001600160a01b038181169182900361023c576105bd908454163314610625565b6bffffffffffffffffffffffff60a01b600554161760055551f35b60015481101561060f5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b1561062c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe60803461010257601f6200188f38819003918201601f19168301916001600160401b0383118484101761010757808492606094604052833981010312610102576100488161011d565b61006060406100596020850161011d565b930161011d565b600080546001600160a01b03198082163390811784556040519691956001600160a01b0395948694859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908ba360045490610100600160a81b039060081b169060018060a81b031916178060045560081c16856007541617600755168360085416176008551690600954161760095561175d9081620001328239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101025756fe6040608081526004908136101561001d575b5050361561001b57005b005b600090813560e01c80631865c57d14610fdf5780632a4dbd2b14610fb35780632def662014610f8b5780632edaf74d14610f3b578063378de45b146105b6578063441a3e7014610d915780634ad02ef114610d615780634b2b4e3614610947578063678e300a14610927578063715018a6146108c65780637be0b4a0146107ee5780637d882097146107d057806382a790cf146107975780638620891c146105de57806387f8ab26146105b65780638da5cb5b1461058f578063cfb5a5f814610563578063e2664e4914610513578063e32d2913146103de578063e4fc6b6d146103c2578063f2fde38b146102ed5763f340fa011461011c5750610011565b602092836003193601126102e9576001600160a01b03938135858116919082900361024a5760ff83541660038110156102d657610159901561129c565b341561029f579081859392876009541684875180978193632798987d60e11b83525af1938415610295578694610261575b506001908487525234848620556101a3346002546112e1565b600255600354956801000000000000000087101561024e57836101d0886001899a999899016003556111bd565b819291549060031b600019811b9283911b1691191617905560095416803b1561024a5784928360649288519687958694630d4d151360e01b865285015260248401523060448401525af1801561023d5761022957505051f35b610232906110a9565b6102395751f35b5080fd5b50505051903d90823e3d90fd5b8480fd5b634e487b7160e01b865260418352602486fd5b9080945081813d831161028e575b61027981836110ef565b8101031261028a575192600161018a565b8580fd5b503d61026f565b85513d88823e3d90fd5b9050606492519162461bcd60e51b8352820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152fd5b634e487b7160e01b865260218452602486fd5b8280fd5b5082346102e95760203660031901126102e9576001600160a01b038135818116929083900361024a57610324828654163314611251565b8215610370575060005492826bffffffffffffffffffffffff60a01b8516176000555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b50346102395781600319360112610239576103db611330565b51f35b5034610239576020806003193601126102e95767ffffffffffffffff90843582811161024a573660238201121561024a57610422903690602481890135910161120a565b9461043760018060a01b038654163314611251565b855192831161050057506104558261045060065461106f565b6115c6565b80601f83116001146104905750839482939492610485575b50508160011b916000199060031b1c19161760065551f35b01519050388061046d565b60068552601f19831695600080516020611708833981519152929186905b8882106104e8575050836001959697106104cf575b505050811b0160065551f35b015160001960f88460031b161c191690553880806104c3565b806001859682949686015181550195019301906104ae565b634e487b7160e01b855260419052602484fd5b503461023957816003193601126102395761053860018060a01b038354163314611251565b818080804781811561055a575b3390f1156105505751f35b51903d90823e3d90fd5b506108fc610545565b50903461058c57602036600319011261058c57506105856020924790356114f4565b9051908152f35b80fd5b5034610239578160031936011261023957905490516001600160a01b039091168152602090f35b5082346102e95760203660031901126102e95760209282913581526001845220549051908152f35b50826020806003193601126106a95781359160018060a01b03858382600954166024885180948193634f558e7960e01b83528a898401525af190811561072557879161075d575b501561072f57808360249260095416875193848092630178b36760e31b825289888301525afa9182156107255787926106f6575b50309116036106c05760ff8154169060038210156106ad57501561067c8161129c565b156106a9576001918452528082206106953482546112e1565b90556106a3346002546112e1565b60025551f35b8380fd5b634e487b7160e01b865260219052602485fd5b60649184519162461bcd60e51b835282015260126024820152711ddc9bdb99c81cdd185ada5b99c81c1bdbdb60721b6044820152fd5b610717919250843d861161071e575b61070f81836110ef565b810190611304565b9087610659565b503d610705565b86513d89823e3d90fd5b5060649184519162461bcd60e51b835282015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152fd5b90508381813d8311610790575b61077481836110ef565b8101031261078c5751801515810361078c5787610625565b8680fd5b503d61076a565b5082346102e95760203660031901126102e957359160035483101561058c57506107c26020926111bd565b90549060031b1c9051908152f35b50346102395781600319360112610239576020906002549051908152f35b50903461058c578060031936011261058c575080516000916006546108128161106f565b8084529060019081811690811561089e5750600114610853575b505061083d8261084f9403836110ef565b51918291602083526020830190610ffc565b0390f35b6006600090815294506000805160206117088339815191525b828610610886575050509181016020019161083d8261082c565b8054602087870181019190915290950194810161086c565b61084f9650859250602091509261083d9360ff191682840152151560051b820101945061082c565b5034610239578160031936011261023957600060018060a01b036108ee818554163314611251565b81546001600160a01b031981168355925192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50903461058c57602036600319011261058c575061058560209235611589565b50903461058c57600319916080368401126102395767ffffffffffffffff84358181116106a95761097b903690870161103c565b60249691873584811161078c57610995903690850161103c565b9260449889359a878c11610d5d576109b68a9b9c9a98999a3690890161103c565b926109cc60018060a01b03809b54163314611251565b6801bc16d674ec80000093844710610d285760ff8a54166003811015610d1657610ce4576109f8611111565b8051602091820120606051608020919d9114610c135750610a17611111565b8c8151910120610a2836888b61120a565b8d815191012003610bc5575b895460ff19166001178a5530600160f81b8101908110610bb3578d51908d82019081528d8252610a63826110d3565b8d610a6f368d8c61120a565b80519101209151902003610b70578d9e8b9d9e999a9b60079e9d9e541697883b15610b6c578f516304512a2360e31b81526080818f01529b8c9a8b998a989291610abd9160848b01916116e6565b91868984030190890152610ad0926116e6565b928584030190850152610ae2926116e6565b606435606483015203925af1801561029557610b33575b509183917f1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a44935460081c169082519182523390820152a151f35b917f1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a44939195610b6286946110a9565b9591935091610af9565b8a80fd5b505050867f7769746864726177616c2063726564656e7469616c206d69736d6174636800008d601e6064948d8f519562461bcd60e51b8752860152840152820152fd5b634e487b7160e01b8f5260118b52848ffd5b505050867f7075626b657920646f6573206e6f74206d617463682073746f7265642076616c8d60226084948d8f519562461bcd60e51b875286015284015282015261756560f01b6064820152fd5b8611610cd257858e610c2a8261045060065461106f565b80601f8311600114610c605791610c55575b508660011b906000198860031b1c191617600655610a34565b905088013538610c3c565b6006815260008051602061170883398151915292508e5b8b601f198b168310610cbc5750505087601f19811610610ca2575b5050600186811b01600655610a34565b890135600019600389901b60f8161c191690553880610c92565b830135845560019093019291820191018e610c77565b634e487b7160e01b8e5260418a52838efd5b505050866a77726f6e6720737461746560a81b8d600b60649460208f519562461bcd60e51b8752860152840152820152fd5b634e487b7160e01b8f5260218b52848ffd5b505050866d0dcdee840cadcdeeaced040cae8d60931b8d600e60649460208f519562461bcd60e51b8752860152840152820152fd5b8980fd5b503461023957816003193601126102395761084f90610d7e611111565b9051918291602083526020830190610ffc565b5082346102e957816003193601126102e957803560249081359260ff8154166003811015610f2957600114610ee75760095485516331a9108f60e11b8152828101849052602094916001600160a01b039190869082908590829086165afa908115610edd578991610ec0575b50163303610e8e5782875260018452848688205410610e55575050848093600182948394845252858220610e32828254611323565b9055610e4081600254611323565b60025581811561055a573390f1156105505751f35b855162461bcd60e51b8152918201849052601490820152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b855162461bcd60e51b8152918201849052600d908201526c3737ba103a34329037bbb732b960991b6044820152606490fd5b610ed79150863d881161071e5761070f81836110ef565b89610dfd565b88513d8b823e3d90fd5b606490601b84602088519362461bcd60e51b85528401528201527f63616e6e6f74207769746864726177206f6e6365207374616b656400000000006044820152fd5b634e487b7160e01b8752602182528387fd5b5082346102e95760203660031901126102e957356001600160a01b03818116918290036106a957610f70908454163314611251565b6bffffffffffffffffffffffff60a01b600954161760095551f35b5082346102e957826003193601126102e957610fa5611330565b805460ff1916600217905551f35b5082346102e957826003193601126102e95754905160089190911c6001600160a01b0316815260209150f35b503461023957816003193601126102395761084f90610d7e611625565b919082519283825260005b848110611028575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611007565b9181601f8401121561106a5782359167ffffffffffffffff831161106a576020838186019501011161106a57565b600080fd5b90600182811c9216801561109f575b602083101461108957565b634e487b7160e01b600052602260045260246000fd5b91607f169161107e565b67ffffffffffffffff81116110bd57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176110bd57604052565b90601f8019910116810190811067ffffffffffffffff8211176110bd57604052565b60405190600082600654916111258361106f565b8083529260019081811690811561119b575060011461114e575b5061114c925003836110ef565b565b6006600090815291506000805160206117088339815191525b848310611180575061114c93505081016020013861113f565b81935090816020925483858a01015201910190918592611167565b90506020925061114c94915060ff191682840152151560051b8201013861113f565b6003548110156111f45760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b634e487b7160e01b600052603260045260246000fd5b92919267ffffffffffffffff82116110bd5760405191611234601f8201601f1916602001846110ef565b82948184528183011161106a578281602093846000960137010152565b1561125857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156112a357565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b919082018092116112ee57565b634e487b7160e01b600052601160045260246000fd5b9081602091031261106a57516001600160a01b038116810361106a5790565b919082039182116112ee57565b60049060ff825416600392838210156114df57600180920361149b5747606481111561145757600094835b611368575b505050509050565b80548610156114525761137a866111bd565b905490821b1c60018060a01b03806009541691604092835180916331a9108f60e11b8252838983015281602460209485935afa9182156114475793600094938594938986959486958693611424575b50506113d591926114f4565b918391831561141a575b1690f115611410575060001986146113fb57948301948361135b565b601183634e487b7160e01b6000525260246000fd5b513d6000823e3d90fd5b6108fc92506113df565b6113d59350908161144092903d1061071e5761070f81836110ef565b91386113c9565b85513d6000823e3d90fd5b611360565b60405162461bcd60e51b8152602081840181905260248201527f6d696e696d756d206f66203130302077656920746f20646973747269627574656044820152606490fd5b60649060206040519162461bcd60e51b8352820152601c60248201527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152fd5b602190634e487b7160e01b6000525260246000fd5b6000908152600160205260408120541561158457604081205460001992908115158285048211166115705760025491821561155c570204916001831115611556578201918211611542575090565b634e487b7160e01b81526011600452602490fd5b50905090565b634e487b7160e01b84526012600452602484fd5b634e487b7160e01b83526011600452602483fd5b905090565b60ff6004541660038110156115b0576115a25750600090565b6115ad9047906114f4565b90565b634e487b7160e01b600052602160045260246000fd5b601f81116115d2575050565b60009060068252600080516020611708833981519152906020601f850160051c8301941061161b575b601f0160051c01915b82811061161057505050565b818155600101611604565b90925082906115fb565b60ff6004541660038110156115b057600181146116c35780156116945760021461167257604051611655816110d3565b600d81526c7374617465206661696c75726560981b602082015290565b60405161167e816110d3565b6006815265195e1a5d195960d21b602082015290565b506040516116a1816110d3565b6012815271616363657074696e67206465706f7369747360701b602082015290565b506040516116d0816110d3565b60068152651cdd185ad95960d21b602082015290565b908060209392818452848401376000828201840152601f01601f191601019056fef652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3fa26469706673582212206aeefd5076af57ae83cc08d9c152f8ebe5871d345c074b41c6351d15740428d664736f6c63430008100033a26469706673582212209bb9977b874d7836b1c619322b73cfda86513f0fd3f546f5875074bcb23436d764736f6c63430008100033",
              "opcodes": "PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2EDAF74D EQ PUSH2 0x588 JUMPI DUP1 PUSH4 0x5AAD6CF0 EQ PUSH2 0x531 JUMPI DUP1 PUSH4 0x6202D396 EQ PUSH2 0x512 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x4B2 JUMPI DUP1 PUSH4 0x76F42F8A EQ PUSH2 0x473 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x44B JUMPI DUP1 PUSH4 0x9ED93318 EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xA2B44D75 EQ PUSH2 0x152 JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x14E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x14E JUMPI DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP3 SWAP2 DUP4 SWAP1 SUB PUSH2 0x14A JUMPI DUP5 SLOAD SWAP1 DUP2 AND SWAP4 PUSH2 0xBB CALLER DUP7 EQ PUSH2 0x625 JUMP JUMPDEST DUP4 ISZERO PUSH2 0xF8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR DUP5 SSTORE MLOAD SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP5 DUP5 LOG3 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x14E JUMPI PUSH1 0x20 SWAP2 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x23C JUMPI PUSH2 0x170 DUP2 CALLDATALOAD PUSH2 0x5D8 JUMP JUMPDEST SWAP1 SLOAD DUP4 MLOAD PUSH4 0x8DA5CB5B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 SWAP1 SWAP3 SWAP2 DUP6 BALANCE SWAP2 SWAP1 DUP2 DUP2 DUP6 DUP2 DUP11 GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x232 JUMPI DUP9 SWAP5 PUSH2 0x1C2 JUMPI JUMPDEST POP POP PUSH1 0x60 SWAP7 POP DUP5 MLOAD SWAP6 DUP7 MSTORE DUP6 ADD MSTORE AND SWAP1 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 SWAP2 DUP1 SWAP5 POP SWAP1 RETURNDATASIZE DUP6 GT PUSH2 0x22A JUMPI JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT DUP5 DUP4 LT OR PUSH2 0x217 JUMPI POP DUP5 SWAP2 DUP4 SWAP2 DUP9 MSTORE DUP2 ADD SUB SLT PUSH2 0x213 JUMPI MLOAD DUP4 DUP2 AND DUP2 SUB PUSH2 0x213 JUMPI PUSH1 0x60 SWAP7 POP SWAP2 CODESIZE DUP1 PUSH2 0x1AD JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1D0 JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP11 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x447 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x447 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP2 CALLDATALOAD SWAP1 DUP4 DUP3 AND SWAP1 DUP2 DUP4 SUB PUSH2 0x444 JUMPI PUSH1 0x1 SLOAD SWAP4 DUP6 PUSH1 0x3 SLOAD AND DUP7 PUSH1 0x5 SLOAD AND DUP9 MLOAD SWAP1 PUSH2 0x188F SWAP3 DUP4 DUP4 ADD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF SWAP5 DUP5 DUP4 LT DUP7 DUP5 GT OR PUSH2 0x431 JUMPI SWAP2 DUP5 SWAP4 SWAP2 PUSH2 0x2C7 SWAP4 PUSH2 0x671 DUP7 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE ADDRESS PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 DUP5 CREATE DUP1 ISZERO PUSH2 0x427 JUMPI PUSH1 0x1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x414 JUMPI SWAP1 PUSH2 0x2FB DUP3 PUSH1 0x1 DUP12 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 ADD PUSH1 0x1 SSTORE PUSH2 0x5D8 JUMP JUMPDEST SWAP10 SWAP1 SWAP2 AND DUP1 SWAP10 DUP3 SLOAD SWAP1 PUSH1 0x3 SHL DUP9 DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE DUP8 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE DUP9 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE DUP8 EXTCODESIZE ISZERO PUSH2 0x14E JUMPI DUP9 MLOAD SWAP4 PUSH4 0xF2FDE38B PUSH1 0xE0 SHL DUP6 MSTORE DUP3 DUP6 ADD MSTORE DUP3 DUP5 PUSH1 0x24 DUP2 DUP4 DUP13 GAS CALL DUP1 ISZERO PUSH2 0x40A JUMPI SWAP2 DUP8 SWAP6 SWAP4 SWAP2 DUP10 SWAP8 SWAP6 SWAP4 PUSH2 0x3B8 JUMPI JUMPDEST POP POP PUSH1 0x3 SLOAD DUP10 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP4 AND SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH32 0x18CC83251B20FEBB5B0C01F457A3E15B6E2EB22F48B01A0B9E5A24012CC2F692 SWAP2 POP PUSH1 0x60 SWAP1 LOG3 DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST SWAP2 SWAP4 SWAP6 POP SWAP2 DUP1 SWAP5 SWAP7 POP GT PUSH2 0x3F7 JUMPI POP POP DUP6 MSTORE DUP4 SWAP2 DUP4 SWAP2 PUSH32 0x18CC83251B20FEBB5B0C01F457A3E15B6E2EB22F48B01A0B9E5A24012CC2F692 CODESIZE DUP1 DUP1 PUSH2 0x360 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP10 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 DUP5 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP9 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 DUP8 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x447 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x447 JUMPI SWAP1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x14E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x14E JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x14E JUMPI DUP2 DUP4 PUSH1 0xFF SWAP3 PUSH1 0x20 SWAP6 MSTORE PUSH1 0x2 DUP6 MSTORE KECCAK256 SLOAD AND SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x447 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x447 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 DUP4 SWAP2 PUSH2 0x4DE CALLER DUP6 EQ PUSH2 0x625 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 SSTORE MLOAD SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP5 LOG3 RETURN JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x447 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x447 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x1 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x14E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x14E JUMPI CALLDATALOAD PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x14E JUMPI PUSH1 0x1 PUSH1 0x20 SWAP4 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 ADD SLOAD AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x14E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x14E JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0x23C JUMPI PUSH2 0x5BD SWAP1 DUP5 SLOAD AND CALLER EQ PUSH2 0x625 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL PUSH1 0x5 SLOAD AND OR PUSH1 0x5 SSTORE MLOAD RETURN JUMPDEST PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x60F JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x62C JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT INVALID PUSH1 0x80 CALLVALUE PUSH2 0x102 JUMPI PUSH1 0x1F PUSH3 0x188F CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x107 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x60 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x102 JUMPI PUSH2 0x48 DUP2 PUSH2 0x11D JUMP JUMPDEST PUSH2 0x60 PUSH1 0x40 PUSH2 0x59 PUSH1 0x20 DUP6 ADD PUSH2 0x11D JUMP JUMPDEST SWAP4 ADD PUSH2 0x11D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP3 AND CALLER SWAP1 DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP7 SWAP2 SWAP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP5 DUP7 SWAP5 DUP6 SWAP4 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP12 LOG3 PUSH1 0x4 SLOAD SWAP1 PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB SWAP1 PUSH1 0x8 SHL AND SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA8 SHL SUB NOT AND OR DUP1 PUSH1 0x4 SSTORE PUSH1 0x8 SHR AND DUP6 PUSH1 0x7 SLOAD AND OR PUSH1 0x7 SSTORE AND DUP4 PUSH1 0x8 SLOAD AND OR PUSH1 0x8 SSTORE AND SWAP1 PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE PUSH2 0x175D SWAP1 DUP2 PUSH3 0x132 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x102 JUMPI JUMP INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI STOP JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1865C57D EQ PUSH2 0xFDF JUMPI DUP1 PUSH4 0x2A4DBD2B EQ PUSH2 0xFB3 JUMPI DUP1 PUSH4 0x2DEF6620 EQ PUSH2 0xF8B JUMPI DUP1 PUSH4 0x2EDAF74D EQ PUSH2 0xF3B JUMPI DUP1 PUSH4 0x378DE45B EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0x441A3E70 EQ PUSH2 0xD91 JUMPI DUP1 PUSH4 0x4AD02EF1 EQ PUSH2 0xD61 JUMPI DUP1 PUSH4 0x4B2B4E36 EQ PUSH2 0x947 JUMPI DUP1 PUSH4 0x678E300A EQ PUSH2 0x927 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x8C6 JUMPI DUP1 PUSH4 0x7BE0B4A0 EQ PUSH2 0x7EE JUMPI DUP1 PUSH4 0x7D882097 EQ PUSH2 0x7D0 JUMPI DUP1 PUSH4 0x82A790CF EQ PUSH2 0x797 JUMPI DUP1 PUSH4 0x8620891C EQ PUSH2 0x5DE JUMPI DUP1 PUSH4 0x87F8AB26 EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x58F JUMPI DUP1 PUSH4 0xCFB5A5F8 EQ PUSH2 0x563 JUMPI DUP1 PUSH4 0xE2664E49 EQ PUSH2 0x513 JUMPI DUP1 PUSH4 0xE32D2913 EQ PUSH2 0x3DE JUMPI DUP1 PUSH4 0xE4FC6B6D EQ PUSH2 0x3C2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2ED JUMPI PUSH4 0xF340FA01 EQ PUSH2 0x11C JUMPI POP PUSH2 0x11 JUMP JUMPDEST PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP2 CALLDATALOAD DUP6 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x24A JUMPI PUSH1 0xFF DUP4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D6 JUMPI PUSH2 0x159 SWAP1 ISZERO PUSH2 0x129C JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x29F JUMPI SWAP1 DUP2 DUP6 SWAP4 SWAP3 DUP8 PUSH1 0x9 SLOAD AND DUP5 DUP8 MLOAD DUP1 SWAP8 DUP2 SWAP4 PUSH4 0x2798987D PUSH1 0xE1 SHL DUP4 MSTORE GAS CALL SWAP4 DUP5 ISZERO PUSH2 0x295 JUMPI DUP7 SWAP5 PUSH2 0x261 JUMPI JUMPDEST POP PUSH1 0x1 SWAP1 DUP5 DUP8 MSTORE MSTORE CALLVALUE DUP5 DUP7 KECCAK256 SSTORE PUSH2 0x1A3 CALLVALUE PUSH1 0x2 SLOAD PUSH2 0x12E1 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD SWAP6 PUSH9 0x10000000000000000 DUP8 LT ISZERO PUSH2 0x24E JUMPI DUP4 PUSH2 0x1D0 DUP9 PUSH1 0x1 DUP10 SWAP11 SWAP10 SWAP9 SWAP10 ADD PUSH1 0x3 SSTORE PUSH2 0x11BD JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL PUSH1 0x0 NOT DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE PUSH1 0x9 SLOAD AND DUP1 EXTCODESIZE ISZERO PUSH2 0x24A JUMPI DUP5 SWAP3 DUP4 PUSH1 0x64 SWAP3 DUP9 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0xD4D1513 PUSH1 0xE0 SHL DUP7 MSTORE DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE ADDRESS PUSH1 0x44 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x23D JUMPI PUSH2 0x229 JUMPI POP POP MLOAD RETURN JUMPDEST PUSH2 0x232 SWAP1 PUSH2 0x10A9 JUMP JUMPDEST PUSH2 0x239 JUMPI MLOAD RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP POP MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 DUP4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP1 DUP1 SWAP5 POP DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x28E JUMPI JUMPDEST PUSH2 0x279 DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x28A JUMPI MLOAD SWAP3 PUSH1 0x1 PUSH2 0x18A JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x26F JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x36BAB9BA103232B837B9B4BA1032BA3432B9 PUSH1 0x71 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 DUP5 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 DUP2 AND SWAP3 SWAP1 DUP4 SWAP1 SUB PUSH2 0x24A JUMPI PUSH2 0x324 DUP3 DUP7 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x370 JUMPI POP PUSH1 0x0 SLOAD SWAP3 DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP6 AND OR PUSH1 0x0 SSTORE MLOAD SWAP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP5 LOG3 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP6 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x3DB PUSH2 0x1330 JUMP JUMPDEST MLOAD RETURN JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP5 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x24A JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x24A JUMPI PUSH2 0x422 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 DUP2 DUP10 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x120A JUMP JUMPDEST SWAP5 PUSH2 0x437 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP6 MLOAD SWAP3 DUP4 GT PUSH2 0x500 JUMPI POP PUSH2 0x455 DUP3 PUSH2 0x450 PUSH1 0x6 SLOAD PUSH2 0x106F JUMP JUMPDEST PUSH2 0x15C6 JUMP JUMPDEST DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x490 JUMPI POP DUP4 SWAP5 DUP3 SWAP4 SWAP5 SWAP3 PUSH2 0x485 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x6 SSTORE MLOAD RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x46D JUMP JUMPDEST PUSH1 0x6 DUP6 MSTORE PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP7 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x4E8 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x4CF JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x6 SSTORE MLOAD RETURN JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x4C3 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x4AE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x538 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP2 DUP1 DUP1 DUP1 SELFBALANCE DUP2 DUP2 ISZERO PUSH2 0x55A JUMPI JUMPDEST CALLER SWAP1 CALL ISZERO PUSH2 0x550 JUMPI MLOAD RETURN JUMPDEST MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH2 0x545 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x58C JUMPI POP PUSH2 0x585 PUSH1 0x20 SWAP3 SELFBALANCE SWAP1 CALLDATALOAD PUSH2 0x14F4 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI SWAP1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI PUSH1 0x20 SWAP3 DUP3 SWAP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP3 PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x6A9 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 DUP4 DUP3 PUSH1 0x9 SLOAD AND PUSH1 0x24 DUP9 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x4F558E79 PUSH1 0xE0 SHL DUP4 MSTORE DUP11 DUP10 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x725 JUMPI DUP8 SWAP2 PUSH2 0x75D JUMPI JUMPDEST POP ISZERO PUSH2 0x72F JUMPI DUP1 DUP4 PUSH1 0x24 SWAP3 PUSH1 0x9 SLOAD AND DUP8 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x178B367 PUSH1 0xE3 SHL DUP3 MSTORE DUP10 DUP9 DUP4 ADD MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x725 JUMPI DUP8 SWAP3 PUSH2 0x6F6 JUMPI JUMPDEST POP ADDRESS SWAP2 AND SUB PUSH2 0x6C0 JUMPI PUSH1 0xFF DUP2 SLOAD AND SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x6AD JUMPI POP ISZERO PUSH2 0x67C DUP2 PUSH2 0x129C JUMP JUMPDEST ISZERO PUSH2 0x6A9 JUMPI PUSH1 0x1 SWAP2 DUP5 MSTORE MSTORE DUP1 DUP3 KECCAK256 PUSH2 0x695 CALLVALUE DUP3 SLOAD PUSH2 0x12E1 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x6A3 CALLVALUE PUSH1 0x2 SLOAD PUSH2 0x12E1 JUMP JUMPDEST PUSH1 0x2 SSTORE MLOAD RETURN JUMPDEST DUP4 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 SWAP1 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH1 0x64 SWAP2 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1DDC9BDB99C81CDD185ADA5B99C81C1BDBDB PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x717 SWAP2 SWAP3 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x71E JUMPI JUMPDEST PUSH2 0x70F DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1304 JUMP JUMPDEST SWAP1 DUP8 PUSH2 0x659 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x705 JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH1 0x64 SWAP2 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x1B9BDD08195E1A5CDD PUSH1 0xBA SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x790 JUMPI JUMPDEST PUSH2 0x774 DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x78C JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x78C JUMPI DUP8 PUSH2 0x625 JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x76A JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI CALLDATALOAD SWAP2 PUSH1 0x3 SLOAD DUP4 LT ISZERO PUSH2 0x58C JUMPI POP PUSH2 0x7C2 PUSH1 0x20 SWAP3 PUSH2 0x11BD JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x58C JUMPI POP DUP1 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x6 SLOAD PUSH2 0x812 DUP2 PUSH2 0x106F JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x89E JUMPI POP PUSH1 0x1 EQ PUSH2 0x853 JUMPI JUMPDEST POP POP PUSH2 0x83D DUP3 PUSH2 0x84F SWAP5 SUB DUP4 PUSH2 0x10EF JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xFFC JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP5 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST DUP3 DUP7 LT PUSH2 0x886 JUMPI POP POP POP SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 PUSH2 0x83D DUP3 PUSH2 0x82C JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0x86C JUMP JUMPDEST PUSH2 0x84F SWAP7 POP DUP6 SWAP3 POP PUSH1 0x20 SWAP2 POP SWAP3 PUSH2 0x83D SWAP4 PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 POP PUSH2 0x82C JUMP JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x8EE DUP2 DUP6 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 SSTORE SWAP3 MLOAD SWAP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP5 LOG3 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x58C JUMPI POP PUSH2 0x585 PUSH1 0x20 SWAP3 CALLDATALOAD PUSH2 0x1589 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x58C JUMPI PUSH1 0x3 NOT SWAP2 PUSH1 0x80 CALLDATASIZE DUP5 ADD SLT PUSH2 0x239 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP5 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x6A9 JUMPI PUSH2 0x97B SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x103C JUMP JUMPDEST PUSH1 0x24 SWAP7 SWAP2 DUP8 CALLDATALOAD DUP5 DUP2 GT PUSH2 0x78C JUMPI PUSH2 0x995 SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x103C JUMP JUMPDEST SWAP3 PUSH1 0x44 SWAP9 DUP10 CALLDATALOAD SWAP11 DUP8 DUP13 GT PUSH2 0xD5D JUMPI PUSH2 0x9B6 DUP11 SWAP12 SWAP13 SWAP11 SWAP9 SWAP10 SWAP11 CALLDATASIZE SWAP1 DUP10 ADD PUSH2 0x103C JUMP JUMPDEST SWAP3 PUSH2 0x9CC PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP12 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST PUSH9 0x1BC16D674EC800000 SWAP4 DUP5 SELFBALANCE LT PUSH2 0xD28 JUMPI PUSH1 0xFF DUP11 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xD16 JUMPI PUSH2 0xCE4 JUMPI PUSH2 0x9F8 PUSH2 0x1111 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x60 MLOAD PUSH1 0x80 KECCAK256 SWAP2 SWAP14 SWAP2 EQ PUSH2 0xC13 JUMPI POP PUSH2 0xA17 PUSH2 0x1111 JUMP JUMPDEST DUP13 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH2 0xA28 CALLDATASIZE DUP9 DUP12 PUSH2 0x120A JUMP JUMPDEST DUP14 DUP2 MLOAD SWAP2 ADD KECCAK256 SUB PUSH2 0xBC5 JUMPI JUMPDEST DUP10 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP11 SSTORE ADDRESS PUSH1 0x1 PUSH1 0xF8 SHL DUP2 ADD SWAP1 DUP2 LT PUSH2 0xBB3 JUMPI DUP14 MLOAD SWAP1 DUP14 DUP3 ADD SWAP1 DUP2 MSTORE DUP14 DUP3 MSTORE PUSH2 0xA63 DUP3 PUSH2 0x10D3 JUMP JUMPDEST DUP14 PUSH2 0xA6F CALLDATASIZE DUP14 DUP13 PUSH2 0x120A JUMP JUMPDEST DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP2 MLOAD SWAP1 KECCAK256 SUB PUSH2 0xB70 JUMPI DUP14 SWAP15 DUP12 SWAP14 SWAP15 SWAP10 SWAP11 SWAP12 PUSH1 0x7 SWAP15 SWAP14 SWAP15 SLOAD AND SWAP8 DUP9 EXTCODESIZE ISZERO PUSH2 0xB6C JUMPI DUP16 MLOAD PUSH4 0x4512A23 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x80 DUP2 DUP16 ADD MSTORE SWAP12 DUP13 SWAP11 DUP12 SWAP10 DUP11 SWAP9 SWAP3 SWAP2 PUSH2 0xABD SWAP2 PUSH1 0x84 DUP12 ADD SWAP2 PUSH2 0x16E6 JUMP JUMPDEST SWAP2 DUP7 DUP10 DUP5 SUB ADD SWAP1 DUP10 ADD MSTORE PUSH2 0xAD0 SWAP3 PUSH2 0x16E6 JUMP JUMPDEST SWAP3 DUP6 DUP5 SUB ADD SWAP1 DUP6 ADD MSTORE PUSH2 0xAE2 SWAP3 PUSH2 0x16E6 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x64 DUP4 ADD MSTORE SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x295 JUMPI PUSH2 0xB33 JUMPI JUMPDEST POP SWAP2 DUP4 SWAP2 PUSH32 0x1944DEBB24A9AAFCF2708BE964E412CDB73FC36D6EA24577FD8DCC05B93B4A44 SWAP4 SLOAD PUSH1 0x8 SHR AND SWAP1 DUP3 MLOAD SWAP2 DUP3 MSTORE CALLER SWAP1 DUP3 ADD MSTORE LOG1 MLOAD RETURN JUMPDEST SWAP2 PUSH32 0x1944DEBB24A9AAFCF2708BE964E412CDB73FC36D6EA24577FD8DCC05B93B4A44 SWAP4 SWAP2 SWAP6 PUSH2 0xB62 DUP7 SWAP5 PUSH2 0x10A9 JUMP JUMPDEST SWAP6 SWAP2 SWAP4 POP SWAP2 PUSH2 0xAF9 JUMP JUMPDEST DUP11 DUP1 REVERT JUMPDEST POP POP POP DUP7 PUSH32 0x7769746864726177616C2063726564656E7469616C206D69736D617463680000 DUP14 PUSH1 0x1E PUSH1 0x64 SWAP5 DUP14 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP16 MSTORE PUSH1 0x11 DUP12 MSTORE DUP5 DUP16 REVERT JUMPDEST POP POP POP DUP7 PUSH32 0x7075626B657920646F6573206E6F74206D617463682073746F7265642076616C DUP14 PUSH1 0x22 PUSH1 0x84 SWAP5 DUP14 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP7 GT PUSH2 0xCD2 JUMPI DUP6 DUP15 PUSH2 0xC2A DUP3 PUSH2 0x450 PUSH1 0x6 SLOAD PUSH2 0x106F JUMP JUMPDEST DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xC60 JUMPI SWAP2 PUSH2 0xC55 JUMPI JUMPDEST POP DUP7 PUSH1 0x1 SHL SWAP1 PUSH1 0x0 NOT DUP9 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x6 SSTORE PUSH2 0xA34 JUMP JUMPDEST SWAP1 POP DUP9 ADD CALLDATALOAD CODESIZE PUSH2 0xC3C JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 POP DUP15 JUMPDEST DUP12 PUSH1 0x1F NOT DUP12 AND DUP4 LT PUSH2 0xCBC JUMPI POP POP POP DUP8 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xCA2 JUMPI JUMPDEST POP POP PUSH1 0x1 DUP7 DUP2 SHL ADD PUSH1 0x6 SSTORE PUSH2 0xA34 JUMP JUMPDEST DUP10 ADD CALLDATALOAD PUSH1 0x0 NOT PUSH1 0x3 DUP10 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH2 0xC92 JUMP JUMPDEST DUP4 ADD CALLDATALOAD DUP5 SSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 ADD DUP15 PUSH2 0xC77 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP15 MSTORE PUSH1 0x41 DUP11 MSTORE DUP4 DUP15 REVERT JUMPDEST POP POP POP DUP7 PUSH11 0x77726F6E67207374617465 PUSH1 0xA8 SHL DUP14 PUSH1 0xB PUSH1 0x64 SWAP5 PUSH1 0x20 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP16 MSTORE PUSH1 0x21 DUP12 MSTORE DUP5 DUP16 REVERT JUMPDEST POP POP POP DUP7 PUSH14 0xDCDEE840CADCDEEACED040CAE8D PUSH1 0x93 SHL DUP14 PUSH1 0xE PUSH1 0x64 SWAP5 PUSH1 0x20 DUP16 MLOAD SWAP6 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE REVERT JUMPDEST DUP10 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x84F SWAP1 PUSH2 0xD7E PUSH2 0x1111 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xFFC JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI DUP1 CALLDATALOAD PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP3 PUSH1 0xFF DUP2 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xF29 JUMPI PUSH1 0x1 EQ PUSH2 0xEE7 JUMPI PUSH1 0x9 SLOAD DUP6 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE DUP3 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x20 SWAP5 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 DUP7 SWAP1 DUP3 SWAP1 DUP6 SWAP1 DUP3 SWAP1 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xEDD JUMPI DUP10 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP AND CALLER SUB PUSH2 0xE8E JUMPI DUP3 DUP8 MSTORE PUSH1 0x1 DUP5 MSTORE DUP5 DUP7 DUP9 KECCAK256 SLOAD LT PUSH2 0xE55 JUMPI POP POP DUP5 DUP1 SWAP4 PUSH1 0x1 DUP3 SWAP5 DUP4 SWAP5 DUP5 MSTORE MSTORE DUP6 DUP3 KECCAK256 PUSH2 0xE32 DUP3 DUP3 SLOAD PUSH2 0x1323 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xE40 DUP2 PUSH1 0x2 SLOAD PUSH2 0x1323 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP2 DUP2 ISZERO PUSH2 0x55A JUMPI CALLER SWAP1 CALL ISZERO PUSH2 0x550 JUMPI MLOAD RETURN JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x1B9BDD08195B9BDD59DA0819195C1BDCDA5D1959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x3737BA103A34329037BBB732B9 PUSH1 0x99 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xED7 SWAP2 POP DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x71E JUMPI PUSH2 0x70F DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST DUP10 PUSH2 0xDFD JUMP JUMPDEST DUP9 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x1B DUP5 PUSH1 0x20 DUP9 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x63616E6E6F74207769746864726177206F6E6365207374616B65640000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x21 DUP3 MSTORE DUP4 DUP8 REVERT JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2E9 JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0x6A9 JUMPI PUSH2 0xF70 SWAP1 DUP5 SLOAD AND CALLER EQ PUSH2 0x1251 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE MLOAD RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI PUSH2 0xFA5 PUSH2 0x1330 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x2 OR SWAP1 SSTORE MLOAD RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x2E9 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2E9 JUMPI SLOAD SWAP1 MLOAD PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP2 POP RETURN JUMPDEST POP CALLVALUE PUSH2 0x239 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x239 JUMPI PUSH2 0x84F SWAP1 PUSH2 0xD7E PUSH2 0x1625 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x1028 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1007 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x106A JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x106A JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x106A JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x109F JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1089 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x107E JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x10BD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x10BD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x10BD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP3 PUSH1 0x6 SLOAD SWAP2 PUSH2 0x1125 DUP4 PUSH2 0x106F JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x119B JUMPI POP PUSH1 0x1 EQ PUSH2 0x114E JUMPI JUMPDEST POP PUSH2 0x114C SWAP3 POP SUB DUP4 PUSH2 0x10EF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST DUP5 DUP4 LT PUSH2 0x1180 JUMPI POP PUSH2 0x114C SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x113F JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 SWAP3 PUSH2 0x1167 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x114C SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x113F JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0x11F4 JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x10BD JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1234 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x10EF JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x106A JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x1258 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x12A3 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x6E6F7420616363657074696E67206465706F73697473 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x12EE JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x106A JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x106A JUMPI SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x12EE JUMPI JUMP JUMPDEST PUSH1 0x4 SWAP1 PUSH1 0xFF DUP3 SLOAD AND PUSH1 0x3 SWAP3 DUP4 DUP3 LT ISZERO PUSH2 0x14DF JUMPI PUSH1 0x1 DUP1 SWAP3 SUB PUSH2 0x149B JUMPI SELFBALANCE PUSH1 0x64 DUP2 GT ISZERO PUSH2 0x1457 JUMPI PUSH1 0x0 SWAP5 DUP4 JUMPDEST PUSH2 0x1368 JUMPI JUMPDEST POP POP POP POP SWAP1 POP JUMP JUMPDEST DUP1 SLOAD DUP7 LT ISZERO PUSH2 0x1452 JUMPI PUSH2 0x137A DUP7 PUSH2 0x11BD JUMP JUMPDEST SWAP1 SLOAD SWAP1 DUP3 SHL SHR PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x9 SLOAD AND SWAP2 PUSH1 0x40 SWAP3 DUP4 MLOAD DUP1 SWAP2 PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP3 MSTORE DUP4 DUP10 DUP4 ADD MSTORE DUP2 PUSH1 0x24 PUSH1 0x20 SWAP5 DUP6 SWAP4 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x1447 JUMPI SWAP4 PUSH1 0x0 SWAP5 SWAP4 DUP6 SWAP5 SWAP4 DUP10 DUP7 SWAP6 SWAP5 DUP7 SWAP6 DUP7 SWAP4 PUSH2 0x1424 JUMPI JUMPDEST POP POP PUSH2 0x13D5 SWAP2 SWAP3 PUSH2 0x14F4 JUMP JUMPDEST SWAP2 DUP4 SWAP2 DUP4 ISZERO PUSH2 0x141A JUMPI JUMPDEST AND SWAP1 CALL ISZERO PUSH2 0x1410 JUMPI POP PUSH1 0x0 NOT DUP7 EQ PUSH2 0x13FB JUMPI SWAP5 DUP4 ADD SWAP5 DUP4 PUSH2 0x135B JUMP JUMPDEST PUSH1 0x11 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x8FC SWAP3 POP PUSH2 0x13DF JUMP JUMPDEST PUSH2 0x13D5 SWAP4 POP SWAP1 DUP2 PUSH2 0x1440 SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x71E JUMPI PUSH2 0x70F DUP2 DUP4 PUSH2 0x10EF JUMP JUMPDEST SWAP2 CODESIZE PUSH2 0x13C9 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x1360 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D696E696D756D206F66203130302077656920746F2064697374726962757465 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x757365207769746864726177207768656E206E6F74207374616B656400000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x21 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO PUSH2 0x1584 JUMPI PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x0 NOT SWAP3 SWAP1 DUP2 ISZERO ISZERO DUP3 DUP6 DIV DUP3 GT AND PUSH2 0x1570 JUMPI PUSH1 0x2 SLOAD SWAP2 DUP3 ISZERO PUSH2 0x155C JUMPI MUL DIV SWAP2 PUSH1 0x1 DUP4 GT ISZERO PUSH2 0x1556 JUMPI DUP3 ADD SWAP2 DUP3 GT PUSH2 0x1542 JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x15B0 JUMPI PUSH2 0x15A2 JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x15AD SWAP1 SELFBALANCE SWAP1 PUSH2 0x14F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x15D2 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x6 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1708 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x161B JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x1610 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1604 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x15FB JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x15B0 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x16C3 JUMPI DUP1 ISZERO PUSH2 0x1694 JUMPI PUSH1 0x2 EQ PUSH2 0x1672 JUMPI PUSH1 0x40 MLOAD PUSH2 0x1655 DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0xD DUP2 MSTORE PUSH13 0x7374617465206661696C757265 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167E DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH6 0x195E1A5D1959 PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x16A1 DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH18 0x616363657074696E67206465706F73697473 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x16D0 DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH6 0x1CDD185AD959 PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP INVALID 0xF6 MSTORE 0x22 0x23 SGT 0xE2 DUP5 MSIZE MSTORE DUP14 SWAP3 SIGNEXTEND PUSH6 0x115C16C04F3E 0xFC DUP3 0xAA 0xED 0xC9 PUSH28 0xE59F3F377C0D3FA26469706673582212206AEEFD5076AF57AE83CC08 0xD9 0xC1 MSTORE 0xF8 0xEB 0xE5 DUP8 SAR CALLVALUE 0x5C SMOD 0x4B COINBASE 0xC6 CALLDATALOAD SAR ISZERO PUSH21 0x428D664736F6C63430008100033A2646970667358 0x22 SLT KECCAK256 SWAP12 0xB9 SWAP8 PUSH28 0x874D7836B1C619322B73CFDA86513F0FD3F546F5875074BCB23436D7 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ",
              "sourceMap": "148:1868:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;148:1868:16;;;;;;-1:-1:-1;;;;;148:1868:16;;;;;;;;;;;;;;;719:10:9;1240:68:0;719:10:9;1248:23:0;;1240:68;:::i;:::-;2006:22;;148:1868:16;;-1:-1:-1;;;;;;;148:1868:16;;;;;;;2410:40:0;148:1868:16;;2410:40:0;148:1868:16;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;148:1868:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;1756:20;148:1868;;1756:20;:::i;:::-;148:1868;;;;-1:-1:-1;;;1842:19:16;;148:1868;;;;;;-1:-1:-1;;;;;148:1868:16;;;;;;;1812:28;;;;;148:1868;;;;1842:19;;;;;;;;;;;148:1868;;;;;;;;;;;;;;;;;;;;1842:19;;;;;;;;;;;;;148:1868;;;-1:-1:-1;;148:1868:16;;;;;;;;;;;;;;;;;;;;1842:19;;148:1868;;;;;;;;;;;;;1842:19;;;;;;;148:1868;;;;;-1:-1:-1;;;148:1868:16;;;;;;;;1842:19;;;-1:-1:-1;1842:19:16;;;148:1868;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;148:1868:16;;;;-1:-1:-1;;;;;148:1868:16;;;;;;;;;;;;;;;;;;;;;1191:21;148:1868;;;;1136:77;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;148:1868:16;;;;;1184:4;148:1868;;;;;;;;;;;;;;;1136:77;;;;;;;;;148:1868;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1255:17;148:1868;;;;;;;;;;;;;;1307:50;;;;;148:1868;;;;;;1307:50;;;;;148:1868;1307:50;;148:1868;1307:50;;;;;;;;;;;;;;;;;;;;148:1868;-1:-1:-1;;148:1868:16;;;;1401:10;148:1868;;-1:-1:-1;;;;;148:1868:16;;;;;;;;;;;;;;;;-1:-1:-1;1368:76:16;;-1:-1:-1;148:1868:16;;1368:76;148:1868;;;;;;;;;;1307:50;148:1868;;;;;;;;;;;;-1:-1:-1;;148:1868:16;;;;;;1368:76;1307:50;;;;;148:1868;-1:-1:-1;;;148:1868:16;;;;;;;;1307:50;148:1868;;;;;;;;;;-1:-1:-1;;;148:1868:16;;;;;;;;1136:77;148:1868;;;;;;;;;1136:77;-1:-1:-1;;;148:1868:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;148:1868:16;;;;;;;;;;;;;;;;-1:-1:-1;;148:1868:16;;;;;-1:-1:-1;;;;;148:1868:16;;;;;;;;;;;;;;;1968:17;148:1868;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;148:1868:16;;;;;1240:68:0;719:10:9;1248:23:0;;1240:68;:::i;:::-;-1:-1:-1;;;;;;148:1868:16;;;;;2410:40:0;148:1868:16;;2410:40:0;148:1868:16;;;;;;;;;;;;;;;;;1562:12;148:1868;;;;;;;;;;;;;;;-1:-1:-1;;148:1868:16;;;;;;;193:33;;;;;148:1868;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;148:1868:16;;;;;-1:-1:-1;;;;;148:1868:16;;;;;;;;;1240:68:0;148:1868:16;;;;719:10:9;1248:23:0;1240:68;:::i;:::-;148:1868:16;;;939:46;148:1868;;;939:46;148:1868;;;;1562:12;148:1868;;;;;;1562:12;-1:-1:-1;148:1868:16;;;;-1:-1:-1;148:1868:16;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "1597800",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "create(address)": "infinite",
                "doesStakingPoolExist(address)": "2479",
                "getStakingPool(uint256)": "infinite",
                "numberOfStakingPools()": "2315",
                "owner()": "2402",
                "renounceOwnership()": "26027",
                "setFrensPoolShare(address)": "26570",
                "stakingPools(uint256)": "4450",
                "transferOwnership(address)": "26195"
              }
            },
            "methodIdentifiers": {
              "create(address)": "9ed93318",
              "doesStakingPoolExist(address)": "76f42f8a",
              "getStakingPool(uint256)": "a2b44d75",
              "numberOfStakingPools()": "6202d396",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "setFrensPoolShare(address)": "2edaf74d",
              "stakingPools(uint256)": "5aad6cf0",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depContAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ssvRegistryAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositContractAddress\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"signaturesRequired\",\"type\":\"uint256\"}],\"name\":\"Owners\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingPoolAddress\",\"type\":\"address\"}],\"name\":\"doesStakingPoolExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfStakingPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"frensPoolShareAddress_\",\"type\":\"address\"}],\"name\":\"setFrensPoolShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPools\",\"outputs\":[{\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\",\"keccak256\":\"0xf0f689f041c9970ece22ba42dc66cacf2aee78699e1eab26658becb738322356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"./interfaces/IStakingPoolFactory.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\n\\n\\ncontract StakingPool is Ownable {\\n\\n  event Deposit(address depositContractAddress, address caller);\\n\\n  mapping (uint => uint) public depositAmount;\\n  uint public totalDeposits;\\n  uint[] public idsInThisPool;\\n\\n  enum State { acceptingDeposits, staked, exited }\\n  State currentState;\\n\\n  address public depositContractAddress;\\n  address private rightfulOwner;\\n  bytes public validatorPubKey;\\n\\n  IDepositContract depositContract;\\n  IStakingPoolFactory factoryContract;\\n  IFrensPoolShare frensPoolShare;\\n\\n  constructor(address depositContractAddress_, address factory_, address frensPoolShareAddress_) {\\n    currentState = State.acceptingDeposits;\\n    depositContractAddress = depositContractAddress_;\\n    depositContract = IDepositContract(depositContractAddress);\\n    factoryContract = IStakingPoolFactory(factory_);\\n    frensPoolShare = IFrensPoolShare(frensPoolShareAddress_);\\n\\n  }\\n\\n  function deposit(address userAddress) public payable {\\n    require(currentState == State.acceptingDeposits, \\\"not accepting deposits\\\");\\n    require(msg.value != 0, \\\"must deposit ether\\\");\\n    uint id = frensPoolShare.incrementTokenId();\\n    depositAmount[id] = msg.value;\\n    totalDeposits += msg.value;\\n    idsInThisPool.push(id);\\n    frensPoolShare.mint(userAddress, id, address(this));\\n  }\\n\\n  function addToDeposit(uint _id) public payable {\\n    require(frensPoolShare.exists(_id), \\\"not exist\\\");\\n    require(frensPoolShare.getPoolById(_id) == address(this), \\\"wrong staking pool\\\");\\n    require(currentState == State.acceptingDeposits, \\\"not accepting deposits\\\");\\n    require(currentState == State.acceptingDeposits);\\n    depositAmount[_id] += msg.value;\\n    totalDeposits += msg.value;\\n  }\\n\\n  function withdraw(uint _id, uint _amount) public {\\n    require(currentState != State.staked, \\\"cannot withdraw once staked\\\");\\n    require(msg.sender == frensPoolShare.ownerOf(_id), \\\"not the owner\\\");\\n    require(depositAmount[_id] >= _amount, \\\"not enough deposited\\\");\\n    depositAmount[_id] -= _amount;\\n    totalDeposits -= _amount;\\n    payable(msg.sender).transfer(_amount);\\n  }\\n\\n  function distribute() public {\\n    require(currentState == State.staked, \\\"use withdraw when not staked\\\");\\n    uint contractBalance = address(this).balance;\\n    require(contractBalance > 100, \\\"minimum of 100 wei to distribute\\\");\\n    for(uint i=0; i<idsInThisPool.length; i++) {\\n      uint id = idsInThisPool[i];\\n      address tokenOwner = frensPoolShare.ownerOf(id);\\n      uint share = _getShare(id, contractBalance);\\n      payable(tokenOwner).transfer(share);\\n    }\\n  }\\n\\n  function _getShare(uint _id, uint _contractBalance) internal view returns(uint) {\\n    if(depositAmount[_id] == 0) return 0;\\n    uint calcedShare =  _contractBalance * depositAmount[_id] / totalDeposits;\\n    if(calcedShare > 1){\\n      return(calcedShare - 1); //steal 1 wei to avoid rounding errors drawing balance negative\\n    }else return 0;\\n  }\\n\\n  function getShare(uint _id) public view returns(uint) {\\n    uint contractBalance = address(this).balance;\\n    return _getShare(_id, contractBalance);\\n  }\\n\\n  function getDistributableShare(uint _id) public view returns(uint) {\\n    if(currentState == State.acceptingDeposits) {\\n      return 0;\\n    } else {\\n      return getShare(_id);\\n    }\\n  }\\n\\n  function getPubKey() public view returns(bytes memory){\\n    return validatorPubKey;\\n  }\\n\\n  function setPubKey(bytes memory publicKey) public onlyOwner{\\n    validatorPubKey = publicKey;\\n  }\\n\\n  function getState() public view returns(string memory){\\n    if(currentState == State.staked) return \\\"staked\\\";\\n    if(currentState == State.acceptingDeposits) return \\\"accepting deposits\\\";\\n    if(currentState == State.exited) return \\\"exited\\\";\\n    return \\\"state failure\\\"; //should never happen\\n  }\\n\\n  function getDepositAmount(uint _id) public view returns(uint){\\n    return depositAmount[_id];\\n  }\\n\\n\\n  function stake(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) public onlyOwner{\\n    require(address(this).balance >= 32 ether, \\\"not enough eth\\\");\\n    require(currentState == State.acceptingDeposits, \\\"wrong state\\\");\\n    bytes memory zero;\\n    if(keccak256(validatorPubKey) != keccak256(zero)){\\n      require(keccak256(validatorPubKey) == keccak256(pubkey), \\\"pubkey does not match stored value\\\");\\n    } else validatorPubKey = pubkey;\\n    currentState = State.staked;\\n    uint value = 32 ether;\\n    //get expected withdrawal_credentials based on contract address\\n    bytes memory withdrawalCredFromAddr = _toWithdrawalCred(address(this));\\n    //compare expected withdrawal_credentials to provided\\n    require(keccak256(withdrawal_credentials) == keccak256(withdrawalCredFromAddr), \\\"withdrawal credential mismatch\\\");\\n    depositContract.deposit{value: value}(pubkey, withdrawal_credentials, signature, deposit_data_root);\\n    emit Deposit(depositContractAddress, msg.sender);\\n  }\\n\\n  function _toWithdrawalCred(address a) private pure returns (bytes memory) {\\n    uint uintFromAddress = uint256(uint160(a));\\n    bytes memory withdralDesired = abi.encodePacked(uintFromAddress + 0x0100000000000000000000000000000000000000000000000000000000000000);\\n    return withdralDesired;\\n  }\\n\\n//REMOVE rugpull is for testing only and should not be in the mainnet version\\n  function rugpull() public onlyOwner{\\n    payable(msg.sender).transfer(address(this).balance);\\n  }\\n//REMOVE setFrensPoolShare is for testing only and should not be in the mainnet version\\n  function setFrensPoolShare(address frensPoolShareAddress_) public onlyOwner {\\n    frensPoolShare = IFrensPoolShare(frensPoolShareAddress_);\\n  }\\n\\n  function unstake() public {\\n    distribute();\\n    currentState = State.exited;\\n    //TODO what else needs to be in here (probably a limiting modifier and/or some requires)\\n  }\\n\\n\\n  // to support receiving ETH by default\\n  receive() external payable {\\n    /*\\n    _tokenId++;\\n    uint256 id = _tokenId;\\n    depositAmount[id] = msg.value;\\n    _mint(msg.sender, id);\\n    */\\n  }\\n\\n  fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x06c3b6e938c569f7fd3cf2f1603a22a6d973d78eac76eb4061b8dc69a886f4a9\",\"license\":\"MIT\"},\"contracts/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./StakingPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract StakingPoolFactory is Ownable{\\n\\n\\n\\n  StakingPool[] public stakingPools;\\n  mapping(address => bool) existsStakingPool;\\n\\n\\n  address depositContractAddress;\\n  address ssvRegistryAddress;\\n  address frensPoolShareAddress;\\n\\n  event Create(\\n    uint indexed contractId, //do we use this for anything?\\n    address indexed contractAddress,\\n    address creator,\\n    address owner,\\n    address depositContractAddress\\n  );\\n\\n  event Owners(\\n    address indexed contractAddress,\\n    address[] owners,\\n    uint256 indexed signaturesRequired\\n  );\\n\\n\\n  constructor(address depContAddress_, address ssvRegistryAddress_) {\\n    depositContractAddress = depContAddress_;\\n    ssvRegistryAddress = ssvRegistryAddress_;\\n  }\\n  function setFrensPoolShare(address frensPoolShareAddress_) public onlyOwner {\\n    frensPoolShareAddress = frensPoolShareAddress_;\\n  }\\n\\n\\n  function create(\\n    address owner_\\n  ) public returns(address, uint) {\\n    uint id = numberOfStakingPools();\\n\\n    StakingPool stakingPool = new StakingPool(depositContractAddress, address(this), frensPoolShareAddress);\\n    stakingPools.push(stakingPool);\\n    existsStakingPool[address(stakingPool)] = true;\\n    StakingPool(stakingPool).transferOwnership(owner_);\\n    emit Create(id, address(stakingPool), msg.sender, owner_, depositContractAddress);\\n    return(address(stakingPool), id);\\n  }\\n\\n  function numberOfStakingPools() public view returns(uint) {\\n    return stakingPools.length;\\n  }\\n\\n  function getStakingPool(uint256 _index) public view returns (\\n    address stakingPoolAddress,\\n    uint balance,\\n    address owner\\n  ) {\\n    StakingPool stakingPool = stakingPools[_index];\\n    return (address(stakingPool), address(stakingPool).balance, stakingPool.owner());\\n  }\\n\\n  function doesStakingPoolExist(address _stakingPoolAddress) public view returns(bool){\\n    return(existsStakingPool[_stakingPoolAddress]);\\n  }\\n\\n\\n}\\n\",\"keccak256\":\"0xf8990a59c6a9110b6d029ea2c7aaa20e51b0db71672356729f8ada88e7ed3a8b\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"\\npragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IDepositContract {\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n}\\n\",\"keccak256\":\"0x4b619bae881edf06faa291e696d317c2321d9f315352439ab34e00f570a012c1\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensPoolShare.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\n\\ninterface IFrensPoolShare is IERC721Enumerable{\\n  function incrementTokenId() external returns(uint);\\n\\n  function mint(address userAddress, uint id, address _pool) external;\\n\\n  function exists(uint _id) external returns(bool);\\n\\n  function getPoolById(uint _id) external view returns(address);\\n\\n\\n}\\n\",\"keccak256\":\"0x07640dc8de1a1f5294413f60018e044f78ca3298c7a1ec91b6df4f8ae119b08e\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPoolFactory.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IStakingPoolFactory {\\n\\n  function doesStakingPoolExist(address stakingPoolAddress) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x5291fed439a327be5ddb12cce60acf5641d4e04109c5d2c8bdcdc5098d9fa58f\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 7,
                "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 3540,
                "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
                "label": "stakingPools",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_contract(StakingPool)3530)dyn_storage"
              },
              {
                "astId": 3544,
                "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
                "label": "existsStakingPool",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 3546,
                "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
                "label": "depositContractAddress",
                "offset": 0,
                "slot": "3",
                "type": "t_address"
              },
              {
                "astId": 3548,
                "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
                "label": "ssvRegistryAddress",
                "offset": 0,
                "slot": "4",
                "type": "t_address"
              },
              {
                "astId": 3550,
                "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
                "label": "frensPoolShareAddress",
                "offset": 0,
                "slot": "5",
                "type": "t_address"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_contract(StakingPool)3530)dyn_storage": {
                "base": "t_contract(StakingPool)3530",
                "encoding": "dynamic_array",
                "label": "contract StakingPool[]",
                "numberOfBytes": "32"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_contract(StakingPool)3530": {
                "encoding": "inplace",
                "label": "contract StakingPool",
                "numberOfBytes": "20"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "contracts/ToColor.sol": {
        "ToColor": {
          "abi": [],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220f1a4369c373269bd30d248f96e1ad4240a351f67cdbaea1142086d3af4f3529864736f6c63430008100033",
              "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL LOG4 CALLDATASIZE SWAP13 CALLDATACOPY ORIGIN PUSH10 0xBD30D248F96E1AD4240A CALLDATALOAD 0x1F PUSH8 0xCDBAEA1142086D3A DELEGATECALL RETURN MSTORE SWAP9 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ",
              "sourceMap": "65:400:17:-:0;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "600080fdfea2646970667358221220f1a4369c373269bd30d248f96e1ad4240a351f67cdbaea1142086d3af4f3529864736f6c63430008100033",
              "opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL LOG4 CALLDATASIZE SWAP13 CALLDATACOPY ORIGIN PUSH10 0xBD30D248F96E1AD4240A CALLDATALOAD 0x1F PUSH8 0xCDBAEA1142086D3A DELEGATECALL RETURN MSTORE SWAP9 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ",
              "sourceMap": "65:400:17:-:0;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "11600",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "internal": {
                "toColor(bytes3)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ToColor.sol\":\"ToColor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ToColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary ToColor {\\n    bytes16 internal constant ALPHABET = '0123456789abcdef';\\n\\n    function toColor(bytes3 value) internal pure returns (string memory) {\\n      bytes memory buffer = new bytes(6);\\n      for (uint256 i = 0; i < 3; i++) {\\n          buffer[i*2+1] = ALPHABET[uint8(value[i]) & 0xf];\\n          buffer[i*2] = ALPHABET[uint8(value[i]>>4) & 0xf];\\n      }\\n      return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x80d48cfb10669856b687d9ed46b3571ba82505490b020fc1b5128dc2aaa70cbd\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "contracts/interfaces/IDepositContract.sol": {
        "IDepositContract": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "pubkey",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "withdrawal_credentials",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "deposit_data_root",
                  "type": "bytes32"
                }
              ],
              "name": "deposit",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "deposit(bytes,bytes,bytes,bytes32)": "22895118"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IDepositContract.sol\":\"IDepositContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"\\npragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IDepositContract {\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n}\\n\",\"keccak256\":\"0x4b619bae881edf06faa291e696d317c2321d9f315352439ab34e00f570a012c1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "contracts/interfaces/IFrensPoolShare.sol": {
        "IFrensPoolShare": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "approved",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "exists",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "getPoolById",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "incrementTokenId",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "userAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_pool",
                  "type": "address"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "_approved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "tokenByIndex",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "tokenOfOwnerByIndex",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "approve(address,uint256)": {
                "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the number of tokens in ``owner``'s account."
              },
              "getApproved(uint256)": {
                "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
              },
              "ownerOf(uint256)": {
                "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              },
              "tokenByIndex(uint256)": {
                "details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
              },
              "tokenOfOwnerByIndex(address,uint256)": {
                "details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
              },
              "totalSupply()": {
                "details": "Returns the total amount of tokens stored by the contract."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "exists(uint256)": "4f558e79",
              "getApproved(uint256)": "081812fc",
              "getPoolById(uint256)": "0bc59b38",
              "incrementTokenId()": "4f3130fa",
              "isApprovedForAll(address,address)": "e985e9c5",
              "mint(address,uint256,address)": "0d4d1513",
              "ownerOf(uint256)": "6352211e",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "tokenByIndex(uint256)": "4f6ccce7",
              "tokenOfOwnerByIndex(address,uint256)": "2f745c59",
              "totalSupply()": "18160ddd",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPoolById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IFrensPoolShare.sol\":\"IFrensPoolShare\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\",\"keccak256\":\"0xf0f689f041c9970ece22ba42dc66cacf2aee78699e1eab26658becb738322356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensPoolShare.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\n\\ninterface IFrensPoolShare is IERC721Enumerable{\\n  function incrementTokenId() external returns(uint);\\n\\n  function mint(address userAddress, uint id, address _pool) external;\\n\\n  function exists(uint _id) external returns(bool);\\n\\n  function getPoolById(uint _id) external view returns(address);\\n\\n\\n}\\n\",\"keccak256\":\"0x07640dc8de1a1f5294413f60018e044f78ca3298c7a1ec91b6df4f8ae119b08e\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "contracts/interfaces/ISSVRegistry.sol": {
        "ISSVRegistry": {
          "abi": [
            {
              "inputs": [],
              "name": "ExceedRegisteredOperatorsByAccountLimit",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "ExceedValidatorLimit",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidPublicKeyLength",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "OessDataStructureInvalid",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "OperatorDeleted",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "OperatorNotFound",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "ValidatorAlreadyExists",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "activeValidatorCount",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                }
              ],
              "name": "disableOwnerValidators",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                }
              ],
              "name": "enableOwnerValidators",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "operatorId",
                  "type": "uint32"
                }
              ],
              "name": "getOperatorById",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "operatorId",
                  "type": "uint32"
                }
              ],
              "name": "getOperatorFee",
              "outputs": [
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "operatorId",
                  "type": "uint32"
                }
              ],
              "name": "getOperatorOwner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                }
              ],
              "name": "getOperatorsByOwnerAddress",
              "outputs": [
                {
                  "internalType": "uint32[]",
                  "name": "",
                  "type": "uint32[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "validatorPublicKey",
                  "type": "bytes"
                }
              ],
              "name": "getOperatorsByValidator",
              "outputs": [
                {
                  "internalType": "uint32[]",
                  "name": "",
                  "type": "uint32[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "name": "getValidatorOwner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                }
              ],
              "name": "getValidatorsByAddress",
              "outputs": [
                {
                  "internalType": "bytes[]",
                  "name": "",
                  "type": "bytes[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "initialize",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                }
              ],
              "name": "isLiquidated",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "fee",
                  "type": "uint64"
                }
              ],
              "name": "registerOperator",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                },
                {
                  "internalType": "uint32[]",
                  "name": "operatorIds",
                  "type": "uint32[]"
                },
                {
                  "internalType": "bytes[]",
                  "name": "sharesPublicKeys",
                  "type": "bytes[]"
                },
                {
                  "internalType": "bytes[]",
                  "name": "sharesEncrypted",
                  "type": "bytes[]"
                }
              ],
              "name": "registerValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "operatorId",
                  "type": "uint32"
                }
              ],
              "name": "removeOperator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "name": "removeValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "operatorId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint64",
                  "name": "fee",
                  "type": "uint64"
                }
              ],
              "name": "updateOperatorFee",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "operatorId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "score",
                  "type": "uint32"
                }
              ],
              "name": "updateOperatorScore",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "name": "validators",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                },
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint32",
                  "name": "operatorId",
                  "type": "uint32"
                }
              ],
              "name": "validatorsPerOperatorCount",
              "outputs": [
                {
                  "internalType": "uint32",
                  "name": "",
                  "type": "uint32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "activeValidatorCount()": {
                "details": "Gets active validator count."
              },
              "getOperatorById(uint32)": {
                "details": "Gets an operator by operator id.",
                "params": {
                  "operatorId": "Operator id."
                }
              },
              "getOperatorFee(uint32)": {
                "details": "Gets operator current fee.",
                "params": {
                  "operatorId": "Operator id."
                }
              },
              "getOperatorOwner(uint32)": {
                "details": "Gets operator's owner.",
                "params": {
                  "operatorId": "Operator id."
                }
              },
              "getOperatorsByOwnerAddress(address)": {
                "details": "Returns operators for owner.",
                "params": {
                  "ownerAddress": "Owner's address."
                }
              },
              "getOperatorsByValidator(bytes)": {
                "details": "Gets operators list which are in use by validator.",
                "params": {
                  "validatorPublicKey": "Validator's public key."
                }
              },
              "getValidatorOwner(bytes)": {
                "details": "Get validator's owner.",
                "params": {
                  "publicKey": "Validator's public key."
                }
              },
              "getValidatorsByAddress(address)": {
                "details": "Gets a validator public keys by owner's address.",
                "params": {
                  "ownerAddress": "Owner's Address."
                }
              },
              "initialize()": {
                "details": "Initializes the contract"
              },
              "registerOperator(string,address,bytes,uint64)": {
                "details": "Registers a new operator.",
                "params": {
                  "fee": "The fee which the operator charges for each block.",
                  "name": "Operator's display name.",
                  "ownerAddress": "Operator's ethereum address that can collect fees.",
                  "publicKey": "Operator's public key. Will be used to encrypt secret shares of validators keys."
                }
              },
              "registerValidator(address,bytes,uint32[],bytes[],bytes[])": {
                "details": "Registers a new validator.",
                "params": {
                  "operatorIds": "Operator ids.",
                  "ownerAddress": "The user's ethereum address that is the owner of the validator.",
                  "publicKey": "Validator public key.",
                  "sharesEncrypted": "Encrypted private keys.",
                  "sharesPublicKeys": "Shares public keys."
                }
              },
              "removeOperator(uint32)": {
                "details": "removes an operator.",
                "params": {
                  "operatorId": "Operator id."
                }
              },
              "removeValidator(bytes)": {
                "details": "removes a validator.",
                "params": {
                  "publicKey": "Validator's public key."
                }
              },
              "updateOperatorFee(uint32,uint64)": {
                "details": "Updates an operator fee.",
                "params": {
                  "fee": "New operator fee.",
                  "operatorId": "Operator id."
                }
              },
              "updateOperatorScore(uint32,uint32)": {
                "details": "Updates an operator fee.",
                "params": {
                  "operatorId": "Operator id.",
                  "score": "New score."
                }
              },
              "validators(bytes)": {
                "details": "Gets an validator by public key.",
                "params": {
                  "publicKey": "Validator's public key."
                }
              },
              "validatorsPerOperatorCount(uint32)": {
                "details": "Get validators amount per operator.",
                "params": {
                  "operatorId": "Operator public key"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "activeValidatorCount()": "2340e8d3",
              "disableOwnerValidators(address)": "27467a18",
              "enableOwnerValidators(address)": "45413bf4",
              "getOperatorById(uint32)": "0260d443",
              "getOperatorFee(uint32)": "f8f08d7f",
              "getOperatorOwner(uint32)": "e7b21748",
              "getOperatorsByOwnerAddress(address)": "0dc1eeff",
              "getOperatorsByValidator(bytes)": "053e8349",
              "getValidatorOwner(bytes)": "c87b3038",
              "getValidatorsByAddress(address)": "0e32066a",
              "initialize()": "8129fc1c",
              "isLiquidated(address)": "a3b3f606",
              "registerOperator(string,address,bytes,uint64)": "580ee1b8",
              "registerValidator(address,bytes,uint32[],bytes[],bytes[])": "9b4ddb5d",
              "removeOperator(uint32)": "2e1d2f05",
              "removeValidator(bytes)": "b2f569c5",
              "updateOperatorFee(uint32,uint64)": "85157361",
              "updateOperatorScore(uint32,uint32)": "5f10ac30",
              "validators(bytes)": "6c36511a",
              "validatorsPerOperatorCount(uint32)": "d379a5f2"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ExceedRegisteredOperatorsByAccountLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedValidatorLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OessDataStructureInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorDeleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValidatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"activeValidatorCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"disableOwnerValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"enableOwnerValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"getOperatorById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"getOperatorFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"getOperatorOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getOperatorsByOwnerAddress\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"validatorPublicKey\",\"type\":\"bytes\"}],\"name\":\"getOperatorsByValidator\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"getValidatorOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getValidatorsByAddress\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"isLiquidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"fee\",\"type\":\"uint64\"}],\"name\":\"registerOperator\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint32[]\",\"name\":\"operatorIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sharesPublicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sharesEncrypted\",\"type\":\"bytes[]\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"fee\",\"type\":\"uint64\"}],\"name\":\"updateOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"score\",\"type\":\"uint32\"}],\"name\":\"updateOperatorScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"operatorId\",\"type\":\"uint32\"}],\"name\":\"validatorsPerOperatorCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activeValidatorCount()\":{\"details\":\"Gets active validator count.\"},\"getOperatorById(uint32)\":{\"details\":\"Gets an operator by operator id.\",\"params\":{\"operatorId\":\"Operator id.\"}},\"getOperatorFee(uint32)\":{\"details\":\"Gets operator current fee.\",\"params\":{\"operatorId\":\"Operator id.\"}},\"getOperatorOwner(uint32)\":{\"details\":\"Gets operator's owner.\",\"params\":{\"operatorId\":\"Operator id.\"}},\"getOperatorsByOwnerAddress(address)\":{\"details\":\"Returns operators for owner.\",\"params\":{\"ownerAddress\":\"Owner's address.\"}},\"getOperatorsByValidator(bytes)\":{\"details\":\"Gets operators list which are in use by validator.\",\"params\":{\"validatorPublicKey\":\"Validator's public key.\"}},\"getValidatorOwner(bytes)\":{\"details\":\"Get validator's owner.\",\"params\":{\"publicKey\":\"Validator's public key.\"}},\"getValidatorsByAddress(address)\":{\"details\":\"Gets a validator public keys by owner's address.\",\"params\":{\"ownerAddress\":\"Owner's Address.\"}},\"initialize()\":{\"details\":\"Initializes the contract\"},\"registerOperator(string,address,bytes,uint64)\":{\"details\":\"Registers a new operator.\",\"params\":{\"fee\":\"The fee which the operator charges for each block.\",\"name\":\"Operator's display name.\",\"ownerAddress\":\"Operator's ethereum address that can collect fees.\",\"publicKey\":\"Operator's public key. Will be used to encrypt secret shares of validators keys.\"}},\"registerValidator(address,bytes,uint32[],bytes[],bytes[])\":{\"details\":\"Registers a new validator.\",\"params\":{\"operatorIds\":\"Operator ids.\",\"ownerAddress\":\"The user's ethereum address that is the owner of the validator.\",\"publicKey\":\"Validator public key.\",\"sharesEncrypted\":\"Encrypted private keys.\",\"sharesPublicKeys\":\"Shares public keys.\"}},\"removeOperator(uint32)\":{\"details\":\"removes an operator.\",\"params\":{\"operatorId\":\"Operator id.\"}},\"removeValidator(bytes)\":{\"details\":\"removes a validator.\",\"params\":{\"publicKey\":\"Validator's public key.\"}},\"updateOperatorFee(uint32,uint64)\":{\"details\":\"Updates an operator fee.\",\"params\":{\"fee\":\"New operator fee.\",\"operatorId\":\"Operator id.\"}},\"updateOperatorScore(uint32,uint32)\":{\"details\":\"Updates an operator fee.\",\"params\":{\"operatorId\":\"Operator id.\",\"score\":\"New score.\"}},\"validators(bytes)\":{\"details\":\"Gets an validator by public key.\",\"params\":{\"publicKey\":\"Validator's public key.\"}},\"validatorsPerOperatorCount(uint32)\":{\"details\":\"Get validators amount per operator.\",\"params\":{\"operatorId\":\"Operator public key\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ExceedRegisteredOperatorsByAccountLimit()\":[{\"notice\":\"errors \"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISSVRegistry.sol\":\"ISSVRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/ISSVRegistry.sol\":{\"content\":\"// File: contracts/ISSVRegistry.sol\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.2;\\n\\ninterface ISSVRegistry {\\n    struct Oess {\\n        uint32 operatorId;\\n        bytes sharedPublicKey;\\n        bytes encryptedKey;\\n    }\\n\\n    /** errors */\\n    error ExceedRegisteredOperatorsByAccountLimit();\\n    error OperatorDeleted();\\n    error ValidatorAlreadyExists();\\n    error ExceedValidatorLimit();\\n    error OperatorNotFound();\\n    error InvalidPublicKeyLength();\\n    error OessDataStructureInvalid();\\n\\n    /**\\n     * @dev Initializes the contract\\n     */\\n    function initialize() external;\\n\\n    /**\\n     * @dev Registers a new operator.\\n     * @param name Operator's display name.\\n     * @param ownerAddress Operator's ethereum address that can collect fees.\\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\\n     * @param fee The fee which the operator charges for each block.\\n     */\\n    function registerOperator(string calldata name, address ownerAddress, bytes calldata publicKey, uint64 fee) external returns (uint32);\\n\\n    /**\\n     * @dev removes an operator.\\n     * @param operatorId Operator id.\\n     */\\n    function removeOperator(uint32 operatorId) external;\\n\\n    /**\\n     * @dev Updates an operator fee.\\n     * @param operatorId Operator id.\\n     * @param fee New operator fee.\\n     */\\n    function updateOperatorFee(\\n        uint32 operatorId,\\n        uint64 fee\\n    ) external;\\n\\n    /**\\n     * @dev Updates an operator fee.\\n     * @param operatorId Operator id.\\n     * @param score New score.\\n     */\\n    function updateOperatorScore(\\n        uint32 operatorId,\\n        uint32 score\\n    ) external;\\n\\n    /**\\n     * @dev Registers a new validator.\\n     * @param ownerAddress The user's ethereum address that is the owner of the validator.\\n     * @param publicKey Validator public key.\\n     * @param operatorIds Operator ids.\\n     * @param sharesPublicKeys Shares public keys.\\n     * @param sharesEncrypted Encrypted private keys.\\n     */\\n    function registerValidator(\\n        address ownerAddress,\\n        bytes calldata publicKey,\\n        uint32[] calldata operatorIds,\\n        bytes[] calldata sharesPublicKeys,\\n        bytes[] calldata sharesEncrypted\\n    ) external;\\n\\n    /**\\n     * @dev removes a validator.\\n     * @param publicKey Validator's public key.\\n     */\\n    function removeValidator(bytes calldata publicKey) external;\\n\\n    function enableOwnerValidators(address ownerAddress) external;\\n\\n    function disableOwnerValidators(address ownerAddress) external;\\n\\n    function isLiquidated(address ownerAddress) external view returns (bool);\\n\\n    /**\\n     * @dev Gets an operator by operator id.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorById(uint32 operatorId)\\n        external view\\n        returns (\\n            string memory,\\n            address,\\n            bytes memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    /**\\n     * @dev Returns operators for owner.\\n     * @param ownerAddress Owner's address.\\n     */\\n    function getOperatorsByOwnerAddress(address ownerAddress)\\n        external view\\n        returns (uint32[] memory);\\n\\n    /**\\n     * @dev Gets operators list which are in use by validator.\\n     * @param validatorPublicKey Validator's public key.\\n     */\\n    function getOperatorsByValidator(bytes calldata validatorPublicKey)\\n        external view\\n        returns (uint32[] memory);\\n\\n    /**\\n     * @dev Gets operator's owner.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorOwner(uint32 operatorId) external view returns (address);\\n\\n    /**\\n     * @dev Gets operator current fee.\\n     * @param operatorId Operator id.\\n     */\\n    function getOperatorFee(uint32 operatorId)\\n        external view\\n        returns (uint64);\\n\\n    /**\\n     * @dev Gets active validator count.\\n     */\\n    function activeValidatorCount() external view returns (uint32);\\n\\n    /**\\n     * @dev Gets an validator by public key.\\n     * @param publicKey Validator's public key.\\n     */\\n    function validators(bytes calldata publicKey)\\n        external view\\n        returns (\\n            address,\\n            bytes memory,\\n            bool\\n        );\\n\\n    /**\\n     * @dev Gets a validator public keys by owner's address.\\n     * @param ownerAddress Owner's Address.\\n     */\\n    function getValidatorsByAddress(address ownerAddress)\\n        external view\\n        returns (bytes[] memory);\\n\\n    /**\\n     * @dev Get validator's owner.\\n     * @param publicKey Validator's public key.\\n     */\\n    function getValidatorOwner(bytes calldata publicKey) external view returns (address);\\n\\n    /**\\n     * @dev Get validators amount per operator.\\n     * @param operatorId Operator public key\\n     */\\n    function validatorsPerOperatorCount(uint32 operatorId) external view returns (uint32);\\n}\",\"keccak256\":\"0xc43589f0f38f8dcd2b808071bc46162081b6198be4baee9f44d5ff1556ffb10f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "errors": {
              "ExceedRegisteredOperatorsByAccountLimit()": [
                {
                  "notice": "errors "
                }
              ]
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "contracts/interfaces/IStakingPool.sol": {
        "IStakingPool": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "addToDeposit",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "userAddress",
                  "type": "address"
                }
              ],
              "name": "deposit",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "distribute",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "getDepositAmount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "getDistributableShare",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getPubKey",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "getShare",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getState",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "pubkey",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "withdrawal_credentials",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "deposit_data_root",
                  "type": "bytes32"
                }
              ],
              "name": "stake",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "unstake",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "addToDeposit(uint256)": "8620891c",
              "deposit(address)": "f340fa01",
              "distribute()": "e4fc6b6d",
              "getDepositAmount(uint256)": "378de45b",
              "getDistributableShare(uint256)": "678e300a",
              "getPubKey()": "4ad02ef1",
              "getShare(uint256)": "cfb5a5f8",
              "getState()": "1865c57d",
              "stake(bytes,bytes,bytes,bytes32)": "4b2b4e36",
              "unstake()": "2def6620",
              "withdraw(uint256,uint256)": "441a3e70"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDistributableShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPubKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IStakingPool.sol\":\"IStakingPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IStakingPool{\\n  function deposit(address userAddress) external payable;\\n\\n  function addToDeposit(uint _id) external payable;\\n\\n  function withdraw(uint _id, uint _amount) external;\\n\\n  function distribute() external;\\n\\n  function getShare(uint _id) external view returns(uint);\\n\\n  function getDistributableShare(uint _id) external view returns(uint);\\n\\n  function getPubKey() external view returns(bytes memory);\\n\\n  function getState() external view returns(string memory);\\n\\n  function getDepositAmount(uint _id) external view returns(uint);\\n\\n\\n  function stake(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) external;\\n\\n    function unstake() external;\\n\\n}\\n\",\"keccak256\":\"0xbf6d53e3751be73a2267c404636c6f403f9d2bae0328fd3043b9cb48f149593a\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "contracts/interfaces/IStakingPoolFactory.sol": {
        "IStakingPoolFactory": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "stakingPoolAddress",
                  "type": "address"
                }
              ],
              "name": "doesStakingPoolExist",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "doesStakingPoolExist(address)": "76f42f8a"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingPoolAddress\",\"type\":\"address\"}],\"name\":\"doesStakingPoolExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IStakingPoolFactory.sol\":\"IStakingPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IStakingPoolFactory.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IStakingPoolFactory {\\n\\n  function doesStakingPoolExist(address stakingPoolAddress) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x5291fed439a327be5ddb12cce60acf5641d4e04109c5d2c8bdcdc5098d9fa58f\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      }
    },
    "errors": [
      {
        "component": "general",
        "errorCode": "2072",
        "formattedMessage": "Warning: Unused local variable.\n  --> contracts/FrensPoolShare.sol:66:37:\n   |\n66 |     (uint32[] memory poolOperators, bytes memory pubKey) = getOperatorsForPool(poolAddress);\n   |                                     ^^^^^^^^^^^^^^^^^^^\n\n",
        "message": "Unused local variable.",
        "severity": "warning",
        "sourceLocation": {
          "end": 2204,
          "file": "contracts/FrensPoolShare.sol",
          "start": 2185
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "@openzeppelin/contracts/access/Ownable.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
          "exportedSymbols": {
            "Context": [
              1787
            ],
            "Ownable": [
              104
            ]
          },
          "id": 105,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "87:23:0"
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
              "file": "../utils/Context.sol",
              "id": 2,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 105,
              "sourceUnit": 1788,
              "src": "112:30:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 4,
                    "name": "Context",
                    "nameLocations": [
                      "668:7:0"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1787,
                    "src": "668:7:0"
                  },
                  "id": 5,
                  "nodeType": "InheritanceSpecifier",
                  "src": "668:7:0"
                }
              ],
              "canonicalName": "Ownable",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 3,
                "nodeType": "StructuredDocumentation",
                "src": "144:494:0",
                "text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
              },
              "fullyImplemented": true,
              "id": 104,
              "linearizedBaseContracts": [
                104,
                1787
              ],
              "name": "Ownable",
              "nameLocation": "657:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 7,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "698:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 104,
                  "src": "682:22:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "682:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                  "id": 13,
                  "name": "OwnershipTransferred",
                  "nameLocation": "717:20:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 12,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 9,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nameLocation": "754:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 13,
                        "src": "738:29:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 8,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "738:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 11,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "785:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 13,
                        "src": "769:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 10,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "769:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "737:57:0"
                  },
                  "src": "711:84:0"
                },
                {
                  "body": {
                    "id": 22,
                    "nodeType": "Block",
                    "src": "911:49:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 18,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1777,
                                "src": "940:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 19,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "940:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 17,
                            "name": "_transferOwnership",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 103,
                            "src": "921:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 20,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "921:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 21,
                        "nodeType": "ExpressionStatement",
                        "src": "921:32:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 14,
                    "nodeType": "StructuredDocumentation",
                    "src": "801:91:0",
                    "text": " @dev Initializes the contract setting the deployer as the initial owner."
                  },
                  "id": 23,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 15,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "908:2:0"
                  },
                  "returnParameters": {
                    "id": 16,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "911:0:0"
                  },
                  "scope": 104,
                  "src": "897:63:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 31,
                    "nodeType": "Block",
                    "src": "1091:30:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 29,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7,
                          "src": "1108:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 28,
                        "id": 30,
                        "nodeType": "Return",
                        "src": "1101:13:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 24,
                    "nodeType": "StructuredDocumentation",
                    "src": "966:65:0",
                    "text": " @dev Returns the address of the current owner."
                  },
                  "functionSelector": "8da5cb5b",
                  "id": 32,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nameLocation": "1045:5:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 25,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1050:2:0"
                  },
                  "returnParameters": {
                    "id": 28,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 27,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 32,
                        "src": "1082:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 26,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1082:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1081:9:0"
                  },
                  "scope": 104,
                  "src": "1036:85:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 45,
                    "nodeType": "Block",
                    "src": "1230:96:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 40,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 36,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 32,
                                  "src": "1248:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 37,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1248:7:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 38,
                                  "name": "_msgSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1777,
                                  "src": "1259:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 39,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1259:12:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1248:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                              "id": 41,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1273:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                                "typeString": "literal_string \"Ownable: caller is not the owner\""
                              },
                              "value": "Ownable: caller is not the owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                                "typeString": "literal_string \"Ownable: caller is not the owner\""
                              }
                            ],
                            "id": 35,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1240:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 42,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1240:68:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 43,
                        "nodeType": "ExpressionStatement",
                        "src": "1240:68:0"
                      },
                      {
                        "id": 44,
                        "nodeType": "PlaceholderStatement",
                        "src": "1318:1:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 33,
                    "nodeType": "StructuredDocumentation",
                    "src": "1127:77:0",
                    "text": " @dev Throws if called by any account other than the owner."
                  },
                  "id": 46,
                  "name": "onlyOwner",
                  "nameLocation": "1218:9:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 34,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1227:2:0"
                  },
                  "src": "1209:117:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 59,
                    "nodeType": "Block",
                    "src": "1722:47:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 55,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1759:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 54,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1751:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 53,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1751:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 56,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1751:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 52,
                            "name": "_transferOwnership",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 103,
                            "src": "1732:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 57,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1732:30:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 58,
                        "nodeType": "ExpressionStatement",
                        "src": "1732:30:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 47,
                    "nodeType": "StructuredDocumentation",
                    "src": "1332:331:0",
                    "text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
                  },
                  "functionSelector": "715018a6",
                  "id": 60,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 50,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 49,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "1712:9:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 46,
                        "src": "1712:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1712:9:0"
                    }
                  ],
                  "name": "renounceOwnership",
                  "nameLocation": "1677:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 48,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1694:2:0"
                  },
                  "returnParameters": {
                    "id": 51,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1722:0:0"
                  },
                  "scope": 104,
                  "src": "1668:101:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 82,
                    "nodeType": "Block",
                    "src": "1988:128:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 74,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 69,
                                "name": "newOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 63,
                                "src": "2006:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 72,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2026:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 71,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2018:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 70,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2018:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 73,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2018:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2006:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
                              "id": 75,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2030:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                                "typeString": "literal_string \"Ownable: new owner is the zero address\""
                              },
                              "value": "Ownable: new owner is the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                                "typeString": "literal_string \"Ownable: new owner is the zero address\""
                              }
                            ],
                            "id": 68,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1998:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 76,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1998:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 77,
                        "nodeType": "ExpressionStatement",
                        "src": "1998:73:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 79,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 63,
                              "src": "2100:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 78,
                            "name": "_transferOwnership",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 103,
                            "src": "2081:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 80,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2081:28:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 81,
                        "nodeType": "ExpressionStatement",
                        "src": "2081:28:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 61,
                    "nodeType": "StructuredDocumentation",
                    "src": "1775:138:0",
                    "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
                  },
                  "functionSelector": "f2fde38b",
                  "id": 83,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 66,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 65,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "1978:9:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 46,
                        "src": "1978:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1978:9:0"
                    }
                  ],
                  "name": "transferOwnership",
                  "nameLocation": "1927:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 64,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 63,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "1953:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 83,
                        "src": "1945:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 62,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1945:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1944:18:0"
                  },
                  "returnParameters": {
                    "id": 67,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1988:0:0"
                  },
                  "scope": 104,
                  "src": "1918:198:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 102,
                    "nodeType": "Block",
                    "src": "2333:124:0",
                    "statements": [
                      {
                        "assignments": [
                          90
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 90,
                            "mutability": "mutable",
                            "name": "oldOwner",
                            "nameLocation": "2351:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 102,
                            "src": "2343:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 89,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2343:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 92,
                        "initialValue": {
                          "id": 91,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7,
                          "src": "2362:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2343:25:0"
                      },
                      {
                        "expression": {
                          "id": 95,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 93,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7,
                            "src": "2378:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 94,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 86,
                            "src": "2387:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2378:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 96,
                        "nodeType": "ExpressionStatement",
                        "src": "2378:17:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 98,
                              "name": "oldOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 90,
                              "src": "2431:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 99,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 86,
                              "src": "2441:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 97,
                            "name": "OwnershipTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13,
                            "src": "2410:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 100,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2410:40:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 101,
                        "nodeType": "EmitStatement",
                        "src": "2405:45:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 84,
                    "nodeType": "StructuredDocumentation",
                    "src": "2122:143:0",
                    "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
                  },
                  "id": 103,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_transferOwnership",
                  "nameLocation": "2279:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 87,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 86,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "2306:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 103,
                        "src": "2298:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 85,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2298:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2297:18:0"
                  },
                  "returnParameters": {
                    "id": 88,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2333:0:0"
                  },
                  "scope": 104,
                  "src": "2270:187:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 105,
              "src": "639:1820:0",
              "usedErrors": []
            }
          ],
          "src": "87:2373:0"
        },
        "id": 0
      },
      "@openzeppelin/contracts/interfaces/IERC721Enumerable.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/interfaces/IERC721Enumerable.sol",
          "exportedSymbols": {
            "IERC165": [
              2026
            ],
            "IERC721": [
              1054
            ],
            "IERC721Enumerable": [
              1441
            ]
          },
          "id": 108,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 106,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "101:23:1"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
              "file": "../token/ERC721/extensions/IERC721Enumerable.sol",
              "id": 107,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 108,
              "sourceUnit": 1442,
              "src": "126:58:1",
              "symbolAliases": [],
              "unitAlias": ""
            }
          ],
          "src": "101:84:1"
        },
        "id": 1
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC721/ERC721.sol",
          "exportedSymbols": {
            "Address": [
              1765
            ],
            "Context": [
              1787
            ],
            "ERC165": [
              2014
            ],
            "ERC721": [
              938
            ],
            "IERC165": [
              2026
            ],
            "IERC721": [
              1054
            ],
            "IERC721Metadata": [
              1468
            ],
            "IERC721Receiver": [
              1072
            ],
            "Strings": [
              1990
            ]
          },
          "id": 939,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 109,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "92:23:2"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
              "file": "./IERC721.sol",
              "id": 110,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 939,
              "sourceUnit": 1055,
              "src": "117:23:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
              "file": "./IERC721Receiver.sol",
              "id": 111,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 939,
              "sourceUnit": 1073,
              "src": "141:31:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
              "file": "./extensions/IERC721Metadata.sol",
              "id": 112,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 939,
              "sourceUnit": 1469,
              "src": "173:42:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Address.sol",
              "file": "../../utils/Address.sol",
              "id": 113,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 939,
              "sourceUnit": 1766,
              "src": "216:33:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
              "file": "../../utils/Context.sol",
              "id": 114,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 939,
              "sourceUnit": 1788,
              "src": "250:33:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
              "file": "../../utils/Strings.sol",
              "id": 115,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 939,
              "sourceUnit": 1991,
              "src": "284:33:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
              "file": "../../utils/introspection/ERC165.sol",
              "id": 116,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 939,
              "sourceUnit": 2015,
              "src": "318:46:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 118,
                    "name": "Context",
                    "nameLocations": [
                      "632:7:2"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1787,
                    "src": "632:7:2"
                  },
                  "id": 119,
                  "nodeType": "InheritanceSpecifier",
                  "src": "632:7:2"
                },
                {
                  "baseName": {
                    "id": 120,
                    "name": "ERC165",
                    "nameLocations": [
                      "641:6:2"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 2014,
                    "src": "641:6:2"
                  },
                  "id": 121,
                  "nodeType": "InheritanceSpecifier",
                  "src": "641:6:2"
                },
                {
                  "baseName": {
                    "id": 122,
                    "name": "IERC721",
                    "nameLocations": [
                      "649:7:2"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1054,
                    "src": "649:7:2"
                  },
                  "id": 123,
                  "nodeType": "InheritanceSpecifier",
                  "src": "649:7:2"
                },
                {
                  "baseName": {
                    "id": 124,
                    "name": "IERC721Metadata",
                    "nameLocations": [
                      "658:15:2"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1468,
                    "src": "658:15:2"
                  },
                  "id": 125,
                  "nodeType": "InheritanceSpecifier",
                  "src": "658:15:2"
                }
              ],
              "canonicalName": "ERC721",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 117,
                "nodeType": "StructuredDocumentation",
                "src": "366:246:2",
                "text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."
              },
              "fullyImplemented": true,
              "id": 938,
              "linearizedBaseContracts": [
                938,
                1468,
                1054,
                2014,
                2026,
                1787
              ],
              "name": "ERC721",
              "nameLocation": "622:6:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "global": false,
                  "id": 128,
                  "libraryName": {
                    "id": 126,
                    "name": "Address",
                    "nameLocations": [
                      "686:7:2"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1765,
                    "src": "686:7:2"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "680:26:2",
                  "typeName": {
                    "id": 127,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "698:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                },
                {
                  "global": false,
                  "id": 131,
                  "libraryName": {
                    "id": 129,
                    "name": "Strings",
                    "nameLocations": [
                      "717:7:2"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1990,
                    "src": "717:7:2"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "711:26:2",
                  "typeName": {
                    "id": 130,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "729:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "constant": false,
                  "id": 133,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "776:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 938,
                  "src": "761:20:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 132,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "761:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 135,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "823:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 938,
                  "src": "808:22:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 134,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "808:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 139,
                  "mutability": "mutable",
                  "name": "_owners",
                  "nameLocation": "919:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 938,
                  "src": "883:43:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                    "typeString": "mapping(uint256 => address)"
                  },
                  "typeName": {
                    "id": 138,
                    "keyType": {
                      "id": 136,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "891:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "883:27:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                      "typeString": "mapping(uint256 => address)"
                    },
                    "valueType": {
                      "id": 137,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "902:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 143,
                  "mutability": "mutable",
                  "name": "_balances",
                  "nameLocation": "1013:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 938,
                  "src": "977:45:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 142,
                    "keyType": {
                      "id": 140,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "985:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "977:27:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 141,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "996:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 147,
                  "mutability": "mutable",
                  "name": "_tokenApprovals",
                  "nameLocation": "1114:15:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 938,
                  "src": "1078:51:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                    "typeString": "mapping(uint256 => address)"
                  },
                  "typeName": {
                    "id": 146,
                    "keyType": {
                      "id": 144,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1086:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1078:27:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                      "typeString": "mapping(uint256 => address)"
                    },
                    "valueType": {
                      "id": 145,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1097:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 153,
                  "mutability": "mutable",
                  "name": "_operatorApprovals",
                  "nameLocation": "1237:18:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 938,
                  "src": "1184:71:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                    "typeString": "mapping(address => mapping(address => bool))"
                  },
                  "typeName": {
                    "id": 152,
                    "keyType": {
                      "id": 148,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1192:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1184:44:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                      "typeString": "mapping(address => mapping(address => bool))"
                    },
                    "valueType": {
                      "id": 151,
                      "keyType": {
                        "id": 149,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1211:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "1203:24:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      },
                      "valueType": {
                        "id": 150,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1222:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 169,
                    "nodeType": "Block",
                    "src": "1431:57:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 163,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 161,
                            "name": "_name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 133,
                            "src": "1441:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 162,
                            "name": "name_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 156,
                            "src": "1449:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "1441:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 164,
                        "nodeType": "ExpressionStatement",
                        "src": "1441:13:2"
                      },
                      {
                        "expression": {
                          "id": 167,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 165,
                            "name": "_symbol",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 135,
                            "src": "1464:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 166,
                            "name": "symbol_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 158,
                            "src": "1474:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "1464:17:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 168,
                        "nodeType": "ExpressionStatement",
                        "src": "1464:17:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 154,
                    "nodeType": "StructuredDocumentation",
                    "src": "1262:108:2",
                    "text": " @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."
                  },
                  "id": 170,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 159,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 156,
                        "mutability": "mutable",
                        "name": "name_",
                        "nameLocation": "1401:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 170,
                        "src": "1387:19:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 155,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1387:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 158,
                        "mutability": "mutable",
                        "name": "symbol_",
                        "nameLocation": "1422:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 170,
                        "src": "1408:21:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 157,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1408:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1386:44:2"
                  },
                  "returnParameters": {
                    "id": 160,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1431:0:2"
                  },
                  "scope": 938,
                  "src": "1375:113:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    2013,
                    2025
                  ],
                  "body": {
                    "id": 200,
                    "nodeType": "Block",
                    "src": "1663:192:2",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 198,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 193,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              "id": 186,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 181,
                                "name": "interfaceId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 173,
                                "src": "1692:11:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 183,
                                      "name": "IERC721",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1054,
                                      "src": "1712:7:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_IERC721_$1054_$",
                                        "typeString": "type(contract IERC721)"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_type$_t_contract$_IERC721_$1054_$",
                                        "typeString": "type(contract IERC721)"
                                      }
                                    ],
                                    "id": 182,
                                    "name": "type",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -27,
                                    "src": "1707:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                      "typeString": "function () pure"
                                    }
                                  },
                                  "id": 184,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1707:13:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$1054",
                                    "typeString": "type(contract IERC721)"
                                  }
                                },
                                "id": 185,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "1721:11:2",
                                "memberName": "interfaceId",
                                "nodeType": "MemberAccess",
                                "src": "1707:25:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "src": "1692:40:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              "id": 192,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 187,
                                "name": "interfaceId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 173,
                                "src": "1748:11:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 189,
                                      "name": "IERC721Metadata",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1468,
                                      "src": "1768:15:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1468_$",
                                        "typeString": "type(contract IERC721Metadata)"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1468_$",
                                        "typeString": "type(contract IERC721Metadata)"
                                      }
                                    ],
                                    "id": 188,
                                    "name": "type",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -27,
                                    "src": "1763:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                      "typeString": "function () pure"
                                    }
                                  },
                                  "id": 190,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1763:21:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$1468",
                                    "typeString": "type(contract IERC721Metadata)"
                                  }
                                },
                                "id": 191,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "1785:11:2",
                                "memberName": "interfaceId",
                                "nodeType": "MemberAccess",
                                "src": "1763:33:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "src": "1748:48:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "1692:104:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "arguments": [
                              {
                                "id": 196,
                                "name": "interfaceId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 173,
                                "src": "1836:11:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "id": 194,
                                "name": "super",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -25,
                                "src": "1812:5:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_super$_ERC721_$938_$",
                                  "typeString": "type(contract super ERC721)"
                                }
                              },
                              "id": 195,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1818:17:2",
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2013,
                              "src": "1812:23:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function (bytes4) view returns (bool)"
                              }
                            },
                            "id": 197,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1812:36:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "1692:156:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 180,
                        "id": 199,
                        "nodeType": "Return",
                        "src": "1673:175:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 171,
                    "nodeType": "StructuredDocumentation",
                    "src": "1494:56:2",
                    "text": " @dev See {IERC165-supportsInterface}."
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 201,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "1564:17:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 177,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [
                      {
                        "id": 175,
                        "name": "ERC165",
                        "nameLocations": [
                          "1631:6:2"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2014,
                        "src": "1631:6:2"
                      },
                      {
                        "id": 176,
                        "name": "IERC165",
                        "nameLocations": [
                          "1639:7:2"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2026,
                        "src": "1639:7:2"
                      }
                    ],
                    "src": "1622:25:2"
                  },
                  "parameters": {
                    "id": 174,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 173,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "1589:11:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 201,
                        "src": "1582:18:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 172,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "1582:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1581:20:2"
                  },
                  "returnParameters": {
                    "id": 180,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 179,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 201,
                        "src": "1657:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 178,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1657:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1656:6:2"
                  },
                  "scope": 938,
                  "src": "1555:300:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    979
                  ],
                  "body": {
                    "id": 224,
                    "nodeType": "Block",
                    "src": "1995:124:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 216,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 211,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 204,
                                "src": "2013:5:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 214,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2030:1:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 213,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2022:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 212,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2022:7:2",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 215,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2022:10:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2013:19:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373",
                              "id": 217,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2034:44:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba",
                                "typeString": "literal_string \"ERC721: balance query for the zero address\""
                              },
                              "value": "ERC721: balance query for the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba",
                                "typeString": "literal_string \"ERC721: balance query for the zero address\""
                              }
                            ],
                            "id": 210,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2005:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 218,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2005:74:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 219,
                        "nodeType": "ExpressionStatement",
                        "src": "2005:74:2"
                      },
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 220,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 143,
                            "src": "2096:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 222,
                          "indexExpression": {
                            "id": 221,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 204,
                            "src": "2106:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2096:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 209,
                        "id": 223,
                        "nodeType": "Return",
                        "src": "2089:23:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 202,
                    "nodeType": "StructuredDocumentation",
                    "src": "1861:48:2",
                    "text": " @dev See {IERC721-balanceOf}."
                  },
                  "functionSelector": "70a08231",
                  "id": 225,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "1923:9:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 206,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1968:8:2"
                  },
                  "parameters": {
                    "id": 205,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 204,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1941:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 225,
                        "src": "1933:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 203,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1933:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1932:15:2"
                  },
                  "returnParameters": {
                    "id": 209,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 208,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 225,
                        "src": "1986:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 207,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1986:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1985:9:2"
                  },
                  "scope": 938,
                  "src": "1914:205:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    987
                  ],
                  "body": {
                    "id": 252,
                    "nodeType": "Block",
                    "src": "2257:154:2",
                    "statements": [
                      {
                        "assignments": [
                          235
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 235,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "2275:5:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 252,
                            "src": "2267:13:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 234,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2267:7:2",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 239,
                        "initialValue": {
                          "baseExpression": {
                            "id": 236,
                            "name": "_owners",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 139,
                            "src": "2283:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                              "typeString": "mapping(uint256 => address)"
                            }
                          },
                          "id": 238,
                          "indexExpression": {
                            "id": 237,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 228,
                            "src": "2291:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2283:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2267:32:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 246,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 241,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 235,
                                "src": "2317:5:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 244,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2334:1:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 243,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2326:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 242,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2326:7:2",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 245,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2326:10:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2317:19:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                              "id": 247,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2338:43:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397",
                                "typeString": "literal_string \"ERC721: owner query for nonexistent token\""
                              },
                              "value": "ERC721: owner query for nonexistent token"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397",
                                "typeString": "literal_string \"ERC721: owner query for nonexistent token\""
                              }
                            ],
                            "id": 240,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2309:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 248,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2309:73:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 249,
                        "nodeType": "ExpressionStatement",
                        "src": "2309:73:2"
                      },
                      {
                        "expression": {
                          "id": 250,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 235,
                          "src": "2399:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 233,
                        "id": 251,
                        "nodeType": "Return",
                        "src": "2392:12:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 226,
                    "nodeType": "StructuredDocumentation",
                    "src": "2125:46:2",
                    "text": " @dev See {IERC721-ownerOf}."
                  },
                  "functionSelector": "6352211e",
                  "id": 253,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "ownerOf",
                  "nameLocation": "2185:7:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 230,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2230:8:2"
                  },
                  "parameters": {
                    "id": 229,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 228,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2201:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 253,
                        "src": "2193:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 227,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2193:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2192:17:2"
                  },
                  "returnParameters": {
                    "id": 233,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 232,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 253,
                        "src": "2248:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 231,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2248:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2247:9:2"
                  },
                  "scope": 938,
                  "src": "2176:235:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1453
                  ],
                  "body": {
                    "id": 262,
                    "nodeType": "Block",
                    "src": "2542:29:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 260,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 133,
                          "src": "2559:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 259,
                        "id": 261,
                        "nodeType": "Return",
                        "src": "2552:12:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 254,
                    "nodeType": "StructuredDocumentation",
                    "src": "2417:51:2",
                    "text": " @dev See {IERC721Metadata-name}."
                  },
                  "functionSelector": "06fdde03",
                  "id": 263,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "name",
                  "nameLocation": "2482:4:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 256,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2509:8:2"
                  },
                  "parameters": {
                    "id": 255,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2486:2:2"
                  },
                  "returnParameters": {
                    "id": 259,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 258,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 263,
                        "src": "2527:13:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 257,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2527:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2526:15:2"
                  },
                  "scope": 938,
                  "src": "2473:98:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1459
                  ],
                  "body": {
                    "id": 272,
                    "nodeType": "Block",
                    "src": "2706:31:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 270,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 135,
                          "src": "2723:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 269,
                        "id": 271,
                        "nodeType": "Return",
                        "src": "2716:14:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 264,
                    "nodeType": "StructuredDocumentation",
                    "src": "2577:53:2",
                    "text": " @dev See {IERC721Metadata-symbol}."
                  },
                  "functionSelector": "95d89b41",
                  "id": 273,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "symbol",
                  "nameLocation": "2644:6:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 266,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2673:8:2"
                  },
                  "parameters": {
                    "id": 265,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2650:2:2"
                  },
                  "returnParameters": {
                    "id": 269,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 268,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 273,
                        "src": "2691:13:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 267,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2691:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2690:15:2"
                  },
                  "scope": 938,
                  "src": "2635:102:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1467
                  ],
                  "body": {
                    "id": 314,
                    "nodeType": "Block",
                    "src": "2891:241:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 284,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 276,
                                  "src": "2917:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 283,
                                "name": "_exists",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 546,
                                "src": "2909:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (uint256) view returns (bool)"
                                }
                              },
                              "id": 285,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2909:16:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                              "id": 286,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2927:49:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
                                "typeString": "literal_string \"ERC721Metadata: URI query for nonexistent token\""
                              },
                              "value": "ERC721Metadata: URI query for nonexistent token"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
                                "typeString": "literal_string \"ERC721Metadata: URI query for nonexistent token\""
                              }
                            ],
                            "id": 282,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2901:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 287,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2901:76:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 288,
                        "nodeType": "ExpressionStatement",
                        "src": "2901:76:2"
                      },
                      {
                        "assignments": [
                          290
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 290,
                            "mutability": "mutable",
                            "name": "baseURI",
                            "nameLocation": "3002:7:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 314,
                            "src": "2988:21:2",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 289,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2988:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 293,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 291,
                            "name": "_baseURI",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 324,
                            "src": "3012:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
                              "typeString": "function () view returns (string memory)"
                            }
                          },
                          "id": 292,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3012:10:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2988:34:2"
                      },
                      {
                        "expression": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 300,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 296,
                                    "name": "baseURI",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 290,
                                    "src": "3045:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "id": 295,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3039:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                    "typeString": "type(bytes storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 294,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3039:5:2",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 297,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3039:14:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 298,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3054:6:2",
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "3039:21:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 299,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3063:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "3039:25:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "",
                            "id": 311,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3123:2:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          },
                          "id": 312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "3039:86:2",
                          "trueExpression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 305,
                                    "name": "baseURI",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 290,
                                    "src": "3091:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  },
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "expression": {
                                        "id": 306,
                                        "name": "tokenId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 276,
                                        "src": "3100:7:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 307,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "3108:8:2",
                                      "memberName": "toString",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1872,
                                      "src": "3100:16:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                        "typeString": "function (uint256) pure returns (string memory)"
                                      }
                                    },
                                    "id": 308,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3100:18:2",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    },
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "expression": {
                                    "id": 303,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "3074:3:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 304,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberLocation": "3078:12:2",
                                  "memberName": "encodePacked",
                                  "nodeType": "MemberAccess",
                                  "src": "3074:16:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function () pure returns (bytes memory)"
                                  }
                                },
                                "id": 309,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3074:45:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 302,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3067:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                "typeString": "type(string storage pointer)"
                              },
                              "typeName": {
                                "id": 301,
                                "name": "string",
                                "nodeType": "ElementaryTypeName",
                                "src": "3067:6:2",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 310,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3067:53:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 281,
                        "id": 313,
                        "nodeType": "Return",
                        "src": "3032:93:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 274,
                    "nodeType": "StructuredDocumentation",
                    "src": "2743:55:2",
                    "text": " @dev See {IERC721Metadata-tokenURI}."
                  },
                  "functionSelector": "c87b56dd",
                  "id": 315,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tokenURI",
                  "nameLocation": "2812:8:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 278,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2858:8:2"
                  },
                  "parameters": {
                    "id": 277,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 276,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2829:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 315,
                        "src": "2821:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 275,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2821:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2820:17:2"
                  },
                  "returnParameters": {
                    "id": 281,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 280,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 315,
                        "src": "2876:13:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 279,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2876:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2875:15:2"
                  },
                  "scope": 938,
                  "src": "2803:329:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 323,
                    "nodeType": "Block",
                    "src": "3439:26:2",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "",
                          "id": 321,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3456:2:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          },
                          "value": ""
                        },
                        "functionReturnParameters": 320,
                        "id": 322,
                        "nodeType": "Return",
                        "src": "3449:9:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 316,
                    "nodeType": "StructuredDocumentation",
                    "src": "3138:230:2",
                    "text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overriden in child contracts."
                  },
                  "id": 324,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_baseURI",
                  "nameLocation": "3382:8:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 317,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3390:2:2"
                  },
                  "returnParameters": {
                    "id": 320,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 319,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 324,
                        "src": "3424:13:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 318,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3424:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3423:15:2"
                  },
                  "scope": 938,
                  "src": "3373:92:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "baseFunctions": [
                    1015
                  ],
                  "body": {
                    "id": 366,
                    "nodeType": "Block",
                    "src": "3592:331:2",
                    "statements": [
                      {
                        "assignments": [
                          334
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 334,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "3610:5:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 366,
                            "src": "3602:13:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 333,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3602:7:2",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 339,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 337,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 329,
                              "src": "3633:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 335,
                              "name": "ERC721",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 938,
                              "src": "3618:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC721_$938_$",
                                "typeString": "type(contract ERC721)"
                              }
                            },
                            "id": 336,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3625:7:2",
                            "memberName": "ownerOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 253,
                            "src": "3618:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 338,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3618:23:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3602:39:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 343,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 341,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 327,
                                "src": "3659:2:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 342,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 334,
                                "src": "3665:5:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "3659:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572",
                              "id": 344,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3672:35:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
                                "typeString": "literal_string \"ERC721: approval to current owner\""
                              },
                              "value": "ERC721: approval to current owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
                                "typeString": "literal_string \"ERC721: approval to current owner\""
                              }
                            ],
                            "id": 340,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3651:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 345,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3651:57:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 346,
                        "nodeType": "ExpressionStatement",
                        "src": "3651:57:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 357,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 351,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 348,
                                    "name": "_msgSender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1777,
                                    "src": "3740:10:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 349,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3740:12:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "id": 350,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 334,
                                  "src": "3756:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "3740:21:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 353,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 334,
                                    "src": "3782:5:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 354,
                                      "name": "_msgSender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1777,
                                      "src": "3789:10:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                        "typeString": "function () view returns (address)"
                                      }
                                    },
                                    "id": 355,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3789:12:2",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 352,
                                  "name": "isApprovedForAll",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 423,
                                  "src": "3765:16:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                                    "typeString": "function (address,address) view returns (bool)"
                                  }
                                },
                                "id": 356,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3765:37:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "3740:62:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c",
                              "id": 358,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3816:58:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d",
                                "typeString": "literal_string \"ERC721: approve caller is not owner nor approved for all\""
                              },
                              "value": "ERC721: approve caller is not owner nor approved for all"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d",
                                "typeString": "literal_string \"ERC721: approve caller is not owner nor approved for all\""
                              }
                            ],
                            "id": 347,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3719:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 359,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3719:165:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 360,
                        "nodeType": "ExpressionStatement",
                        "src": "3719:165:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 362,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 327,
                              "src": "3904:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 363,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 329,
                              "src": "3908:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 361,
                            "name": "_approve",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 832,
                            "src": "3895:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 364,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3895:21:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 365,
                        "nodeType": "ExpressionStatement",
                        "src": "3895:21:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 325,
                    "nodeType": "StructuredDocumentation",
                    "src": "3471:46:2",
                    "text": " @dev See {IERC721-approve}."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 367,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "3531:7:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 331,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "3583:8:2"
                  },
                  "parameters": {
                    "id": 330,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 327,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3547:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 367,
                        "src": "3539:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 326,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3539:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 329,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3559:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 367,
                        "src": "3551:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 328,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3551:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3538:29:2"
                  },
                  "returnParameters": {
                    "id": 332,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3592:0:2"
                  },
                  "scope": 938,
                  "src": "3522:401:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1023
                  ],
                  "body": {
                    "id": 387,
                    "nodeType": "Block",
                    "src": "4069:132:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 378,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 370,
                                  "src": "4095:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 377,
                                "name": "_exists",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 546,
                                "src": "4087:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (uint256) view returns (bool)"
                                }
                              },
                              "id": 379,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4087:16:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                              "id": 380,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4105:46:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d",
                                "typeString": "literal_string \"ERC721: approved query for nonexistent token\""
                              },
                              "value": "ERC721: approved query for nonexistent token"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d",
                                "typeString": "literal_string \"ERC721: approved query for nonexistent token\""
                              }
                            ],
                            "id": 376,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4079:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 381,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4079:73:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 382,
                        "nodeType": "ExpressionStatement",
                        "src": "4079:73:2"
                      },
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 383,
                            "name": "_tokenApprovals",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 147,
                            "src": "4170:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                              "typeString": "mapping(uint256 => address)"
                            }
                          },
                          "id": 385,
                          "indexExpression": {
                            "id": 384,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 370,
                            "src": "4186:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4170:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 375,
                        "id": 386,
                        "nodeType": "Return",
                        "src": "4163:31:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 368,
                    "nodeType": "StructuredDocumentation",
                    "src": "3929:50:2",
                    "text": " @dev See {IERC721-getApproved}."
                  },
                  "functionSelector": "081812fc",
                  "id": 388,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getApproved",
                  "nameLocation": "3993:11:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 372,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4042:8:2"
                  },
                  "parameters": {
                    "id": 371,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 370,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4013:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 388,
                        "src": "4005:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 369,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4005:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4004:17:2"
                  },
                  "returnParameters": {
                    "id": 375,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 374,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 388,
                        "src": "4060:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 373,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4060:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4059:9:2"
                  },
                  "scope": 938,
                  "src": "3984:217:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1031
                  ],
                  "body": {
                    "id": 404,
                    "nodeType": "Block",
                    "src": "4352:69:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 398,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1777,
                                "src": "4381:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 399,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4381:12:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 400,
                              "name": "operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 391,
                              "src": "4395:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 401,
                              "name": "approved",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 393,
                              "src": "4405:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 397,
                            "name": "_setApprovalForAll",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 864,
                            "src": "4362:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
                              "typeString": "function (address,address,bool)"
                            }
                          },
                          "id": 402,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4362:52:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 403,
                        "nodeType": "ExpressionStatement",
                        "src": "4362:52:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 389,
                    "nodeType": "StructuredDocumentation",
                    "src": "4207:56:2",
                    "text": " @dev See {IERC721-setApprovalForAll}."
                  },
                  "functionSelector": "a22cb465",
                  "id": 405,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setApprovalForAll",
                  "nameLocation": "4277:17:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 395,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4343:8:2"
                  },
                  "parameters": {
                    "id": 394,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 391,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "4303:8:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 405,
                        "src": "4295:16:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 390,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4295:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 393,
                        "mutability": "mutable",
                        "name": "approved",
                        "nameLocation": "4318:8:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 405,
                        "src": "4313:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 392,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4313:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4294:33:2"
                  },
                  "returnParameters": {
                    "id": 396,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4352:0:2"
                  },
                  "scope": 938,
                  "src": "4268:153:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1041
                  ],
                  "body": {
                    "id": 422,
                    "nodeType": "Block",
                    "src": "4590:59:2",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 416,
                              "name": "_operatorApprovals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 153,
                              "src": "4607:18:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(address => bool))"
                              }
                            },
                            "id": 418,
                            "indexExpression": {
                              "id": 417,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 408,
                              "src": "4626:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4607:25:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 420,
                          "indexExpression": {
                            "id": 419,
                            "name": "operator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 410,
                            "src": "4633:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4607:35:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 415,
                        "id": 421,
                        "nodeType": "Return",
                        "src": "4600:42:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 406,
                    "nodeType": "StructuredDocumentation",
                    "src": "4427:55:2",
                    "text": " @dev See {IERC721-isApprovedForAll}."
                  },
                  "functionSelector": "e985e9c5",
                  "id": 423,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isApprovedForAll",
                  "nameLocation": "4496:16:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 412,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4566:8:2"
                  },
                  "parameters": {
                    "id": 411,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 408,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "4521:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 423,
                        "src": "4513:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 407,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4513:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 410,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "4536:8:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 423,
                        "src": "4528:16:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 409,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4528:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4512:33:2"
                  },
                  "returnParameters": {
                    "id": 415,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 414,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 423,
                        "src": "4584:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 413,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4584:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4583:6:2"
                  },
                  "scope": 938,
                  "src": "4487:162:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1007
                  ],
                  "body": {
                    "id": 449,
                    "nodeType": "Block",
                    "src": "4830:211:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 436,
                                    "name": "_msgSender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1777,
                                    "src": "4919:10:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 437,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4919:12:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 438,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 430,
                                  "src": "4933:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 435,
                                "name": "_isApprovedOrOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 587,
                                "src": "4900:18:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (address,uint256) view returns (bool)"
                                }
                              },
                              "id": 439,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4900:41:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
                              "id": 440,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4943:51:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                                "typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
                              },
                              "value": "ERC721: transfer caller is not owner nor approved"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                                "typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
                              }
                            ],
                            "id": 434,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4892:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 441,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4892:103:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 442,
                        "nodeType": "ExpressionStatement",
                        "src": "4892:103:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 444,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 426,
                              "src": "5016:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 445,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 428,
                              "src": "5022:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 446,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 430,
                              "src": "5026:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 443,
                            "name": "_transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 808,
                            "src": "5006:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 447,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5006:28:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 448,
                        "nodeType": "ExpressionStatement",
                        "src": "5006:28:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 424,
                    "nodeType": "StructuredDocumentation",
                    "src": "4655:51:2",
                    "text": " @dev See {IERC721-transferFrom}."
                  },
                  "functionSelector": "23b872dd",
                  "id": 450,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "4720:12:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 432,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4821:8:2"
                  },
                  "parameters": {
                    "id": 431,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 426,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "4750:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 450,
                        "src": "4742:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 425,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4742:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 428,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "4772:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 450,
                        "src": "4764:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 427,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4764:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 430,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4792:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 450,
                        "src": "4784:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 429,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4784:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4732:73:2"
                  },
                  "returnParameters": {
                    "id": 433,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4830:0:2"
                  },
                  "scope": 938,
                  "src": "4711:330:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    997
                  ],
                  "body": {
                    "id": 468,
                    "nodeType": "Block",
                    "src": "5230:56:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 462,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 453,
                              "src": "5257:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 463,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 455,
                              "src": "5263:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 464,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 457,
                              "src": "5267:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "",
                              "id": 465,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5276:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "id": 461,
                            "name": "safeTransferFrom",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              469,
                              499
                            ],
                            "referencedDeclaration": 499,
                            "src": "5240:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (address,address,uint256,bytes memory)"
                            }
                          },
                          "id": 466,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5240:39:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 467,
                        "nodeType": "ExpressionStatement",
                        "src": "5240:39:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 451,
                    "nodeType": "StructuredDocumentation",
                    "src": "5047:55:2",
                    "text": " @dev See {IERC721-safeTransferFrom}."
                  },
                  "functionSelector": "42842e0e",
                  "id": 469,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "5116:16:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 459,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "5221:8:2"
                  },
                  "parameters": {
                    "id": 458,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 453,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "5150:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 469,
                        "src": "5142:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 452,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5142:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 455,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "5172:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 469,
                        "src": "5164:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 454,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5164:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 457,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "5192:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 469,
                        "src": "5184:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 456,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5184:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5132:73:2"
                  },
                  "returnParameters": {
                    "id": 460,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5230:0:2"
                  },
                  "scope": 938,
                  "src": "5107:179:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1053
                  ],
                  "body": {
                    "id": 498,
                    "nodeType": "Block",
                    "src": "5503:169:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 484,
                                    "name": "_msgSender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1777,
                                    "src": "5540:10:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 485,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5540:12:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 486,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 476,
                                  "src": "5554:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 483,
                                "name": "_isApprovedOrOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 587,
                                "src": "5521:18:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (address,uint256) view returns (bool)"
                                }
                              },
                              "id": 487,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5521:41:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
                              "id": 488,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5564:51:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                                "typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
                              },
                              "value": "ERC721: transfer caller is not owner nor approved"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                                "typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
                              }
                            ],
                            "id": 482,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5513:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 489,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5513:103:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 490,
                        "nodeType": "ExpressionStatement",
                        "src": "5513:103:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 492,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 472,
                              "src": "5640:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 493,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 474,
                              "src": "5646:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 494,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 476,
                              "src": "5650:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 495,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 478,
                              "src": "5659:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 491,
                            "name": "_safeTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 528,
                            "src": "5626:13:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (address,address,uint256,bytes memory)"
                            }
                          },
                          "id": 496,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5626:39:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 497,
                        "nodeType": "ExpressionStatement",
                        "src": "5626:39:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 470,
                    "nodeType": "StructuredDocumentation",
                    "src": "5292:55:2",
                    "text": " @dev See {IERC721-safeTransferFrom}."
                  },
                  "functionSelector": "b88d4fde",
                  "id": 499,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "5361:16:2",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 480,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "5494:8:2"
                  },
                  "parameters": {
                    "id": 479,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 472,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "5395:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 499,
                        "src": "5387:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 471,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5387:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 474,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "5417:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 499,
                        "src": "5409:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 473,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5409:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 476,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "5437:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 499,
                        "src": "5429:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 475,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5429:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 478,
                        "mutability": "mutable",
                        "name": "_data",
                        "nameLocation": "5467:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 499,
                        "src": "5454:18:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 477,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5454:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5377:101:2"
                  },
                  "returnParameters": {
                    "id": 481,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5503:0:2"
                  },
                  "scope": 938,
                  "src": "5352:320:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 527,
                    "nodeType": "Block",
                    "src": "6675:166:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 512,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 502,
                              "src": "6695:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 513,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 504,
                              "src": "6701:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 514,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 506,
                              "src": "6705:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 511,
                            "name": "_transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 808,
                            "src": "6685:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 515,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6685:28:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 516,
                        "nodeType": "ExpressionStatement",
                        "src": "6685:28:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 519,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 502,
                                  "src": "6754:4:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 520,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 504,
                                  "src": "6760:2:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 521,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 506,
                                  "src": "6764:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 522,
                                  "name": "_data",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 508,
                                  "src": "6773:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "id": 518,
                                "name": "_checkOnERC721Received",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 926,
                                "src": "6731:22:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                                  "typeString": "function (address,address,uint256,bytes memory) returns (bool)"
                                }
                              },
                              "id": 523,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6731:48:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
                              "id": 524,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6781:52:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                              },
                              "value": "ERC721: transfer to non ERC721Receiver implementer"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                              }
                            ],
                            "id": 517,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "6723:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 525,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6723:111:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 526,
                        "nodeType": "ExpressionStatement",
                        "src": "6723:111:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 500,
                    "nodeType": "StructuredDocumentation",
                    "src": "5678:851:2",
                    "text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `_data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
                  },
                  "id": 528,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_safeTransfer",
                  "nameLocation": "6543:13:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 509,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 502,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "6574:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "6566:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 501,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6566:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 504,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "6596:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "6588:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 503,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6588:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 506,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "6616:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "6608:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 505,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6608:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 508,
                        "mutability": "mutable",
                        "name": "_data",
                        "nameLocation": "6646:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "6633:18:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 507,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6633:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6556:101:2"
                  },
                  "returnParameters": {
                    "id": 510,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6675:0:2"
                  },
                  "scope": 938,
                  "src": "6534:307:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 545,
                    "nodeType": "Block",
                    "src": "7215:54:2",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 543,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 536,
                              "name": "_owners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 139,
                              "src": "7232:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 538,
                            "indexExpression": {
                              "id": 537,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 531,
                              "src": "7240:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7232:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 541,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7260:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 540,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7252:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 539,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "7252:7:2",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 542,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7252:10:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "7232:30:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 535,
                        "id": 544,
                        "nodeType": "Return",
                        "src": "7225:37:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 529,
                    "nodeType": "StructuredDocumentation",
                    "src": "6847:292:2",
                    "text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."
                  },
                  "id": 546,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_exists",
                  "nameLocation": "7153:7:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 532,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 531,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "7169:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 546,
                        "src": "7161:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 530,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7161:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7160:17:2"
                  },
                  "returnParameters": {
                    "id": 535,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 534,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 546,
                        "src": "7209:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 533,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7209:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7208:6:2"
                  },
                  "scope": 938,
                  "src": "7144:125:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 586,
                    "nodeType": "Block",
                    "src": "7526:245:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 558,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 551,
                                  "src": "7552:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 557,
                                "name": "_exists",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 546,
                                "src": "7544:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (uint256) view returns (bool)"
                                }
                              },
                              "id": 559,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7544:16:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                              "id": 560,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7562:46:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c",
                                "typeString": "literal_string \"ERC721: operator query for nonexistent token\""
                              },
                              "value": "ERC721: operator query for nonexistent token"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c",
                                "typeString": "literal_string \"ERC721: operator query for nonexistent token\""
                              }
                            ],
                            "id": 556,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "7536:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 561,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7536:73:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 562,
                        "nodeType": "ExpressionStatement",
                        "src": "7536:73:2"
                      },
                      {
                        "assignments": [
                          564
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 564,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "7627:5:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 586,
                            "src": "7619:13:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 563,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7619:7:2",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 569,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 567,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 551,
                              "src": "7650:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 565,
                              "name": "ERC721",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 938,
                              "src": "7635:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC721_$938_$",
                                "typeString": "type(contract ERC721)"
                              }
                            },
                            "id": 566,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "7642:7:2",
                            "memberName": "ownerOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 253,
                            "src": "7635:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 568,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7635:23:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7619:39:2"
                      },
                      {
                        "expression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 583,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 578,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "id": 572,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 570,
                                    "name": "spender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 549,
                                    "src": "7676:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "id": 571,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 564,
                                    "src": "7687:5:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "src": "7676:16:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "||",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "id": 577,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "arguments": [
                                      {
                                        "id": 574,
                                        "name": "tokenId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 551,
                                        "src": "7708:7:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 573,
                                      "name": "getApproved",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 388,
                                      "src": "7696:11:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                        "typeString": "function (uint256) view returns (address)"
                                      }
                                    },
                                    "id": 575,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "7696:20:2",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "id": 576,
                                    "name": "spender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 549,
                                    "src": "7720:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "src": "7696:31:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "7676:51:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 580,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 564,
                                    "src": "7748:5:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 581,
                                    "name": "spender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 549,
                                    "src": "7755:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 579,
                                  "name": "isApprovedForAll",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 423,
                                  "src": "7731:16:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                                    "typeString": "function (address,address) view returns (bool)"
                                  }
                                },
                                "id": 582,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7731:32:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "7676:87:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "id": 584,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "7675:89:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 555,
                        "id": 585,
                        "nodeType": "Return",
                        "src": "7668:96:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 547,
                    "nodeType": "StructuredDocumentation",
                    "src": "7275:147:2",
                    "text": " @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."
                  },
                  "id": 587,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_isApprovedOrOwner",
                  "nameLocation": "7436:18:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 552,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 549,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "7463:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 587,
                        "src": "7455:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 548,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7455:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 551,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "7480:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 587,
                        "src": "7472:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 550,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7472:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7454:34:2"
                  },
                  "returnParameters": {
                    "id": 555,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 554,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 587,
                        "src": "7520:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 553,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7520:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7519:6:2"
                  },
                  "scope": 938,
                  "src": "7427:344:2",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 601,
                    "nodeType": "Block",
                    "src": "8166:43:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 596,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 590,
                              "src": "8186:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 597,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 592,
                              "src": "8190:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "",
                              "id": 598,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8199:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "id": 595,
                            "name": "_safeMint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              602,
                              631
                            ],
                            "referencedDeclaration": 631,
                            "src": "8176:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (address,uint256,bytes memory)"
                            }
                          },
                          "id": 599,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8176:26:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 600,
                        "nodeType": "ExpressionStatement",
                        "src": "8176:26:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 588,
                    "nodeType": "StructuredDocumentation",
                    "src": "7777:319:2",
                    "text": " @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
                  },
                  "id": 602,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_safeMint",
                  "nameLocation": "8110:9:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 593,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 590,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "8128:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "8120:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 589,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8120:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 592,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "8140:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 602,
                        "src": "8132:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 591,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8132:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8119:29:2"
                  },
                  "returnParameters": {
                    "id": 594,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8166:0:2"
                  },
                  "scope": 938,
                  "src": "8101:108:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 630,
                    "nodeType": "Block",
                    "src": "8545:196:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 613,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 605,
                              "src": "8561:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 614,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 607,
                              "src": "8565:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 612,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 688,
                            "src": "8555:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 615,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8555:18:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 616,
                        "nodeType": "ExpressionStatement",
                        "src": "8555:18:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 621,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8635:1:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 620,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "8627:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 619,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "8627:7:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 622,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "8627:10:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 623,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 605,
                                  "src": "8639:2:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 624,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 607,
                                  "src": "8643:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 625,
                                  "name": "_data",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 609,
                                  "src": "8652:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "id": 618,
                                "name": "_checkOnERC721Received",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 926,
                                "src": "8604:22:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                                  "typeString": "function (address,address,uint256,bytes memory) returns (bool)"
                                }
                              },
                              "id": 626,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8604:54:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
                              "id": 627,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8672:52:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                              },
                              "value": "ERC721: transfer to non ERC721Receiver implementer"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                              }
                            ],
                            "id": 617,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "8583:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 628,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8583:151:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 629,
                        "nodeType": "ExpressionStatement",
                        "src": "8583:151:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 603,
                    "nodeType": "StructuredDocumentation",
                    "src": "8215:210:2",
                    "text": " @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."
                  },
                  "id": 631,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_safeMint",
                  "nameLocation": "8439:9:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 610,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 605,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "8466:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 631,
                        "src": "8458:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 604,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8458:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 607,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "8486:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 631,
                        "src": "8478:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 606,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8478:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 609,
                        "mutability": "mutable",
                        "name": "_data",
                        "nameLocation": "8516:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 631,
                        "src": "8503:18:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 608,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8503:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8448:79:2"
                  },
                  "returnParameters": {
                    "id": 611,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8545:0:2"
                  },
                  "scope": 938,
                  "src": "8430:311:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 687,
                    "nodeType": "Block",
                    "src": "9124:311:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 645,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 640,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 634,
                                "src": "9142:2:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 643,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "9156:1:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 642,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "9148:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 641,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "9148:7:2",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 644,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9148:10:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "9142:16:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
                              "id": 646,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9160:34:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
                                "typeString": "literal_string \"ERC721: mint to the zero address\""
                              },
                              "value": "ERC721: mint to the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
                                "typeString": "literal_string \"ERC721: mint to the zero address\""
                              }
                            ],
                            "id": 639,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "9134:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 647,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9134:61:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 648,
                        "nodeType": "ExpressionStatement",
                        "src": "9134:61:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 653,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "9213:17:2",
                              "subExpression": {
                                "arguments": [
                                  {
                                    "id": 651,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 636,
                                    "src": "9222:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 650,
                                  "name": "_exists",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 546,
                                  "src": "9214:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                                    "typeString": "function (uint256) view returns (bool)"
                                  }
                                },
                                "id": 652,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9214:16:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
                              "id": 654,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9232:30:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
                                "typeString": "literal_string \"ERC721: token already minted\""
                              },
                              "value": "ERC721: token already minted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
                                "typeString": "literal_string \"ERC721: token already minted\""
                              }
                            ],
                            "id": 649,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "9205:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 655,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9205:58:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 656,
                        "nodeType": "ExpressionStatement",
                        "src": "9205:58:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 660,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9303:1:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 659,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9295:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 658,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9295:7:2",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 661,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9295:10:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 662,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 634,
                              "src": "9307:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 663,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 636,
                              "src": "9311:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 657,
                            "name": "_beforeTokenTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 937,
                            "src": "9274:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 664,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9274:45:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 665,
                        "nodeType": "ExpressionStatement",
                        "src": "9274:45:2"
                      },
                      {
                        "expression": {
                          "id": 670,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 666,
                              "name": "_balances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 143,
                              "src": "9330:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 668,
                            "indexExpression": {
                              "id": 667,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 634,
                              "src": "9340:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9330:13:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "hexValue": "31",
                            "id": 669,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9347:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "9330:18:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 671,
                        "nodeType": "ExpressionStatement",
                        "src": "9330:18:2"
                      },
                      {
                        "expression": {
                          "id": 676,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 672,
                              "name": "_owners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 139,
                              "src": "9358:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 674,
                            "indexExpression": {
                              "id": 673,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 636,
                              "src": "9366:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9358:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 675,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 634,
                            "src": "9377:2:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "9358:21:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 677,
                        "nodeType": "ExpressionStatement",
                        "src": "9358:21:2"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 681,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9412:1:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 680,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9404:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 679,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9404:7:2",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 682,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9404:10:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 683,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 634,
                              "src": "9416:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 684,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 636,
                              "src": "9420:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 678,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 953,
                            "src": "9395:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 685,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9395:33:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 686,
                        "nodeType": "EmitStatement",
                        "src": "9390:38:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 632,
                    "nodeType": "StructuredDocumentation",
                    "src": "8747:311:2",
                    "text": " @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."
                  },
                  "id": 688,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_mint",
                  "nameLocation": "9072:5:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 637,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 634,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "9086:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 688,
                        "src": "9078:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 633,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9078:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 636,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "9098:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 688,
                        "src": "9090:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 635,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9090:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9077:29:2"
                  },
                  "returnParameters": {
                    "id": 638,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9124:0:2"
                  },
                  "scope": 938,
                  "src": "9063:372:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 738,
                    "nodeType": "Block",
                    "src": "9701:299:2",
                    "statements": [
                      {
                        "assignments": [
                          695
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 695,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "9719:5:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 738,
                            "src": "9711:13:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 694,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9711:7:2",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 700,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 698,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "9742:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 696,
                              "name": "ERC721",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 938,
                              "src": "9727:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC721_$938_$",
                                "typeString": "type(contract ERC721)"
                              }
                            },
                            "id": 697,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "9734:7:2",
                            "memberName": "ownerOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 253,
                            "src": "9727:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 699,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9727:23:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "9711:39:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 702,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 695,
                              "src": "9782:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 705,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9797:1:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 704,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9789:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 703,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9789:7:2",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 706,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9789:10:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 707,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "9801:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 701,
                            "name": "_beforeTokenTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 937,
                            "src": "9761:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 708,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9761:48:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 709,
                        "nodeType": "ExpressionStatement",
                        "src": "9761:48:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 713,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9864:1:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 712,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9856:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 711,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9856:7:2",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 714,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9856:10:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 715,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "9868:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 710,
                            "name": "_approve",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 832,
                            "src": "9847:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 716,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9847:29:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 717,
                        "nodeType": "ExpressionStatement",
                        "src": "9847:29:2"
                      },
                      {
                        "expression": {
                          "id": 722,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 718,
                              "name": "_balances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 143,
                              "src": "9887:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 720,
                            "indexExpression": {
                              "id": 719,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 695,
                              "src": "9897:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9887:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "hexValue": "31",
                            "id": 721,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9907:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "9887:21:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 723,
                        "nodeType": "ExpressionStatement",
                        "src": "9887:21:2"
                      },
                      {
                        "expression": {
                          "id": 727,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "9918:23:2",
                          "subExpression": {
                            "baseExpression": {
                              "id": 724,
                              "name": "_owners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 139,
                              "src": "9925:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 726,
                            "indexExpression": {
                              "id": 725,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "9933:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9925:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 728,
                        "nodeType": "ExpressionStatement",
                        "src": "9918:23:2"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 730,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 695,
                              "src": "9966:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 733,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9981:1:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 732,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9973:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 731,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9973:7:2",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 734,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9973:10:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 735,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "9985:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 729,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 953,
                            "src": "9957:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 736,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9957:36:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 737,
                        "nodeType": "EmitStatement",
                        "src": "9952:41:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 689,
                    "nodeType": "StructuredDocumentation",
                    "src": "9441:206:2",
                    "text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
                  },
                  "id": 739,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_burn",
                  "nameLocation": "9661:5:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 692,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 691,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "9675:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 739,
                        "src": "9667:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 690,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9667:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9666:17:2"
                  },
                  "returnParameters": {
                    "id": 693,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9701:0:2"
                  },
                  "scope": 938,
                  "src": "9652:348:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 807,
                    "nodeType": "Block",
                    "src": "10433:451:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 755,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 752,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 746,
                                    "src": "10466:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 750,
                                    "name": "ERC721",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 938,
                                    "src": "10451:6:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_ERC721_$938_$",
                                      "typeString": "type(contract ERC721)"
                                    }
                                  },
                                  "id": 751,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "10458:7:2",
                                  "memberName": "ownerOf",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 253,
                                  "src": "10451:14:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                    "typeString": "function (uint256) view returns (address)"
                                  }
                                },
                                "id": 753,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "10451:23:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 754,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 742,
                                "src": "10478:4:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "10451:31:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e",
                              "id": 756,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10484:43:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950",
                                "typeString": "literal_string \"ERC721: transfer of token that is not own\""
                              },
                              "value": "ERC721: transfer of token that is not own"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950",
                                "typeString": "literal_string \"ERC721: transfer of token that is not own\""
                              }
                            ],
                            "id": 749,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "10443:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 757,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10443:85:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 758,
                        "nodeType": "ExpressionStatement",
                        "src": "10443:85:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 765,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 760,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 744,
                                "src": "10546:2:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 763,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "10560:1:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 762,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "10552:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 761,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "10552:7:2",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 764,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "10552:10:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "10546:16:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373",
                              "id": 766,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10564:38:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
                                "typeString": "literal_string \"ERC721: transfer to the zero address\""
                              },
                              "value": "ERC721: transfer to the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
                                "typeString": "literal_string \"ERC721: transfer to the zero address\""
                              }
                            ],
                            "id": 759,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "10538:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 767,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10538:65:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 768,
                        "nodeType": "ExpressionStatement",
                        "src": "10538:65:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 770,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 742,
                              "src": "10635:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 771,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 744,
                              "src": "10641:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 772,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 746,
                              "src": "10645:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 769,
                            "name": "_beforeTokenTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 937,
                            "src": "10614:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 773,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10614:39:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 774,
                        "nodeType": "ExpressionStatement",
                        "src": "10614:39:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 778,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10732:1:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 777,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "10724:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 776,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "10724:7:2",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 779,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10724:10:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 780,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 746,
                              "src": "10736:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 775,
                            "name": "_approve",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 832,
                            "src": "10715:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 781,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10715:29:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 782,
                        "nodeType": "ExpressionStatement",
                        "src": "10715:29:2"
                      },
                      {
                        "expression": {
                          "id": 787,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 783,
                              "name": "_balances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 143,
                              "src": "10755:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 785,
                            "indexExpression": {
                              "id": 784,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 742,
                              "src": "10765:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10755:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "hexValue": "31",
                            "id": 786,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10774:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "10755:20:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 788,
                        "nodeType": "ExpressionStatement",
                        "src": "10755:20:2"
                      },
                      {
                        "expression": {
                          "id": 793,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 789,
                              "name": "_balances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 143,
                              "src": "10785:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 791,
                            "indexExpression": {
                              "id": 790,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 744,
                              "src": "10795:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10785:13:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "hexValue": "31",
                            "id": 792,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10802:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "10785:18:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 794,
                        "nodeType": "ExpressionStatement",
                        "src": "10785:18:2"
                      },
                      {
                        "expression": {
                          "id": 799,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 795,
                              "name": "_owners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 139,
                              "src": "10813:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 797,
                            "indexExpression": {
                              "id": 796,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 746,
                              "src": "10821:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10813:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 798,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 744,
                            "src": "10832:2:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "10813:21:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 800,
                        "nodeType": "ExpressionStatement",
                        "src": "10813:21:2"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 802,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 742,
                              "src": "10859:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 803,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 744,
                              "src": "10865:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 804,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 746,
                              "src": "10869:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 801,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 953,
                            "src": "10850:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 805,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10850:27:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 806,
                        "nodeType": "EmitStatement",
                        "src": "10845:32:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 740,
                    "nodeType": "StructuredDocumentation",
                    "src": "10006:313:2",
                    "text": " @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
                  },
                  "id": 808,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_transfer",
                  "nameLocation": "10333:9:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 747,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 742,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "10360:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 808,
                        "src": "10352:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 741,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10352:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 744,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "10382:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 808,
                        "src": "10374:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 743,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10374:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 746,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "10402:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 808,
                        "src": "10394:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 745,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10394:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10342:73:2"
                  },
                  "returnParameters": {
                    "id": 748,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10433:0:2"
                  },
                  "scope": 938,
                  "src": "10324:560:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 831,
                    "nodeType": "Block",
                    "src": "11059:107:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 820,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 816,
                              "name": "_tokenApprovals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 147,
                              "src": "11069:15:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 818,
                            "indexExpression": {
                              "id": 817,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 813,
                              "src": "11085:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "11069:24:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 819,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 811,
                            "src": "11096:2:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "11069:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 821,
                        "nodeType": "ExpressionStatement",
                        "src": "11069:29:2"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 825,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 813,
                                  "src": "11137:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 823,
                                  "name": "ERC721",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 938,
                                  "src": "11122:6:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_ERC721_$938_$",
                                    "typeString": "type(contract ERC721)"
                                  }
                                },
                                "id": 824,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "11129:7:2",
                                "memberName": "ownerOf",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 253,
                                "src": "11122:14:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                  "typeString": "function (uint256) view returns (address)"
                                }
                              },
                              "id": 826,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11122:23:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 827,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 811,
                              "src": "11147:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 828,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 813,
                              "src": "11151:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 822,
                            "name": "Approval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 962,
                            "src": "11113:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 829,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11113:46:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 830,
                        "nodeType": "EmitStatement",
                        "src": "11108:51:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 809,
                    "nodeType": "StructuredDocumentation",
                    "src": "10890:100:2",
                    "text": " @dev Approve `to` to operate on `tokenId`\n Emits a {Approval} event."
                  },
                  "id": 832,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_approve",
                  "nameLocation": "11004:8:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 814,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 811,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "11021:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 832,
                        "src": "11013:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 810,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11013:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 813,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "11033:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 832,
                        "src": "11025:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 812,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "11025:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11012:29:2"
                  },
                  "returnParameters": {
                    "id": 815,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11059:0:2"
                  },
                  "scope": 938,
                  "src": "10995:171:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 863,
                    "nodeType": "Block",
                    "src": "11424:184:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 845,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 843,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 835,
                                "src": "11442:5:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 844,
                                "name": "operator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 837,
                                "src": "11451:8:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "11442:17:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
                              "id": 846,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11461:27:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
                                "typeString": "literal_string \"ERC721: approve to caller\""
                              },
                              "value": "ERC721: approve to caller"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
                                "typeString": "literal_string \"ERC721: approve to caller\""
                              }
                            ],
                            "id": 842,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "11434:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 847,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11434:55:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 848,
                        "nodeType": "ExpressionStatement",
                        "src": "11434:55:2"
                      },
                      {
                        "expression": {
                          "id": 855,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 849,
                                "name": "_operatorApprovals",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 153,
                                "src": "11499:18:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                                  "typeString": "mapping(address => mapping(address => bool))"
                                }
                              },
                              "id": 852,
                              "indexExpression": {
                                "id": 850,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 835,
                                "src": "11518:5:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11499:25:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 853,
                            "indexExpression": {
                              "id": 851,
                              "name": "operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 837,
                              "src": "11525:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "11499:35:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 854,
                            "name": "approved",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 839,
                            "src": "11537:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "11499:46:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 856,
                        "nodeType": "ExpressionStatement",
                        "src": "11499:46:2"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 858,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 835,
                              "src": "11575:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 859,
                              "name": "operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 837,
                              "src": "11582:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 860,
                              "name": "approved",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 839,
                              "src": "11592:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 857,
                            "name": "ApprovalForAll",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 971,
                            "src": "11560:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
                              "typeString": "function (address,address,bool)"
                            }
                          },
                          "id": 861,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11560:41:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 862,
                        "nodeType": "EmitStatement",
                        "src": "11555:46:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 833,
                    "nodeType": "StructuredDocumentation",
                    "src": "11172:124:2",
                    "text": " @dev Approve `operator` to operate on all of `owner` tokens\n Emits a {ApprovalForAll} event."
                  },
                  "id": 864,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_setApprovalForAll",
                  "nameLocation": "11310:18:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 840,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 835,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "11346:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 864,
                        "src": "11338:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 834,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11338:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 837,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "11369:8:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 864,
                        "src": "11361:16:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 836,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11361:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 839,
                        "mutability": "mutable",
                        "name": "approved",
                        "nameLocation": "11392:8:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 864,
                        "src": "11387:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 838,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "11387:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11328:78:2"
                  },
                  "returnParameters": {
                    "id": 841,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11424:0:2"
                  },
                  "scope": 938,
                  "src": "11301:307:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 925,
                    "nodeType": "Block",
                    "src": "12317:622:2",
                    "statements": [
                      {
                        "condition": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 878,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 869,
                              "src": "12331:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 879,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "12334:10:2",
                            "memberName": "isContract",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1488,
                            "src": "12331:13:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
                              "typeString": "function (address) view returns (bool)"
                            }
                          },
                          "id": 880,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12331:15:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 923,
                          "nodeType": "Block",
                          "src": "12897:36:2",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "74727565",
                                "id": 921,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "12918:4:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              "functionReturnParameters": 877,
                              "id": 922,
                              "nodeType": "Return",
                              "src": "12911:11:2"
                            }
                          ]
                        },
                        "id": 924,
                        "nodeType": "IfStatement",
                        "src": "12327:606:2",
                        "trueBody": {
                          "id": 920,
                          "nodeType": "Block",
                          "src": "12348:543:2",
                          "statements": [
                            {
                              "clauses": [
                                {
                                  "block": {
                                    "id": 900,
                                    "nodeType": "Block",
                                    "src": "12463:91:2",
                                    "statements": [
                                      {
                                        "expression": {
                                          "commonType": {
                                            "typeIdentifier": "t_bytes4",
                                            "typeString": "bytes4"
                                          },
                                          "id": 898,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 894,
                                            "name": "retval",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 892,
                                            "src": "12488:6:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes4",
                                              "typeString": "bytes4"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "==",
                                          "rightExpression": {
                                            "expression": {
                                              "expression": {
                                                "id": 895,
                                                "name": "IERC721Receiver",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1072,
                                                "src": "12498:15:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1072_$",
                                                  "typeString": "type(contract IERC721Receiver)"
                                                }
                                              },
                                              "id": 896,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "memberLocation": "12514:16:2",
                                              "memberName": "onERC721Received",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 1071,
                                              "src": "12498:32:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
                                                "typeString": "function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
                                              }
                                            },
                                            "id": 897,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "memberLocation": "12531:8:2",
                                            "memberName": "selector",
                                            "nodeType": "MemberAccess",
                                            "src": "12498:41:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes4",
                                              "typeString": "bytes4"
                                            }
                                          },
                                          "src": "12488:51:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "functionReturnParameters": 877,
                                        "id": 899,
                                        "nodeType": "Return",
                                        "src": "12481:58:2"
                                      }
                                    ]
                                  },
                                  "errorName": "",
                                  "id": 901,
                                  "nodeType": "TryCatchClause",
                                  "parameters": {
                                    "id": 893,
                                    "nodeType": "ParameterList",
                                    "parameters": [
                                      {
                                        "constant": false,
                                        "id": 892,
                                        "mutability": "mutable",
                                        "name": "retval",
                                        "nameLocation": "12455:6:2",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 901,
                                        "src": "12448:13:2",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes4",
                                          "typeString": "bytes4"
                                        },
                                        "typeName": {
                                          "id": 891,
                                          "name": "bytes4",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "12448:6:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes4",
                                            "typeString": "bytes4"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "src": "12447:15:2"
                                  },
                                  "src": "12439:115:2"
                                },
                                {
                                  "block": {
                                    "id": 917,
                                    "nodeType": "Block",
                                    "src": "12583:298:2",
                                    "statements": [
                                      {
                                        "condition": {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 908,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "expression": {
                                              "id": 905,
                                              "name": "reason",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 903,
                                              "src": "12605:6:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes_memory_ptr",
                                                "typeString": "bytes memory"
                                              }
                                            },
                                            "id": 906,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberLocation": "12612:6:2",
                                            "memberName": "length",
                                            "nodeType": "MemberAccess",
                                            "src": "12605:13:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "==",
                                          "rightExpression": {
                                            "hexValue": "30",
                                            "id": 907,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "12622:1:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_0_by_1",
                                              "typeString": "int_const 0"
                                            },
                                            "value": "0"
                                          },
                                          "src": "12605:18:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "falseBody": {
                                          "id": 915,
                                          "nodeType": "Block",
                                          "src": "12732:135:2",
                                          "statements": [
                                            {
                                              "AST": {
                                                "nodeType": "YulBlock",
                                                "src": "12763:86:2",
                                                "statements": [
                                                  {
                                                    "expression": {
                                                      "arguments": [
                                                        {
                                                          "arguments": [
                                                            {
                                                              "kind": "number",
                                                              "nodeType": "YulLiteral",
                                                              "src": "12800:2:2",
                                                              "type": "",
                                                              "value": "32"
                                                            },
                                                            {
                                                              "name": "reason",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "12804:6:2"
                                                            }
                                                          ],
                                                          "functionName": {
                                                            "name": "add",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "12796:3:2"
                                                          },
                                                          "nodeType": "YulFunctionCall",
                                                          "src": "12796:15:2"
                                                        },
                                                        {
                                                          "arguments": [
                                                            {
                                                              "name": "reason",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "12819:6:2"
                                                            }
                                                          ],
                                                          "functionName": {
                                                            "name": "mload",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "12813:5:2"
                                                          },
                                                          "nodeType": "YulFunctionCall",
                                                          "src": "12813:13:2"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "revert",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "12789:6:2"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "12789:38:2"
                                                    },
                                                    "nodeType": "YulExpressionStatement",
                                                    "src": "12789:38:2"
                                                  }
                                                ]
                                              },
                                              "evmVersion": "london",
                                              "externalReferences": [
                                                {
                                                  "declaration": 903,
                                                  "isOffset": false,
                                                  "isSlot": false,
                                                  "src": "12804:6:2",
                                                  "valueSize": 1
                                                },
                                                {
                                                  "declaration": 903,
                                                  "isOffset": false,
                                                  "isSlot": false,
                                                  "src": "12819:6:2",
                                                  "valueSize": 1
                                                }
                                              ],
                                              "id": 914,
                                              "nodeType": "InlineAssembly",
                                              "src": "12754:95:2"
                                            }
                                          ]
                                        },
                                        "id": 916,
                                        "nodeType": "IfStatement",
                                        "src": "12601:266:2",
                                        "trueBody": {
                                          "id": 913,
                                          "nodeType": "Block",
                                          "src": "12625:101:2",
                                          "statements": [
                                            {
                                              "expression": {
                                                "arguments": [
                                                  {
                                                    "hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
                                                    "id": 910,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "string",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "12654:52:2",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                                      "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                                                    },
                                                    "value": "ERC721: transfer to non ERC721Receiver implementer"
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                                      "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                                                    }
                                                  ],
                                                  "id": 909,
                                                  "name": "revert",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [
                                                    -19,
                                                    -19
                                                  ],
                                                  "referencedDeclaration": -19,
                                                  "src": "12647:6:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                                    "typeString": "function (string memory) pure"
                                                  }
                                                },
                                                "id": 911,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "functionCall",
                                                "lValueRequested": false,
                                                "nameLocations": [],
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "12647:60:2",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_tuple$__$",
                                                  "typeString": "tuple()"
                                                }
                                              },
                                              "id": 912,
                                              "nodeType": "ExpressionStatement",
                                              "src": "12647:60:2"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "errorName": "",
                                  "id": 918,
                                  "nodeType": "TryCatchClause",
                                  "parameters": {
                                    "id": 904,
                                    "nodeType": "ParameterList",
                                    "parameters": [
                                      {
                                        "constant": false,
                                        "id": 903,
                                        "mutability": "mutable",
                                        "name": "reason",
                                        "nameLocation": "12575:6:2",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 918,
                                        "src": "12562:19:2",
                                        "stateVariable": false,
                                        "storageLocation": "memory",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes"
                                        },
                                        "typeName": {
                                          "id": 902,
                                          "name": "bytes",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "12562:5:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_storage_ptr",
                                            "typeString": "bytes"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "src": "12561:21:2"
                                  },
                                  "src": "12555:326:2"
                                }
                              ],
                              "externalCall": {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 885,
                                      "name": "_msgSender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1777,
                                      "src": "12403:10:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                        "typeString": "function () view returns (address)"
                                      }
                                    },
                                    "id": 886,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "12403:12:2",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 887,
                                    "name": "from",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 867,
                                    "src": "12417:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 888,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 871,
                                    "src": "12423:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 889,
                                    "name": "_data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 873,
                                    "src": "12432:5:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 882,
                                        "name": "to",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 869,
                                        "src": "12382:2:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 881,
                                      "name": "IERC721Receiver",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1072,
                                      "src": "12366:15:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1072_$",
                                        "typeString": "type(contract IERC721Receiver)"
                                      }
                                    },
                                    "id": 883,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "12366:19:2",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC721Receiver_$1072",
                                      "typeString": "contract IERC721Receiver"
                                    }
                                  },
                                  "id": 884,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "12386:16:2",
                                  "memberName": "onERC721Received",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1071,
                                  "src": "12366:36:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
                                    "typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
                                  }
                                },
                                "id": 890,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "12366:72:2",
                                "tryCall": true,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "id": 919,
                              "nodeType": "TryStatement",
                              "src": "12362:519:2"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 865,
                    "nodeType": "StructuredDocumentation",
                    "src": "11614:542:2",
                    "text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param _data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
                  },
                  "id": 926,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_checkOnERC721Received",
                  "nameLocation": "12170:22:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 874,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 867,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "12210:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 926,
                        "src": "12202:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 866,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "12202:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 869,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "12232:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 926,
                        "src": "12224:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 868,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "12224:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 871,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "12252:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 926,
                        "src": "12244:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 870,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "12244:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 873,
                        "mutability": "mutable",
                        "name": "_data",
                        "nameLocation": "12282:5:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 926,
                        "src": "12269:18:2",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 872,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "12269:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12192:101:2"
                  },
                  "returnParameters": {
                    "id": 877,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 876,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 926,
                        "src": "12311:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 875,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "12311:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12310:6:2"
                  },
                  "scope": 938,
                  "src": "12161:778:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 936,
                    "nodeType": "Block",
                    "src": "13615:2:2",
                    "statements": []
                  },
                  "documentation": {
                    "id": 927,
                    "nodeType": "StructuredDocumentation",
                    "src": "12945:545:2",
                    "text": " @dev Hook that is called before any token transfer. This includes minting\n and burning.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, ``from``'s `tokenId` will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
                  },
                  "id": 937,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_beforeTokenTransfer",
                  "nameLocation": "13504:20:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 934,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 929,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "13542:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 937,
                        "src": "13534:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 928,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13534:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 931,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "13564:2:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 937,
                        "src": "13556:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 930,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13556:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 933,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "13584:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 937,
                        "src": "13576:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 932,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13576:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13524:73:2"
                  },
                  "returnParameters": {
                    "id": 935,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13615:0:2"
                  },
                  "scope": 938,
                  "src": "13495:122:2",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 939,
              "src": "613:13006:2",
              "usedErrors": []
            }
          ],
          "src": "92:13528:2"
        },
        "id": 2
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
          "exportedSymbols": {
            "IERC165": [
              2026
            ],
            "IERC721": [
              1054
            ]
          },
          "id": 1055,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 940,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "93:23:3"
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
              "file": "../../utils/introspection/IERC165.sol",
              "id": 941,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1055,
              "sourceUnit": 2027,
              "src": "118:47:3",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 943,
                    "name": "IERC165",
                    "nameLocations": [
                      "256:7:3"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 2026,
                    "src": "256:7:3"
                  },
                  "id": 944,
                  "nodeType": "InheritanceSpecifier",
                  "src": "256:7:3"
                }
              ],
              "canonicalName": "IERC721",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 942,
                "nodeType": "StructuredDocumentation",
                "src": "167:67:3",
                "text": " @dev Required interface of an ERC721 compliant contract."
              },
              "fullyImplemented": false,
              "id": 1054,
              "linearizedBaseContracts": [
                1054,
                2026
              ],
              "name": "IERC721",
              "nameLocation": "245:7:3",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 945,
                    "nodeType": "StructuredDocumentation",
                    "src": "270:88:3",
                    "text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
                  },
                  "eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                  "id": 953,
                  "name": "Transfer",
                  "nameLocation": "369:8:3",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 952,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 947,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "394:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 953,
                        "src": "378:20:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 946,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "378:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 949,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "416:2:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 953,
                        "src": "400:18:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 948,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "400:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 951,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "436:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 953,
                        "src": "420:23:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 950,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "420:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "377:67:3"
                  },
                  "src": "363:82:3"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 954,
                    "nodeType": "StructuredDocumentation",
                    "src": "451:94:3",
                    "text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
                  },
                  "eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
                  "id": 962,
                  "name": "Approval",
                  "nameLocation": "556:8:3",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 961,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 956,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "581:5:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 962,
                        "src": "565:21:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 955,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "565:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 958,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "approved",
                        "nameLocation": "604:8:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 962,
                        "src": "588:24:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 957,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "588:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 960,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "630:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 962,
                        "src": "614:23:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 959,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "614:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "564:74:3"
                  },
                  "src": "550:89:3"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 963,
                    "nodeType": "StructuredDocumentation",
                    "src": "645:117:3",
                    "text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
                  },
                  "eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
                  "id": 971,
                  "name": "ApprovalForAll",
                  "nameLocation": "773:14:3",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 970,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 965,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "804:5:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 971,
                        "src": "788:21:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 964,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "788:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 967,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "827:8:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 971,
                        "src": "811:24:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 966,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "811:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 969,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "approved",
                        "nameLocation": "842:8:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 971,
                        "src": "837:13:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 968,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "837:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "787:64:3"
                  },
                  "src": "767:85:3"
                },
                {
                  "documentation": {
                    "id": 972,
                    "nodeType": "StructuredDocumentation",
                    "src": "858:76:3",
                    "text": " @dev Returns the number of tokens in ``owner``'s account."
                  },
                  "functionSelector": "70a08231",
                  "id": 979,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "948:9:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 975,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 974,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "966:5:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 979,
                        "src": "958:13:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 973,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "958:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "957:15:3"
                  },
                  "returnParameters": {
                    "id": 978,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 977,
                        "mutability": "mutable",
                        "name": "balance",
                        "nameLocation": "1004:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 979,
                        "src": "996:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 976,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "996:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "995:17:3"
                  },
                  "scope": 1054,
                  "src": "939:74:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 980,
                    "nodeType": "StructuredDocumentation",
                    "src": "1019:131:3",
                    "text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
                  },
                  "functionSelector": "6352211e",
                  "id": 987,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "ownerOf",
                  "nameLocation": "1164:7:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 983,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 982,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "1180:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 987,
                        "src": "1172:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 981,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1172:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1171:17:3"
                  },
                  "returnParameters": {
                    "id": 986,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 985,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1220:5:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 987,
                        "src": "1212:13:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 984,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1212:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1211:15:3"
                  },
                  "scope": 1054,
                  "src": "1155:72:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 988,
                    "nodeType": "StructuredDocumentation",
                    "src": "1233:690:3",
                    "text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "42842e0e",
                  "id": 997,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "1937:16:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 995,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 990,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "1971:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 997,
                        "src": "1963:12:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 989,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1963:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 992,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "1993:2:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 997,
                        "src": "1985:10:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 991,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1985:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 994,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2013:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 997,
                        "src": "2005:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 993,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2005:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1953:73:3"
                  },
                  "returnParameters": {
                    "id": 996,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2035:0:3"
                  },
                  "scope": 1054,
                  "src": "1928:108:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 998,
                    "nodeType": "StructuredDocumentation",
                    "src": "2042:504:3",
                    "text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "23b872dd",
                  "id": 1007,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "2560:12:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1005,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1000,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "2590:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1007,
                        "src": "2582:12:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 999,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2582:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1002,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2612:2:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1007,
                        "src": "2604:10:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1001,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2604:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1004,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2632:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1007,
                        "src": "2624:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1003,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2624:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2572:73:3"
                  },
                  "returnParameters": {
                    "id": 1006,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2654:0:3"
                  },
                  "scope": 1054,
                  "src": "2551:104:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1008,
                    "nodeType": "StructuredDocumentation",
                    "src": "2661:452:3",
                    "text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 1015,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "3127:7:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1013,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1010,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3143:2:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1015,
                        "src": "3135:10:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1009,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3135:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1012,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3155:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1015,
                        "src": "3147:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1011,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3147:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3134:29:3"
                  },
                  "returnParameters": {
                    "id": 1014,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3172:0:3"
                  },
                  "scope": 1054,
                  "src": "3118:55:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1016,
                    "nodeType": "StructuredDocumentation",
                    "src": "3179:139:3",
                    "text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
                  },
                  "functionSelector": "081812fc",
                  "id": 1023,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getApproved",
                  "nameLocation": "3332:11:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1019,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1018,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3352:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1023,
                        "src": "3344:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1017,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3344:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3343:17:3"
                  },
                  "returnParameters": {
                    "id": 1022,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1021,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "3392:8:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1023,
                        "src": "3384:16:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1020,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3384:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3383:18:3"
                  },
                  "scope": 1054,
                  "src": "3323:79:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1024,
                    "nodeType": "StructuredDocumentation",
                    "src": "3408:309:3",
                    "text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
                  },
                  "functionSelector": "a22cb465",
                  "id": 1031,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setApprovalForAll",
                  "nameLocation": "3731:17:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1029,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1026,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "3757:8:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1031,
                        "src": "3749:16:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1025,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3749:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1028,
                        "mutability": "mutable",
                        "name": "_approved",
                        "nameLocation": "3772:9:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1031,
                        "src": "3767:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1027,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3767:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3748:34:3"
                  },
                  "returnParameters": {
                    "id": 1030,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3791:0:3"
                  },
                  "scope": 1054,
                  "src": "3722:70:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1032,
                    "nodeType": "StructuredDocumentation",
                    "src": "3798:138:3",
                    "text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
                  },
                  "functionSelector": "e985e9c5",
                  "id": 1041,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isApprovedForAll",
                  "nameLocation": "3950:16:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1037,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1034,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "3975:5:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1041,
                        "src": "3967:13:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1033,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3967:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1036,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "3990:8:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1041,
                        "src": "3982:16:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1035,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3982:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3966:33:3"
                  },
                  "returnParameters": {
                    "id": 1040,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1039,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1041,
                        "src": "4023:4:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1038,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4023:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4022:6:3"
                  },
                  "scope": 1054,
                  "src": "3941:88:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1042,
                    "nodeType": "StructuredDocumentation",
                    "src": "4035:556:3",
                    "text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "b88d4fde",
                  "id": 1053,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "4605:16:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1051,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1044,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "4639:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1053,
                        "src": "4631:12:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1043,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4631:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1046,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "4661:2:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1053,
                        "src": "4653:10:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1045,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4653:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1048,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4681:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1053,
                        "src": "4673:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1047,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4673:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1050,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "4713:4:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1053,
                        "src": "4698:19:3",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1049,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4698:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4621:102:3"
                  },
                  "returnParameters": {
                    "id": 1052,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4732:0:3"
                  },
                  "scope": 1054,
                  "src": "4596:137:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1055,
              "src": "235:4500:3",
              "usedErrors": []
            }
          ],
          "src": "93:4643:3"
        },
        "id": 3
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
          "exportedSymbols": {
            "IERC721Receiver": [
              1072
            ]
          },
          "id": 1073,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1056,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "101:23:4"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC721Receiver",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1057,
                "nodeType": "StructuredDocumentation",
                "src": "126:152:4",
                "text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
              },
              "fullyImplemented": false,
              "id": 1072,
              "linearizedBaseContracts": [
                1072
              ],
              "name": "IERC721Receiver",
              "nameLocation": "289:15:4",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 1058,
                    "nodeType": "StructuredDocumentation",
                    "src": "311:485:4",
                    "text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
                  },
                  "functionSelector": "150b7a02",
                  "id": 1071,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "onERC721Received",
                  "nameLocation": "810:16:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1067,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1060,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "844:8:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1071,
                        "src": "836:16:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1059,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "836:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1062,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "870:4:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1071,
                        "src": "862:12:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1061,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "862:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1064,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "892:7:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1071,
                        "src": "884:15:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1063,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "884:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1066,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "924:4:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1071,
                        "src": "909:19:4",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1065,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "909:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "826:108:4"
                  },
                  "returnParameters": {
                    "id": 1070,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1069,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1071,
                        "src": "953:6:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 1068,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "953:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "952:8:4"
                  },
                  "scope": 1072,
                  "src": "801:160:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1073,
              "src": "279:684:4",
              "usedErrors": []
            }
          ],
          "src": "101:863:4"
        },
        "id": 4
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol",
          "exportedSymbols": {
            "Address": [
              1765
            ],
            "Context": [
              1787
            ],
            "ERC165": [
              2014
            ],
            "ERC721": [
              938
            ],
            "ERC721Enumerable": [
              1410
            ],
            "IERC165": [
              2026
            ],
            "IERC721": [
              1054
            ],
            "IERC721Enumerable": [
              1441
            ],
            "IERC721Metadata": [
              1468
            ],
            "IERC721Receiver": [
              1072
            ],
            "Strings": [
              1990
            ]
          },
          "id": 1411,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1074,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "113:23:5"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/ERC721.sol",
              "file": "../ERC721.sol",
              "id": 1075,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1411,
              "sourceUnit": 939,
              "src": "138:23:5",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
              "file": "./IERC721Enumerable.sol",
              "id": 1076,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1411,
              "sourceUnit": 1442,
              "src": "162:33:5",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1078,
                    "name": "ERC721",
                    "nameLocations": [
                      "435:6:5"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 938,
                    "src": "435:6:5"
                  },
                  "id": 1079,
                  "nodeType": "InheritanceSpecifier",
                  "src": "435:6:5"
                },
                {
                  "baseName": {
                    "id": 1080,
                    "name": "IERC721Enumerable",
                    "nameLocations": [
                      "443:17:5"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1441,
                    "src": "443:17:5"
                  },
                  "id": 1081,
                  "nodeType": "InheritanceSpecifier",
                  "src": "443:17:5"
                }
              ],
              "canonicalName": "ERC721Enumerable",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 1077,
                "nodeType": "StructuredDocumentation",
                "src": "197:199:5",
                "text": " @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n enumerability of all the token ids in the contract as well as all token ids owned by each\n account."
              },
              "fullyImplemented": false,
              "id": 1410,
              "linearizedBaseContracts": [
                1410,
                1441,
                938,
                1468,
                1054,
                2014,
                2026,
                1787
              ],
              "name": "ERC721Enumerable",
              "nameLocation": "415:16:5",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 1087,
                  "mutability": "mutable",
                  "name": "_ownedTokens",
                  "nameLocation": "576:12:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1410,
                  "src": "520:68:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(uint256 => uint256))"
                  },
                  "typeName": {
                    "id": 1086,
                    "keyType": {
                      "id": 1082,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "528:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "520:47:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(uint256 => uint256))"
                    },
                    "valueType": {
                      "id": 1085,
                      "keyType": {
                        "id": 1083,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "547:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "539:27:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                        "typeString": "mapping(uint256 => uint256)"
                      },
                      "valueType": {
                        "id": 1084,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "558:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 1091,
                  "mutability": "mutable",
                  "name": "_ownedTokensIndex",
                  "nameLocation": "694:17:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1410,
                  "src": "658:53:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  },
                  "typeName": {
                    "id": 1090,
                    "keyType": {
                      "id": 1088,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "666:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "658:27:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                      "typeString": "mapping(uint256 => uint256)"
                    },
                    "valueType": {
                      "id": 1089,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "677:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 1094,
                  "mutability": "mutable",
                  "name": "_allTokens",
                  "nameLocation": "790:10:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1410,
                  "src": "772:28:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1092,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "772:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1093,
                    "nodeType": "ArrayTypeName",
                    "src": "772:9:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 1098,
                  "mutability": "mutable",
                  "name": "_allTokensIndex",
                  "nameLocation": "907:15:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1410,
                  "src": "871:51:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  },
                  "typeName": {
                    "id": 1097,
                    "keyType": {
                      "id": 1095,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "879:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "871:27:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                      "typeString": "mapping(uint256 => uint256)"
                    },
                    "valueType": {
                      "id": 1096,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "890:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "baseFunctions": [
                    201,
                    2025
                  ],
                  "body": {
                    "id": 1121,
                    "nodeType": "Block",
                    "src": "1098:114:5",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1119,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "id": 1114,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1109,
                              "name": "interfaceId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1101,
                              "src": "1115:11:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1111,
                                    "name": "IERC721Enumerable",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1441,
                                    "src": "1135:17:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IERC721Enumerable_$1441_$",
                                      "typeString": "type(contract IERC721Enumerable)"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_type$_t_contract$_IERC721Enumerable_$1441_$",
                                      "typeString": "type(contract IERC721Enumerable)"
                                    }
                                  ],
                                  "id": 1110,
                                  "name": "type",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -27,
                                  "src": "1130:4:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                    "typeString": "function () pure"
                                  }
                                },
                                "id": 1112,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1130:23:5",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Enumerable_$1441",
                                  "typeString": "type(contract IERC721Enumerable)"
                                }
                              },
                              "id": 1113,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "1154:11:5",
                              "memberName": "interfaceId",
                              "nodeType": "MemberAccess",
                              "src": "1130:35:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "src": "1115:50:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "arguments": [
                              {
                                "id": 1117,
                                "name": "interfaceId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1101,
                                "src": "1193:11:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "id": 1115,
                                "name": "super",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -25,
                                "src": "1169:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_super$_ERC721Enumerable_$1410_$",
                                  "typeString": "type(contract super ERC721Enumerable)"
                                }
                              },
                              "id": 1116,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1175:17:5",
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 201,
                              "src": "1169:23:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function (bytes4) view returns (bool)"
                              }
                            },
                            "id": 1118,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1169:36:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "1115:90:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1108,
                        "id": 1120,
                        "nodeType": "Return",
                        "src": "1108:97:5"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1099,
                    "nodeType": "StructuredDocumentation",
                    "src": "929:56:5",
                    "text": " @dev See {IERC165-supportsInterface}."
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 1122,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "999:17:5",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1105,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [
                      {
                        "id": 1103,
                        "name": "IERC165",
                        "nameLocations": [
                          "1066:7:5"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2026,
                        "src": "1066:7:5"
                      },
                      {
                        "id": 1104,
                        "name": "ERC721",
                        "nameLocations": [
                          "1075:6:5"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 938,
                        "src": "1075:6:5"
                      }
                    ],
                    "src": "1057:25:5"
                  },
                  "parameters": {
                    "id": 1102,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1101,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "1024:11:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1122,
                        "src": "1017:18:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 1100,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "1017:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1016:20:5"
                  },
                  "returnParameters": {
                    "id": 1108,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1107,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1122,
                        "src": "1092:4:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1106,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1092:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1091:6:5"
                  },
                  "scope": 1410,
                  "src": "990:222:5",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1432
                  ],
                  "body": {
                    "id": 1149,
                    "nodeType": "Block",
                    "src": "1397:147:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1139,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1134,
                                "name": "index",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1127,
                                "src": "1415:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 1137,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1125,
                                    "src": "1440:5:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "id": 1135,
                                    "name": "ERC721",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 938,
                                    "src": "1423:6:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_ERC721_$938_$",
                                      "typeString": "type(contract ERC721)"
                                    }
                                  },
                                  "id": 1136,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1430:9:5",
                                  "memberName": "balanceOf",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 225,
                                  "src": "1423:16:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view returns (uint256)"
                                  }
                                },
                                "id": 1138,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1423:23:5",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1415:31:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "455243373231456e756d657261626c653a206f776e657220696e646578206f7574206f6620626f756e6473",
                              "id": 1140,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1448:45:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c",
                                "typeString": "literal_string \"ERC721Enumerable: owner index out of bounds\""
                              },
                              "value": "ERC721Enumerable: owner index out of bounds"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c",
                                "typeString": "literal_string \"ERC721Enumerable: owner index out of bounds\""
                              }
                            ],
                            "id": 1133,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1407:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1141,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1407:87:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1142,
                        "nodeType": "ExpressionStatement",
                        "src": "1407:87:5"
                      },
                      {
                        "expression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1143,
                              "name": "_ownedTokens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1087,
                              "src": "1511:12:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(uint256 => uint256))"
                              }
                            },
                            "id": 1145,
                            "indexExpression": {
                              "id": 1144,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1125,
                              "src": "1524:5:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1511:19:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 1147,
                          "indexExpression": {
                            "id": 1146,
                            "name": "index",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1127,
                            "src": "1531:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1511:26:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1132,
                        "id": 1148,
                        "nodeType": "Return",
                        "src": "1504:33:5"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1123,
                    "nodeType": "StructuredDocumentation",
                    "src": "1218:68:5",
                    "text": " @dev See {IERC721Enumerable-tokenOfOwnerByIndex}."
                  },
                  "functionSelector": "2f745c59",
                  "id": 1150,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tokenOfOwnerByIndex",
                  "nameLocation": "1300:19:5",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1129,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1370:8:5"
                  },
                  "parameters": {
                    "id": 1128,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1125,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1328:5:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1150,
                        "src": "1320:13:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1124,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1320:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1127,
                        "mutability": "mutable",
                        "name": "index",
                        "nameLocation": "1343:5:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1150,
                        "src": "1335:13:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1126,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1335:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1319:30:5"
                  },
                  "returnParameters": {
                    "id": 1132,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1131,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1150,
                        "src": "1388:7:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1130,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1388:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1387:9:5"
                  },
                  "scope": 1410,
                  "src": "1291:253:5",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1422
                  ],
                  "body": {
                    "id": 1160,
                    "nodeType": "Block",
                    "src": "1685:41:5",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1157,
                            "name": "_allTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1094,
                            "src": "1702:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                              "typeString": "uint256[] storage ref"
                            }
                          },
                          "id": 1158,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1713:6:5",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "1702:17:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1156,
                        "id": 1159,
                        "nodeType": "Return",
                        "src": "1695:24:5"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1151,
                    "nodeType": "StructuredDocumentation",
                    "src": "1550:60:5",
                    "text": " @dev See {IERC721Enumerable-totalSupply}."
                  },
                  "functionSelector": "18160ddd",
                  "id": 1161,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "1624:11:5",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1153,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1658:8:5"
                  },
                  "parameters": {
                    "id": 1152,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1635:2:5"
                  },
                  "returnParameters": {
                    "id": 1156,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1155,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1161,
                        "src": "1676:7:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1154,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1676:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1675:9:5"
                  },
                  "scope": 1410,
                  "src": "1615:111:5",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    1440
                  ],
                  "body": {
                    "id": 1183,
                    "nodeType": "Block",
                    "src": "1882:146:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1175,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1171,
                                "name": "index",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1164,
                                "src": "1900:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "expression": {
                                    "id": 1172,
                                    "name": "ERC721Enumerable",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1410,
                                    "src": "1908:16:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_ERC721Enumerable_$1410_$",
                                      "typeString": "type(contract ERC721Enumerable)"
                                    }
                                  },
                                  "id": 1173,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1925:11:5",
                                  "memberName": "totalSupply",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1161,
                                  "src": "1908:28:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                    "typeString": "function () view returns (uint256)"
                                  }
                                },
                                "id": 1174,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1908:30:5",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1900:38:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "455243373231456e756d657261626c653a20676c6f62616c20696e646578206f7574206f6620626f756e6473",
                              "id": 1176,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1940:46:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc",
                                "typeString": "literal_string \"ERC721Enumerable: global index out of bounds\""
                              },
                              "value": "ERC721Enumerable: global index out of bounds"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc",
                                "typeString": "literal_string \"ERC721Enumerable: global index out of bounds\""
                              }
                            ],
                            "id": 1170,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1892:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1177,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1892:95:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1178,
                        "nodeType": "ExpressionStatement",
                        "src": "1892:95:5"
                      },
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 1179,
                            "name": "_allTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1094,
                            "src": "2004:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                              "typeString": "uint256[] storage ref"
                            }
                          },
                          "id": 1181,
                          "indexExpression": {
                            "id": 1180,
                            "name": "index",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1164,
                            "src": "2015:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2004:17:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1169,
                        "id": 1182,
                        "nodeType": "Return",
                        "src": "1997:24:5"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1162,
                    "nodeType": "StructuredDocumentation",
                    "src": "1732:61:5",
                    "text": " @dev See {IERC721Enumerable-tokenByIndex}."
                  },
                  "functionSelector": "4f6ccce7",
                  "id": 1184,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tokenByIndex",
                  "nameLocation": "1807:12:5",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1166,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1855:8:5"
                  },
                  "parameters": {
                    "id": 1165,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1164,
                        "mutability": "mutable",
                        "name": "index",
                        "nameLocation": "1828:5:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1184,
                        "src": "1820:13:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1163,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1820:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1819:15:5"
                  },
                  "returnParameters": {
                    "id": 1169,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1168,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1184,
                        "src": "1873:7:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1167,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1873:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1872:9:5"
                  },
                  "scope": 1410,
                  "src": "1798:230:5",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    937
                  ],
                  "body": {
                    "id": 1247,
                    "nodeType": "Block",
                    "src": "2753:443:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1198,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1187,
                              "src": "2790:4:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1199,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1189,
                              "src": "2796:2:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1200,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1191,
                              "src": "2800:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1195,
                              "name": "super",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -25,
                              "src": "2763:5:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_super$_ERC721Enumerable_$1410_$",
                                "typeString": "type(contract super ERC721Enumerable)"
                              }
                            },
                            "id": 1197,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2769:20:5",
                            "memberName": "_beforeTokenTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 937,
                            "src": "2763:26:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 1201,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2763:45:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1202,
                        "nodeType": "ExpressionStatement",
                        "src": "2763:45:5"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1208,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1203,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1187,
                            "src": "2823:4:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 1206,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2839:1:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1205,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2831:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1204,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2831:7:5",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1207,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2831:10:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2823:18:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1216,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1214,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1187,
                              "src": "2918:4:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "id": 1215,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1189,
                              "src": "2926:2:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "2918:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 1223,
                          "nodeType": "IfStatement",
                          "src": "2914:88:5",
                          "trueBody": {
                            "id": 1222,
                            "nodeType": "Block",
                            "src": "2930:72:5",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 1218,
                                      "name": "from",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1187,
                                      "src": "2977:4:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "id": 1219,
                                      "name": "tokenId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1191,
                                      "src": "2983:7:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 1217,
                                    "name": "_removeTokenFromOwnerEnumeration",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1361,
                                    "src": "2944:32:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                      "typeString": "function (address,uint256)"
                                    }
                                  },
                                  "id": 1220,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2944:47:5",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_tuple$__$",
                                    "typeString": "tuple()"
                                  }
                                },
                                "id": 1221,
                                "nodeType": "ExpressionStatement",
                                "src": "2944:47:5"
                              }
                            ]
                          }
                        },
                        "id": 1224,
                        "nodeType": "IfStatement",
                        "src": "2819:183:5",
                        "trueBody": {
                          "id": 1213,
                          "nodeType": "Block",
                          "src": "2843:65:5",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1210,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1191,
                                    "src": "2889:7:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1209,
                                  "name": "_addTokenToAllTokensEnumeration",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1298,
                                  "src": "2857:31:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256)"
                                  }
                                },
                                "id": 1211,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2857:40:5",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1212,
                              "nodeType": "ExpressionStatement",
                              "src": "2857:40:5"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1230,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1225,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1189,
                            "src": "3015:2:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 1228,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3029:1:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1227,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3021:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1226,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3021:7:5",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1229,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3021:10:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3015:16:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1238,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1236,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1189,
                              "src": "3113:2:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "id": 1237,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1187,
                              "src": "3119:4:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "3113:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 1245,
                          "nodeType": "IfStatement",
                          "src": "3109:81:5",
                          "trueBody": {
                            "id": 1244,
                            "nodeType": "Block",
                            "src": "3125:65:5",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 1240,
                                      "name": "to",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1189,
                                      "src": "3167:2:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "id": 1241,
                                      "name": "tokenId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1191,
                                      "src": "3171:7:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 1239,
                                    "name": "_addTokenToOwnerEnumeration",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1278,
                                    "src": "3139:27:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                      "typeString": "function (address,uint256)"
                                    }
                                  },
                                  "id": 1242,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3139:40:5",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_tuple$__$",
                                    "typeString": "tuple()"
                                  }
                                },
                                "id": 1243,
                                "nodeType": "ExpressionStatement",
                                "src": "3139:40:5"
                              }
                            ]
                          }
                        },
                        "id": 1246,
                        "nodeType": "IfStatement",
                        "src": "3011:179:5",
                        "trueBody": {
                          "id": 1235,
                          "nodeType": "Block",
                          "src": "3033:70:5",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1232,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1191,
                                    "src": "3084:7:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1231,
                                  "name": "_removeTokenFromAllTokensEnumeration",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1409,
                                  "src": "3047:36:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256)"
                                  }
                                },
                                "id": 1233,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3047:45:5",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1234,
                              "nodeType": "ExpressionStatement",
                              "src": "3047:45:5"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1185,
                    "nodeType": "StructuredDocumentation",
                    "src": "2034:585:5",
                    "text": " @dev Hook that is called before any token transfer. This includes minting\n and burning.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, ``from``'s `tokenId` will be burned.\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
                  },
                  "id": 1248,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_beforeTokenTransfer",
                  "nameLocation": "2633:20:5",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1193,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2744:8:5"
                  },
                  "parameters": {
                    "id": 1192,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1187,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "2671:4:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1248,
                        "src": "2663:12:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1186,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2663:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1189,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2693:2:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1248,
                        "src": "2685:10:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1188,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2685:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1191,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2713:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1248,
                        "src": "2705:15:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1190,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2705:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2653:73:5"
                  },
                  "returnParameters": {
                    "id": 1194,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2753:0:5"
                  },
                  "scope": 1410,
                  "src": "2624:572:5",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1277,
                    "nodeType": "Block",
                    "src": "3564:143:5",
                    "statements": [
                      {
                        "assignments": [
                          1257
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1257,
                            "mutability": "mutable",
                            "name": "length",
                            "nameLocation": "3582:6:5",
                            "nodeType": "VariableDeclaration",
                            "scope": 1277,
                            "src": "3574:14:5",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1256,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3574:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1262,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1260,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1251,
                              "src": "3608:2:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 1258,
                              "name": "ERC721",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 938,
                              "src": "3591:6:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC721_$938_$",
                                "typeString": "type(contract ERC721)"
                              }
                            },
                            "id": 1259,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3598:9:5",
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 225,
                            "src": "3591:16:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view returns (uint256)"
                            }
                          },
                          "id": 1261,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3591:20:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3574:37:5"
                      },
                      {
                        "expression": {
                          "id": 1269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 1263,
                                "name": "_ownedTokens",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1087,
                                "src": "3621:12:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(uint256 => uint256))"
                                }
                              },
                              "id": 1266,
                              "indexExpression": {
                                "id": 1264,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1251,
                                "src": "3634:2:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3621:16:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 1267,
                            "indexExpression": {
                              "id": 1265,
                              "name": "length",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1257,
                              "src": "3638:6:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3621:24:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1268,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1253,
                            "src": "3648:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3621:34:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1270,
                        "nodeType": "ExpressionStatement",
                        "src": "3621:34:5"
                      },
                      {
                        "expression": {
                          "id": 1275,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1271,
                              "name": "_ownedTokensIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1091,
                              "src": "3665:17:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 1273,
                            "indexExpression": {
                              "id": 1272,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1253,
                              "src": "3683:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3665:26:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1274,
                            "name": "length",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1257,
                            "src": "3694:6:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3665:35:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1276,
                        "nodeType": "ExpressionStatement",
                        "src": "3665:35:5"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1249,
                    "nodeType": "StructuredDocumentation",
                    "src": "3202:283:5",
                    "text": " @dev Private function to add a token to this extension's ownership-tracking data structures.\n @param to address representing the new owner of the given token ID\n @param tokenId uint256 ID of the token to be added to the tokens list of the given address"
                  },
                  "id": 1278,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_addTokenToOwnerEnumeration",
                  "nameLocation": "3499:27:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1254,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1251,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3535:2:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1278,
                        "src": "3527:10:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1250,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3527:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1253,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3547:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1278,
                        "src": "3539:15:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1252,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3539:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3526:29:5"
                  },
                  "returnParameters": {
                    "id": 1255,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3564:0:5"
                  },
                  "scope": 1410,
                  "src": "3490:217:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 1297,
                    "nodeType": "Block",
                    "src": "3968:95:5",
                    "statements": [
                      {
                        "expression": {
                          "id": 1289,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1284,
                              "name": "_allTokensIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1098,
                              "src": "3978:15:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 1286,
                            "indexExpression": {
                              "id": 1285,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1281,
                              "src": "3994:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3978:24:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1287,
                              "name": "_allTokens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1094,
                              "src": "4005:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 1288,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4016:6:5",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "4005:17:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3978:44:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1290,
                        "nodeType": "ExpressionStatement",
                        "src": "3978:44:5"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1294,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1281,
                              "src": "4048:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1291,
                              "name": "_allTokens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1094,
                              "src": "4032:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 1293,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4043:4:5",
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "4032:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                              "typeString": "function (uint256[] storage pointer,uint256)"
                            }
                          },
                          "id": 1295,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4032:24:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1296,
                        "nodeType": "ExpressionStatement",
                        "src": "4032:24:5"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1279,
                    "nodeType": "StructuredDocumentation",
                    "src": "3713:184:5",
                    "text": " @dev Private function to add a token to this extension's token tracking data structures.\n @param tokenId uint256 ID of the token to be added to the tokens list"
                  },
                  "id": 1298,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_addTokenToAllTokensEnumeration",
                  "nameLocation": "3911:31:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1282,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1281,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3951:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1298,
                        "src": "3943:15:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1280,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3943:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3942:17:5"
                  },
                  "returnParameters": {
                    "id": 1283,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3968:0:5"
                  },
                  "scope": 1410,
                  "src": "3902:161:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 1360,
                    "nodeType": "Block",
                    "src": "4761:889:5",
                    "statements": [
                      {
                        "assignments": [
                          1307
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1307,
                            "mutability": "mutable",
                            "name": "lastTokenIndex",
                            "nameLocation": "4950:14:5",
                            "nodeType": "VariableDeclaration",
                            "scope": 1360,
                            "src": "4942:22:5",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1306,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4942:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1314,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1313,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 1310,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1301,
                                "src": "4984:4:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 1308,
                                "name": "ERC721",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 938,
                                "src": "4967:6:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ERC721_$938_$",
                                  "typeString": "type(contract ERC721)"
                                }
                              },
                              "id": 1309,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4974:9:5",
                              "memberName": "balanceOf",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 225,
                              "src": "4967:16:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view returns (uint256)"
                              }
                            },
                            "id": 1311,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4967:22:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 1312,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4992:1:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "4967:26:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4942:51:5"
                      },
                      {
                        "assignments": [
                          1316
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1316,
                            "mutability": "mutable",
                            "name": "tokenIndex",
                            "nameLocation": "5011:10:5",
                            "nodeType": "VariableDeclaration",
                            "scope": 1360,
                            "src": "5003:18:5",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1315,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5003:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1320,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1317,
                            "name": "_ownedTokensIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1091,
                            "src": "5024:17:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 1319,
                          "indexExpression": {
                            "id": 1318,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1303,
                            "src": "5042:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5024:26:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5003:47:5"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1323,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1321,
                            "name": "tokenIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1316,
                            "src": "5154:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 1322,
                            "name": "lastTokenIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1307,
                            "src": "5168:14:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5154:28:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1347,
                        "nodeType": "IfStatement",
                        "src": "5150:323:5",
                        "trueBody": {
                          "id": 1346,
                          "nodeType": "Block",
                          "src": "5184:289:5",
                          "statements": [
                            {
                              "assignments": [
                                1325
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1325,
                                  "mutability": "mutable",
                                  "name": "lastTokenId",
                                  "nameLocation": "5206:11:5",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1346,
                                  "src": "5198:19:5",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1324,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5198:7:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1331,
                              "initialValue": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 1326,
                                    "name": "_ownedTokens",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1087,
                                    "src": "5220:12:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(uint256 => uint256))"
                                    }
                                  },
                                  "id": 1328,
                                  "indexExpression": {
                                    "id": 1327,
                                    "name": "from",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1301,
                                    "src": "5233:4:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "5220:18:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                    "typeString": "mapping(uint256 => uint256)"
                                  }
                                },
                                "id": 1330,
                                "indexExpression": {
                                  "id": 1329,
                                  "name": "lastTokenIndex",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1307,
                                  "src": "5239:14:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "5220:34:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "5198:56:5"
                            },
                            {
                              "expression": {
                                "id": 1338,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 1332,
                                      "name": "_ownedTokens",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1087,
                                      "src": "5269:12:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                                        "typeString": "mapping(address => mapping(uint256 => uint256))"
                                      }
                                    },
                                    "id": 1335,
                                    "indexExpression": {
                                      "id": 1333,
                                      "name": "from",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1301,
                                      "src": "5282:4:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5269:18:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                      "typeString": "mapping(uint256 => uint256)"
                                    }
                                  },
                                  "id": 1336,
                                  "indexExpression": {
                                    "id": 1334,
                                    "name": "tokenIndex",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1316,
                                    "src": "5288:10:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "5269:30:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 1337,
                                  "name": "lastTokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1325,
                                  "src": "5302:11:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5269:44:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1339,
                              "nodeType": "ExpressionStatement",
                              "src": "5269:44:5"
                            },
                            {
                              "expression": {
                                "id": 1344,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1340,
                                    "name": "_ownedTokensIndex",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1091,
                                    "src": "5385:17:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                      "typeString": "mapping(uint256 => uint256)"
                                    }
                                  },
                                  "id": 1342,
                                  "indexExpression": {
                                    "id": 1341,
                                    "name": "lastTokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1325,
                                    "src": "5403:11:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "5385:30:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 1343,
                                  "name": "tokenIndex",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1316,
                                  "src": "5418:10:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5385:43:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1345,
                              "nodeType": "ExpressionStatement",
                              "src": "5385:43:5"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 1351,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "5559:33:5",
                          "subExpression": {
                            "baseExpression": {
                              "id": 1348,
                              "name": "_ownedTokensIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1091,
                              "src": "5566:17:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 1350,
                            "indexExpression": {
                              "id": 1349,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1303,
                              "src": "5584:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5566:26:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1352,
                        "nodeType": "ExpressionStatement",
                        "src": "5559:33:5"
                      },
                      {
                        "expression": {
                          "id": 1358,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "5602:41:5",
                          "subExpression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 1353,
                                "name": "_ownedTokens",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1087,
                                "src": "5609:12:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(uint256 => uint256))"
                                }
                              },
                              "id": 1355,
                              "indexExpression": {
                                "id": 1354,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1301,
                                "src": "5622:4:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5609:18:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 1357,
                            "indexExpression": {
                              "id": 1356,
                              "name": "lastTokenIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1307,
                              "src": "5628:14:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5609:34:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1359,
                        "nodeType": "ExpressionStatement",
                        "src": "5602:41:5"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1299,
                    "nodeType": "StructuredDocumentation",
                    "src": "4069:606:5",
                    "text": " @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n This has O(1) time complexity, but alters the order of the _ownedTokens array.\n @param from address representing the previous owner of the given token ID\n @param tokenId uint256 ID of the token to be removed from the tokens list of the given address"
                  },
                  "id": 1361,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_removeTokenFromOwnerEnumeration",
                  "nameLocation": "4689:32:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1304,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1301,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "4730:4:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1361,
                        "src": "4722:12:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1300,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4722:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1303,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4744:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1361,
                        "src": "4736:15:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1302,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4736:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4721:31:5"
                  },
                  "returnParameters": {
                    "id": 1305,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4761:0:5"
                  },
                  "scope": 1410,
                  "src": "4680:970:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 1408,
                    "nodeType": "Block",
                    "src": "6009:990:5",
                    "statements": [
                      {
                        "assignments": [
                          1368
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1368,
                            "mutability": "mutable",
                            "name": "lastTokenIndex",
                            "nameLocation": "6195:14:5",
                            "nodeType": "VariableDeclaration",
                            "scope": 1408,
                            "src": "6187:22:5",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1367,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "6187:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1373,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1369,
                              "name": "_allTokens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1094,
                              "src": "6212:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 1370,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "6223:6:5",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "6212:17:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 1371,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6232:1:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "6212:21:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6187:46:5"
                      },
                      {
                        "assignments": [
                          1375
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1375,
                            "mutability": "mutable",
                            "name": "tokenIndex",
                            "nameLocation": "6251:10:5",
                            "nodeType": "VariableDeclaration",
                            "scope": 1408,
                            "src": "6243:18:5",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1374,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "6243:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1379,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1376,
                            "name": "_allTokensIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1098,
                            "src": "6264:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 1378,
                          "indexExpression": {
                            "id": 1377,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1364,
                            "src": "6280:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6264:24:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6243:45:5"
                      },
                      {
                        "assignments": [
                          1381
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1381,
                            "mutability": "mutable",
                            "name": "lastTokenId",
                            "nameLocation": "6618:11:5",
                            "nodeType": "VariableDeclaration",
                            "scope": 1408,
                            "src": "6610:19:5",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1380,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "6610:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1385,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1382,
                            "name": "_allTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1094,
                            "src": "6632:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                              "typeString": "uint256[] storage ref"
                            }
                          },
                          "id": 1384,
                          "indexExpression": {
                            "id": 1383,
                            "name": "lastTokenIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1368,
                            "src": "6643:14:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6632:26:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6610:48:5"
                      },
                      {
                        "expression": {
                          "id": 1390,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1386,
                              "name": "_allTokens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1094,
                              "src": "6669:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 1388,
                            "indexExpression": {
                              "id": 1387,
                              "name": "tokenIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1375,
                              "src": "6680:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "6669:22:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1389,
                            "name": "lastTokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1381,
                            "src": "6694:11:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6669:36:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1391,
                        "nodeType": "ExpressionStatement",
                        "src": "6669:36:5"
                      },
                      {
                        "expression": {
                          "id": 1396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1392,
                              "name": "_allTokensIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1098,
                              "src": "6773:15:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 1394,
                            "indexExpression": {
                              "id": 1393,
                              "name": "lastTokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1381,
                              "src": "6789:11:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "6773:28:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1395,
                            "name": "tokenIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1375,
                            "src": "6804:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6773:41:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1397,
                        "nodeType": "ExpressionStatement",
                        "src": "6773:41:5"
                      },
                      {
                        "expression": {
                          "id": 1401,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "6935:31:5",
                          "subExpression": {
                            "baseExpression": {
                              "id": 1398,
                              "name": "_allTokensIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1098,
                              "src": "6942:15:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 1400,
                            "indexExpression": {
                              "id": 1399,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1364,
                              "src": "6958:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "6942:24:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1402,
                        "nodeType": "ExpressionStatement",
                        "src": "6935:31:5"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 1403,
                              "name": "_allTokens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1094,
                              "src": "6976:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 1405,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "6987:3:5",
                            "memberName": "pop",
                            "nodeType": "MemberAccess",
                            "src": "6976:14:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                              "typeString": "function (uint256[] storage pointer)"
                            }
                          },
                          "id": 1406,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6976:16:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1407,
                        "nodeType": "ExpressionStatement",
                        "src": "6976:16:5"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1362,
                    "nodeType": "StructuredDocumentation",
                    "src": "5656:277:5",
                    "text": " @dev Private function to remove a token from this extension's token tracking data structures.\n This has O(1) time complexity, but alters the order of the _allTokens array.\n @param tokenId uint256 ID of the token to be removed from the tokens list"
                  },
                  "id": 1409,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_removeTokenFromAllTokensEnumeration",
                  "nameLocation": "5947:36:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1365,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1364,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "5992:7:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1409,
                        "src": "5984:15:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1363,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5984:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5983:17:5"
                  },
                  "returnParameters": {
                    "id": 1366,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6009:0:5"
                  },
                  "scope": 1410,
                  "src": "5938:1061:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 1411,
              "src": "397:6604:5",
              "usedErrors": []
            }
          ],
          "src": "113:6889:5"
        },
        "id": 5
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
          "exportedSymbols": {
            "IERC165": [
              2026
            ],
            "IERC721": [
              1054
            ],
            "IERC721Enumerable": [
              1441
            ]
          },
          "id": 1442,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1412,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "114:23:6"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
              "file": "../IERC721.sol",
              "id": 1413,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1442,
              "sourceUnit": 1055,
              "src": "139:24:6",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1415,
                    "name": "IERC721",
                    "nameLocations": [
                      "333:7:6"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1054,
                    "src": "333:7:6"
                  },
                  "id": 1416,
                  "nodeType": "InheritanceSpecifier",
                  "src": "333:7:6"
                }
              ],
              "canonicalName": "IERC721Enumerable",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1414,
                "nodeType": "StructuredDocumentation",
                "src": "165:136:6",
                "text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
              },
              "fullyImplemented": false,
              "id": 1441,
              "linearizedBaseContracts": [
                1441,
                1054,
                2026
              ],
              "name": "IERC721Enumerable",
              "nameLocation": "312:17:6",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 1417,
                    "nodeType": "StructuredDocumentation",
                    "src": "347:82:6",
                    "text": " @dev Returns the total amount of tokens stored by the contract."
                  },
                  "functionSelector": "18160ddd",
                  "id": 1422,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "443:11:6",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1418,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "454:2:6"
                  },
                  "returnParameters": {
                    "id": 1421,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1420,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1422,
                        "src": "480:7:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1419,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "480:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "479:9:6"
                  },
                  "scope": 1441,
                  "src": "434:55:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1423,
                    "nodeType": "StructuredDocumentation",
                    "src": "495:171:6",
                    "text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
                  },
                  "functionSelector": "2f745c59",
                  "id": 1432,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tokenOfOwnerByIndex",
                  "nameLocation": "680:19:6",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1428,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1425,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "708:5:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 1432,
                        "src": "700:13:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1424,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "700:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1427,
                        "mutability": "mutable",
                        "name": "index",
                        "nameLocation": "723:5:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 1432,
                        "src": "715:13:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1426,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "715:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "699:30:6"
                  },
                  "returnParameters": {
                    "id": 1431,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1430,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "761:7:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 1432,
                        "src": "753:15:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1429,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "753:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "752:17:6"
                  },
                  "scope": 1441,
                  "src": "671:99:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1433,
                    "nodeType": "StructuredDocumentation",
                    "src": "776:164:6",
                    "text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
                  },
                  "functionSelector": "4f6ccce7",
                  "id": 1440,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tokenByIndex",
                  "nameLocation": "954:12:6",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1436,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1435,
                        "mutability": "mutable",
                        "name": "index",
                        "nameLocation": "975:5:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 1440,
                        "src": "967:13:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1434,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "967:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "966:15:6"
                  },
                  "returnParameters": {
                    "id": 1439,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1438,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1440,
                        "src": "1005:7:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1437,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1005:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1004:9:6"
                  },
                  "scope": 1441,
                  "src": "945:69:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1442,
              "src": "302:714:6",
              "usedErrors": []
            }
          ],
          "src": "114:903:6"
        },
        "id": 6
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
          "exportedSymbols": {
            "IERC165": [
              2026
            ],
            "IERC721": [
              1054
            ],
            "IERC721Metadata": [
              1468
            ]
          },
          "id": 1469,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1443,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "112:23:7"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
              "file": "../IERC721.sol",
              "id": 1444,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1469,
              "sourceUnit": 1055,
              "src": "137:24:7",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1446,
                    "name": "IERC721",
                    "nameLocations": [
                      "326:7:7"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1054,
                    "src": "326:7:7"
                  },
                  "id": 1447,
                  "nodeType": "InheritanceSpecifier",
                  "src": "326:7:7"
                }
              ],
              "canonicalName": "IERC721Metadata",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1445,
                "nodeType": "StructuredDocumentation",
                "src": "163:133:7",
                "text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
              },
              "fullyImplemented": false,
              "id": 1468,
              "linearizedBaseContracts": [
                1468,
                1054,
                2026
              ],
              "name": "IERC721Metadata",
              "nameLocation": "307:15:7",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 1448,
                    "nodeType": "StructuredDocumentation",
                    "src": "340:58:7",
                    "text": " @dev Returns the token collection name."
                  },
                  "functionSelector": "06fdde03",
                  "id": 1453,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "name",
                  "nameLocation": "412:4:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1449,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "416:2:7"
                  },
                  "returnParameters": {
                    "id": 1452,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1451,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1453,
                        "src": "442:13:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1450,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "442:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "441:15:7"
                  },
                  "scope": 1468,
                  "src": "403:54:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1454,
                    "nodeType": "StructuredDocumentation",
                    "src": "463:60:7",
                    "text": " @dev Returns the token collection symbol."
                  },
                  "functionSelector": "95d89b41",
                  "id": 1459,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "symbol",
                  "nameLocation": "537:6:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1455,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "543:2:7"
                  },
                  "returnParameters": {
                    "id": 1458,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1457,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1459,
                        "src": "569:13:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1456,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "569:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "568:15:7"
                  },
                  "scope": 1468,
                  "src": "528:56:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1460,
                    "nodeType": "StructuredDocumentation",
                    "src": "590:90:7",
                    "text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
                  },
                  "functionSelector": "c87b56dd",
                  "id": 1467,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tokenURI",
                  "nameLocation": "694:8:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1463,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1462,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "711:7:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1467,
                        "src": "703:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1461,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "703:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "702:17:7"
                  },
                  "returnParameters": {
                    "id": 1466,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1465,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1467,
                        "src": "743:13:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1464,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "743:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "742:15:7"
                  },
                  "scope": 1468,
                  "src": "685:73:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1469,
              "src": "297:463:7",
              "usedErrors": []
            }
          ],
          "src": "112:649:7"
        },
        "id": 7
      },
      "@openzeppelin/contracts/utils/Address.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Address.sol",
          "exportedSymbols": {
            "Address": [
              1765
            ]
          },
          "id": 1766,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1470,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "86:23:8"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "Address",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 1471,
                "nodeType": "StructuredDocumentation",
                "src": "111:67:8",
                "text": " @dev Collection of functions related to the address type"
              },
              "fullyImplemented": true,
              "id": 1765,
              "linearizedBaseContracts": [
                1765
              ],
              "name": "Address",
              "nameLocation": "187:7:8",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 1487,
                    "nodeType": "Block",
                    "src": "837:311:8",
                    "statements": [
                      {
                        "assignments": [
                          1480
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1480,
                            "mutability": "mutable",
                            "name": "size",
                            "nameLocation": "1042:4:8",
                            "nodeType": "VariableDeclaration",
                            "scope": 1487,
                            "src": "1034:12:8",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1479,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1034:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1481,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1034:12:8"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "1065:52:8",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1079:28:8",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "account",
                                    "nodeType": "YulIdentifier",
                                    "src": "1099:7:8"
                                  }
                                ],
                                "functionName": {
                                  "name": "extcodesize",
                                  "nodeType": "YulIdentifier",
                                  "src": "1087:11:8"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1087:20:8"
                              },
                              "variableNames": [
                                {
                                  "name": "size",
                                  "nodeType": "YulIdentifier",
                                  "src": "1079:4:8"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "london",
                        "externalReferences": [
                          {
                            "declaration": 1474,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1099:7:8",
                            "valueSize": 1
                          },
                          {
                            "declaration": 1480,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1079:4:8",
                            "valueSize": 1
                          }
                        ],
                        "id": 1482,
                        "nodeType": "InlineAssembly",
                        "src": "1056:61:8"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1485,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1483,
                            "name": "size",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1480,
                            "src": "1133:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1484,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1140:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1133:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1478,
                        "id": 1486,
                        "nodeType": "Return",
                        "src": "1126:15:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1472,
                    "nodeType": "StructuredDocumentation",
                    "src": "201:565:8",
                    "text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
                  },
                  "id": 1488,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isContract",
                  "nameLocation": "780:10:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1475,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1474,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "799:7:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1488,
                        "src": "791:15:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1473,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "791:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "790:17:8"
                  },
                  "returnParameters": {
                    "id": 1478,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1477,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1488,
                        "src": "831:4:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1476,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "831:4:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "830:6:8"
                  },
                  "scope": 1765,
                  "src": "771:377:8",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1521,
                    "nodeType": "Block",
                    "src": "2136:241:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1503,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 1499,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "2162:4:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$1765",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Address_$1765",
                                        "typeString": "library Address"
                                      }
                                    ],
                                    "id": 1498,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2154:7:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1497,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2154:7:8",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1500,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2154:13:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 1501,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2168:7:8",
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "2154:21:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 1502,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1493,
                                "src": "2179:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2154:31:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
                              "id": 1504,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2187:31:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              },
                              "value": "Address: insufficient balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              }
                            ],
                            "id": 1496,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2146:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1505,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2146:73:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1506,
                        "nodeType": "ExpressionStatement",
                        "src": "2146:73:8"
                      },
                      {
                        "assignments": [
                          1508,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1508,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "2236:7:8",
                            "nodeType": "VariableDeclaration",
                            "scope": 1521,
                            "src": "2231:12:8",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1507,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "2231:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 1515,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 1513,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2279:2:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 1509,
                                "name": "recipient",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1491,
                                "src": "2249:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 1510,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2259:4:8",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "2249:14:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 1512,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 1511,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1493,
                                "src": "2271:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "2249:29:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1514,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2249:33:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2230:52:8"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1517,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1508,
                              "src": "2300:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
                              "id": 1518,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2309:60:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              },
                              "value": "Address: unable to send value, recipient may have reverted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              }
                            ],
                            "id": 1516,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2292:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1519,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2292:78:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1520,
                        "nodeType": "ExpressionStatement",
                        "src": "2292:78:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1489,
                    "nodeType": "StructuredDocumentation",
                    "src": "1154:906:8",
                    "text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
                  },
                  "id": 1522,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sendValue",
                  "nameLocation": "2074:9:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1494,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1491,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "2100:9:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1522,
                        "src": "2084:25:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "typeName": {
                          "id": 1490,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2084:15:8",
                          "stateMutability": "payable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1493,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2119:6:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1522,
                        "src": "2111:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1492,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2111:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2083:43:8"
                  },
                  "returnParameters": {
                    "id": 1495,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2136:0:8"
                  },
                  "scope": 1765,
                  "src": "2065:312:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1538,
                    "nodeType": "Block",
                    "src": "3208:84:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1533,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1525,
                              "src": "3238:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1534,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1527,
                              "src": "3246:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
                              "id": 1535,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3252:32:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                                "typeString": "literal_string \"Address: low-level call failed\""
                              },
                              "value": "Address: low-level call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                                "typeString": "literal_string \"Address: low-level call failed\""
                              }
                            ],
                            "id": 1532,
                            "name": "functionCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1539,
                              1559
                            ],
                            "referencedDeclaration": 1559,
                            "src": "3225:12:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1536,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3225:60:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1531,
                        "id": 1537,
                        "nodeType": "Return",
                        "src": "3218:67:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1523,
                    "nodeType": "StructuredDocumentation",
                    "src": "2383:731:8",
                    "text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
                  },
                  "id": 1539,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nameLocation": "3128:12:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1528,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1525,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "3149:6:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1539,
                        "src": "3141:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1524,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3141:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1527,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "3170:4:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1539,
                        "src": "3157:17:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1526,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3157:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3140:35:8"
                  },
                  "returnParameters": {
                    "id": 1531,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1530,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1539,
                        "src": "3194:12:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1529,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3194:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3193:14:8"
                  },
                  "scope": 1765,
                  "src": "3119:173:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1558,
                    "nodeType": "Block",
                    "src": "3661:76:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1552,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1542,
                              "src": "3700:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1553,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1544,
                              "src": "3708:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "30",
                              "id": 1554,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3714:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "id": 1555,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1546,
                              "src": "3717:12:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1551,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1579,
                              1629
                            ],
                            "referencedDeclaration": 1629,
                            "src": "3678:21:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1556,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3678:52:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1550,
                        "id": 1557,
                        "nodeType": "Return",
                        "src": "3671:59:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1540,
                    "nodeType": "StructuredDocumentation",
                    "src": "3298:211:8",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                  },
                  "id": 1559,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nameLocation": "3523:12:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1547,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1542,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "3553:6:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1559,
                        "src": "3545:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1541,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3545:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1544,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "3582:4:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1559,
                        "src": "3569:17:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1543,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3569:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1546,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "3610:12:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1559,
                        "src": "3596:26:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1545,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3596:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3535:93:8"
                  },
                  "returnParameters": {
                    "id": 1550,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1549,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1559,
                        "src": "3647:12:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1548,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3647:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3646:14:8"
                  },
                  "scope": 1765,
                  "src": "3514:223:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1578,
                    "nodeType": "Block",
                    "src": "4242:111:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1572,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1562,
                              "src": "4281:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1573,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1564,
                              "src": "4289:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 1574,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1566,
                              "src": "4295:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
                              "id": 1575,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4302:43:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                                "typeString": "literal_string \"Address: low-level call with value failed\""
                              },
                              "value": "Address: low-level call with value failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                                "typeString": "literal_string \"Address: low-level call with value failed\""
                              }
                            ],
                            "id": 1571,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1579,
                              1629
                            ],
                            "referencedDeclaration": 1629,
                            "src": "4259:21:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1576,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4259:87:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1570,
                        "id": 1577,
                        "nodeType": "Return",
                        "src": "4252:94:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1560,
                    "nodeType": "StructuredDocumentation",
                    "src": "3743:351:8",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
                  },
                  "id": 1579,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCallWithValue",
                  "nameLocation": "4108:21:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1567,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1562,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "4147:6:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1579,
                        "src": "4139:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1561,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4139:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1564,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "4176:4:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1579,
                        "src": "4163:17:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1563,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4163:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1566,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4198:5:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1579,
                        "src": "4190:13:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1565,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4190:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4129:80:8"
                  },
                  "returnParameters": {
                    "id": 1570,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1569,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1579,
                        "src": "4228:12:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1568,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4228:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4227:14:8"
                  },
                  "scope": 1765,
                  "src": "4099:254:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1628,
                    "nodeType": "Block",
                    "src": "4780:320:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1600,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 1596,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "4806:4:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$1765",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Address_$1765",
                                        "typeString": "library Address"
                                      }
                                    ],
                                    "id": 1595,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4798:7:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1594,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4798:7:8",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1597,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4798:13:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 1598,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4812:7:8",
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "4798:21:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 1599,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1586,
                                "src": "4823:5:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4798:30:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
                              "id": 1601,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4830:40:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                                "typeString": "literal_string \"Address: insufficient balance for call\""
                              },
                              "value": "Address: insufficient balance for call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                                "typeString": "literal_string \"Address: insufficient balance for call\""
                              }
                            ],
                            "id": 1593,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4790:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1602,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4790:81:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1603,
                        "nodeType": "ExpressionStatement",
                        "src": "4790:81:8"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1606,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1582,
                                  "src": "4900:6:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1605,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1488,
                                "src": "4889:10:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 1607,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4889:18:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 1608,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4909:31:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                "typeString": "literal_string \"Address: call to non-contract\""
                              },
                              "value": "Address: call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                "typeString": "literal_string \"Address: call to non-contract\""
                              }
                            ],
                            "id": 1604,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4881:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1609,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4881:60:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1610,
                        "nodeType": "ExpressionStatement",
                        "src": "4881:60:8"
                      },
                      {
                        "assignments": [
                          1612,
                          1614
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1612,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "4958:7:8",
                            "nodeType": "VariableDeclaration",
                            "scope": 1628,
                            "src": "4953:12:8",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1611,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "4953:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 1614,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "4980:10:8",
                            "nodeType": "VariableDeclaration",
                            "scope": 1628,
                            "src": "4967:23:8",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 1613,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "4967:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1621,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1619,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1584,
                              "src": "5020:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "expression": {
                                "id": 1615,
                                "name": "target",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1582,
                                "src": "4994:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 1616,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5001:4:8",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "4994:11:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 1618,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 1617,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1586,
                                "src": "5013:5:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "4994:25:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1620,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4994:31:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4952:73:8"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1623,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1612,
                              "src": "5059:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 1624,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1614,
                              "src": "5068:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 1625,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1588,
                              "src": "5080:12:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1622,
                            "name": "verifyCallResult",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1764,
                            "src": "5042:16:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                            }
                          },
                          "id": 1626,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5042:51:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1592,
                        "id": 1627,
                        "nodeType": "Return",
                        "src": "5035:58:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1580,
                    "nodeType": "StructuredDocumentation",
                    "src": "4359:237:8",
                    "text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                  },
                  "id": 1629,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCallWithValue",
                  "nameLocation": "4610:21:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1589,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1582,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "4649:6:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1629,
                        "src": "4641:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1581,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4641:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1584,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "4678:4:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1629,
                        "src": "4665:17:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1583,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4665:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1586,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4700:5:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1629,
                        "src": "4692:13:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1585,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4692:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1588,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "4729:12:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1629,
                        "src": "4715:26:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1587,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "4715:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4631:116:8"
                  },
                  "returnParameters": {
                    "id": 1592,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1591,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1629,
                        "src": "4766:12:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1590,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4766:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4765:14:8"
                  },
                  "scope": 1765,
                  "src": "4601:499:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1645,
                    "nodeType": "Block",
                    "src": "5377:97:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1640,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1632,
                              "src": "5413:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1641,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1634,
                              "src": "5421:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
                              "id": 1642,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5427:39:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                                "typeString": "literal_string \"Address: low-level static call failed\""
                              },
                              "value": "Address: low-level static call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                                "typeString": "literal_string \"Address: low-level static call failed\""
                              }
                            ],
                            "id": 1639,
                            "name": "functionStaticCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1646,
                              1681
                            ],
                            "referencedDeclaration": 1681,
                            "src": "5394:18:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
                            }
                          },
                          "id": 1643,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5394:73:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1638,
                        "id": 1644,
                        "nodeType": "Return",
                        "src": "5387:80:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1630,
                    "nodeType": "StructuredDocumentation",
                    "src": "5106:166:8",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                  },
                  "id": 1646,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionStaticCall",
                  "nameLocation": "5286:18:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1635,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1632,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "5313:6:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1646,
                        "src": "5305:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1631,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5305:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1634,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5334:4:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1646,
                        "src": "5321:17:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1633,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5321:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5304:35:8"
                  },
                  "returnParameters": {
                    "id": 1638,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1637,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1646,
                        "src": "5363:12:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1636,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5363:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5362:14:8"
                  },
                  "scope": 1765,
                  "src": "5277:197:8",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1680,
                    "nodeType": "Block",
                    "src": "5816:228:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1660,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1649,
                                  "src": "5845:6:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1659,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1488,
                                "src": "5834:10:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 1661,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5834:18:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 1662,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5854:38:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
                                "typeString": "literal_string \"Address: static call to non-contract\""
                              },
                              "value": "Address: static call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
                                "typeString": "literal_string \"Address: static call to non-contract\""
                              }
                            ],
                            "id": 1658,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5826:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1663,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5826:67:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1664,
                        "nodeType": "ExpressionStatement",
                        "src": "5826:67:8"
                      },
                      {
                        "assignments": [
                          1666,
                          1668
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1666,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "5910:7:8",
                            "nodeType": "VariableDeclaration",
                            "scope": 1680,
                            "src": "5905:12:8",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1665,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "5905:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 1668,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "5932:10:8",
                            "nodeType": "VariableDeclaration",
                            "scope": 1680,
                            "src": "5919:23:8",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 1667,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "5919:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1673,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1671,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1651,
                              "src": "5964:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 1669,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1649,
                              "src": "5946:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 1670,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5953:10:8",
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "5946:17:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 1672,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5946:23:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5904:65:8"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1675,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1666,
                              "src": "6003:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 1676,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1668,
                              "src": "6012:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 1677,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1653,
                              "src": "6024:12:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1674,
                            "name": "verifyCallResult",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1764,
                            "src": "5986:16:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                            }
                          },
                          "id": 1678,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5986:51:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1657,
                        "id": 1679,
                        "nodeType": "Return",
                        "src": "5979:58:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1647,
                    "nodeType": "StructuredDocumentation",
                    "src": "5480:173:8",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                  },
                  "id": 1681,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionStaticCall",
                  "nameLocation": "5667:18:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1654,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1649,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "5703:6:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1681,
                        "src": "5695:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1648,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5695:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1651,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5732:4:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1681,
                        "src": "5719:17:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1650,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5719:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1653,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "5760:12:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1681,
                        "src": "5746:26:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1652,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "5746:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5685:93:8"
                  },
                  "returnParameters": {
                    "id": 1657,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1656,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1681,
                        "src": "5802:12:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1655,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5802:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5801:14:8"
                  },
                  "scope": 1765,
                  "src": "5658:386:8",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1697,
                    "nodeType": "Block",
                    "src": "6320:101:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1692,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1684,
                              "src": "6358:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1693,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1686,
                              "src": "6366:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
                              "id": 1694,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6372:41:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                                "typeString": "literal_string \"Address: low-level delegate call failed\""
                              },
                              "value": "Address: low-level delegate call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                                "typeString": "literal_string \"Address: low-level delegate call failed\""
                              }
                            ],
                            "id": 1691,
                            "name": "functionDelegateCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1698,
                              1733
                            ],
                            "referencedDeclaration": 1733,
                            "src": "6337:20:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1695,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6337:77:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1690,
                        "id": 1696,
                        "nodeType": "Return",
                        "src": "6330:84:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1682,
                    "nodeType": "StructuredDocumentation",
                    "src": "6050:168:8",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                  },
                  "id": 1698,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionDelegateCall",
                  "nameLocation": "6232:20:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1687,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1684,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "6261:6:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1698,
                        "src": "6253:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1683,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6253:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1686,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6282:4:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1698,
                        "src": "6269:17:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1685,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6269:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6252:35:8"
                  },
                  "returnParameters": {
                    "id": 1690,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1689,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1698,
                        "src": "6306:12:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1688,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6306:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6305:14:8"
                  },
                  "scope": 1765,
                  "src": "6223:198:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1732,
                    "nodeType": "Block",
                    "src": "6762:232:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1712,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1701,
                                  "src": "6791:6:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1711,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1488,
                                "src": "6780:10:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 1713,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6780:18:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 1714,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6800:40:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
                                "typeString": "literal_string \"Address: delegate call to non-contract\""
                              },
                              "value": "Address: delegate call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
                                "typeString": "literal_string \"Address: delegate call to non-contract\""
                              }
                            ],
                            "id": 1710,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "6772:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1715,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6772:69:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1716,
                        "nodeType": "ExpressionStatement",
                        "src": "6772:69:8"
                      },
                      {
                        "assignments": [
                          1718,
                          1720
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1718,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "6858:7:8",
                            "nodeType": "VariableDeclaration",
                            "scope": 1732,
                            "src": "6853:12:8",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1717,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "6853:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 1720,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "6880:10:8",
                            "nodeType": "VariableDeclaration",
                            "scope": 1732,
                            "src": "6867:23:8",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 1719,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "6867:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1725,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1723,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1703,
                              "src": "6914:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 1721,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1701,
                              "src": "6894:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 1722,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "6901:12:8",
                            "memberName": "delegatecall",
                            "nodeType": "MemberAccess",
                            "src": "6894:19:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) returns (bool,bytes memory)"
                            }
                          },
                          "id": 1724,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6894:25:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6852:67:8"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1727,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1718,
                              "src": "6953:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 1728,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1720,
                              "src": "6962:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 1729,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1705,
                              "src": "6974:12:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1726,
                            "name": "verifyCallResult",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1764,
                            "src": "6936:16:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                            }
                          },
                          "id": 1730,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6936:51:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1709,
                        "id": 1731,
                        "nodeType": "Return",
                        "src": "6929:58:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1699,
                    "nodeType": "StructuredDocumentation",
                    "src": "6427:175:8",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                  },
                  "id": 1733,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionDelegateCall",
                  "nameLocation": "6616:20:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1706,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1701,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "6654:6:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1733,
                        "src": "6646:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1700,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6646:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1703,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6683:4:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1733,
                        "src": "6670:17:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1702,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6670:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1705,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "6711:12:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1733,
                        "src": "6697:26:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1704,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6697:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6636:93:8"
                  },
                  "returnParameters": {
                    "id": 1709,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1708,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1733,
                        "src": "6748:12:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1707,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6748:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6747:14:8"
                  },
                  "scope": 1765,
                  "src": "6607:387:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1763,
                    "nodeType": "Block",
                    "src": "7374:532:8",
                    "statements": [
                      {
                        "condition": {
                          "id": 1745,
                          "name": "success",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1736,
                          "src": "7388:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1761,
                          "nodeType": "Block",
                          "src": "7445:455:8",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1752,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1749,
                                    "name": "returndata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1738,
                                    "src": "7529:10:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 1750,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "7540:6:8",
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "7529:17:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 1751,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7549:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "7529:21:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 1759,
                                "nodeType": "Block",
                                "src": "7837:53:8",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 1756,
                                          "name": "errorMessage",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1740,
                                          "src": "7862:12:8",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_string_memory_ptr",
                                            "typeString": "string memory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_string_memory_ptr",
                                            "typeString": "string memory"
                                          }
                                        ],
                                        "id": 1755,
                                        "name": "revert",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [
                                          -19,
                                          -19
                                        ],
                                        "referencedDeclaration": -19,
                                        "src": "7855:6:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                          "typeString": "function (string memory) pure"
                                        }
                                      },
                                      "id": 1757,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "7855:20:8",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 1758,
                                    "nodeType": "ExpressionStatement",
                                    "src": "7855:20:8"
                                  }
                                ]
                              },
                              "id": 1760,
                              "nodeType": "IfStatement",
                              "src": "7525:365:8",
                              "trueBody": {
                                "id": 1754,
                                "nodeType": "Block",
                                "src": "7552:279:8",
                                "statements": [
                                  {
                                    "AST": {
                                      "nodeType": "YulBlock",
                                      "src": "7672:145:8",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "7694:40:8",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "returndata",
                                                "nodeType": "YulIdentifier",
                                                "src": "7723:10:8"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "7717:5:8"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "7717:17:8"
                                          },
                                          "variables": [
                                            {
                                              "name": "returndata_size",
                                              "nodeType": "YulTypedName",
                                              "src": "7698:15:8",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "7766:2:8",
                                                    "type": "",
                                                    "value": "32"
                                                  },
                                                  {
                                                    "name": "returndata",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "7770:10:8"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7762:3:8"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "7762:19:8"
                                              },
                                              {
                                                "name": "returndata_size",
                                                "nodeType": "YulIdentifier",
                                                "src": "7783:15:8"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "revert",
                                              "nodeType": "YulIdentifier",
                                              "src": "7755:6:8"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "7755:44:8"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "7755:44:8"
                                        }
                                      ]
                                    },
                                    "evmVersion": "london",
                                    "externalReferences": [
                                      {
                                        "declaration": 1738,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "7723:10:8",
                                        "valueSize": 1
                                      },
                                      {
                                        "declaration": 1738,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "7770:10:8",
                                        "valueSize": 1
                                      }
                                    ],
                                    "id": 1753,
                                    "nodeType": "InlineAssembly",
                                    "src": "7663:154:8"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "id": 1762,
                        "nodeType": "IfStatement",
                        "src": "7384:516:8",
                        "trueBody": {
                          "id": 1748,
                          "nodeType": "Block",
                          "src": "7397:42:8",
                          "statements": [
                            {
                              "expression": {
                                "id": 1746,
                                "name": "returndata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1738,
                                "src": "7418:10:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "functionReturnParameters": 1744,
                              "id": 1747,
                              "nodeType": "Return",
                              "src": "7411:17:8"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1734,
                    "nodeType": "StructuredDocumentation",
                    "src": "7000:209:8",
                    "text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
                  },
                  "id": 1764,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "verifyCallResult",
                  "nameLocation": "7223:16:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1741,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1736,
                        "mutability": "mutable",
                        "name": "success",
                        "nameLocation": "7254:7:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1764,
                        "src": "7249:12:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1735,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7249:4:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1738,
                        "mutability": "mutable",
                        "name": "returndata",
                        "nameLocation": "7284:10:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1764,
                        "src": "7271:23:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1737,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7271:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1740,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "7318:12:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1764,
                        "src": "7304:26:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1739,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "7304:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7239:97:8"
                  },
                  "returnParameters": {
                    "id": 1744,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1743,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1764,
                        "src": "7360:12:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1742,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7360:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7359:14:8"
                  },
                  "scope": 1765,
                  "src": "7214:692:8",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 1766,
              "src": "179:7729:8",
              "usedErrors": []
            }
          ],
          "src": "86:7823:8"
        },
        "id": 8
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
          "exportedSymbols": {
            "Context": [
              1787
            ]
          },
          "id": 1788,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1767,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "86:23:9"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "canonicalName": "Context",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 1768,
                "nodeType": "StructuredDocumentation",
                "src": "111:496:9",
                "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
              },
              "fullyImplemented": true,
              "id": 1787,
              "linearizedBaseContracts": [
                1787
              ],
              "name": "Context",
              "nameLocation": "626:7:9",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 1776,
                    "nodeType": "Block",
                    "src": "702:34:9",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1773,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "719:3:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1774,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "723:6:9",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "719:10:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 1772,
                        "id": 1775,
                        "nodeType": "Return",
                        "src": "712:17:9"
                      }
                    ]
                  },
                  "id": 1777,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "649:10:9",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1769,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "659:2:9"
                  },
                  "returnParameters": {
                    "id": 1772,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1771,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1777,
                        "src": "693:7:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1770,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "693:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "692:9:9"
                  },
                  "scope": 1787,
                  "src": "640:96:9",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1785,
                    "nodeType": "Block",
                    "src": "809:32:9",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1782,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "826:3:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1783,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "830:4:9",
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "src": "826:8:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 1781,
                        "id": 1784,
                        "nodeType": "Return",
                        "src": "819:15:9"
                      }
                    ]
                  },
                  "id": 1786,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "751:8:9",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1778,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "759:2:9"
                  },
                  "returnParameters": {
                    "id": 1781,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1780,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1786,
                        "src": "793:14:9",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1779,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "793:5:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "792:16:9"
                  },
                  "scope": 1787,
                  "src": "742:99:9",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 1788,
              "src": "608:235:9",
              "usedErrors": []
            }
          ],
          "src": "86:758:9"
        },
        "id": 9
      },
      "@openzeppelin/contracts/utils/Strings.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
          "exportedSymbols": {
            "Strings": [
              1990
            ]
          },
          "id": 1991,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1789,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "86:23:10"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "Strings",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 1790,
                "nodeType": "StructuredDocumentation",
                "src": "111:34:10",
                "text": " @dev String operations."
              },
              "fullyImplemented": true,
              "id": 1990,
              "linearizedBaseContracts": [
                1990
              ],
              "name": "Strings",
              "nameLocation": "154:7:10",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 1793,
                  "mutability": "constant",
                  "name": "_HEX_SYMBOLS",
                  "nameLocation": "193:12:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 1990,
                  "src": "168:58:10",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes16",
                    "typeString": "bytes16"
                  },
                  "typeName": {
                    "id": 1791,
                    "name": "bytes16",
                    "nodeType": "ElementaryTypeName",
                    "src": "168:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes16",
                      "typeString": "bytes16"
                    }
                  },
                  "value": {
                    "hexValue": "30313233343536373839616263646566",
                    "id": 1792,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "208:18:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
                      "typeString": "literal_string \"0123456789abcdef\""
                    },
                    "value": "0123456789abcdef"
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 1871,
                    "nodeType": "Block",
                    "src": "399:632:10",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1803,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1801,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1796,
                            "src": "601:5:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1802,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "610:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "601:10:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1807,
                        "nodeType": "IfStatement",
                        "src": "597:51:10",
                        "trueBody": {
                          "id": 1806,
                          "nodeType": "Block",
                          "src": "613:35:10",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "30",
                                "id": 1804,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "634:3:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                  "typeString": "literal_string \"0\""
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 1800,
                              "id": 1805,
                              "nodeType": "Return",
                              "src": "627:10:10"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1809
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1809,
                            "mutability": "mutable",
                            "name": "temp",
                            "nameLocation": "665:4:10",
                            "nodeType": "VariableDeclaration",
                            "scope": 1871,
                            "src": "657:12:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1808,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "657:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1811,
                        "initialValue": {
                          "id": 1810,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1796,
                          "src": "672:5:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "657:20:10"
                      },
                      {
                        "assignments": [
                          1813
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1813,
                            "mutability": "mutable",
                            "name": "digits",
                            "nameLocation": "695:6:10",
                            "nodeType": "VariableDeclaration",
                            "scope": 1871,
                            "src": "687:14:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1812,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "687:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1814,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "687:14:10"
                      },
                      {
                        "body": {
                          "id": 1825,
                          "nodeType": "Block",
                          "src": "729:57:10",
                          "statements": [
                            {
                              "expression": {
                                "id": 1819,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "743:8:10",
                                "subExpression": {
                                  "id": 1818,
                                  "name": "digits",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1813,
                                  "src": "743:6:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1820,
                              "nodeType": "ExpressionStatement",
                              "src": "743:8:10"
                            },
                            {
                              "expression": {
                                "id": 1823,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1821,
                                  "name": "temp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1809,
                                  "src": "765:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "/=",
                                "rightHandSide": {
                                  "hexValue": "3130",
                                  "id": 1822,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "773:2:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "src": "765:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1824,
                              "nodeType": "ExpressionStatement",
                              "src": "765:10:10"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1817,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1815,
                            "name": "temp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1809,
                            "src": "718:4:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1816,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "726:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "718:9:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1826,
                        "nodeType": "WhileStatement",
                        "src": "711:75:10"
                      },
                      {
                        "assignments": [
                          1828
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1828,
                            "mutability": "mutable",
                            "name": "buffer",
                            "nameLocation": "808:6:10",
                            "nodeType": "VariableDeclaration",
                            "scope": 1871,
                            "src": "795:19:10",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 1827,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "795:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1833,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1831,
                              "name": "digits",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1813,
                              "src": "827:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1830,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "817:9:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (bytes memory)"
                            },
                            "typeName": {
                              "id": 1829,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "821:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            }
                          },
                          "id": 1832,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "817:17:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "795:39:10"
                      },
                      {
                        "body": {
                          "id": 1864,
                          "nodeType": "Block",
                          "src": "863:131:10",
                          "statements": [
                            {
                              "expression": {
                                "id": 1839,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1837,
                                  "name": "digits",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1813,
                                  "src": "877:6:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "-=",
                                "rightHandSide": {
                                  "hexValue": "31",
                                  "id": 1838,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "887:1:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "877:11:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1840,
                              "nodeType": "ExpressionStatement",
                              "src": "877:11:10"
                            },
                            {
                              "expression": {
                                "id": 1858,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1841,
                                    "name": "buffer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1828,
                                    "src": "902:6:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 1843,
                                  "indexExpression": {
                                    "id": 1842,
                                    "name": "digits",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1813,
                                    "src": "909:6:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "902:14:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1855,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "hexValue": "3438",
                                            "id": 1848,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "932:2:10",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_48_by_1",
                                              "typeString": "int_const 48"
                                            },
                                            "value": "48"
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "+",
                                          "rightExpression": {
                                            "arguments": [
                                              {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 1853,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "id": 1851,
                                                  "name": "value",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1796,
                                                  "src": "945:5:10",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "%",
                                                "rightExpression": {
                                                  "hexValue": "3130",
                                                  "id": 1852,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "953:2:10",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_10_by_1",
                                                    "typeString": "int_const 10"
                                                  },
                                                  "value": "10"
                                                },
                                                "src": "945:10:10",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              ],
                                              "id": 1850,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "nodeType": "ElementaryTypeNameExpression",
                                              "src": "937:7:10",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_uint256_$",
                                                "typeString": "type(uint256)"
                                              },
                                              "typeName": {
                                                "id": 1849,
                                                "name": "uint256",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "937:7:10",
                                                "typeDescriptions": {}
                                              }
                                            },
                                            "id": 1854,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "typeConversion",
                                            "lValueRequested": false,
                                            "nameLocations": [],
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "937:19:10",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "932:24:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 1847,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "926:5:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_uint8_$",
                                          "typeString": "type(uint8)"
                                        },
                                        "typeName": {
                                          "id": 1846,
                                          "name": "uint8",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "926:5:10",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 1856,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "926:31:10",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    ],
                                    "id": 1845,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "919:6:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_bytes1_$",
                                      "typeString": "type(bytes1)"
                                    },
                                    "typeName": {
                                      "id": 1844,
                                      "name": "bytes1",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "919:6:10",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1857,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "919:39:10",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "src": "902:56:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "id": 1859,
                              "nodeType": "ExpressionStatement",
                              "src": "902:56:10"
                            },
                            {
                              "expression": {
                                "id": 1862,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1860,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1796,
                                  "src": "972:5:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "/=",
                                "rightHandSide": {
                                  "hexValue": "3130",
                                  "id": 1861,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "981:2:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "src": "972:11:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1863,
                              "nodeType": "ExpressionStatement",
                              "src": "972:11:10"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1836,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1834,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1796,
                            "src": "851:5:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1835,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "860:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "851:10:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1865,
                        "nodeType": "WhileStatement",
                        "src": "844:150:10"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1868,
                              "name": "buffer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1828,
                              "src": "1017:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1867,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1010:6:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 1866,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "1010:6:10",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1869,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1010:14:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 1800,
                        "id": 1870,
                        "nodeType": "Return",
                        "src": "1003:21:10"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1794,
                    "nodeType": "StructuredDocumentation",
                    "src": "233:90:10",
                    "text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
                  },
                  "id": 1872,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toString",
                  "nameLocation": "337:8:10",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1797,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1796,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "354:5:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 1872,
                        "src": "346:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1795,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "346:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "345:15:10"
                  },
                  "returnParameters": {
                    "id": 1800,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1799,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1872,
                        "src": "384:13:10",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1798,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "384:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "383:15:10"
                  },
                  "scope": 1990,
                  "src": "328:703:10",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1912,
                    "nodeType": "Block",
                    "src": "1210:255:10",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1882,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1880,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1875,
                            "src": "1224:5:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1881,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1233:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1224:10:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1886,
                        "nodeType": "IfStatement",
                        "src": "1220:54:10",
                        "trueBody": {
                          "id": 1885,
                          "nodeType": "Block",
                          "src": "1236:38:10",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "30783030",
                                "id": 1883,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1257:6:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
                                  "typeString": "literal_string \"0x00\""
                                },
                                "value": "0x00"
                              },
                              "functionReturnParameters": 1879,
                              "id": 1884,
                              "nodeType": "Return",
                              "src": "1250:13:10"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1888
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1888,
                            "mutability": "mutable",
                            "name": "temp",
                            "nameLocation": "1291:4:10",
                            "nodeType": "VariableDeclaration",
                            "scope": 1912,
                            "src": "1283:12:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1887,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1283:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1890,
                        "initialValue": {
                          "id": 1889,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1875,
                          "src": "1298:5:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1283:20:10"
                      },
                      {
                        "assignments": [
                          1892
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1892,
                            "mutability": "mutable",
                            "name": "length",
                            "nameLocation": "1321:6:10",
                            "nodeType": "VariableDeclaration",
                            "scope": 1912,
                            "src": "1313:14:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1891,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1313:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1894,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 1893,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1330:1:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1313:18:10"
                      },
                      {
                        "body": {
                          "id": 1905,
                          "nodeType": "Block",
                          "src": "1359:57:10",
                          "statements": [
                            {
                              "expression": {
                                "id": 1899,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "1373:8:10",
                                "subExpression": {
                                  "id": 1898,
                                  "name": "length",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1892,
                                  "src": "1373:6:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1900,
                              "nodeType": "ExpressionStatement",
                              "src": "1373:8:10"
                            },
                            {
                              "expression": {
                                "id": 1903,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1901,
                                  "name": "temp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1888,
                                  "src": "1395:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": ">>=",
                                "rightHandSide": {
                                  "hexValue": "38",
                                  "id": 1902,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1404:1:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_8_by_1",
                                    "typeString": "int_const 8"
                                  },
                                  "value": "8"
                                },
                                "src": "1395:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1904,
                              "nodeType": "ExpressionStatement",
                              "src": "1395:10:10"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1897,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1895,
                            "name": "temp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1888,
                            "src": "1348:4:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1896,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1356:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1348:9:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1906,
                        "nodeType": "WhileStatement",
                        "src": "1341:75:10"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1908,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1875,
                              "src": "1444:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1909,
                              "name": "length",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1892,
                              "src": "1451:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1907,
                            "name": "toHexString",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1913,
                              1989
                            ],
                            "referencedDeclaration": 1989,
                            "src": "1432:11:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (uint256,uint256) pure returns (string memory)"
                            }
                          },
                          "id": 1910,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1432:26:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 1879,
                        "id": 1911,
                        "nodeType": "Return",
                        "src": "1425:33:10"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1873,
                    "nodeType": "StructuredDocumentation",
                    "src": "1037:94:10",
                    "text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
                  },
                  "id": 1913,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toHexString",
                  "nameLocation": "1145:11:10",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1876,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1875,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1165:5:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 1913,
                        "src": "1157:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1874,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1157:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1156:15:10"
                  },
                  "returnParameters": {
                    "id": 1879,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1878,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1913,
                        "src": "1195:13:10",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1877,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1195:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1194:15:10"
                  },
                  "scope": 1990,
                  "src": "1136:329:10",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1988,
                    "nodeType": "Block",
                    "src": "1678:351:10",
                    "statements": [
                      {
                        "assignments": [
                          1924
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1924,
                            "mutability": "mutable",
                            "name": "buffer",
                            "nameLocation": "1701:6:10",
                            "nodeType": "VariableDeclaration",
                            "scope": 1988,
                            "src": "1688:19:10",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 1923,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "1688:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1933,
                        "initialValue": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1931,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1929,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "32",
                                  "id": 1927,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1720:1:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "id": 1928,
                                  "name": "length",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1918,
                                  "src": "1724:6:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "1720:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "hexValue": "32",
                                "id": 1930,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1733:1:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_2_by_1",
                                  "typeString": "int_const 2"
                                },
                                "value": "2"
                              },
                              "src": "1720:14:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1926,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "1710:9:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (bytes memory)"
                            },
                            "typeName": {
                              "id": 1925,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "1714:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            }
                          },
                          "id": 1932,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1710:25:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1688:47:10"
                      },
                      {
                        "expression": {
                          "id": 1938,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1934,
                              "name": "buffer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1924,
                              "src": "1745:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1936,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 1935,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1752:1:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1745:9:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 1937,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1757:3:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                              "typeString": "literal_string \"0\""
                            },
                            "value": "0"
                          },
                          "src": "1745:15:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "id": 1939,
                        "nodeType": "ExpressionStatement",
                        "src": "1745:15:10"
                      },
                      {
                        "expression": {
                          "id": 1944,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1940,
                              "name": "buffer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1924,
                              "src": "1770:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1942,
                            "indexExpression": {
                              "hexValue": "31",
                              "id": 1941,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1777:1:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1770:9:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "78",
                            "id": 1943,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1782:3:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
                              "typeString": "literal_string \"x\""
                            },
                            "value": "x"
                          },
                          "src": "1770:15:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "id": 1945,
                        "nodeType": "ExpressionStatement",
                        "src": "1770:15:10"
                      },
                      {
                        "body": {
                          "id": 1974,
                          "nodeType": "Block",
                          "src": "1840:87:10",
                          "statements": [
                            {
                              "expression": {
                                "id": 1968,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1960,
                                    "name": "buffer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1924,
                                    "src": "1854:6:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 1962,
                                  "indexExpression": {
                                    "id": 1961,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1947,
                                    "src": "1861:1:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "1854:9:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 1963,
                                    "name": "_HEX_SYMBOLS",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1793,
                                    "src": "1866:12:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes16",
                                      "typeString": "bytes16"
                                    }
                                  },
                                  "id": 1967,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1966,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1964,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1916,
                                      "src": "1879:5:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "&",
                                    "rightExpression": {
                                      "hexValue": "307866",
                                      "id": 1965,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1887:3:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_15_by_1",
                                        "typeString": "int_const 15"
                                      },
                                      "value": "0xf"
                                    },
                                    "src": "1879:11:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1866:25:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "src": "1854:37:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "id": 1969,
                              "nodeType": "ExpressionStatement",
                              "src": "1854:37:10"
                            },
                            {
                              "expression": {
                                "id": 1972,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1970,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1916,
                                  "src": "1905:5:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": ">>=",
                                "rightHandSide": {
                                  "hexValue": "34",
                                  "id": 1971,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1915:1:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_4_by_1",
                                    "typeString": "int_const 4"
                                  },
                                  "value": "4"
                                },
                                "src": "1905:11:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1973,
                              "nodeType": "ExpressionStatement",
                              "src": "1905:11:10"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1956,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1954,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1947,
                            "src": "1828:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 1955,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1832:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "1828:5:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1975,
                        "initializationExpression": {
                          "assignments": [
                            1947
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1947,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "1808:1:10",
                              "nodeType": "VariableDeclaration",
                              "scope": 1975,
                              "src": "1800:9:10",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1946,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "1800:7:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1953,
                          "initialValue": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1952,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1950,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "32",
                                "id": 1948,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1812:1:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_2_by_1",
                                  "typeString": "int_const 2"
                                },
                                "value": "2"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "*",
                              "rightExpression": {
                                "id": 1949,
                                "name": "length",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1918,
                                "src": "1816:6:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1812:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 1951,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1825:1:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "1812:14:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "1800:26:10"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1958,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "--",
                            "prefix": true,
                            "src": "1835:3:10",
                            "subExpression": {
                              "id": 1957,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1947,
                              "src": "1837:1:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1959,
                          "nodeType": "ExpressionStatement",
                          "src": "1835:3:10"
                        },
                        "nodeType": "ForStatement",
                        "src": "1795:132:10"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1979,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1977,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1916,
                                "src": "1944:5:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 1978,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1953:1:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "1944:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
                              "id": 1980,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1956:34:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
                                "typeString": "literal_string \"Strings: hex length insufficient\""
                              },
                              "value": "Strings: hex length insufficient"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
                                "typeString": "literal_string \"Strings: hex length insufficient\""
                              }
                            ],
                            "id": 1976,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1936:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1981,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1936:55:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1982,
                        "nodeType": "ExpressionStatement",
                        "src": "1936:55:10"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1985,
                              "name": "buffer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1924,
                              "src": "2015:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1984,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2008:6:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 1983,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2008:6:10",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1986,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2008:14:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 1922,
                        "id": 1987,
                        "nodeType": "Return",
                        "src": "2001:21:10"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1914,
                    "nodeType": "StructuredDocumentation",
                    "src": "1471:112:10",
                    "text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
                  },
                  "id": 1989,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toHexString",
                  "nameLocation": "1597:11:10",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1919,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1916,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1617:5:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 1989,
                        "src": "1609:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1915,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1609:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1918,
                        "mutability": "mutable",
                        "name": "length",
                        "nameLocation": "1632:6:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 1989,
                        "src": "1624:14:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1917,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1624:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1608:31:10"
                  },
                  "returnParameters": {
                    "id": 1922,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1921,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1989,
                        "src": "1663:13:10",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1920,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1663:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1662:15:10"
                  },
                  "scope": 1990,
                  "src": "1588:441:10",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 1991,
              "src": "146:1885:10",
              "usedErrors": []
            }
          ],
          "src": "86:1946:10"
        },
        "id": 10
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
          "exportedSymbols": {
            "ERC165": [
              2014
            ],
            "IERC165": [
              2026
            ]
          },
          "id": 2015,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1992,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "99:23:11"
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
              "file": "./IERC165.sol",
              "id": 1993,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 2015,
              "sourceUnit": 2027,
              "src": "124:23:11",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1995,
                    "name": "IERC165",
                    "nameLocations": [
                      "754:7:11"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 2026,
                    "src": "754:7:11"
                  },
                  "id": 1996,
                  "nodeType": "InheritanceSpecifier",
                  "src": "754:7:11"
                }
              ],
              "canonicalName": "ERC165",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 1994,
                "nodeType": "StructuredDocumentation",
                "src": "149:576:11",
                "text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
              },
              "fullyImplemented": true,
              "id": 2014,
              "linearizedBaseContracts": [
                2014,
                2026
              ],
              "name": "ERC165",
              "nameLocation": "744:6:11",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "baseFunctions": [
                    2025
                  ],
                  "body": {
                    "id": 2012,
                    "nodeType": "Block",
                    "src": "920:64:11",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 2010,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2005,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1999,
                            "src": "937:11:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 2007,
                                  "name": "IERC165",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2026,
                                  "src": "957:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IERC165_$2026_$",
                                    "typeString": "type(contract IERC165)"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_type$_t_contract$_IERC165_$2026_$",
                                    "typeString": "type(contract IERC165)"
                                  }
                                ],
                                "id": 2006,
                                "name": "type",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -27,
                                "src": "952:4:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 2008,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "952:13:11",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$2026",
                                "typeString": "type(contract IERC165)"
                              }
                            },
                            "id": 2009,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "966:11:11",
                            "memberName": "interfaceId",
                            "nodeType": "MemberAccess",
                            "src": "952:25:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "937:40:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 2004,
                        "id": 2011,
                        "nodeType": "Return",
                        "src": "930:47:11"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1997,
                    "nodeType": "StructuredDocumentation",
                    "src": "768:56:11",
                    "text": " @dev See {IERC165-supportsInterface}."
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 2013,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "838:17:11",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 2001,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "896:8:11"
                  },
                  "parameters": {
                    "id": 2000,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1999,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "863:11:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2013,
                        "src": "856:18:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 1998,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "856:6:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "855:20:11"
                  },
                  "returnParameters": {
                    "id": 2004,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2003,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2013,
                        "src": "914:4:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2002,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "914:4:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "913:6:11"
                  },
                  "scope": 2014,
                  "src": "829:155:11",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                }
              ],
              "scope": 2015,
              "src": "726:260:11",
              "usedErrors": []
            }
          ],
          "src": "99:888:11"
        },
        "id": 11
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
          "exportedSymbols": {
            "IERC165": [
              2026
            ]
          },
          "id": 2027,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 2016,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "100:23:12"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC165",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 2017,
                "nodeType": "StructuredDocumentation",
                "src": "125:279:12",
                "text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
              },
              "fullyImplemented": false,
              "id": 2026,
              "linearizedBaseContracts": [
                2026
              ],
              "name": "IERC165",
              "nameLocation": "415:7:12",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 2018,
                    "nodeType": "StructuredDocumentation",
                    "src": "429:340:12",
                    "text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 2025,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "783:17:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2021,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2020,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "808:11:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2025,
                        "src": "801:18:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 2019,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "801:6:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "800:20:12"
                  },
                  "returnParameters": {
                    "id": 2024,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2023,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2025,
                        "src": "844:4:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2022,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "844:4:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "843:6:12"
                  },
                  "scope": 2026,
                  "src": "774:76:12",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 2027,
              "src": "405:447:12",
              "usedErrors": []
            }
          ],
          "src": "100:753:12"
        },
        "id": 12
      },
      "base64-sol/base64.sol": {
        "ast": {
          "absolutePath": "base64-sol/base64.sol",
          "exportedSymbols": {
            "Base64": [
              2141
            ]
          },
          "id": 2142,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 2028,
              "literals": [
                "solidity",
                ">=",
                "0.6",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:24:13"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "Base64",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 2029,
                "nodeType": "StructuredDocumentation",
                "src": "59:127:13",
                "text": "@title Base64\n @author Brecht Devos - <brecht@loopring.org>\n @notice Provides functions for encoding/decoding base64"
              },
              "fullyImplemented": true,
              "id": 2141,
              "linearizedBaseContracts": [
                2141
              ],
              "name": "Base64",
              "nameLocation": "194:6:13",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 2032,
                  "mutability": "constant",
                  "name": "TABLE_ENCODE",
                  "nameLocation": "232:12:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2141,
                  "src": "207:106:13",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 2030,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "207:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": {
                    "hexValue": "4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f",
                    "id": 2031,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "247:66:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_84d8a590de33e00cbdc16e1f28c3506f5ec15c599fab9a6a4bcd575cc2f110ce",
                      "typeString": "literal_string \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\""
                    },
                    "value": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
                  },
                  "visibility": "internal"
                },
                {
                  "constant": true,
                  "id": 2035,
                  "mutability": "constant",
                  "name": "TABLE_DECODE",
                  "nameLocation": "344:12:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2141,
                  "src": "319:451:13",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 2033,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "319:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": {
                    "hexValue": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e0000003f3435363738393a3b3c3d00000000000000000102030405060708090a0b0c0d0e0f101112131415161718190000000000001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000",
                    "id": 2034,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "hexString",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "359:411:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_cbed483d4f9f83dd52b06773fd58dd8723113252a85374752ef109e22dfa50f9",
                      "typeString": "literal_string hex\"000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e0000003f3435363738393a3b3c3d00000000000000000102030405060708090a0b0c0d0e0f101112131415161718190000000000001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\""
                    },
                    "value": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000?456789:;<=\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123\u0000\u0000\u0000\u0000\u0000"
                  },
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2078,
                    "nodeType": "Block",
                    "src": "850:1788:13",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2045,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 2042,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2037,
                              "src": "864:4:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 2043,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "869:6:13",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "864:11:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2044,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "879:1:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "864:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2048,
                        "nodeType": "IfStatement",
                        "src": "860:31:13",
                        "trueBody": {
                          "expression": {
                            "hexValue": "",
                            "id": 2046,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "889:2:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          },
                          "functionReturnParameters": 2041,
                          "id": 2047,
                          "nodeType": "Return",
                          "src": "882:9:13"
                        }
                      },
                      {
                        "assignments": [
                          2050
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2050,
                            "mutability": "mutable",
                            "name": "table",
                            "nameLocation": "954:5:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 2078,
                            "src": "940:19:13",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2049,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "940:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2052,
                        "initialValue": {
                          "id": 2051,
                          "name": "TABLE_ENCODE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2032,
                          "src": "962:12:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "940:34:13"
                      },
                      {
                        "assignments": [
                          2054
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2054,
                            "mutability": "mutable",
                            "name": "encodedLen",
                            "nameLocation": "1031:10:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 2078,
                            "src": "1023:18:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2053,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1023:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2065,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2064,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "34",
                            "id": 2055,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1044:1:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_4_by_1",
                              "typeString": "int_const 4"
                            },
                            "value": "4"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2062,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2059,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 2056,
                                          "name": "data",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2037,
                                          "src": "1050:4:13",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        },
                                        "id": 2057,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "1055:6:13",
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "src": "1050:11:13",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "hexValue": "32",
                                        "id": 2058,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "1064:1:13",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_2_by_1",
                                          "typeString": "int_const 2"
                                        },
                                        "value": "2"
                                      },
                                      "src": "1050:15:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 2060,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "1049:17:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "hexValue": "33",
                                  "id": 2061,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1069:1:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_3_by_1",
                                    "typeString": "int_const 3"
                                  },
                                  "value": "3"
                                },
                                "src": "1049:21:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 2063,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "1048:23:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1044:27:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1023:48:13"
                      },
                      {
                        "assignments": [
                          2067
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2067,
                            "mutability": "mutable",
                            "name": "result",
                            "nameLocation": "1165:6:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 2078,
                            "src": "1151:20:13",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2066,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "1151:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2074,
                        "initialValue": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2072,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2070,
                                "name": "encodedLen",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2054,
                                "src": "1185:10:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "hexValue": "3332",
                                "id": 2071,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1198:2:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_32_by_1",
                                  "typeString": "int_const 32"
                                },
                                "value": "32"
                              },
                              "src": "1185:15:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2069,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "1174:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (string memory)"
                            },
                            "typeName": {
                              "id": 2068,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "1178:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            }
                          },
                          "id": 2073,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1174:27:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1151:50:13"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "1221:1387:13",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "result",
                                    "nodeType": "YulIdentifier",
                                    "src": "1286:6:13"
                                  },
                                  {
                                    "name": "encodedLen",
                                    "nodeType": "YulIdentifier",
                                    "src": "1294:10:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1279:6:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1279:26:13"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1279:26:13"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1359:29:13",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "table",
                                    "nodeType": "YulIdentifier",
                                    "src": "1379:5:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1386:1:13",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1375:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1375:13:13"
                              },
                              "variables": [
                                {
                                  "name": "tablePtr",
                                  "nodeType": "YulTypedName",
                                  "src": "1363:8:13",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1427:19:13",
                              "value": {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "1442:4:13"
                              },
                              "variables": [
                                {
                                  "name": "dataPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "1431:7:13",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1459:39:13",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "dataPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1477:7:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "1492:4:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "1486:5:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1486:11:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1473:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1473:25:13"
                              },
                              "variables": [
                                {
                                  "name": "endPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "1463:6:13",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1556:32:13",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "result",
                                    "nodeType": "YulIdentifier",
                                    "src": "1577:6:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1585:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1573:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1573:15:13"
                              },
                              "variables": [
                                {
                                  "name": "resultPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "1560:9:13",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1697:697:13",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1747:26:13",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "dataPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1762:7:13"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1771:1:13",
                                          "type": "",
                                          "value": "3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1758:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1758:15:13"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "dataPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "1747:7:13"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1790:27:13",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "dataPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1809:7:13"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1803:5:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1803:14:13"
                                    },
                                    "variables": [
                                      {
                                        "name": "input",
                                        "nodeType": "YulTypedName",
                                        "src": "1794:5:13",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1881:9:13"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tablePtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1902:8:13"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "kind": "number",
                                                          "nodeType": "YulLiteral",
                                                          "src": "1920:2:13",
                                                          "type": "",
                                                          "value": "18"
                                                        },
                                                        {
                                                          "name": "input",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "1924:5:13"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "shr",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "1916:3:13"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "1916:14:13"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "1932:4:13",
                                                      "type": "",
                                                      "value": "0x3F"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "1912:3:13"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "1912:25:13"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "1898:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "1898:40:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "1892:5:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1892:47:13"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore8",
                                        "nodeType": "YulIdentifier",
                                        "src": "1873:7:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1873:67:13"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1873:67:13"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1957:30:13",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1974:9:13"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1985:1:13",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1970:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1970:17:13"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "resultPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "1957:9:13"
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2012:9:13"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tablePtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2033:8:13"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "kind": "number",
                                                          "nodeType": "YulLiteral",
                                                          "src": "2051:2:13",
                                                          "type": "",
                                                          "value": "12"
                                                        },
                                                        {
                                                          "name": "input",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2055:5:13"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "shr",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2047:3:13"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "2047:14:13"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2063:4:13",
                                                      "type": "",
                                                      "value": "0x3F"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2043:3:13"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2043:25:13"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "2029:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2029:40:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "2023:5:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2023:47:13"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore8",
                                        "nodeType": "YulIdentifier",
                                        "src": "2004:7:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2004:67:13"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2004:67:13"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2088:30:13",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2105:9:13"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2116:1:13",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2101:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2101:17:13"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "resultPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2088:9:13"
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2143:9:13"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tablePtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2164:8:13"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "kind": "number",
                                                          "nodeType": "YulLiteral",
                                                          "src": "2183:1:13",
                                                          "type": "",
                                                          "value": "6"
                                                        },
                                                        {
                                                          "name": "input",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2186:5:13"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "shr",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2178:3:13"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "2178:14:13"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2194:4:13",
                                                      "type": "",
                                                      "value": "0x3F"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2174:3:13"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2174:25:13"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "2160:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2160:40:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "2154:5:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2154:47:13"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore8",
                                        "nodeType": "YulIdentifier",
                                        "src": "2135:7:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2135:67:13"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2135:67:13"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2219:30:13",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2236:9:13"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2247:1:13",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2232:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2232:17:13"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "resultPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2219:9:13"
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2274:9:13"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tablePtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2295:8:13"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "input",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2317:5:13"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2325:4:13",
                                                      "type": "",
                                                      "value": "0x3F"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2305:3:13"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2305:25:13"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "2291:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2291:40:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "2285:5:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2285:47:13"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore8",
                                        "nodeType": "YulIdentifier",
                                        "src": "2266:7:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2266:67:13"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2266:67:13"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2350:30:13",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2367:9:13"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2378:1:13",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2363:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2363:17:13"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "resultPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2350:9:13"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "dataPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1665:7:13"
                                  },
                                  {
                                    "name": "endPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1674:6:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1662:2:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1662:19:13"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "1682:2:13",
                                "statements": []
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "1659:2:13",
                                "statements": []
                              },
                              "src": "1655:739:13"
                            },
                            {
                              "cases": [
                                {
                                  "body": {
                                    "nodeType": "YulBlock",
                                    "src": "2486:47:13",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "resultPtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2499:9:13"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2510:1:13",
                                                  "type": "",
                                                  "value": "2"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "2495:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2495:17:13"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2518:3:13",
                                                  "type": "",
                                                  "value": "240"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2523:6:13",
                                                  "type": "",
                                                  "value": "0x3d3d"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "2514:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2514:16:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mstore",
                                            "nodeType": "YulIdentifier",
                                            "src": "2488:6:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2488:43:13"
                                        },
                                        "nodeType": "YulExpressionStatement",
                                        "src": "2488:43:13"
                                      }
                                    ]
                                  },
                                  "nodeType": "YulCase",
                                  "src": "2479:54:13",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2484:1:13",
                                    "type": "",
                                    "value": "1"
                                  }
                                },
                                {
                                  "body": {
                                    "nodeType": "YulBlock",
                                    "src": "2553:45:13",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "resultPtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2566:9:13"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2577:1:13",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "2562:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2562:17:13"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2585:3:13",
                                                  "type": "",
                                                  "value": "248"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2590:4:13",
                                                  "type": "",
                                                  "value": "0x3d"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "2581:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2581:14:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mstore",
                                            "nodeType": "YulIdentifier",
                                            "src": "2555:6:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2555:41:13"
                                        },
                                        "nodeType": "YulExpressionStatement",
                                        "src": "2555:41:13"
                                      }
                                    ]
                                  },
                                  "nodeType": "YulCase",
                                  "src": "2546:52:13",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2551:1:13",
                                    "type": "",
                                    "value": "2"
                                  }
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "2457:4:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "2451:5:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2451:11:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2464:1:13",
                                    "type": "",
                                    "value": "3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mod",
                                  "nodeType": "YulIdentifier",
                                  "src": "2447:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2447:19:13"
                              },
                              "nodeType": "YulSwitch",
                              "src": "2440:158:13"
                            }
                          ]
                        },
                        "evmVersion": "london",
                        "externalReferences": [
                          {
                            "declaration": 2037,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1442:4:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2037,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1492:4:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2037,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2457:4:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2054,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1294:10:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2067,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1286:6:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2067,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1577:6:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2050,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1379:5:13",
                            "valueSize": 1
                          }
                        ],
                        "id": 2075,
                        "nodeType": "InlineAssembly",
                        "src": "1212:1396:13"
                      },
                      {
                        "expression": {
                          "id": 2076,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2067,
                          "src": "2625:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 2041,
                        "id": 2077,
                        "nodeType": "Return",
                        "src": "2618:13:13"
                      }
                    ]
                  },
                  "id": 2079,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "encode",
                  "nameLocation": "786:6:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2038,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2037,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "806:4:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 2079,
                        "src": "793:17:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2036,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "793:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "792:19:13"
                  },
                  "returnParameters": {
                    "id": 2041,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2040,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2079,
                        "src": "835:13:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2039,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "835:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "834:15:13"
                  },
                  "scope": 2141,
                  "src": "777:1861:13",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2139,
                    "nodeType": "Block",
                    "src": "2718:2104:13",
                    "statements": [
                      {
                        "assignments": [
                          2087
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2087,
                            "mutability": "mutable",
                            "name": "data",
                            "nameLocation": "2741:4:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 2139,
                            "src": "2728:17:13",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 2086,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "2728:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2092,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2090,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2081,
                              "src": "2754:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 2089,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2748:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                              "typeString": "type(bytes storage pointer)"
                            },
                            "typeName": {
                              "id": 2088,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "2748:5:13",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 2091,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2748:12:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2728:32:13"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2096,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 2093,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2087,
                              "src": "2775:4:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 2094,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2780:6:13",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "2775:11:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2095,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2790:1:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2775:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2102,
                        "nodeType": "IfStatement",
                        "src": "2771:41:13",
                        "trueBody": {
                          "expression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 2099,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2810:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 2098,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "2800:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (bytes memory)"
                              },
                              "typeName": {
                                "id": 2097,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "2804:5:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_storage_ptr",
                                  "typeString": "bytes"
                                }
                              }
                            },
                            "id": 2100,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2800:12:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "functionReturnParameters": 2085,
                          "id": 2101,
                          "nodeType": "Return",
                          "src": "2793:19:13"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2109,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2107,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 2104,
                                    "name": "data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2087,
                                    "src": "2830:4:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 2105,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2835:6:13",
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "2830:11:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "%",
                                "rightExpression": {
                                  "hexValue": "34",
                                  "id": 2106,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2844:1:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_4_by_1",
                                    "typeString": "int_const 4"
                                  },
                                  "value": "4"
                                },
                                "src": "2830:15:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2108,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2849:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "2830:20:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "696e76616c696420626173653634206465636f64657220696e707574",
                              "id": 2110,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2852:30:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b899645e29043a8d30000fb8ed0252b5c4f6f5f09672aefa374ee368d324bb89",
                                "typeString": "literal_string \"invalid base64 decoder input\""
                              },
                              "value": "invalid base64 decoder input"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b899645e29043a8d30000fb8ed0252b5c4f6f5f09672aefa374ee368d324bb89",
                                "typeString": "literal_string \"invalid base64 decoder input\""
                              }
                            ],
                            "id": 2103,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2822:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2111,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2822:61:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2112,
                        "nodeType": "ExpressionStatement",
                        "src": "2822:61:13"
                      },
                      {
                        "assignments": [
                          2114
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2114,
                            "mutability": "mutable",
                            "name": "table",
                            "nameLocation": "2945:5:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 2139,
                            "src": "2932:18:13",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 2113,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "2932:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2116,
                        "initialValue": {
                          "id": 2115,
                          "name": "TABLE_DECODE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2035,
                          "src": "2953:12:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2932:33:13"
                      },
                      {
                        "assignments": [
                          2118
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2118,
                            "mutability": "mutable",
                            "name": "decodedLen",
                            "nameLocation": "3032:10:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 2139,
                            "src": "3024:18:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2117,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3024:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2126,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2125,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2122,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 2119,
                                    "name": "data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2087,
                                    "src": "3046:4:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 2120,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "3051:6:13",
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "3046:11:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "hexValue": "34",
                                  "id": 2121,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3060:1:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_4_by_1",
                                    "typeString": "int_const 4"
                                  },
                                  "value": "4"
                                },
                                "src": "3046:15:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 2123,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "3045:17:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "33",
                            "id": 2124,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3065:1:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3_by_1",
                              "typeString": "int_const 3"
                            },
                            "value": "3"
                          },
                          "src": "3045:21:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3024:42:13"
                      },
                      {
                        "assignments": [
                          2128
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2128,
                            "mutability": "mutable",
                            "name": "result",
                            "nameLocation": "3159:6:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 2139,
                            "src": "3146:19:13",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 2127,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "3146:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2135,
                        "initialValue": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2133,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2131,
                                "name": "decodedLen",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2118,
                                "src": "3178:10:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "hexValue": "3332",
                                "id": 2132,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3191:2:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_32_by_1",
                                  "typeString": "int_const 32"
                                },
                                "value": "32"
                              },
                              "src": "3178:15:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2130,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "3168:9:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (bytes memory)"
                            },
                            "typeName": {
                              "id": 2129,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "3172:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            }
                          },
                          "id": 2134,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3168:26:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3146:48:13"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "3214:1578:13",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3260:46:13",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "3287:4:13"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "data",
                                            "nodeType": "YulIdentifier",
                                            "src": "3299:4:13"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "3293:5:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3293:11:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3283:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3283:22:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3277:5:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3277:29:13"
                              },
                              "variables": [
                                {
                                  "name": "lastBytes",
                                  "nodeType": "YulTypedName",
                                  "src": "3264:9:13",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3353:191:13",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3371:32:13",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "decodedLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "3389:10:13"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3401:1:13",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "3385:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3385:18:13"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "decodedLen",
                                        "nodeType": "YulIdentifier",
                                        "src": "3371:10:13"
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "3458:72:13",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "3480:32:13",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "decodedLen",
                                                "nodeType": "YulIdentifier",
                                                "src": "3498:10:13"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "3510:1:13",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "3494:3:13"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3494:18:13"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "decodedLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "3480:10:13"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "lastBytes",
                                              "nodeType": "YulIdentifier",
                                              "src": "3430:9:13"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "3441:6:13",
                                              "type": "",
                                              "value": "0xFFFF"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "3426:3:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3426:22:13"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3450:6:13",
                                          "type": "",
                                          "value": "0x3d3d"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "eq",
                                        "nodeType": "YulIdentifier",
                                        "src": "3423:2:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3423:34:13"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "3420:110:13"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "lastBytes",
                                        "nodeType": "YulIdentifier",
                                        "src": "3329:9:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3340:4:13",
                                        "type": "",
                                        "value": "0xFF"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3325:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3325:20:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3347:4:13",
                                    "type": "",
                                    "value": "0x3d"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "3322:2:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3322:30:13"
                              },
                              "nodeType": "YulIf",
                              "src": "3319:225:13"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "result",
                                    "nodeType": "YulIdentifier",
                                    "src": "3609:6:13"
                                  },
                                  {
                                    "name": "decodedLen",
                                    "nodeType": "YulIdentifier",
                                    "src": "3617:10:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3602:6:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3602:26:13"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3602:26:13"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3682:29:13",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "table",
                                    "nodeType": "YulIdentifier",
                                    "src": "3702:5:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3709:1:13",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3698:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3698:13:13"
                              },
                              "variables": [
                                {
                                  "name": "tablePtr",
                                  "nodeType": "YulTypedName",
                                  "src": "3686:8:13",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3750:19:13",
                              "value": {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "3765:4:13"
                              },
                              "variables": [
                                {
                                  "name": "dataPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "3754:7:13",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3782:39:13",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "dataPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3800:7:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "3815:4:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "3809:5:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3809:11:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3796:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3796:25:13"
                              },
                              "variables": [
                                {
                                  "name": "endPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "3786:6:13",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3879:32:13",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "result",
                                    "nodeType": "YulIdentifier",
                                    "src": "3900:6:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3908:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3896:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3896:15:13"
                              },
                              "variables": [
                                {
                                  "name": "resultPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "3883:9:13",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4025:757:13",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4078:26:13",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "dataPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "4093:7:13"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4102:1:13",
                                          "type": "",
                                          "value": "4"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4089:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4089:15:13"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "dataPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "4078:7:13"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "4120:27:13",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "dataPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "4139:7:13"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "4133:5:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4133:14:13"
                                    },
                                    "variables": [
                                      {
                                        "name": "input",
                                        "nodeType": "YulTypedName",
                                        "src": "4124:5:13",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "4196:473:13",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "4266:2:13",
                                                  "type": "",
                                                  "value": "18"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "arguments": [
                                                            {
                                                              "name": "tablePtr",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "4284:8:13"
                                                            },
                                                            {
                                                              "arguments": [
                                                                {
                                                                  "arguments": [
                                                                    {
                                                                      "kind": "number",
                                                                      "nodeType": "YulLiteral",
                                                                      "src": "4302:2:13",
                                                                      "type": "",
                                                                      "value": "24"
                                                                    },
                                                                    {
                                                                      "name": "input",
                                                                      "nodeType": "YulIdentifier",
                                                                      "src": "4306:5:13"
                                                                    }
                                                                  ],
                                                                  "functionName": {
                                                                    "name": "shr",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "4298:3:13"
                                                                  },
                                                                  "nodeType": "YulFunctionCall",
                                                                  "src": "4298:14:13"
                                                                },
                                                                {
                                                                  "kind": "number",
                                                                  "nodeType": "YulLiteral",
                                                                  "src": "4314:4:13",
                                                                  "type": "",
                                                                  "value": "0xFF"
                                                                }
                                                              ],
                                                              "functionName": {
                                                                "name": "and",
                                                                "nodeType": "YulIdentifier",
                                                                "src": "4294:3:13"
                                                              },
                                                              "nodeType": "YulFunctionCall",
                                                              "src": "4294:25:13"
                                                            }
                                                          ],
                                                          "functionName": {
                                                            "name": "add",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "4280:3:13"
                                                          },
                                                          "nodeType": "YulFunctionCall",
                                                          "src": "4280:40:13"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "mload",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "4274:5:13"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "4274:47:13"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "4323:4:13",
                                                      "type": "",
                                                      "value": "0xFF"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4270:3:13"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "4270:58:13"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "4262:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "4262:67:13"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "4358:2:13",
                                                  "type": "",
                                                  "value": "12"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "arguments": [
                                                            {
                                                              "name": "tablePtr",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "4376:8:13"
                                                            },
                                                            {
                                                              "arguments": [
                                                                {
                                                                  "arguments": [
                                                                    {
                                                                      "kind": "number",
                                                                      "nodeType": "YulLiteral",
                                                                      "src": "4394:2:13",
                                                                      "type": "",
                                                                      "value": "16"
                                                                    },
                                                                    {
                                                                      "name": "input",
                                                                      "nodeType": "YulIdentifier",
                                                                      "src": "4398:5:13"
                                                                    }
                                                                  ],
                                                                  "functionName": {
                                                                    "name": "shr",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "4390:3:13"
                                                                  },
                                                                  "nodeType": "YulFunctionCall",
                                                                  "src": "4390:14:13"
                                                                },
                                                                {
                                                                  "kind": "number",
                                                                  "nodeType": "YulLiteral",
                                                                  "src": "4406:4:13",
                                                                  "type": "",
                                                                  "value": "0xFF"
                                                                }
                                                              ],
                                                              "functionName": {
                                                                "name": "and",
                                                                "nodeType": "YulIdentifier",
                                                                "src": "4386:3:13"
                                                              },
                                                              "nodeType": "YulFunctionCall",
                                                              "src": "4386:25:13"
                                                            }
                                                          ],
                                                          "functionName": {
                                                            "name": "add",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "4372:3:13"
                                                          },
                                                          "nodeType": "YulFunctionCall",
                                                          "src": "4372:40:13"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "mload",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "4366:5:13"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "4366:47:13"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "4415:4:13",
                                                      "type": "",
                                                      "value": "0xFF"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4362:3:13"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "4362:58:13"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "4354:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "4354:67:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "4234:3:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4234:188:13"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "4476:1:13",
                                                  "type": "",
                                                  "value": "6"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "arguments": [
                                                            {
                                                              "name": "tablePtr",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "4493:8:13"
                                                            },
                                                            {
                                                              "arguments": [
                                                                {
                                                                  "arguments": [
                                                                    {
                                                                      "kind": "number",
                                                                      "nodeType": "YulLiteral",
                                                                      "src": "4512:1:13",
                                                                      "type": "",
                                                                      "value": "8"
                                                                    },
                                                                    {
                                                                      "name": "input",
                                                                      "nodeType": "YulIdentifier",
                                                                      "src": "4515:5:13"
                                                                    }
                                                                  ],
                                                                  "functionName": {
                                                                    "name": "shr",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "4507:3:13"
                                                                  },
                                                                  "nodeType": "YulFunctionCall",
                                                                  "src": "4507:14:13"
                                                                },
                                                                {
                                                                  "kind": "number",
                                                                  "nodeType": "YulLiteral",
                                                                  "src": "4523:4:13",
                                                                  "type": "",
                                                                  "value": "0xFF"
                                                                }
                                                              ],
                                                              "functionName": {
                                                                "name": "and",
                                                                "nodeType": "YulIdentifier",
                                                                "src": "4503:3:13"
                                                              },
                                                              "nodeType": "YulFunctionCall",
                                                              "src": "4503:25:13"
                                                            }
                                                          ],
                                                          "functionName": {
                                                            "name": "add",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "4489:3:13"
                                                          },
                                                          "nodeType": "YulFunctionCall",
                                                          "src": "4489:40:13"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "mload",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "4483:5:13"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "4483:47:13"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "4532:4:13",
                                                      "type": "",
                                                      "value": "0xFF"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4479:3:13"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "4479:58:13"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "4471:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "4471:67:13"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "name": "tablePtr",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "4585:8:13"
                                                        },
                                                        {
                                                          "arguments": [
                                                            {
                                                              "name": "input",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "4607:5:13"
                                                            },
                                                            {
                                                              "kind": "number",
                                                              "nodeType": "YulLiteral",
                                                              "src": "4615:4:13",
                                                              "type": "",
                                                              "value": "0xFF"
                                                            }
                                                          ],
                                                          "functionName": {
                                                            "name": "and",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "4595:3:13"
                                                          },
                                                          "nodeType": "YulFunctionCall",
                                                          "src": "4595:25:13"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "add",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "4581:3:13"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "4581:40:13"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "mload",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4575:5:13"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "4575:47:13"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "4624:4:13",
                                                  "type": "",
                                                  "value": "0xFF"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "and",
                                                "nodeType": "YulIdentifier",
                                                "src": "4571:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "4571:58:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "4443:3:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4443:208:13"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4210:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4210:459:13"
                                    },
                                    "variables": [
                                      {
                                        "name": "output",
                                        "nodeType": "YulTypedName",
                                        "src": "4200:6:13",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "4693:9:13"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "4708:3:13",
                                              "type": "",
                                              "value": "232"
                                            },
                                            {
                                              "name": "output",
                                              "nodeType": "YulIdentifier",
                                              "src": "4713:6:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "4704:3:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4704:16:13"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "4686:6:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4686:35:13"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4686:35:13"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4738:30:13",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "4755:9:13"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4766:1:13",
                                          "type": "",
                                          "value": "3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4751:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4751:17:13"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "resultPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "4738:9:13"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "dataPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3993:7:13"
                                  },
                                  {
                                    "name": "endPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4002:6:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3990:2:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3990:19:13"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "4010:2:13",
                                "statements": []
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "3987:2:13",
                                "statements": []
                              },
                              "src": "3983:799:13"
                            }
                          ]
                        },
                        "evmVersion": "london",
                        "externalReferences": [
                          {
                            "declaration": 2087,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3287:4:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2087,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3299:4:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2087,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3765:4:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2087,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3815:4:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2118,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3371:10:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2118,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3389:10:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2118,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3480:10:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2118,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3498:10:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2118,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3617:10:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2128,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3609:6:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2128,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3900:6:13",
                            "valueSize": 1
                          },
                          {
                            "declaration": 2114,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3702:5:13",
                            "valueSize": 1
                          }
                        ],
                        "id": 2136,
                        "nodeType": "InlineAssembly",
                        "src": "3205:1587:13"
                      },
                      {
                        "expression": {
                          "id": 2137,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2128,
                          "src": "4809:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 2085,
                        "id": 2138,
                        "nodeType": "Return",
                        "src": "4802:13:13"
                      }
                    ]
                  },
                  "id": 2140,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "decode",
                  "nameLocation": "2653:6:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2082,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2081,
                        "mutability": "mutable",
                        "name": "_data",
                        "nameLocation": "2674:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 2140,
                        "src": "2660:19:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2080,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2660:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2659:21:13"
                  },
                  "returnParameters": {
                    "id": 2085,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2084,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2140,
                        "src": "2704:12:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2083,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "2704:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2703:14:13"
                  },
                  "scope": 2141,
                  "src": "2644:2178:13",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 2142,
              "src": "186:4638:13",
              "usedErrors": []
            }
          ],
          "src": "33:4792:13"
        },
        "id": 13
      },
      "contracts/FrensPoolShare.sol": {
        "ast": {
          "absolutePath": "contracts/FrensPoolShare.sol",
          "exportedSymbols": {
            "Address": [
              1765
            ],
            "Base64": [
              2141
            ],
            "Context": [
              1787
            ],
            "ERC165": [
              2014
            ],
            "ERC721": [
              938
            ],
            "ERC721Enumerable": [
              1410
            ],
            "FrensPoolShare": [
              2881
            ],
            "IERC165": [
              2026
            ],
            "IERC721": [
              1054
            ],
            "IERC721Enumerable": [
              1441
            ],
            "IERC721Metadata": [
              1468
            ],
            "IERC721Receiver": [
              1072
            ],
            "ISSVRegistry": [
              4051
            ],
            "IStakingPool": [
              4120
            ],
            "IStakingPoolFactory": [
              4130
            ],
            "Ownable": [
              104
            ],
            "Strings": [
              1990
            ],
            "ToColor": [
              3801
            ]
          },
          "id": 2882,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 2143,
              "literals": [
                "solidity",
                ">=",
                "0.8",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:31:14"
            },
            {
              "absolutePath": "contracts/interfaces/IStakingPool.sol",
              "file": "./interfaces/IStakingPool.sol",
              "id": 2144,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 2882,
              "sourceUnit": 4121,
              "src": "97:39:14",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/interfaces/ISSVRegistry.sol",
              "file": "./interfaces/ISSVRegistry.sol",
              "id": 2145,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 2882,
              "sourceUnit": 4052,
              "src": "137:39:14",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/interfaces/IStakingPoolFactory.sol",
              "file": "./interfaces/IStakingPoolFactory.sol",
              "id": 2146,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 2882,
              "sourceUnit": 4131,
              "src": "177:46:14",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol",
              "file": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol",
              "id": 2147,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 2882,
              "sourceUnit": 1411,
              "src": "224:78:14",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
              "file": "@openzeppelin/contracts/access/Ownable.sol",
              "id": 2148,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 2882,
              "sourceUnit": 105,
              "src": "303:52:14",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
              "file": "@openzeppelin/contracts/utils/Strings.sol",
              "id": 2149,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 2882,
              "sourceUnit": 1991,
              "src": "356:51:14",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "base64-sol/base64.sol",
              "file": "base64-sol/base64.sol",
              "id": 2150,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 2882,
              "sourceUnit": 2142,
              "src": "408:31:14",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/ToColor.sol",
              "file": "./ToColor.sol",
              "id": 2151,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 2882,
              "sourceUnit": 3802,
              "src": "440:23:14",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 2152,
                    "name": "ERC721Enumerable",
                    "nameLocations": [
                      "493:16:14"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1410,
                    "src": "493:16:14"
                  },
                  "id": 2153,
                  "nodeType": "InheritanceSpecifier",
                  "src": "493:16:14"
                },
                {
                  "baseName": {
                    "id": 2154,
                    "name": "Ownable",
                    "nameLocations": [
                      "511:7:14"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 104,
                    "src": "511:7:14"
                  },
                  "id": 2155,
                  "nodeType": "InheritanceSpecifier",
                  "src": "511:7:14"
                }
              ],
              "canonicalName": "FrensPoolShare",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 2881,
              "linearizedBaseContracts": [
                2881,
                104,
                1410,
                1441,
                938,
                1468,
                1054,
                2014,
                2026,
                1787
              ],
              "name": "FrensPoolShare",
              "nameLocation": "475:14:14",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "global": false,
                  "id": 2158,
                  "libraryName": {
                    "id": 2156,
                    "name": "Strings",
                    "nameLocations": [
                      "530:7:14"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1990,
                    "src": "530:7:14"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "524:26:14",
                  "typeName": {
                    "id": 2157,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "542:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "global": false,
                  "id": 2161,
                  "libraryName": {
                    "id": 2159,
                    "name": "ToColor",
                    "nameLocations": [
                      "559:7:14"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 3801,
                    "src": "559:7:14"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "553:25:14",
                  "typeName": {
                    "id": 2160,
                    "name": "bytes3",
                    "nodeType": "ElementaryTypeName",
                    "src": "571:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes3",
                      "typeString": "bytes3"
                    }
                  }
                },
                {
                  "constant": false,
                  "id": 2163,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "595:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 2881,
                  "src": "582:21:14",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2162,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "582:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 2167,
                  "mutability": "mutable",
                  "name": "poolById",
                  "nameLocation": "632:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 2881,
                  "src": "607:33:14",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                    "typeString": "mapping(uint256 => address)"
                  },
                  "typeName": {
                    "id": 2166,
                    "keyType": {
                      "id": 2164,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "615:4:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "607:24:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                      "typeString": "mapping(uint256 => address)"
                    },
                    "valueType": {
                      "id": 2165,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "623:7:14",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2170,
                  "mutability": "mutable",
                  "name": "factoryContract",
                  "nameLocation": "665:15:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 2881,
                  "src": "645:35:14",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IStakingPoolFactory_$4130",
                    "typeString": "contract IStakingPoolFactory"
                  },
                  "typeName": {
                    "id": 2169,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2168,
                      "name": "IStakingPoolFactory",
                      "nameLocations": [
                        "645:19:14"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4130,
                      "src": "645:19:14"
                    },
                    "referencedDeclaration": 4130,
                    "src": "645:19:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStakingPoolFactory_$4130",
                      "typeString": "contract IStakingPoolFactory"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2173,
                  "mutability": "mutable",
                  "name": "ssvRegistry",
                  "nameLocation": "697:11:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 2881,
                  "src": "684:24:14",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISSVRegistry_$4051",
                    "typeString": "contract ISSVRegistry"
                  },
                  "typeName": {
                    "id": 2172,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2171,
                      "name": "ISSVRegistry",
                      "nameLocations": [
                        "684:12:14"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4051,
                      "src": "684:12:14"
                    },
                    "referencedDeclaration": 4051,
                    "src": "684:12:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISSVRegistry_$4051",
                      "typeString": "contract ISSVRegistry"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2196,
                    "nodeType": "Block",
                    "src": "817:118:14",
                    "statements": [
                      {
                        "expression": {
                          "id": 2188,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2184,
                            "name": "factoryContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2170,
                            "src": "823:15:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStakingPoolFactory_$4130",
                              "typeString": "contract IStakingPoolFactory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 2186,
                                "name": "factoryAddress_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2175,
                                "src": "861:15:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 2185,
                              "name": "IStakingPoolFactory",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4130,
                              "src": "841:19:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IStakingPoolFactory_$4130_$",
                                "typeString": "type(contract IStakingPoolFactory)"
                              }
                            },
                            "id": 2187,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "841:36:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStakingPoolFactory_$4130",
                              "typeString": "contract IStakingPoolFactory"
                            }
                          },
                          "src": "823:54:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IStakingPoolFactory_$4130",
                            "typeString": "contract IStakingPoolFactory"
                          }
                        },
                        "id": 2189,
                        "nodeType": "ExpressionStatement",
                        "src": "823:54:14"
                      },
                      {
                        "expression": {
                          "id": 2194,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2190,
                            "name": "ssvRegistry",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2173,
                            "src": "883:11:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ISSVRegistry_$4051",
                              "typeString": "contract ISSVRegistry"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 2192,
                                "name": "ssvRegistryAddress_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2177,
                                "src": "910:19:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 2191,
                              "name": "ISSVRegistry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4051,
                              "src": "897:12:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ISSVRegistry_$4051_$",
                                "typeString": "type(contract ISSVRegistry)"
                              }
                            },
                            "id": 2193,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "897:33:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ISSVRegistry_$4051",
                              "typeString": "contract ISSVRegistry"
                            }
                          },
                          "src": "883:47:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ISSVRegistry_$4051",
                            "typeString": "contract ISSVRegistry"
                          }
                        },
                        "id": 2195,
                        "nodeType": "ExpressionStatement",
                        "src": "883:47:14"
                      }
                    ]
                  },
                  "id": 2197,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "hexValue": "7374616b696e6720636f6e20616d69676f73",
                          "id": 2180,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "786:20:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_9c6581418c05e691491dcc38c028f6de752f62c152c01f899698728dc7f28160",
                            "typeString": "literal_string \"staking con amigos\""
                          },
                          "value": "staking con amigos"
                        },
                        {
                          "hexValue": "4652454e53",
                          "id": 2181,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "808:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_8bd933cac16115dfc04a1aff836f3905cc5e73305ea8e74c23868f6c7eabf6aa",
                            "typeString": "literal_string \"FRENS\""
                          },
                          "value": "FRENS"
                        }
                      ],
                      "id": 2182,
                      "kind": "baseConstructorSpecifier",
                      "modifierName": {
                        "id": 2179,
                        "name": "ERC721",
                        "nameLocations": [
                          "779:6:14"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 938,
                        "src": "779:6:14"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "779:37:14"
                    }
                  ],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2178,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2175,
                        "mutability": "mutable",
                        "name": "factoryAddress_",
                        "nameLocation": "733:15:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2197,
                        "src": "725:23:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2174,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "725:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2177,
                        "mutability": "mutable",
                        "name": "ssvRegistryAddress_",
                        "nameLocation": "758:19:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2197,
                        "src": "750:27:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2176,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "750:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "724:54:14"
                  },
                  "returnParameters": {
                    "id": 2183,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "817:0:14"
                  },
                  "scope": 2881,
                  "src": "713:222:14",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2210,
                    "nodeType": "Block",
                    "src": "994:110:14",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 2204,
                                  "name": "_stakingPoolAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2199,
                                  "src": "1045:19:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "id": 2202,
                                  "name": "factoryContract",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2170,
                                  "src": "1008:15:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IStakingPoolFactory_$4130",
                                    "typeString": "contract IStakingPoolFactory"
                                  }
                                },
                                "id": 2203,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1024:20:14",
                                "memberName": "doesStakingPoolExist",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 4129,
                                "src": "1008:36:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view external returns (bool)"
                                }
                              },
                              "id": 2205,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1008:57:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6d7573742062652061207374616b696e6720706f6f6c",
                              "id": 2206,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1067:24:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_79b31377ea7406adef8ad6e5f385fd88ac0d56f06d19e7a314fbd092fb56dd1d",
                                "typeString": "literal_string \"must be a staking pool\""
                              },
                              "value": "must be a staking pool"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_79b31377ea7406adef8ad6e5f385fd88ac0d56f06d19e7a314fbd092fb56dd1d",
                                "typeString": "literal_string \"must be a staking pool\""
                              }
                            ],
                            "id": 2201,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1000:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2207,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1000:92:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2208,
                        "nodeType": "ExpressionStatement",
                        "src": "1000:92:14"
                      },
                      {
                        "id": 2209,
                        "nodeType": "PlaceholderStatement",
                        "src": "1098:1:14"
                      }
                    ]
                  },
                  "id": 2211,
                  "name": "onlyStakingPools",
                  "nameLocation": "948:16:14",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 2200,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2199,
                        "mutability": "mutable",
                        "name": "_stakingPoolAddress",
                        "nameLocation": "973:19:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2211,
                        "src": "965:27:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2198,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "965:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "964:29:14"
                  },
                  "src": "939:165:14",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2225,
                    "nodeType": "Block",
                    "src": "1185:42:14",
                    "statements": [
                      {
                        "expression": {
                          "id": 2221,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "1191:10:14",
                          "subExpression": {
                            "id": 2220,
                            "name": "_tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2163,
                            "src": "1191:8:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2222,
                        "nodeType": "ExpressionStatement",
                        "src": "1191:10:14"
                      },
                      {
                        "expression": {
                          "id": 2223,
                          "name": "_tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2163,
                          "src": "1214:8:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2219,
                        "id": 2224,
                        "nodeType": "Return",
                        "src": "1207:15:14"
                      }
                    ]
                  },
                  "functionSelector": "4f3130fa",
                  "id": 2226,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 2214,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1160:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 2215,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1164:6:14",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1160:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "id": 2216,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2213,
                        "name": "onlyStakingPools",
                        "nameLocations": [
                          "1143:16:14"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2211,
                        "src": "1143:16:14"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1143:28:14"
                    }
                  ],
                  "name": "incrementTokenId",
                  "nameLocation": "1117:16:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2212,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1133:2:14"
                  },
                  "returnParameters": {
                    "id": 2219,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2218,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2226,
                        "src": "1180:4:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2217,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1180:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1179:6:14"
                  },
                  "scope": 2881,
                  "src": "1108:119:14",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2250,
                    "nodeType": "Block",
                    "src": "1326:62:14",
                    "statements": [
                      {
                        "expression": {
                          "id": 2243,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 2239,
                              "name": "poolById",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2167,
                              "src": "1332:8:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 2241,
                            "indexExpression": {
                              "id": 2240,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2230,
                              "src": "1341:2:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1332:12:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 2242,
                            "name": "_pool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2232,
                            "src": "1347:5:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1332:20:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 2244,
                        "nodeType": "ExpressionStatement",
                        "src": "1332:20:14"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2246,
                              "name": "userAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2228,
                              "src": "1368:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2247,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2230,
                              "src": "1380:2:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2245,
                            "name": "_safeMint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              602,
                              631
                            ],
                            "referencedDeclaration": 602,
                            "src": "1358:9:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 2248,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1358:25:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2249,
                        "nodeType": "ExpressionStatement",
                        "src": "1358:25:14"
                      }
                    ]
                  },
                  "functionSelector": "0d4d1513",
                  "id": 2251,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 2235,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1314:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 2236,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1318:6:14",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1314:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "id": 2237,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2234,
                        "name": "onlyStakingPools",
                        "nameLocations": [
                          "1297:16:14"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2211,
                        "src": "1297:16:14"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1297:28:14"
                    }
                  ],
                  "name": "mint",
                  "nameLocation": "1240:4:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2233,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2228,
                        "mutability": "mutable",
                        "name": "userAddress",
                        "nameLocation": "1253:11:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2251,
                        "src": "1245:19:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2227,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1245:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2230,
                        "mutability": "mutable",
                        "name": "id",
                        "nameLocation": "1271:2:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2251,
                        "src": "1266:7:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2229,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1266:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2232,
                        "mutability": "mutable",
                        "name": "_pool",
                        "nameLocation": "1283:5:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2251,
                        "src": "1275:13:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2231,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1275:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1244:45:14"
                  },
                  "returnParameters": {
                    "id": 2238,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1326:0:14"
                  },
                  "scope": 2881,
                  "src": "1231:157:14",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2262,
                    "nodeType": "Block",
                    "src": "1443:30:14",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2259,
                              "name": "_id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2253,
                              "src": "1464:3:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2258,
                            "name": "_exists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 546,
                            "src": "1456:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (uint256) view returns (bool)"
                            }
                          },
                          "id": 2260,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1456:12:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 2257,
                        "id": 2261,
                        "nodeType": "Return",
                        "src": "1449:19:14"
                      }
                    ]
                  },
                  "functionSelector": "4f558e79",
                  "id": 2263,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "exists",
                  "nameLocation": "1401:6:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2254,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2253,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "1413:3:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2263,
                        "src": "1408:8:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2252,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1408:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1407:10:14"
                  },
                  "returnParameters": {
                    "id": 2257,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2256,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2263,
                        "src": "1438:4:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2255,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1438:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1437:6:14"
                  },
                  "scope": 2881,
                  "src": "1392:81:14",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2274,
                    "nodeType": "Block",
                    "src": "1536:31:14",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 2270,
                            "name": "poolById",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2167,
                            "src": "1549:8:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                              "typeString": "mapping(uint256 => address)"
                            }
                          },
                          "id": 2272,
                          "indexExpression": {
                            "id": 2271,
                            "name": "_id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2265,
                            "src": "1558:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1549:13:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 2269,
                        "id": 2273,
                        "nodeType": "Return",
                        "src": "1542:20:14"
                      }
                    ]
                  },
                  "functionSelector": "0bc59b38",
                  "id": 2275,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getPoolById",
                  "nameLocation": "1486:11:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2266,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2265,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "1503:3:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2275,
                        "src": "1498:8:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2264,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1498:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1497:10:14"
                  },
                  "returnParameters": {
                    "id": 2269,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2268,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2275,
                        "src": "1528:7:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2267,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1528:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1527:9:14"
                  },
                  "scope": 2881,
                  "src": "1477:90:14",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    315
                  ],
                  "body": {
                    "id": 2488,
                    "nodeType": "Block",
                    "src": "1662:2619:14",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 2285,
                                  "name": "id",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2277,
                                  "src": "1684:2:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 2284,
                                "name": "_exists",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 546,
                                "src": "1676:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (uint256) view returns (bool)"
                                }
                              },
                              "id": 2286,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1676:11:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6e6f74206578697374",
                              "id": 2287,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1689:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_613b590133514e9d25a2c1ce384159f96f154135bf8704ce9e525824c58d376a",
                                "typeString": "literal_string \"not exist\""
                              },
                              "value": "not exist"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_613b590133514e9d25a2c1ce384159f96f154135bf8704ce9e525824c58d376a",
                                "typeString": "literal_string \"not exist\""
                              }
                            ],
                            "id": 2283,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1668:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2288,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1668:33:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2289,
                        "nodeType": "ExpressionStatement",
                        "src": "1668:33:14"
                      },
                      {
                        "assignments": [
                          2291
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2291,
                            "mutability": "mutable",
                            "name": "poolAddress",
                            "nameLocation": "1715:11:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "1707:19:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 2290,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1707:7:14",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2295,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2292,
                            "name": "poolById",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2167,
                            "src": "1729:8:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                              "typeString": "mapping(uint256 => address)"
                            }
                          },
                          "id": 2294,
                          "indexExpression": {
                            "id": 2293,
                            "name": "id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2277,
                            "src": "1738:2:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1729:12:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1707:34:14"
                      },
                      {
                        "assignments": [
                          2298
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2298,
                            "mutability": "mutable",
                            "name": "stakingPool",
                            "nameLocation": "1760:11:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "1747:24:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStakingPool_$4120",
                              "typeString": "contract IStakingPool"
                            },
                            "typeName": {
                              "id": 2297,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2296,
                                "name": "IStakingPool",
                                "nameLocations": [
                                  "1747:12:14"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 4120,
                                "src": "1747:12:14"
                              },
                              "referencedDeclaration": 4120,
                              "src": "1747:12:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStakingPool_$4120",
                                "typeString": "contract IStakingPool"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2305,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 2302,
                                  "name": "poolAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2291,
                                  "src": "1795:11:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 2301,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1787:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                  "typeString": "type(address payable)"
                                },
                                "typeName": {
                                  "id": 2300,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1787:8:14",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2303,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1787:20:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "id": 2299,
                            "name": "IStakingPool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4120,
                            "src": "1774:12:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IStakingPool_$4120_$",
                              "typeString": "type(contract IStakingPool)"
                            }
                          },
                          "id": 2304,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1774:34:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IStakingPool_$4120",
                            "typeString": "contract IStakingPool"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1747:61:14"
                      },
                      {
                        "assignments": [
                          2307
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2307,
                            "mutability": "mutable",
                            "name": "depositForId",
                            "nameLocation": "1819:12:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "1814:17:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2306,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "1814:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2312,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2310,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2277,
                              "src": "1863:2:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 2308,
                              "name": "stakingPool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2298,
                              "src": "1834:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStakingPool_$4120",
                                "typeString": "contract IStakingPool"
                              }
                            },
                            "id": 2309,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1846:16:14",
                            "memberName": "getDepositAmount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4105,
                            "src": "1834:28:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view external returns (uint256)"
                            }
                          },
                          "id": 2311,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1834:32:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1814:52:14"
                      },
                      {
                        "assignments": [
                          2314
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2314,
                            "mutability": "mutable",
                            "name": "depositString",
                            "nameLocation": "1886:13:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "1872:27:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2313,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "1872:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2318,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2316,
                              "name": "depositForId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2307,
                              "src": "1922:12:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2315,
                            "name": "getEthDecimalString",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2745,
                            "src": "1902:19:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (string memory)"
                            }
                          },
                          "id": 2317,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1902:33:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1872:63:14"
                      },
                      {
                        "assignments": [
                          2320
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2320,
                            "mutability": "mutable",
                            "name": "shareForId",
                            "nameLocation": "1946:10:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "1941:15:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2319,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "1941:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2325,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2323,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2277,
                              "src": "1993:2:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 2321,
                              "name": "stakingPool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2298,
                              "src": "1959:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStakingPool_$4120",
                                "typeString": "contract IStakingPool"
                              }
                            },
                            "id": 2322,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1971:21:14",
                            "memberName": "getDistributableShare",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4088,
                            "src": "1959:33:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view external returns (uint256)"
                            }
                          },
                          "id": 2324,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1959:37:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1941:55:14"
                      },
                      {
                        "assignments": [
                          2327
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2327,
                            "mutability": "mutable",
                            "name": "shareString",
                            "nameLocation": "2016:11:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "2002:25:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2326,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2002:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2331,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2329,
                              "name": "shareForId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2320,
                              "src": "2050:10:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2328,
                            "name": "getEthDecimalString",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2745,
                            "src": "2030:19:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (string memory)"
                            }
                          },
                          "id": 2330,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2030:31:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2002:59:14"
                      },
                      {
                        "assignments": [
                          2333
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2333,
                            "mutability": "mutable",
                            "name": "stakingPoolAddress",
                            "nameLocation": "2081:18:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "2067:32:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2332,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2067:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2342,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 2338,
                                  "name": "poolAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2291,
                                  "src": "2130:11:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 2337,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2122:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint160_$",
                                  "typeString": "type(uint160)"
                                },
                                "typeName": {
                                  "id": 2336,
                                  "name": "uint160",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2122:7:14",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2339,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2122:20:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint160",
                                "typeString": "uint160"
                              }
                            },
                            {
                              "hexValue": "3230",
                              "id": 2340,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2144:2:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_20_by_1",
                                "typeString": "int_const 20"
                              },
                              "value": "20"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint160",
                                "typeString": "uint160"
                              },
                              {
                                "typeIdentifier": "t_rational_20_by_1",
                                "typeString": "int_const 20"
                              }
                            ],
                            "expression": {
                              "id": 2334,
                              "name": "Strings",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1990,
                              "src": "2102:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_Strings_$1990_$",
                                "typeString": "type(library Strings)"
                              }
                            },
                            "id": 2335,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2110:11:14",
                            "memberName": "toHexString",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1989,
                            "src": "2102:19:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (uint256,uint256) pure returns (string memory)"
                            }
                          },
                          "id": 2341,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2102:45:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2067:80:14"
                      },
                      {
                        "assignments": [
                          2347,
                          2349
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2347,
                            "mutability": "mutable",
                            "name": "poolOperators",
                            "nameLocation": "2170:13:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "2154:29:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                              "typeString": "uint32[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 2345,
                                "name": "uint32",
                                "nodeType": "ElementaryTypeName",
                                "src": "2154:6:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "id": 2346,
                              "nodeType": "ArrayTypeName",
                              "src": "2154:8:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
                                "typeString": "uint32[]"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 2349,
                            "mutability": "mutable",
                            "name": "pubKey",
                            "nameLocation": "2198:6:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "2185:19:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 2348,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "2185:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2353,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2351,
                              "name": "poolAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2291,
                              "src": "2228:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2350,
                            "name": "getOperatorsForPool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2786,
                            "src": "2208:19:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_array$_t_uint32_$dyn_memory_ptr_$_t_bytes_memory_ptr_$",
                              "typeString": "function (address) view returns (uint32[] memory,bytes memory)"
                            }
                          },
                          "id": 2352,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2208:32:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_array$_t_uint32_$dyn_memory_ptr_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(uint32[] memory,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2153:87:14"
                      },
                      {
                        "assignments": [
                          2355
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2355,
                            "mutability": "mutable",
                            "name": "poolState",
                            "nameLocation": "2329:9:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "2315:23:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2354,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2315:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2359,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 2356,
                              "name": "stakingPool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2298,
                              "src": "2341:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStakingPool_$4120",
                                "typeString": "contract IStakingPool"
                              }
                            },
                            "id": 2357,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2353:8:14",
                            "memberName": "getState",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4098,
                            "src": "2341:20:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$__$returns$_t_string_memory_ptr_$",
                              "typeString": "function () view external returns (string memory)"
                            }
                          },
                          "id": 2358,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2341:22:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2315:48:14"
                      },
                      {
                        "assignments": [
                          2361
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2361,
                            "mutability": "mutable",
                            "name": "name",
                            "nameLocation": "2383:4:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "2369:18:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2360,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2369:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2372,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "6672656e20706f6f6c2073686172652023",
                                  "id": 2366,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2414:19:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_b026adaee7cf45e8d181f0a16441cefe36531e103cb392f4612f12970de795ce",
                                    "typeString": "literal_string \"fren pool share #\""
                                  },
                                  "value": "fren pool share #"
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "id": 2367,
                                      "name": "id",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2277,
                                      "src": "2434:2:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2368,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "2437:8:14",
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1872,
                                    "src": "2434:11:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 2369,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2434:13:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_b026adaee7cf45e8d181f0a16441cefe36531e103cb392f4612f12970de795ce",
                                    "typeString": "literal_string \"fren pool share #\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 2364,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2397:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 2365,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "2401:12:14",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "2397:16:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 2370,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2397:51:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 2363,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2390:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 2362,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2390:6:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 2371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2390:59:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2369:80:14"
                      },
                      {
                        "assignments": [
                          2374
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2374,
                            "mutability": "mutable",
                            "name": "description",
                            "nameLocation": "2469:11:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "2455:25:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2373,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2455:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2388,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "74686973206672656e206861732061206465706f736974206f6620",
                                  "id": 2379,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2514:29:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_f8431154d20a062f90d083b090de84f78401bd52856aa3901d80b4851eaffce3",
                                    "typeString": "literal_string \"this fren has a deposit of \""
                                  },
                                  "value": "this fren has a deposit of "
                                },
                                {
                                  "id": 2380,
                                  "name": "depositString",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2314,
                                  "src": "2544:13:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "2045746820696e20706f6f6c20",
                                  "id": 2381,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2565:15:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_2a4d9e25ecd37dc1db4f7e2cd212dc42bc6aaf994fc2f81949522b1ce45981f0",
                                    "typeString": "literal_string \" Eth in pool \""
                                  },
                                  "value": " Eth in pool "
                                },
                                {
                                  "id": 2382,
                                  "name": "stakingPoolAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2333,
                                  "src": "2582:18:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "207769746820636c61696d61626c652062616c616e6365206f6620",
                                  "id": 2383,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2608:29:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_044eae808f2787c241370967c4acd33a68a39f7ac9e88ee62de472a01dafdb97",
                                    "typeString": "literal_string \" with claimable balance of \""
                                  },
                                  "value": " with claimable balance of "
                                },
                                {
                                  "id": 2384,
                                  "name": "shareString",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2327,
                                  "src": "2639:11:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "20457468",
                                  "id": 2385,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2652:6:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_b6ee96e7166402c66a60c745b2e54bae2a950cd694d6fc5ed31c4730260033f8",
                                    "typeString": "literal_string \" Eth\""
                                  },
                                  "value": " Eth"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_f8431154d20a062f90d083b090de84f78401bd52856aa3901d80b4851eaffce3",
                                    "typeString": "literal_string \"this fren has a deposit of \""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_2a4d9e25ecd37dc1db4f7e2cd212dc42bc6aaf994fc2f81949522b1ce45981f0",
                                    "typeString": "literal_string \" Eth in pool \""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_044eae808f2787c241370967c4acd33a68a39f7ac9e88ee62de472a01dafdb97",
                                    "typeString": "literal_string \" with claimable balance of \""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_b6ee96e7166402c66a60c745b2e54bae2a950cd694d6fc5ed31c4730260033f8",
                                    "typeString": "literal_string \" Eth\""
                                  }
                                ],
                                "expression": {
                                  "id": 2377,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2490:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 2378,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "2494:12:14",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "2490:16:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 2386,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2490:169:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 2376,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2483:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 2375,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2483:6:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 2387,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2483:177:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2455:205:14"
                      },
                      {
                        "assignments": [
                          2390
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2390,
                            "mutability": "mutable",
                            "name": "image",
                            "nameLocation": "2680:5:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2488,
                            "src": "2666:19:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2389,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2666:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2400,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 2396,
                                      "name": "id",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2277,
                                      "src": "2731:2:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 2395,
                                    "name": "generateSVGofTokenById",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2513,
                                    "src": "2708:22:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (uint256) view returns (string memory)"
                                    }
                                  },
                                  "id": 2397,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2708:26:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "id": 2394,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2702:5:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                  "typeString": "type(bytes storage pointer)"
                                },
                                "typeName": {
                                  "id": 2393,
                                  "name": "bytes",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2702:5:14",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2398,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2702:33:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 2391,
                              "name": "Base64",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2141,
                              "src": "2688:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_Base64_$2141_$",
                                "typeString": "type(library Base64)"
                              }
                            },
                            "id": 2392,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2695:6:14",
                            "memberName": "encode",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2079,
                            "src": "2688:13:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (bytes memory) pure returns (string memory)"
                            }
                          },
                          "id": 2399,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2688:48:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2666:70:14"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c",
                                  "id": 2405,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2800:31:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa",
                                    "typeString": "literal_string \"data:application/json;base64,\""
                                  },
                                  "value": "data:application/json;base64,"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "hexValue": "7b226e616d65223a22",
                                              "id": 2412,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "2925:11:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_14271abadab347880c45d45d3abf3dce36bb4aa23c658e4207d08ac9b3f38832",
                                                "typeString": "literal_string \"{\"name\":\"\""
                                              },
                                              "value": "{\"name\":\""
                                            },
                                            {
                                              "id": 2413,
                                              "name": "name",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2361,
                                              "src": "2954:4:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "222c20226465736372697074696f6e223a22",
                                              "id": 2414,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "2976:20:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_9780691b4087a1893a28b24020f5f6d0c7583060bd6cfeb54b8284a5bf55f11f",
                                                "typeString": "literal_string \"\", \"description\":\"\""
                                              },
                                              "value": "\", \"description\":\""
                                            },
                                            {
                                              "id": 2415,
                                              "name": "description",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2374,
                                              "src": "3014:11:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "222c202265787465726e616c5f75726c223a2268747470733a2f2f6672656e732e66756e2f746f6b656e2f",
                                              "id": 2416,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "3043:45:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_2bb3e75827a528e768f4d19e5cb6210f65ebe95b8ecd10026561bc3dd0652b43",
                                                "typeString": "literal_string \"\", \"external_url\":\"https://frens.fun/token/\""
                                              },
                                              "value": "\", \"external_url\":\"https://frens.fun/token/"
                                            },
                                            {
                                              "arguments": [],
                                              "expression": {
                                                "argumentTypes": [],
                                                "expression": {
                                                  "id": 2417,
                                                  "name": "id",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 2277,
                                                  "src": "3106:2:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "id": 2418,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberLocation": "3109:8:14",
                                                "memberName": "toString",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 1872,
                                                "src": "3106:11:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                                  "typeString": "function (uint256) pure returns (string memory)"
                                                }
                                              },
                                              "id": 2419,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "functionCall",
                                              "lValueRequested": false,
                                              "nameLocations": [],
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "3106:13:14",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "222c202261747472696275746573223a205b7b2274726169745f74797065223a2022706f6f6c222c202276616c7565223a22",
                                              "id": 2420,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "3137:52:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_406617889ed492ce06429f458294c8051405573006b5fa55ba1d213bada78c87",
                                                "typeString": "literal_string \"\", \"attributes\": [{\"trait_type\": \"pool\", \"value\":\"\""
                                              },
                                              "value": "\", \"attributes\": [{\"trait_type\": \"pool\", \"value\":\""
                                            },
                                            {
                                              "id": 2421,
                                              "name": "stakingPoolAddress",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2333,
                                              "src": "3207:18:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "227d2c7b2274726169745f74797065223a20226465706f736974222c202276616c7565223a2022",
                                              "id": 2422,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "3243:41:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_ea20435787e6f40888ab8175fe61aa0eeef3a377303b6f1444af39d6206bf52f",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"deposit\", \"value\": \"\""
                                              },
                                              "value": "\"},{\"trait_type\": \"deposit\", \"value\": \""
                                            },
                                            {
                                              "id": 2423,
                                              "name": "depositString",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2314,
                                              "src": "3302:13:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "20457468",
                                              "id": 2424,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "3317:6:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_b6ee96e7166402c66a60c745b2e54bae2a950cd694d6fc5ed31c4730260033f8",
                                                "typeString": "literal_string \" Eth\""
                                              },
                                              "value": " Eth"
                                            },
                                            {
                                              "hexValue": "227d2c7b2274726169745f74797065223a2022636c61696d61626c65222c202276616c7565223a2022",
                                              "id": 2425,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "3341:43:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_7586fd297ae138244dc3b65cd2a985c742412f6cb8247ccfe666582dff3bb773",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"claimable\", \"value\": \"\""
                                              },
                                              "value": "\"},{\"trait_type\": \"claimable\", \"value\": \""
                                            },
                                            {
                                              "id": 2426,
                                              "name": "shareString",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2327,
                                              "src": "3402:11:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "20457468",
                                              "id": 2427,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "3415:6:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_b6ee96e7166402c66a60c745b2e54bae2a950cd694d6fc5ed31c4730260033f8",
                                                "typeString": "literal_string \" Eth\""
                                              },
                                              "value": " Eth"
                                            },
                                            {
                                              "hexValue": "227d2c7b2274726169745f74797065223a2022706f6f6c207374617465222c202276616c7565223a2022",
                                              "id": 2428,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "3439:44:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_c522ad31fe3918403e9a14a16a826335c85c116180d175c255c2ead30e40bf34",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"pool state\", \"value\": \"\""
                                              },
                                              "value": "\"},{\"trait_type\": \"pool state\", \"value\": \""
                                            },
                                            {
                                              "id": 2429,
                                              "name": "poolState",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2355,
                                              "src": "3501:9:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "227d2c7b2274726169745f74797065223a20226f70657261746f7231222c202276616c7565223a2022",
                                              "id": 2430,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "3528:43:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_e7011aa4238ae368521516363ed865c9179ec6bd3ccf1e70245bf3b00216ebc5",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"operator1\", \"value\": \"\""
                                              },
                                              "value": "\"},{\"trait_type\": \"operator1\", \"value\": \""
                                            },
                                            {
                                              "condition": {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 2434,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "expression": {
                                                    "id": 2431,
                                                    "name": "poolOperators",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 2347,
                                                    "src": "3589:13:14",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                                                      "typeString": "uint32[] memory"
                                                    }
                                                  },
                                                  "id": 2432,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberLocation": "3603:6:14",
                                                  "memberName": "length",
                                                  "nodeType": "MemberAccess",
                                                  "src": "3589:20:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "==",
                                                "rightExpression": {
                                                  "hexValue": "30",
                                                  "id": 2433,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "3613:1:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_0_by_1",
                                                    "typeString": "int_const 0"
                                                  },
                                                  "value": "0"
                                                },
                                                "src": "3589:25:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "falseExpression": {
                                                "arguments": [
                                                  {
                                                    "baseExpression": {
                                                      "id": 2437,
                                                      "name": "poolOperators",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 2347,
                                                      "src": "3638:13:14",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                                                        "typeString": "uint32[] memory"
                                                      }
                                                    },
                                                    "id": 2439,
                                                    "indexExpression": {
                                                      "hexValue": "30",
                                                      "id": 2438,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "number",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "3652:1:14",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_0_by_1",
                                                        "typeString": "int_const 0"
                                                      },
                                                      "value": "0"
                                                    },
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "nodeType": "IndexAccess",
                                                    "src": "3638:16:14",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint32",
                                                      "typeString": "uint32"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_uint32",
                                                      "typeString": "uint32"
                                                    }
                                                  ],
                                                  "id": 2436,
                                                  "name": "uint2str",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 2880,
                                                  "src": "3629:8:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                                    "typeString": "function (uint256) pure returns (string memory)"
                                                  }
                                                },
                                                "id": 2440,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "functionCall",
                                                "lValueRequested": false,
                                                "nameLocations": [],
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "3629:26:14",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_string_memory_ptr",
                                                  "typeString": "string memory"
                                                }
                                              },
                                              "id": 2441,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "Conditional",
                                              "src": "3589:66:14",
                                              "trueExpression": {
                                                "hexValue": "4e6f7420536574",
                                                "id": 2435,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "3617:9:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_e90c279dafb9063f3b5c32ec3f15f7ebb88374e472baa6c90bef52e668561779",
                                                  "typeString": "literal_string \"Not Set\""
                                                },
                                                "value": "Not Set"
                                              },
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "227d2c7b2274726169745f74797065223a20226f70657261746f7232222c202276616c7565223a2022",
                                              "id": 2442,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "3673:43:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_d221f977b412e71a54958d8d70ea09f2e1065e674b6823a1b519628881ced6ae",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"operator2\", \"value\": \"\""
                                              },
                                              "value": "\"},{\"trait_type\": \"operator2\", \"value\": \""
                                            },
                                            {
                                              "condition": {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 2446,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "expression": {
                                                    "id": 2443,
                                                    "name": "poolOperators",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 2347,
                                                    "src": "3734:13:14",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                                                      "typeString": "uint32[] memory"
                                                    }
                                                  },
                                                  "id": 2444,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberLocation": "3748:6:14",
                                                  "memberName": "length",
                                                  "nodeType": "MemberAccess",
                                                  "src": "3734:20:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "==",
                                                "rightExpression": {
                                                  "hexValue": "30",
                                                  "id": 2445,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "3758:1:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_0_by_1",
                                                    "typeString": "int_const 0"
                                                  },
                                                  "value": "0"
                                                },
                                                "src": "3734:25:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "falseExpression": {
                                                "arguments": [
                                                  {
                                                    "baseExpression": {
                                                      "id": 2449,
                                                      "name": "poolOperators",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 2347,
                                                      "src": "3783:13:14",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                                                        "typeString": "uint32[] memory"
                                                      }
                                                    },
                                                    "id": 2451,
                                                    "indexExpression": {
                                                      "hexValue": "31",
                                                      "id": 2450,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "number",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "3797:1:14",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_1_by_1",
                                                        "typeString": "int_const 1"
                                                      },
                                                      "value": "1"
                                                    },
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "nodeType": "IndexAccess",
                                                    "src": "3783:16:14",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint32",
                                                      "typeString": "uint32"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_uint32",
                                                      "typeString": "uint32"
                                                    }
                                                  ],
                                                  "id": 2448,
                                                  "name": "uint2str",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 2880,
                                                  "src": "3774:8:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                                    "typeString": "function (uint256) pure returns (string memory)"
                                                  }
                                                },
                                                "id": 2452,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "functionCall",
                                                "lValueRequested": false,
                                                "nameLocations": [],
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "3774:26:14",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_string_memory_ptr",
                                                  "typeString": "string memory"
                                                }
                                              },
                                              "id": 2453,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "Conditional",
                                              "src": "3734:66:14",
                                              "trueExpression": {
                                                "hexValue": "4e6f7420536574",
                                                "id": 2447,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "3762:9:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_e90c279dafb9063f3b5c32ec3f15f7ebb88374e472baa6c90bef52e668561779",
                                                  "typeString": "literal_string \"Not Set\""
                                                },
                                                "value": "Not Set"
                                              },
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "227d2c7b2274726169745f74797065223a20226f70657261746f7233222c202276616c7565223a2022",
                                              "id": 2454,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "3818:43:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_dfb07a418b6ecc247c37347076c6dd8bfa37329e58d9fde091cd72fb73a55b24",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"operator3\", \"value\": \"\""
                                              },
                                              "value": "\"},{\"trait_type\": \"operator3\", \"value\": \""
                                            },
                                            {
                                              "condition": {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 2458,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "expression": {
                                                    "id": 2455,
                                                    "name": "poolOperators",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 2347,
                                                    "src": "3879:13:14",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                                                      "typeString": "uint32[] memory"
                                                    }
                                                  },
                                                  "id": 2456,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberLocation": "3893:6:14",
                                                  "memberName": "length",
                                                  "nodeType": "MemberAccess",
                                                  "src": "3879:20:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "==",
                                                "rightExpression": {
                                                  "hexValue": "30",
                                                  "id": 2457,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "3903:1:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_0_by_1",
                                                    "typeString": "int_const 0"
                                                  },
                                                  "value": "0"
                                                },
                                                "src": "3879:25:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "falseExpression": {
                                                "arguments": [
                                                  {
                                                    "baseExpression": {
                                                      "id": 2461,
                                                      "name": "poolOperators",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 2347,
                                                      "src": "3928:13:14",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                                                        "typeString": "uint32[] memory"
                                                      }
                                                    },
                                                    "id": 2463,
                                                    "indexExpression": {
                                                      "hexValue": "32",
                                                      "id": 2462,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "number",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "3942:1:14",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_2_by_1",
                                                        "typeString": "int_const 2"
                                                      },
                                                      "value": "2"
                                                    },
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "nodeType": "IndexAccess",
                                                    "src": "3928:16:14",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint32",
                                                      "typeString": "uint32"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_uint32",
                                                      "typeString": "uint32"
                                                    }
                                                  ],
                                                  "id": 2460,
                                                  "name": "uint2str",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 2880,
                                                  "src": "3919:8:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                                    "typeString": "function (uint256) pure returns (string memory)"
                                                  }
                                                },
                                                "id": 2464,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "functionCall",
                                                "lValueRequested": false,
                                                "nameLocations": [],
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "3919:26:14",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_string_memory_ptr",
                                                  "typeString": "string memory"
                                                }
                                              },
                                              "id": 2465,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "Conditional",
                                              "src": "3879:66:14",
                                              "trueExpression": {
                                                "hexValue": "4e6f7420536574",
                                                "id": 2459,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "3907:9:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_e90c279dafb9063f3b5c32ec3f15f7ebb88374e472baa6c90bef52e668561779",
                                                  "typeString": "literal_string \"Not Set\""
                                                },
                                                "value": "Not Set"
                                              },
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "227d2c7b2274726169745f74797065223a20226f70657261746f7234222c202276616c7565223a2022",
                                              "id": 2466,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "3963:43:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_4872822a64b3dd2b5d4fbce6d5009ff01247ebdaf2d7e4e1c850f5183b60377e",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"operator4\", \"value\": \"\""
                                              },
                                              "value": "\"},{\"trait_type\": \"operator4\", \"value\": \""
                                            },
                                            {
                                              "condition": {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 2470,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "expression": {
                                                    "id": 2467,
                                                    "name": "poolOperators",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 2347,
                                                    "src": "4024:13:14",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                                                      "typeString": "uint32[] memory"
                                                    }
                                                  },
                                                  "id": 2468,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberLocation": "4038:6:14",
                                                  "memberName": "length",
                                                  "nodeType": "MemberAccess",
                                                  "src": "4024:20:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "==",
                                                "rightExpression": {
                                                  "hexValue": "30",
                                                  "id": 2469,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "4048:1:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_0_by_1",
                                                    "typeString": "int_const 0"
                                                  },
                                                  "value": "0"
                                                },
                                                "src": "4024:25:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "falseExpression": {
                                                "arguments": [
                                                  {
                                                    "baseExpression": {
                                                      "id": 2473,
                                                      "name": "poolOperators",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 2347,
                                                      "src": "4073:13:14",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                                                        "typeString": "uint32[] memory"
                                                      }
                                                    },
                                                    "id": 2475,
                                                    "indexExpression": {
                                                      "hexValue": "33",
                                                      "id": 2474,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "number",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "4087:1:14",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_3_by_1",
                                                        "typeString": "int_const 3"
                                                      },
                                                      "value": "3"
                                                    },
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "nodeType": "IndexAccess",
                                                    "src": "4073:16:14",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint32",
                                                      "typeString": "uint32"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_uint32",
                                                      "typeString": "uint32"
                                                    }
                                                  ],
                                                  "id": 2472,
                                                  "name": "uint2str",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 2880,
                                                  "src": "4064:8:14",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                                    "typeString": "function (uint256) pure returns (string memory)"
                                                  }
                                                },
                                                "id": 2476,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "functionCall",
                                                "lValueRequested": false,
                                                "nameLocations": [],
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "4064:26:14",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_string_memory_ptr",
                                                  "typeString": "string memory"
                                                }
                                              },
                                              "id": 2477,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "Conditional",
                                              "src": "4024:66:14",
                                              "trueExpression": {
                                                "hexValue": "4e6f7420536574",
                                                "id": 2471,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "4052:9:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_e90c279dafb9063f3b5c32ec3f15f7ebb88374e472baa6c90bef52e668561779",
                                                  "typeString": "literal_string \"Not Set\""
                                                },
                                                "value": "Not Set"
                                              },
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "227d5d2c2022696d616765223a2022",
                                              "id": 2478,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "4108:17:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_d495ce189c95493c568c004c2993169cee86ec5c7e35146724414cb88c3dd297",
                                                "typeString": "literal_string \"\"}], \"image\": \"\""
                                              },
                                              "value": "\"}], \"image\": \""
                                            },
                                            {
                                              "hexValue": "646174613a696d6167652f7376672b786d6c3b6261736536342c",
                                              "id": 2479,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "4143:28:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_f90ae014c41cb48231e1f02c314087ff9c479133697911d25c5fe231e237dd14",
                                                "typeString": "literal_string \"data:image/svg+xml;base64,\""
                                              },
                                              "value": "data:image/svg+xml;base64,"
                                            },
                                            {
                                              "id": 2480,
                                              "name": "image",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2390,
                                              "src": "4189:5:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "227d",
                                              "id": 2481,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "4212:4:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475",
                                                "typeString": "literal_string \"\"}\""
                                              },
                                              "value": "\"}"
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_stringliteral_14271abadab347880c45d45d3abf3dce36bb4aa23c658e4207d08ac9b3f38832",
                                                "typeString": "literal_string \"{\"name\":\"\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_9780691b4087a1893a28b24020f5f6d0c7583060bd6cfeb54b8284a5bf55f11f",
                                                "typeString": "literal_string \"\", \"description\":\"\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_2bb3e75827a528e768f4d19e5cb6210f65ebe95b8ecd10026561bc3dd0652b43",
                                                "typeString": "literal_string \"\", \"external_url\":\"https://frens.fun/token/\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_406617889ed492ce06429f458294c8051405573006b5fa55ba1d213bada78c87",
                                                "typeString": "literal_string \"\", \"attributes\": [{\"trait_type\": \"pool\", \"value\":\"\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_ea20435787e6f40888ab8175fe61aa0eeef3a377303b6f1444af39d6206bf52f",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"deposit\", \"value\": \"\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_b6ee96e7166402c66a60c745b2e54bae2a950cd694d6fc5ed31c4730260033f8",
                                                "typeString": "literal_string \" Eth\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_7586fd297ae138244dc3b65cd2a985c742412f6cb8247ccfe666582dff3bb773",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"claimable\", \"value\": \"\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_b6ee96e7166402c66a60c745b2e54bae2a950cd694d6fc5ed31c4730260033f8",
                                                "typeString": "literal_string \" Eth\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_c522ad31fe3918403e9a14a16a826335c85c116180d175c255c2ead30e40bf34",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"pool state\", \"value\": \"\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_e7011aa4238ae368521516363ed865c9179ec6bd3ccf1e70245bf3b00216ebc5",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"operator1\", \"value\": \"\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_d221f977b412e71a54958d8d70ea09f2e1065e674b6823a1b519628881ced6ae",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"operator2\", \"value\": \"\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_dfb07a418b6ecc247c37347076c6dd8bfa37329e58d9fde091cd72fb73a55b24",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"operator3\", \"value\": \"\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_4872822a64b3dd2b5d4fbce6d5009ff01247ebdaf2d7e4e1c850f5183b60377e",
                                                "typeString": "literal_string \"\"},{\"trait_type\": \"operator4\", \"value\": \"\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_d495ce189c95493c568c004c2993169cee86ec5c7e35146724414cb88c3dd297",
                                                "typeString": "literal_string \"\"}], \"image\": \"\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_f90ae014c41cb48231e1f02c314087ff9c479133697911d25c5fe231e237dd14",
                                                "typeString": "literal_string \"data:image/svg+xml;base64,\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475",
                                                "typeString": "literal_string \"\"}\""
                                              }
                                            ],
                                            "expression": {
                                              "id": 2410,
                                              "name": "abi",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": -1,
                                              "src": "2891:3:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_magic_abi",
                                                "typeString": "abi"
                                              }
                                            },
                                            "id": 2411,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "memberLocation": "2895:12:14",
                                            "memberName": "encodePacked",
                                            "nodeType": "MemberAccess",
                                            "src": "2891:16:14",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                              "typeString": "function () pure returns (bytes memory)"
                                            }
                                          },
                                          "id": 2482,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "nameLocations": [],
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "2891:1341:14",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        ],
                                        "id": 2409,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "2870:5:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                          "typeString": "type(bytes storage pointer)"
                                        },
                                        "typeName": {
                                          "id": 2408,
                                          "name": "bytes",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "2870:5:14",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 2483,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2870:1376:14",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "expression": {
                                      "id": 2406,
                                      "name": "Base64",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2141,
                                      "src": "2843:6:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_Base64_$2141_$",
                                        "typeString": "type(library Base64)"
                                      }
                                    },
                                    "id": 2407,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "2850:6:14",
                                    "memberName": "encode",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2079,
                                    "src": "2843:13:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (bytes memory) pure returns (string memory)"
                                    }
                                  },
                                  "id": 2484,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2843:1415:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa",
                                    "typeString": "literal_string \"data:application/json;base64,\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 2403,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2772:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 2404,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "2776:12:14",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "2772:16:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 2485,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2772:1496:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 2402,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2756:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 2401,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2756:6:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 2486,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2756:1520:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 2282,
                        "id": 2487,
                        "nodeType": "Return",
                        "src": "2743:1533:14"
                      }
                    ]
                  },
                  "functionSelector": "c87b56dd",
                  "id": 2489,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tokenURI",
                  "nameLocation": "1596:8:14",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 2279,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1629:8:14"
                  },
                  "parameters": {
                    "id": 2278,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2277,
                        "mutability": "mutable",
                        "name": "id",
                        "nameLocation": "1613:2:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2489,
                        "src": "1605:10:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2276,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1605:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1604:12:14"
                  },
                  "returnParameters": {
                    "id": 2282,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2281,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2489,
                        "src": "1647:13:14",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2280,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1647:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1646:15:14"
                  },
                  "scope": 2881,
                  "src": "1587:2694:14",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2512,
                    "nodeType": "Block",
                    "src": "4367:199:14",
                    "statements": [
                      {
                        "assignments": [
                          2497
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2497,
                            "mutability": "mutable",
                            "name": "svg",
                            "nameLocation": "4388:3:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2512,
                            "src": "4374:17:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2496,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "4374:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2509,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "3c7376672077696474683d2234303022206865696768743d223430302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e",
                                  "id": 2502,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4425:67:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_caeb71f54631f296ff8bfc0106807e10504655b5379be1fcddc27f00a2cec14d",
                                    "typeString": "literal_string \"<svg width=\"400\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\""
                                  },
                                  "value": "<svg width=\"400\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\">"
                                },
                                {
                                  "arguments": [
                                    {
                                      "id": 2504,
                                      "name": "id",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2491,
                                      "src": "4518:2:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 2503,
                                    "name": "renderTokenById",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2665,
                                    "src": "4502:15:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (uint256) view returns (string memory)"
                                    }
                                  },
                                  "id": 2505,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4502:19:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "3c2f7376673e",
                                  "id": 2506,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4529:8:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_ed942a74eccce931b7661b37252dffca8561e3a8bdec86f6da31d97d858c9292",
                                    "typeString": "literal_string \"</svg>\""
                                  },
                                  "value": "</svg>"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_caeb71f54631f296ff8bfc0106807e10504655b5379be1fcddc27f00a2cec14d",
                                    "typeString": "literal_string \"<svg width=\"400\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_ed942a74eccce931b7661b37252dffca8561e3a8bdec86f6da31d97d858c9292",
                                    "typeString": "literal_string \"</svg>\""
                                  }
                                ],
                                "expression": {
                                  "id": 2500,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "4401:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 2501,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "4405:12:14",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "4401:16:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 2507,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4401:142:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 2499,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4394:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 2498,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "4394:6:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 2508,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4394:150:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4374:170:14"
                      },
                      {
                        "expression": {
                          "id": 2510,
                          "name": "svg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2497,
                          "src": "4558:3:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 2495,
                        "id": 2511,
                        "nodeType": "Return",
                        "src": "4551:10:14"
                      }
                    ]
                  },
                  "id": 2513,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "generateSVGofTokenById",
                  "nameLocation": "4294:22:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2492,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2491,
                        "mutability": "mutable",
                        "name": "id",
                        "nameLocation": "4325:2:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2513,
                        "src": "4317:10:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2490,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4317:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4316:12:14"
                  },
                  "returnParameters": {
                    "id": 2495,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2494,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2513,
                        "src": "4352:13:14",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2493,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "4352:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4351:15:14"
                  },
                  "scope": 2881,
                  "src": "4285:281:14",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2569,
                    "nodeType": "Block",
                    "src": "4635:271:14",
                    "statements": [
                      {
                        "assignments": [
                          2521
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2521,
                            "mutability": "mutable",
                            "name": "colorRandomness",
                            "nameLocation": "4649:15:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2569,
                            "src": "4641:23:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 2520,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "4641:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2531,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 2527,
                                      "name": "a",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2515,
                                      "src": "4702:1:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 2526,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4694:7:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 2525,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4694:7:14",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2528,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4694:10:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "id": 2523,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "4677:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 2524,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "4681:12:14",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "4677:16:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 2529,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4677:28:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 2522,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -8,
                            "src": "4667:9:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 2530,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4667:39:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4641:65:14"
                      },
                      {
                        "assignments": [
                          2533
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2533,
                            "mutability": "mutable",
                            "name": "colorBytes",
                            "nameLocation": "4719:10:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2569,
                            "src": "4712:17:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes3",
                              "typeString": "bytes3"
                            },
                            "typeName": {
                              "id": 2532,
                              "name": "bytes3",
                              "nodeType": "ElementaryTypeName",
                              "src": "4712:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes3",
                                "typeString": "bytes3"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2560,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_bytes3",
                            "typeString": "bytes3"
                          },
                          "id": 2559,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes2",
                              "typeString": "bytes2"
                            },
                            "id": 2549,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "id": 2536,
                                    "name": "colorRandomness",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2521,
                                    "src": "4739:15:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "id": 2538,
                                  "indexExpression": {
                                    "hexValue": "30",
                                    "id": 2537,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4755:1:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4739:18:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                ],
                                "id": 2535,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4732:6:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes2_$",
                                  "typeString": "type(bytes2)"
                                },
                                "typeName": {
                                  "id": 2534,
                                  "name": "bytes2",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4732:6:14",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2539,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4732:26:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes2",
                                "typeString": "bytes2"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "|",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_bytes2",
                                    "typeString": "bytes2"
                                  },
                                  "id": 2547,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "arguments": [
                                      {
                                        "baseExpression": {
                                          "id": 2542,
                                          "name": "colorRandomness",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2521,
                                          "src": "4770:15:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        },
                                        "id": 2544,
                                        "indexExpression": {
                                          "hexValue": "31",
                                          "id": 2543,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "4786:1:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_1_by_1",
                                            "typeString": "int_const 1"
                                          },
                                          "value": "1"
                                        },
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "4770:18:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes1",
                                          "typeString": "bytes1"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes1",
                                          "typeString": "bytes1"
                                        }
                                      ],
                                      "id": 2541,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "4763:6:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_bytes2_$",
                                        "typeString": "type(bytes2)"
                                      },
                                      "typeName": {
                                        "id": 2540,
                                        "name": "bytes2",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "4763:6:14",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 2545,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4763:26:14",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes2",
                                      "typeString": "bytes2"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">>",
                                  "rightExpression": {
                                    "hexValue": "38",
                                    "id": 2546,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4793:1:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_8_by_1",
                                      "typeString": "int_const 8"
                                    },
                                    "value": "8"
                                  },
                                  "src": "4763:31:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes2",
                                    "typeString": "bytes2"
                                  }
                                }
                              ],
                              "id": 2548,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "4761:35:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes2",
                                "typeString": "bytes2"
                              }
                            },
                            "src": "4732:64:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes2",
                              "typeString": "bytes2"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "|",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_bytes3",
                                  "typeString": "bytes3"
                                },
                                "id": 2557,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "baseExpression": {
                                        "id": 2552,
                                        "name": "colorRandomness",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2521,
                                        "src": "4808:15:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "id": 2554,
                                      "indexExpression": {
                                        "hexValue": "32",
                                        "id": 2553,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "4824:1:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_2_by_1",
                                          "typeString": "int_const 2"
                                        },
                                        "value": "2"
                                      },
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "4808:18:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes1",
                                        "typeString": "bytes1"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes1",
                                        "typeString": "bytes1"
                                      }
                                    ],
                                    "id": 2551,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4801:6:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_bytes3_$",
                                      "typeString": "type(bytes3)"
                                    },
                                    "typeName": {
                                      "id": 2550,
                                      "name": "bytes3",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4801:6:14",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2555,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4801:26:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes3",
                                    "typeString": "bytes3"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "3136",
                                  "id": 2556,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4831:2:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_16_by_1",
                                    "typeString": "int_const 16"
                                  },
                                  "value": "16"
                                },
                                "src": "4801:32:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes3",
                                  "typeString": "bytes3"
                                }
                              }
                            ],
                            "id": 2558,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "4799:36:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes3",
                              "typeString": "bytes3"
                            }
                          },
                          "src": "4732:103:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes3",
                            "typeString": "bytes3"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4712:123:14"
                      },
                      {
                        "assignments": [
                          2562
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2562,
                            "mutability": "mutable",
                            "name": "color",
                            "nameLocation": "4855:5:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2569,
                            "src": "4841:19:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2561,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "4841:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2566,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 2563,
                              "name": "colorBytes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2533,
                              "src": "4863:10:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes3",
                                "typeString": "bytes3"
                              }
                            },
                            "id": 2564,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4874:7:14",
                            "memberName": "toColor",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3800,
                            "src": "4863:18:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes3_$returns$_t_string_memory_ptr_$bound_to$_t_bytes3_$",
                              "typeString": "function (bytes3) pure returns (string memory)"
                            }
                          },
                          "id": 2565,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4863:20:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4841:42:14"
                      },
                      {
                        "expression": {
                          "id": 2567,
                          "name": "color",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2562,
                          "src": "4896:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 2519,
                        "id": 2568,
                        "nodeType": "Return",
                        "src": "4889:12:14"
                      }
                    ]
                  },
                  "id": 2570,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getColor",
                  "nameLocation": "4579:8:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2516,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2515,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "4596:1:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2570,
                        "src": "4588:9:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2514,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4588:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4587:11:14"
                  },
                  "returnParameters": {
                    "id": 2519,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2518,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2570,
                        "src": "4621:13:14",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2517,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "4621:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4620:15:14"
                  },
                  "scope": 2881,
                  "src": "4570:336:14",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2664,
                    "nodeType": "Block",
                    "src": "5074:8897:14",
                    "statements": [
                      {
                        "assignments": [
                          2579
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2579,
                            "mutability": "mutable",
                            "name": "stakingPool",
                            "nameLocation": "5094:11:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2664,
                            "src": "5081:24:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStakingPool_$4120",
                              "typeString": "contract IStakingPool"
                            },
                            "typeName": {
                              "id": 2578,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2577,
                                "name": "IStakingPool",
                                "nameLocations": [
                                  "5081:12:14"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 4120,
                                "src": "5081:12:14"
                              },
                              "referencedDeclaration": 4120,
                              "src": "5081:12:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStakingPool_$4120",
                                "typeString": "contract IStakingPool"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2588,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "id": 2583,
                                    "name": "poolById",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2167,
                                    "src": "5129:8:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                      "typeString": "mapping(uint256 => address)"
                                    }
                                  },
                                  "id": 2585,
                                  "indexExpression": {
                                    "id": 2584,
                                    "name": "id",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2572,
                                    "src": "5138:2:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "5129:12:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 2582,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "5121:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                  "typeString": "type(address payable)"
                                },
                                "typeName": {
                                  "id": 2581,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "5121:8:14",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2586,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5121:21:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "id": 2580,
                            "name": "IStakingPool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4120,
                            "src": "5108:12:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IStakingPool_$4120_$",
                              "typeString": "type(contract IStakingPool)"
                            }
                          },
                          "id": 2587,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5108:35:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IStakingPool_$4120",
                            "typeString": "contract IStakingPool"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5081:62:14"
                      },
                      {
                        "assignments": [
                          2590
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2590,
                            "mutability": "mutable",
                            "name": "depositForId",
                            "nameLocation": "5154:12:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2664,
                            "src": "5149:17:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2589,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "5149:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2595,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2593,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2572,
                              "src": "5198:2:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 2591,
                              "name": "stakingPool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2579,
                              "src": "5169:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStakingPool_$4120",
                                "typeString": "contract IStakingPool"
                              }
                            },
                            "id": 2592,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5181:16:14",
                            "memberName": "getDepositAmount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4105,
                            "src": "5169:28:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view external returns (uint256)"
                            }
                          },
                          "id": 2594,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5169:32:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5149:52:14"
                      },
                      {
                        "assignments": [
                          2597
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2597,
                            "mutability": "mutable",
                            "name": "depositString",
                            "nameLocation": "5221:13:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2664,
                            "src": "5207:27:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2596,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "5207:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2601,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2599,
                              "name": "depositForId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2590,
                              "src": "5257:12:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2598,
                            "name": "getEthDecimalString",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2745,
                            "src": "5237:19:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (string memory)"
                            }
                          },
                          "id": 2600,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5237:33:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5207:63:14"
                      },
                      {
                        "assignments": [
                          2603
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2603,
                            "mutability": "mutable",
                            "name": "shareForId",
                            "nameLocation": "5281:10:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2664,
                            "src": "5276:15:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2602,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "5276:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2608,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2606,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2572,
                              "src": "5328:2:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 2604,
                              "name": "stakingPool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2579,
                              "src": "5294:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStakingPool_$4120",
                                "typeString": "contract IStakingPool"
                              }
                            },
                            "id": 2605,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5306:21:14",
                            "memberName": "getDistributableShare",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4088,
                            "src": "5294:33:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view external returns (uint256)"
                            }
                          },
                          "id": 2607,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5294:37:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5276:55:14"
                      },
                      {
                        "assignments": [
                          2610
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2610,
                            "mutability": "mutable",
                            "name": "shareString",
                            "nameLocation": "5351:11:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2664,
                            "src": "5337:25:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2609,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "5337:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2614,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2612,
                              "name": "shareForId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2603,
                              "src": "5385:10:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2611,
                            "name": "getEthDecimalString",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2745,
                            "src": "5365:19:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (string memory)"
                            }
                          },
                          "id": 2613,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5365:31:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5337:59:14"
                      },
                      {
                        "assignments": [
                          2616
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2616,
                            "mutability": "mutable",
                            "name": "poolColor",
                            "nameLocation": "5416:9:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2664,
                            "src": "5402:23:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2615,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "5402:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2623,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 2620,
                                  "name": "stakingPool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2579,
                                  "src": "5445:11:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IStakingPool_$4120",
                                    "typeString": "contract IStakingPool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IStakingPool_$4120",
                                    "typeString": "contract IStakingPool"
                                  }
                                ],
                                "id": 2619,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "5437:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 2618,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "5437:7:14",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2621,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5437:20:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2617,
                            "name": "getColor",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2570,
                            "src": "5428:8:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (address) pure returns (string memory)"
                            }
                          },
                          "id": 2622,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5428:30:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5402:56:14"
                      },
                      {
                        "assignments": [
                          2625
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2625,
                            "mutability": "mutable",
                            "name": "textColor",
                            "nameLocation": "5478:9:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2664,
                            "src": "5464:23:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2624,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "5464:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2631,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 2628,
                                  "name": "id",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2572,
                                  "src": "5507:2:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 2627,
                                "name": "ownerOf",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 253,
                                "src": "5499:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                  "typeString": "function (uint256) view returns (address)"
                                }
                              },
                              "id": 2629,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5499:11:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2626,
                            "name": "getColor",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2570,
                            "src": "5490:8:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (address) pure returns (string memory)"
                            }
                          },
                          "id": 2630,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5490:21:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5464:47:14"
                      },
                      {
                        "assignments": [
                          2633
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2633,
                            "mutability": "mutable",
                            "name": "render",
                            "nameLocation": "5532:6:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2664,
                            "src": "5518:20:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2632,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "5518:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2661,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "3c646566733e3c7374796c653e40666f6e742d666163657b666f6e742d66616d696c793a225065726d616e656e74204d61726b6572223b7372633a75726c28646174613a6170706c69636174696f6e2f666f6e742d776f66663b636861727365743d7574662d383b6261736536342c643039475267414241414141414172344141304141414141442f6741415142434141414141414141414141414141414141414141414141414141425055793879414141424d414141414538414141426759624c6a59324e745958414141414741414141415767414141566f4d35414d7059335a3049414141416477414141414341414141416741564141426d63476474414141423441414141506341414146686b6b48612b6d64736557594141414c59414141466f67414142395334327a5435614756685a4141414348774141414132414141414e6768495776746f614756684141414974414141414230414141416b42483042674768746448674141416a554141414148414141414277505a2f2f366247396a595141414350414141414151414141414541555942304a74595868774141414a41414141414234414141416741685143475735686257554141416b6741414142757741414131525157384d396347397a6441414143747741414141554141414149502b3241447077636d56774141414b3841414141416341414141486141614d68586963593242684d6d6163774d444b774d433068366d4c675947684230497a336d55775a6752796d5268676f49474251563241415146635050324347427759464269436d664c2b483261775a536c676441554b677a51784d42557966514e534367774d4145373644464141654a786a594742675a6f426747515a47426841494166495977587757426773677a6358417763414568416f4d6267782b444d482f2f77504646426863676579672f2f2f2f502f792f392f2b322f357568657147416b5932424947416b7249534267596b5a796d4142596c596954423038414143366f6734534141414146514141654a78646b44314f7844415168574d53466e49444a41764a493273705672626f715649346b564361734b48774e50784975784c5a4f79436c6f584842576435324b584d78424e3445566b446a3858756a2b66526d6b4a67616565503351727a7a4944376634433733656672345943474d556d586e494a347354677a45696978536f79716b793272744e6175677775306d7145713950472b514c616361473976413177704a36377634336e744377664c3433544c665747514854445a68416b6641376875776d7742782f735069314e514b3656586a377a78364a3145346c6b5371784e68346a453453733858696d444857312b3569546e746d7346685a6e4d2b4531714f515344694557576c434834494d63594d665066375667306a2b473856764931366748455466544a31656b7a77596d6a5446684f7773636c4f33766f77526965305835574272584142346e4856565361386a3152583275664e55743062663876544b30334e562b2f48617a2f3047473770704e3639424345545343566b45435345577655445a52454c4a6868334c52454c38672f794e38414e677953714c6941314c64694151456b703265546c5668695775737374317a78322f345a78653731632b304e4e332f79582f494e2f302f74377237546651624f6a2b514a73446c416536332b4366396e55664c712f433158563963316e4272716d674442364b306e4e5a65394a346b454755596263506f6c2f5266515853302b594d476c484c6574464644365138774c364e3062326e5574524c4478743455636d4953456b70305a6f54515a564d736c796c73574c434c64626238665933627a79374173366f41694935413165584149516b363833567a57366b4970383631626363364e6b48443444704a4d30635a37796f3139734a6c397a4d72562f35624f6257752b3356616e67374d5437796c6c4d7156483778364d33374e6c6154337a3537593647436a4a76314f74564a6e4369774a4e536e717a4a5a315532526c6245576357713170704a7951676a6c2f624852536d6f3172684b6c6b3451435930514b616f4e696d754469496b73746d4f43694d514c454f4f57636a313661435349454f4a776d54523368336b6c6f7a6b7172434f65475a42304864392f642f5964385458376f6658626b414245764557554544653936317a59743671596c42793567763774753669657765774c484f4e3658752f304f6e303867374b34753235455654434649447a4855692b58433479627843674a6270436a7864336f632b77686b4b64752b4f43516d54593052704b6272565338585858653853314573692f616c483436686268766462707136586665386d6847616a795a527a433033694c455377496a6767676f576138345664344977536f67425532374c636a7451755a4b4f706b6e312f4846664f4847646d6b5279525a57567773736f696c5431757a38384f3145524663673441505252423579776f676d546c36614e74674a3167774f41586769547079725467316b5331706c6c784252614d494b43415130746159617a45436578776e30357168673344506b6a374d76304d426d4d553430554b6359535a5950566e6e50417856415a796e486c554a7552634245784168735349536b514a70674b4850637a3437486b6b71684236564142494b50634367354d59617356773456684d5935482f715747424156756147544e793472696a72707a53416b674b4861566b6377494b432b596f466d5a6e796a304161466742496138586c3655796e66362b504875662b5172386d337672366750644a63495a53306b75764d365842336c557445532f5661424b4444534245394b5a423266454d716a673745446b6f7a7538375438686549476659757a345179654c6a3339703245697a6e462f33756c79577159615a632f6c79644e585835314f6273366e36464743414845384157654b4d795355747151532b634c4e4e4e5532306c706c777a44492f49414a495a326c7a696a516765664263594c2f65447161727563506e7058474b4b57494e6678394e52796b434972435336374f4e796b444d315348763333793657746d66487052436359454569537869302b694f4d4c315948537a667a67642f76373568772f74624c48304a4f316e744669565a6a416f5a485639755a75645042374635344768414c68546f7944643666757630434a6b4f6f37526261526e3776364e2b653737337038364e424746712f714155423267626f486364594231466972374c616f5636534e7178615673456353626f4a46325a5a66474d466332527979524462456863674e7974794741516254584269616f6643756c6b5a4a7a436844464c6e5a2b797166624234664e344f56637863726e736463454b47475033336c2b54354e7166724b6354706554326468365153556551526f546d644d5033336c68643238524b47414f4b684b724545466a71596877494957336f396c30774d2f65572f4f7a50304b71776d6f357a36684e637a463965767434544b776176485a377964506d424e305a5238766d586971307475726d646e32534d7047464744656f4d632f6171686f7242734339642b42483832513050436c41774c334c455555474f5759786e594b4f72494e2f35644e354d2b61726448572f7179486d376966794f574c3663612b58483143516e5361764679693844724e664d50713558496877424c4d46736b4d6152596e68665673565a4a64556c746559305459457634423135554261426550377a5161576d37617948484d68396b5545304e52457238363366555632662f374c52302b5a6a7830345445574436503637703761617a37773978584d514f5267574e42746c43717546594f673161744a58336e37336e466d71792f45345568474b68684e6767496d4155794c382b73336252784d61656464366e32455247443073334341396532744a684a55786642486e4e736d5330656b77465a6861366b726d4c76514c613464396c5567726d414f74695a486f6571476c514f445377646869436f726e656255747a312b2f615349736267673649537178594c476555496f7131384e52715667796d587373577a453255345a396f7377717859694c42553661397634507864657251514141414145414141414241454a4178704157587738383951674c42414141414141417954564b49414141414144564b387a582f2b7a2f31514c63417538414141414a4141494141414141414142346e474e675a4742674b6669336d30476561652f2f4e777767774d6941437467426847774641414141414146374141414265774141416f494143514a4e2f2b774376662f784170594143674a4f41416f4141414147414177417a674865416f51444c675071654a786a594752675947426e324d3741784141436a474353697748495a5577454d51455667774578414142346e4a56527a5772625142442b316e4653437133707261576e6f61656b7850727830546f46327748527842696e354b346f6979796953474b6c32506a534a38674c354333364444333049666f5966594a2b58692f426d4a52534c6276377a637733332b794d414c7a445479687376346837697858396b634d64764d495868772f7743584f48752f694131754644764d576a773064346a796548652f694d37387853336465306c766a6c73494b6f6d634d643946547438414847367076445851547168384f482b4b682b4f337745722f50473452362b646f616a716c366250467530637079657943414941376c5a79336c56746a4c4f5332314f4a5335545438364b5169797445614d62625a62363170747063352b556d737a4c784e78704d39665a51354759304175434d42724830336e307a4e67532b6f36786e796a4f6636314e6b31656c5749572f35433761746837362f6d7131387049365352666171307a6d46336d71793059332f6b55386d6b79764a76324246324345436a58574d4d69525963463543343652346f5433414146436273454e47594a7a636b764c474a4e64516a50726c465a4d6e4d496a4f6b50424a5474716a6255303777313779664f577a4a6d31377046596c61336d4a5332444f78755a38387a77514b324e4c325247594e385373584b4d4b65505243787137437630396a5839566c44332b7466553237475054732b793834662f71626d625163734a442b467772757a784761753655555532724969396a7447433131476f32646d492b4c746a7443424e32664d577a7a7a2f43562f7742334b696b477742346e474e675a6743442f35735a6a426b77415473414c4c4142384c67422f345777424930412920666f726d61742822776f666622293b20666f6e742d7765696768743a6e6f726d616c3b666f6e742d7374796c653a6e6f726d616c3b7d3c2f7374796c653e3c2f646566733e3c636972636c652063783d22323030222063793d223230302220723d22313730222066696c6c3d2223",
                                  "id": 2638,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5607:3979:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_0820e98774b1b5883ced868c11578fb4d4a9c405a309bc1d673416acf862b15a",
                                    "typeString": "literal_string \"<defs><style>@font-face{font-family:\"Permanent Marker\";src:url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAr4AA0AAAAAD/gAAQBCAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABMAAAAE8AAABgYbLjY2NtYXAAAAGAAAAAWgAAAVoM5AMpY3Z0IAAAAdwAAAACAAAAAgAVAABmcGdtAAAB4AAAAPcAAAFhkkHa+mdseWYAAALYAAAFogAAB9S42zT5aGVhZAAACHwAAAA2AAAANghIWvtoaGVhAAAItAAAAB0AAAAkBH0BgGhtdHgAAAjUAAAAHAAAABwPZ//6bG9jYQAACPAAAAAQAAAAEAUYB0JtYXhwAAAJAAAAAB4AAAAgAhQCGW5hbWUAAAkgAAABuwAAA1RQW8M9cG9zdAAACtwAAAAUAAAAIP+2ADpwcmVwAAAK8AAAAAcAAAAHaAaMhXicY2BhMmacwMDKwMC0h6mLgYGhB0Iz3mUwZgRymRhgoIGBQV2AAQFcPP2CGBwYFBiCmfL+H2awZSlgdAUKgzQxMBUyfQNSCgwMAE76DFAAeJxjYGBgZoBgGQZGBhAIAfIYwXwWBgsgzcXAwcAEhAoMbgx+DMH//wPFFBhcgeyg////P/y/9/+2/5uheqGAkY2BIGAkrISBgYkZymABYlYiTB08AAC6og4SAAAAFQAAeJxdkD1OxDAQhWMSFnIDJAvJI2spVrboqVI4kVCasKHwNPxIuxLZOyCloXHBWd52KXMxBN4EVkDj8Xuj+fRmkJgaeeP3QrzzID7f4C73efr4YCGMUmXnIJ4sTgzEiixSoyqky2rtNaugwu0mqEq9PG+QLacaG9vA1wpJ67v43ntCwfL43TLfWGQHTDZhAkfA7huwmwBx/sPi1NQK6VXj7zx6J1E4lkSqxNh4jE4Ss8XimDHW1+5iTntmsFhZnM+E1qOQSDiEWWlCH4IMcYMfPf7Vg0j+G8VvI16gHETfTJ1ekzwYmjTFhOwsclO3vowRie0X5WBrXAB4nHVVSa8j1RX2ufNUt0bf8vTK03NV+/Haz/0GG7ppN69BCETSCVkECSEWvUDZRELJhh3LREL8g/yN8ANgySqLiA1LdiAQEkp2eTlVhiWusst1zx2/4Zxe71c+0NN3/yX/IN/0/t7r7TfQbOj+QJsDlAe63+Cf9nUfLq/C1XV9c1nBrqmgDB6K0nNZe9J4kEGUYbcPol/RfQXS0+YMGlHLetFFD6Q8wL6N0b2nUtRLDxt4UcmISEkp0ZoTQZVMslylsWLCLdbb8fY3bzy7As6oAiI5A1eXAIQk683VzW6kIp861bcc6NkHD4DpJM0cZ7yo19sJl9zMrV/5bObWu+3Vang7MT7yllMqVH7x6M37NlaT3z57Y6GCjJv1OtVJnCiwJNSnqzJZ1U2RlbEWcWq1ppJyQgjl/bHRSmo1rhKlk4QCY0QKaoNimuDiIkstmOCiMQLEOOWcj16aCSIEOJwmTR3h3klozkqrCOeGZB0Hd9/d/Yd8TX7ofXbkABEvEWUEDe961zYt6qYlBy5gv7tu6iewewLHON6Xu/0On08g7K4u25EVTCFIDzHUi+XC4ybxCgJbpCjxd3oc+whkKdu+OCQmTY0RpKbrVS8XXXe8S1Esi/alH46hbhvdbpq6Xfe8mhGajyZRzC03iLESwIjgggoWa84Vd4IwSogBU27LcjtQuZKOpkn1/HFfOHGdmkRyRZWVwssoilT1uz88O1ERFcg4APRRB5ywogmTl6aNtgJ1gwOAXgiTpyrTg1kS1pllxBRaMIKCAQ0taYazECexwn05qhg3DPkj7Mv0MBmMU40UKcYSZYPVnnPAxVAZynHlUJuRcBExAhsSISkQJpgKHPcz47HkkqhB6VABIKPcCg5MYasVw4VhMY5H/qWGBAVuaGTNy4rijrpzSAkgKHaVkcwIKC+YoFmZnyj0AaFgBIa8Xl6Uynf6+PHuf+Qr8m3vr6gPdJcIZS0kuvM6XB3lUtES/VaBKDDSBE9KZB2fEMqjg7EDkozu87T8heIGfYuz4QyeLj39p2EiznF/3ulyWqYaZc/lydNXX51Obs6n6FGCAHE8AWeKMySUtqQS+cLNNNU20lplwzDI/IAJIZ2lzijQgefBcYL/eDqarucPnpXGKKWINfx9NRykCIrCS67ONykDM1SHv33y6WtmfHpRCcYEEiSxi0+iOML1YHSzfzgd/v75hw/tbLH0JO1ntFiVZjAoZHV9uZudPB7F54GhALhToyDd6fuv0CJkOo7RbaRn7v6N+e773p86NBGFq/qAUB2gboHcdYB1Fir7LaoV6SNqxaVsEcSboJF2ZZfGMFc2RyyRDbEhcgNytyGAQbTXBiaofCulkZJzChDFLnZ+yqfbB4fN4OVcxcrnsdcEKGGP33l+T5NqfrKcTpeT2dh6QSUeQRoTmdMP33lhd28RKGAOKhKrEEFjqYhwIIW3o9l0wM/eW/OzP0Kqwmo5z6hNczF9evt4TKwavHZ7ydPmBN0ZR8vmXiq0turmdn2SMpGFGDeoMc/aqhorBsC9d+BH82Q0PClAwL3LEUUGOWYxnYKOrIN/5dN5M+ardHW/qyHm7ifyOWL6ca+XH1CQnSavFyi8DrNfMPq5XIhwBLMFskMaRYnhfVsVZJdUlteY0TYEv4B15UBaBeP7zQaWm7ayHHMh9kUE0NREr863fUV2f/7LR0+Zjx04TEWD6P67p7aaz7w9xXMQORgWNBtlCquFYOg1atJX3n73nFmqy/E4UhGKhhNggImAUyL8+s3bRxMaedd6n2ERGD0s3CA9e2tJhJUxfBHnNsmS0ekwFZha6krmLvQLa4d9lUgrmAOtiZHoeqGlQODSwdhiCornebUtz1+/aSIsbgg6ISqxYLGeUIoq18NRqVgymXssWzE2U4Z9oswqxYiLBU6a9v4PxderQQAAAAEAAAABAEJAxpAWXw889QgLBAAAAAAAyTVKIAAAAADVK8zX/+z/1QLcAu8AAAAJAAIAAAAAAAB4nGNgZGBgKfi3m0Geae//NwwgwMiACtgBhGwFAAAAAAF7AAABewAAAoIACQJN/+wCvf/xApYACgJOAAoAAAAGAAwAzgHeAoQDLgPqeJxjYGRgYGBn2M7AxAACjGCSiwHIZUwEMQEVgwExAAB4nJVRzWrbQBD+1nFSCq3praWnoaekxPrx0ToF2wHRxBin5K4oiyyiSGKl2PjSJ8gL5C36DD30IfoYfYJ+Xi/BmJRSLbv7zcw33+yMALzDTyhsv4h7ixX9kcMdvMIXhw/wCXOHu/iA1uFDvMWjw0d4jyeHe/iM78xS3de0lvjlsIKomcMd9FTt8AHG6pvDXQTqh8OH+Kh+O3wEr/PG4R6+doajql6bPFu0cpyeyCAIA7lZy3lVtjLOS21OJS5TT86KQiytEaMbbZb61ptpc5+UmszLxNxpM9fZQ5GY0AuCMBrH03n0zNgS+o6xnyjOf61Nk1elWIW/5C7ath76/mq18pI6SRfaq0zmF3mqy0Y3/kU8mkyvJv2BF2CECjXWMMiRYcF5C46R4oT3AAFCbsENGYJzckvLGJNdQjPrlFZMnMIjOkPBJTtqjbU07w17yfOWzJm17pFYla3mJS2DOxuZ88zwQK2NL2RGYN8SsXKMKePRCxq7Cv09jX9VlD3+tfU27GPTs+y84f/qbmbQcsJD+FwruzxGau6UUU2rIi9jtGC11Go2dmI+LtjtCBN2fMWzzz/CV/wB3KikGwB4nGNgZgCD/5sZjBkwATsALLAB8LgB/4WwBI0A) format(\"woff\"); font-weight:normal;font-style:normal;}</style></defs><circle cx=\"200\" cy=\"200\" r=\"170\" fill=\"#\""
                                  },
                                  "value": "<defs><style>@font-face{font-family:\"Permanent Marker\";src:url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAr4AA0AAAAAD/gAAQBCAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABMAAAAE8AAABgYbLjY2NtYXAAAAGAAAAAWgAAAVoM5AMpY3Z0IAAAAdwAAAACAAAAAgAVAABmcGdtAAAB4AAAAPcAAAFhkkHa+mdseWYAAALYAAAFogAAB9S42zT5aGVhZAAACHwAAAA2AAAANghIWvtoaGVhAAAItAAAAB0AAAAkBH0BgGhtdHgAAAjUAAAAHAAAABwPZ//6bG9jYQAACPAAAAAQAAAAEAUYB0JtYXhwAAAJAAAAAB4AAAAgAhQCGW5hbWUAAAkgAAABuwAAA1RQW8M9cG9zdAAACtwAAAAUAAAAIP+2ADpwcmVwAAAK8AAAAAcAAAAHaAaMhXicY2BhMmacwMDKwMC0h6mLgYGhB0Iz3mUwZgRymRhgoIGBQV2AAQFcPP2CGBwYFBiCmfL+H2awZSlgdAUKgzQxMBUyfQNSCgwMAE76DFAAeJxjYGBgZoBgGQZGBhAIAfIYwXwWBgsgzcXAwcAEhAoMbgx+DMH//wPFFBhcgeyg////P/y/9/+2/5uheqGAkY2BIGAkrISBgYkZymABYlYiTB08AAC6og4SAAAAFQAAeJxdkD1OxDAQhWMSFnIDJAvJI2spVrboqVI4kVCasKHwNPxIuxLZOyCloXHBWd52KXMxBN4EVkDj8Xuj+fRmkJgaeeP3QrzzID7f4C73efr4YCGMUmXnIJ4sTgzEiixSoyqky2rtNaugwu0mqEq9PG+QLacaG9vA1wpJ67v43ntCwfL43TLfWGQHTDZhAkfA7huwmwBx/sPi1NQK6VXj7zx6J1E4lkSqxNh4jE4Ss8XimDHW1+5iTntmsFhZnM+E1qOQSDiEWWlCH4IMcYMfPf7Vg0j+G8VvI16gHETfTJ1ekzwYmjTFhOwsclO3vowRie0X5WBrXAB4nHVVSa8j1RX2ufNUt0bf8vTK03NV+/Haz/0GG7ppN69BCETSCVkECSEWvUDZRELJhh3LREL8g/yN8ANgySqLiA1LdiAQEkp2eTlVhiWusst1zx2/4Zxe71c+0NN3/yX/IN/0/t7r7TfQbOj+QJsDlAe63+Cf9nUfLq/C1XV9c1nBrqmgDB6K0nNZe9J4kEGUYbcPol/RfQXS0+YMGlHLetFFD6Q8wL6N0b2nUtRLDxt4UcmISEkp0ZoTQZVMslylsWLCLdbb8fY3bzy7As6oAiI5A1eXAIQk683VzW6kIp861bcc6NkHD4DpJM0cZ7yo19sJl9zMrV/5bObWu+3Vang7MT7yllMqVH7x6M37NlaT3z57Y6GCjJv1OtVJnCiwJNSnqzJZ1U2RlbEWcWq1ppJyQgjl/bHRSmo1rhKlk4QCY0QKaoNimuDiIkstmOCiMQLEOOWcj16aCSIEOJwmTR3h3klozkqrCOeGZB0Hd9/d/Yd8TX7ofXbkABEvEWUEDe961zYt6qYlBy5gv7tu6iewewLHON6Xu/0On08g7K4u25EVTCFIDzHUi+XC4ybxCgJbpCjxd3oc+whkKdu+OCQmTY0RpKbrVS8XXXe8S1Esi/alH46hbhvdbpq6Xfe8mhGajyZRzC03iLESwIjgggoWa84Vd4IwSogBU27LcjtQuZKOpkn1/HFfOHGdmkRyRZWVwssoilT1uz88O1ERFcg4APRRB5ywogmTl6aNtgJ1gwOAXgiTpyrTg1kS1pllxBRaMIKCAQ0taYazECexwn05qhg3DPkj7Mv0MBmMU40UKcYSZYPVnnPAxVAZynHlUJuRcBExAhsSISkQJpgKHPcz47HkkqhB6VABIKPcCg5MYasVw4VhMY5H/qWGBAVuaGTNy4rijrpzSAkgKHaVkcwIKC+YoFmZnyj0AaFgBIa8Xl6Uynf6+PHuf+Qr8m3vr6gPdJcIZS0kuvM6XB3lUtES/VaBKDDSBE9KZB2fEMqjg7EDkozu87T8heIGfYuz4QyeLj39p2EiznF/3ulyWqYaZc/lydNXX51Obs6n6FGCAHE8AWeKMySUtqQS+cLNNNU20lplwzDI/IAJIZ2lzijQgefBcYL/eDqarucPnpXGKKWINfx9NRykCIrCS67ONykDM1SHv33y6WtmfHpRCcYEEiSxi0+iOML1YHSzfzgd/v75hw/tbLH0JO1ntFiVZjAoZHV9uZudPB7F54GhALhToyDd6fuv0CJkOo7RbaRn7v6N+e773p86NBGFq/qAUB2gboHcdYB1Fir7LaoV6SNqxaVsEcSboJF2ZZfGMFc2RyyRDbEhcgNytyGAQbTXBiaofCulkZJzChDFLnZ+yqfbB4fN4OVcxcrnsdcEKGGP33l+T5NqfrKcTpeT2dh6QSUeQRoTmdMP33lhd28RKGAOKhKrEEFjqYhwIIW3o9l0wM/eW/OzP0Kqwmo5z6hNczF9evt4TKwavHZ7ydPmBN0ZR8vmXiq0turmdn2SMpGFGDeoMc/aqhorBsC9d+BH82Q0PClAwL3LEUUGOWYxnYKOrIN/5dN5M+ardHW/qyHm7ifyOWL6ca+XH1CQnSavFyi8DrNfMPq5XIhwBLMFskMaRYnhfVsVZJdUlteY0TYEv4B15UBaBeP7zQaWm7ayHHMh9kUE0NREr863fUV2f/7LR0+Zjx04TEWD6P67p7aaz7w9xXMQORgWNBtlCquFYOg1atJX3n73nFmqy/E4UhGKhhNggImAUyL8+s3bRxMaedd6n2ERGD0s3CA9e2tJhJUxfBHnNsmS0ekwFZha6krmLvQLa4d9lUgrmAOtiZHoeqGlQODSwdhiCornebUtz1+/aSIsbgg6ISqxYLGeUIoq18NRqVgymXssWzE2U4Z9oswqxYiLBU6a9v4PxderQQAAAAEAAAABAEJAxpAWXw889QgLBAAAAAAAyTVKIAAAAADVK8zX/+z/1QLcAu8AAAAJAAIAAAAAAAB4nGNgZGBgKfi3m0Geae//NwwgwMiACtgBhGwFAAAAAAF7AAABewAAAoIACQJN/+wCvf/xApYACgJOAAoAAAAGAAwAzgHeAoQDLgPqeJxjYGRgYGBn2M7AxAACjGCSiwHIZUwEMQEVgwExAAB4nJVRzWrbQBD+1nFSCq3praWnoaekxPrx0ToF2wHRxBin5K4oiyyiSGKl2PjSJ8gL5C36DD30IfoYfYJ+Xi/BmJRSLbv7zcw33+yMALzDTyhsv4h7ixX9kcMdvMIXhw/wCXOHu/iA1uFDvMWjw0d4jyeHe/iM78xS3de0lvjlsIKomcMd9FTt8AHG6pvDXQTqh8OH+Kh+O3wEr/PG4R6+doajql6bPFu0cpyeyCAIA7lZy3lVtjLOS21OJS5TT86KQiytEaMbbZb61ptpc5+UmszLxNxpM9fZQ5GY0AuCMBrH03n0zNgS+o6xnyjOf61Nk1elWIW/5C7ath76/mq18pI6SRfaq0zmF3mqy0Y3/kU8mkyvJv2BF2CECjXWMMiRYcF5C46R4oT3AAFCbsENGYJzckvLGJNdQjPrlFZMnMIjOkPBJTtqjbU07w17yfOWzJm17pFYla3mJS2DOxuZ88zwQK2NL2RGYN8SsXKMKePRCxq7Cv09jX9VlD3+tfU27GPTs+y84f/qbmbQcsJD+FwruzxGau6UUU2rIi9jtGC11Go2dmI+LtjtCBN2fMWzzz/CV/wB3KikGwB4nGNgZgCD/5sZjBkwATsALLAB8LgB/4WwBI0A) format(\"woff\"); font-weight:normal;font-style:normal;}</style></defs><circle cx=\"200\" cy=\"200\" r=\"170\" fill=\"#"
                                },
                                {
                                  "id": 2639,
                                  "name": "poolColor",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2616,
                                  "src": "9596:9:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "222f3e2c3c67207472616e73666f726d3d226d6174726978282e373037313037202d2e3730373130363738202e3730373130363738202e373037313037203136203135332922207374726f6b653d226e6f6e65222066696c6c2d72756c653d226e6f6e7a65726f223e3c7061746820643d224d3139362e32353132203233332e35353563382e33303039203020392e383236332d362e3939313320382e313337322d31322e32342d312e363335312d352e303931352d362e353338382d392e323034312d31362e313435362d31332e343334322d31382e363531342d382e313836372d34342e393132342d31352e333733372d34342e393132342d31372e383831337331312e323539352d2e3636352032352e3935322d332e343635396331312e313530342d322e313334322031322e3230342d362e343433342031332e363231352d31332e3932343720312e363839312d382e383531362d342e303638392d31352e353439332d342e303638392d31352e3534393373392e383938382d332e3931373820392e383938382d31362e3039392d31312e343035372d31372e363435332d31312e343035372d31372e3634353320342e363636382d332e3037343720352e3836362d31302e3234323563312e343839342d382e383331392d342e343836352d31362e363636322d31322e363034352d32322e353231392d362e383436372d342e393335322d31352e353237392d392e333631342d32312e393734312d31322e303434362d352e353339332d322e333130322d392e363939342d332e3933362d32332e333031392d332e373630322d31302e393531372e313337322d31362e333038312d2e323135332d31372e3134342d332e393935312d2e363335362d322e3832303220312e363334372d352e3733383220332e3930342d31322e3832373520322e383135372d382e373333392031302e303434312d33312e3235362d332e303837342d35312e333530332d352e303438312d372e373135352d31382e313234352d372e3539382d32302e373735362d342e393134382d352e3034393720352e3131303820312e353235332031352e333333382d312e39382033332e3634352d322e343135312031322e363332312d352e333231342032312e3234392d31372e323136342033302e393832342d362e3836363120352e363230372d32322e303835342031342e3936332d33332e383335362033302e363239372d342e3335383720352e373937392d31372e3934323820342e373030342d32352e3533343820332e353635322d332e3033322d2e343530372d352e3838343120312e373232372d362e3438333120342e393733392d362e303330312033322e333932322d312e393433332036362e323533342e303930352037392e333136352e3439313120332e3137323620332e3134323320352e3432343520362e3132303820352e3138393520362e373733372d2e353038362031382e323532362d312e323932352032312e383131392d2e3836313120372e313733382e383631312032312e393338392031322e343535322034322e313639382031382e363233392031372e3936313520352e343833382034332e353135352031302e353535392035342e393338372031312e323431337335392e383431312031342e353930332036372e393538382031342e353930337a222066696c6c3d2223666663613238222f3e3c7061746820643d224d3133312e323135392037342e373836762e3331343163362e393536362e303139322031332e3232313920372e303530322031322e393637372031342e353531322d2e333120382e373333362d31312e363233342031322e333138362d372e333138382032342e363735362e3837303620322e353235312031312e3435393720362e3639373620382e383631362031392e323531322d322e313234342031302e323832372d31302e3036313420392e353536322d31302e303631342031342e37303731203020382e3733353920392e343632342031342e353730342031302e313334352032342e35313937732d342e303637372031312e353334352d332e373432312031342e39383238632e3233363820322e3534363620312e3237323920332e3436353220312e3237323920322e3139343120302d322e353038322031312e323539342d2e363636362032352e3935312d332e343637352031312e313531342d322e313334322031322e323034392d362e343433342031332e363232342d31332e3932353220312e363839312d382e383531312d342e303639352d31352e353438382d342e303639352d31352e3534383873392e383939352d332e3931383320392e383939352d31362e303937392d31312e343035372d31372e363436392d31312e343035372d31372e3634363920342e363636372d332e3037343320352e383634372d31302e32343263312e343930362d382e383331392d342e343835362d31362e363636322d31322e363033372d32322e353232312d362e383436392d342e393335312d31352e353237342d392e333631382d32312e393733372d31322e303432392d342e3633322d312e39342d382e333337362d332e333838342d31372e333939342d332e373032357a222066696c6c3d2223666662333030222f3e3c7061746820643d224d3133352e33303232203135302e39333034632d2e313633362d342e313332382e3039312d352e3236383220322e313037312d352e3831373373352e373032382e3939393820352e373032382e393939386331342e383535332d312e333532342033302e3839323820322e303535322033352e373430382031302e39323737203020302d32332e3630392d312e383630372d33322e343732332d312e333532332d362e393534392e343132322d31302e383738312e343839322d31312e303738342d342e373537397a6d34322e303433332d32372e36313435632d31342e353130342d352e343634372d33312e343733372d362e343433322d33362e3438362d362e343433322d372e3131393320302d352e373536382d31312e363732372d322e373234342d31332e3836353820322e303838392d2e3932303320342e3535383120322e3331303620362e3530313520332e3037343820352e3737353920322e323930382033302e3138343120332e373430372033322e373038392031372e323334327a6d2e39323633203130392e35393339632d32362e363432332d352e303931342d36322e3134382d31352e313937382d39302e333334382d31392e313134362d32302e373339332d322e3837382d33322e333435322d31312e353334362d34312e303830312d31362e3339322d342e393232332d322e373431372d382e383038392d342e393134372d31322e3731332d352e393732322d31302e333334342d322e383230352d31382e323839312d312e323334372d32342e373335362d312e34383973372e373534322d31302e303237352032362e343937322d362e3035323363342e3735382e3939393820392e3133353320332e373430392031342e3235363820362e3539393920382e3832363220342e393136312031392e363134332031322e3234312033392e333139332031352e373036342031312e3034313720312e393539312032372e3830343820332e393536362034332e3535303520382e323235312031322e3432323720332e33352034362e393635332031352e323137382035382e393837342031362e3830353120362e313537342e383232372031312e3538372d2e393830352031312e3630362d2e39383035203020302d312e3033363120322e363634312d352e3233303920342e303134392d342e3436373920312e34352d392e373136372e363436372d32302e313232382d312e333530387a6d2d36322e303735332d3135382e333031632d332e373737312e353837352d31312e3938362d322e303535322d382e353732342d31302e39343720352e383132322d31352e3131393420362e323834332d32302e3334373220362e303437362d33352e353435372d2e313831322d31302e383839342d332e333035322d31382e323332322d352e363437342d32322e36373831203020302031382e383531362031332e3730393420392e333136322035362e353430342d312e3339383220362e323237362d312e3134342031322e363330342d312e3134342031322e363330347a6d36312e30353836203130392e31343431732d342e3238353420322e383339332d31302e3036313420352e30313432632d352e3739333420322e313732372d31352e3431393520332e393935312d31392e32333320342e30313433732d382e3335352d342e333238342d352e303834372d352e3935343263332e323531312d312e363034342033342e333739312d332e303734332033342e333739312d332e303734337a222066696c6c3d2223656461363030222f3e3c2f673e",
                                  "id": 2640,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9613:3267:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_8f11e118fffaa6266eedbccfbfc0839b2a8324d56074ef7004803d5cc01ccac4",
                                    "typeString": "literal_string \"\"/>,<g transform=\"matrix(.707107 -.70710678 .70710678 .707107 16 153)\" stroke=\"none\" fill-rule=\"nonzero\"><path d=\"M196.2512 233.555c8.3009 0 9.8263-6.9913 8.1372-12.24-1.6351-5.0915-6.5388-9.2041-16.1456-13.4342-18.6514-8.1867-44.9124-15.3737-44.9124-17.8813s11.2595-.665 25.952-3.4659c11.1504-2.1342 12.204-6.4434 13.6215-13.9247 1.6891-8.8516-4.0689-15.5493-4.0689-15.5493s9.8988-3.9178 9.8988-16.099-11.4057-17.6453-11.4057-17.6453 4.6668-3.0747 5.866-10.2425c1.4894-8.8319-4.4865-16.6662-12.6045-22.5219-6.8467-4.9352-15.5279-9.3614-21.9741-12.0446-5.5393-2.3102-9.6994-3.936-23.3019-3.7602-10.9517.1372-16.3081-.2153-17.144-3.9951-.6356-2.8202 1.6347-5.7382 3.904-12.8275 2.8157-8.7339 10.0441-31.256-3.0874-51.3503-5.0481-7.7155-18.1245-7.598-20.7756-4.9148-5.0497 5.1108 1.5253 15.3338-1.98 33.645-2.4151 12.6321-5.3214 21.249-17.2164 30.9824-6.8661 5.6207-22.0854 14.963-33.8356 30.6297-4.3587 5.7979-17.9428 4.7004-25.5348 3.5652-3.032-.4507-5.8841 1.7227-6.4831 4.9739-6.0301 32.3922-1.9433 66.2534.0905 79.3165.4911 3.1726 3.1423 5.4245 6.1208 5.1895 6.7737-.5086 18.2526-1.2925 21.8119-.8611 7.1738.8611 21.9389 12.4552 42.1698 18.6239 17.9615 5.4838 43.5155 10.5559 54.9387 11.2413s59.8411 14.5903 67.9588 14.5903z\" fill=\"#ffca28\"/><path d=\"M131.2159 74.786v.3141c6.9566.0192 13.2219 7.0502 12.9677 14.5512-.31 8.7336-11.6234 12.3186-7.3188 24.6756.8706 2.5251 11.4597 6.6976 8.8616 19.2512-2.1244 10.2827-10.0614 9.5562-10.0614 14.7071 0 8.7359 9.4624 14.5704 10.1345 24.5197s-4.0677 11.5345-3.7421 14.9828c.2368 2.5466 1.2729 3.4652 1.2729 2.1941 0-2.5082 11.2594-.6666 25.951-3.4675 11.1514-2.1342 12.2049-6.4434 13.6224-13.9252 1.6891-8.8511-4.0695-15.5488-4.0695-15.5488s9.8995-3.9183 9.8995-16.0979-11.4057-17.6469-11.4057-17.6469 4.6667-3.0743 5.8647-10.242c1.4906-8.8319-4.4856-16.6662-12.6037-22.5221-6.8469-4.9351-15.5274-9.3618-21.9737-12.0429-4.632-1.94-8.3376-3.3884-17.3994-3.7025z\" fill=\"#ffb300\"/><path d=\"M135.3022 150.9304c-.1636-4.1328.091-5.2682 2.1071-5.8173s5.7028.9998 5.7028.9998c14.8553-1.3524 30.8928 2.0552 35.7408 10.9277 0 0-23.609-1.8607-32.4723-1.3523-6.9549.4122-10.8781.4892-11.0784-4.7579zm42.0433-27.6145c-14.5104-5.4647-31.4737-6.4432-36.486-6.4432-7.1193 0-5.7568-11.6727-2.7244-13.8658 2.0889-.9203 4.5581 2.3106 6.5015 3.0748 5.7759 2.2908 30.1841 3.7407 32.7089 17.2342zm.9263 109.5939c-26.6423-5.0914-62.148-15.1978-90.3348-19.1146-20.7393-2.878-32.3452-11.5346-41.0801-16.392-4.9223-2.7417-8.8089-4.9147-12.713-5.9722-10.3344-2.8205-18.2891-1.2347-24.7356-1.489s7.7542-10.0275 26.4972-6.0523c4.758.9998 9.1353 3.7409 14.2568 6.5999 8.8262 4.9161 19.6143 12.241 39.3193 15.7064 11.0417 1.9591 27.8048 3.9566 43.5505 8.2251 12.4227 3.35 46.9653 15.2178 58.9874 16.8051 6.1574.8227 11.587-.9805 11.606-.9805 0 0-1.0361 2.6641-5.2309 4.0149-4.4679 1.45-9.7167.6467-20.1228-1.3508zm-62.0753-158.301c-3.7771.5875-11.986-2.0552-8.5724-10.947 5.8122-15.1194 6.2843-20.3472 6.0476-35.5457-.1812-10.8894-3.3052-18.2322-5.6474-22.6781 0 0 18.8516 13.7094 9.3162 56.5404-1.3982 6.2276-1.144 12.6304-1.144 12.6304zm61.0586 109.1441s-4.2854 2.8393-10.0614 5.0142c-5.7934 2.1727-15.4195 3.9951-19.233 4.0143s-8.355-4.3284-5.0847-5.9542c3.2511-1.6044 34.3791-3.0743 34.3791-3.0743z\" fill=\"#eda600\"/></g>\""
                                  },
                                  "value": "\"/>,<g transform=\"matrix(.707107 -.70710678 .70710678 .707107 16 153)\" stroke=\"none\" fill-rule=\"nonzero\"><path d=\"M196.2512 233.555c8.3009 0 9.8263-6.9913 8.1372-12.24-1.6351-5.0915-6.5388-9.2041-16.1456-13.4342-18.6514-8.1867-44.9124-15.3737-44.9124-17.8813s11.2595-.665 25.952-3.4659c11.1504-2.1342 12.204-6.4434 13.6215-13.9247 1.6891-8.8516-4.0689-15.5493-4.0689-15.5493s9.8988-3.9178 9.8988-16.099-11.4057-17.6453-11.4057-17.6453 4.6668-3.0747 5.866-10.2425c1.4894-8.8319-4.4865-16.6662-12.6045-22.5219-6.8467-4.9352-15.5279-9.3614-21.9741-12.0446-5.5393-2.3102-9.6994-3.936-23.3019-3.7602-10.9517.1372-16.3081-.2153-17.144-3.9951-.6356-2.8202 1.6347-5.7382 3.904-12.8275 2.8157-8.7339 10.0441-31.256-3.0874-51.3503-5.0481-7.7155-18.1245-7.598-20.7756-4.9148-5.0497 5.1108 1.5253 15.3338-1.98 33.645-2.4151 12.6321-5.3214 21.249-17.2164 30.9824-6.8661 5.6207-22.0854 14.963-33.8356 30.6297-4.3587 5.7979-17.9428 4.7004-25.5348 3.5652-3.032-.4507-5.8841 1.7227-6.4831 4.9739-6.0301 32.3922-1.9433 66.2534.0905 79.3165.4911 3.1726 3.1423 5.4245 6.1208 5.1895 6.7737-.5086 18.2526-1.2925 21.8119-.8611 7.1738.8611 21.9389 12.4552 42.1698 18.6239 17.9615 5.4838 43.5155 10.5559 54.9387 11.2413s59.8411 14.5903 67.9588 14.5903z\" fill=\"#ffca28\"/><path d=\"M131.2159 74.786v.3141c6.9566.0192 13.2219 7.0502 12.9677 14.5512-.31 8.7336-11.6234 12.3186-7.3188 24.6756.8706 2.5251 11.4597 6.6976 8.8616 19.2512-2.1244 10.2827-10.0614 9.5562-10.0614 14.7071 0 8.7359 9.4624 14.5704 10.1345 24.5197s-4.0677 11.5345-3.7421 14.9828c.2368 2.5466 1.2729 3.4652 1.2729 2.1941 0-2.5082 11.2594-.6666 25.951-3.4675 11.1514-2.1342 12.2049-6.4434 13.6224-13.9252 1.6891-8.8511-4.0695-15.5488-4.0695-15.5488s9.8995-3.9183 9.8995-16.0979-11.4057-17.6469-11.4057-17.6469 4.6667-3.0743 5.8647-10.242c1.4906-8.8319-4.4856-16.6662-12.6037-22.5221-6.8469-4.9351-15.5274-9.3618-21.9737-12.0429-4.632-1.94-8.3376-3.3884-17.3994-3.7025z\" fill=\"#ffb300\"/><path d=\"M135.3022 150.9304c-.1636-4.1328.091-5.2682 2.1071-5.8173s5.7028.9998 5.7028.9998c14.8553-1.3524 30.8928 2.0552 35.7408 10.9277 0 0-23.609-1.8607-32.4723-1.3523-6.9549.4122-10.8781.4892-11.0784-4.7579zm42.0433-27.6145c-14.5104-5.4647-31.4737-6.4432-36.486-6.4432-7.1193 0-5.7568-11.6727-2.7244-13.8658 2.0889-.9203 4.5581 2.3106 6.5015 3.0748 5.7759 2.2908 30.1841 3.7407 32.7089 17.2342zm.9263 109.5939c-26.6423-5.0914-62.148-15.1978-90.3348-19.1146-20.7393-2.878-32.3452-11.5346-41.0801-16.392-4.9223-2.7417-8.8089-4.9147-12.713-5.9722-10.3344-2.8205-18.2891-1.2347-24.7356-1.489s7.7542-10.0275 26.4972-6.0523c4.758.9998 9.1353 3.7409 14.2568 6.5999 8.8262 4.9161 19.6143 12.241 39.3193 15.7064 11.0417 1.9591 27.8048 3.9566 43.5505 8.2251 12.4227 3.35 46.9653 15.2178 58.9874 16.8051 6.1574.8227 11.587-.9805 11.606-.9805 0 0-1.0361 2.6641-5.2309 4.0149-4.4679 1.45-9.7167.6467-20.1228-1.3508zm-62.0753-158.301c-3.7771.5875-11.986-2.0552-8.5724-10.947 5.8122-15.1194 6.2843-20.3472 6.0476-35.5457-.1812-10.8894-3.3052-18.2322-5.6474-22.6781 0 0 18.8516 13.7094 9.3162 56.5404-1.3982 6.2276-1.144 12.6304-1.144 12.6304zm61.0586 109.1441s-4.2854 2.8393-10.0614 5.0142c-5.7934 2.1727-15.4195 3.9951-19.233 4.0143s-8.355-4.3284-5.0847-5.9542c3.2511-1.6044 34.3791-3.0743 34.3791-3.0743z\" fill=\"#eda600\"/></g>"
                                },
                                {
                                  "hexValue": "3c706f6c79676f6e20706f696e74733d223230302c3335392038302c3232302039382c313935203230302c323536222066696c6c3d2223",
                                  "id": 2641,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "12914:57:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_694256f82ef7790bbfa08638b313ae40691f166d31980cbd69a21b2bc1484269",
                                    "typeString": "literal_string \"<polygon points=\"200,359 80,220 98,195 200,256\" fill=\"#\""
                                  },
                                  "value": "<polygon points=\"200,359 80,220 98,195 200,256\" fill=\"#"
                                },
                                {
                                  "id": 2642,
                                  "name": "poolColor",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2616,
                                  "src": "12981:9:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "222f3e",
                                  "id": 2643,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "12998:5:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_b26240e716d0906f15dfc172fadbe2347b20c889873f9bdb04fd7ee803f7f175",
                                    "typeString": "literal_string \"\"/>\""
                                  },
                                  "value": "\"/>"
                                },
                                {
                                  "hexValue": "3c706f6c79676f6e20706f696e74733d223230302c3335392039382c323135203230302c323736222066696c6c3d222338633863386322202f3e",
                                  "id": 2644,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13011:60:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_ce0bdc2c45e837800b70acd567ff57aa2b142ca7c37d5d4073ca1e4fccee929f",
                                    "typeString": "literal_string \"<polygon points=\"200,359 98,215 200,276\" fill=\"#8c8c8c\" />\""
                                  },
                                  "value": "<polygon points=\"200,359 98,215 200,276\" fill=\"#8c8c8c\" />"
                                },
                                {
                                  "hexValue": "3c706f6c79676f6e20706f696e74733d223230302c333539203330322c323135203230302c323736222066696c6c3d222333633363336222202f3e",
                                  "id": 2645,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13079:61:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_f0054cf28d09e166075d6691c26a3217b7de3d7dece11b692e2224f9d8dd99ee",
                                    "typeString": "literal_string \"<polygon points=\"200,359 302,215 200,276\" fill=\"#3c3c3b\" />\""
                                  },
                                  "value": "<polygon points=\"200,359 302,215 200,276\" fill=\"#3c3c3b\" />"
                                },
                                {
                                  "hexValue": "3c7465787420666f6e742d73697a653d223132322220783d22352220793d223234302220666f6e742d66616d696c793d225065726d616e656e74204d61726b65722220206f7061636974793d222e34222066696c6c3d2223",
                                  "id": 2646,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13167:90:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_e6be56b6c29390c31b0c186086a71783c1fd3cc65b6493cab6c63a8322950337",
                                    "typeString": "literal_string \"<text font-size=\"122\" x=\"5\" y=\"240\" font-family=\"Permanent Marker\"  opacity=\".4\" fill=\"#\""
                                  },
                                  "value": "<text font-size=\"122\" x=\"5\" y=\"240\" font-family=\"Permanent Marker\"  opacity=\".4\" fill=\"#"
                                },
                                {
                                  "id": 2647,
                                  "name": "textColor",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2625,
                                  "src": "13267:9:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "223e4652454e533c2f746578743e",
                                  "id": 2648,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13284:16:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_9a1b4a34549853ec360fbdad76c22c28affcd59f6c91f4fae7015af824de67cd",
                                    "typeString": "literal_string \"\">FRENS</text>\""
                                  },
                                  "value": "\">FRENS</text>"
                                },
                                {
                                  "hexValue": "3c7465787420666f6e742d73697a653d223132322220783d22352220793d223234302220666f6e742d66616d696c793d225065726d616e656e74204d61726b6572222066696c6c3d226e6f6e652220207374726f6b652d77696474683d223222207374726f6b653d2223",
                                  "id": 2649,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13335:108:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_bdf00ba64794e0345b508ae702b52944bd4f997946892e9fa9ae53a01a4cae85",
                                    "typeString": "literal_string \"<text font-size=\"122\" x=\"5\" y=\"240\" font-family=\"Permanent Marker\" fill=\"none\"  stroke-width=\"2\" stroke=\"#\""
                                  },
                                  "value": "<text font-size=\"122\" x=\"5\" y=\"240\" font-family=\"Permanent Marker\" fill=\"none\"  stroke-width=\"2\" stroke=\"#"
                                },
                                {
                                  "id": 2650,
                                  "name": "textColor",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2625,
                                  "src": "13453:9:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "223e4652454e533c2f746578743e3c7465787420666f6e742d73697a653d2235302220746578742d616e63686f723d226d6964646c652220783d223230302220793d22313335222066696c6c3d222346463639423422207374726f6b653d22233030454446352220666f6e742d7765696768743d22426f6c642220666f6e742d66616d696c793d2253616e732d536572696622206f7061636974793d222e38223e",
                                  "id": 2651,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13470:193:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_f3f187c58ab836b744e6eb0272d75c4cc2f30233416729901331dfdea251d09c",
                                    "typeString": "literal_string \"\">FRENS</text><text font-size=\"50\" text-anchor=\"middle\" x=\"200\" y=\"135\" fill=\"#FF69B4\" stroke=\"#00EDF5\" font-weight=\"Bold\" font-family=\"Sans-Serif\" opacity=\".8\">\""
                                  },
                                  "value": "\">FRENS</text><text font-size=\"50\" text-anchor=\"middle\" x=\"200\" y=\"135\" fill=\"#FF69B4\" stroke=\"#00EDF5\" font-weight=\"Bold\" font-family=\"Sans-Serif\" opacity=\".8\">"
                                },
                                {
                                  "id": 2652,
                                  "name": "depositString",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2597,
                                  "src": "13673:13:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "20457468",
                                  "id": 2653,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13688:6:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_b6ee96e7166402c66a60c745b2e54bae2a950cd694d6fc5ed31c4730260033f8",
                                    "typeString": "literal_string \" Eth\""
                                  },
                                  "value": " Eth"
                                },
                                {
                                  "hexValue": "3c2f746578743e",
                                  "id": 2654,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13702:9:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_85c126d4ff13939c5e4159ad4b7ad42f1c8aff9e195f156cf2ab5a8b3ed7c6b5",
                                    "typeString": "literal_string \"</text>\""
                                  },
                                  "value": "</text>"
                                },
                                {
                                  "hexValue": "3c7465787420666f6e742d73697a653d2232352220746578742d616e63686f723d226d6964646c652220783d223230302220793d22333030222066696c6c3d222346463639423422207374726f6b653d22233030454446352220666f6e742d7765696768743d22426f6c642220666f6e742d66616d696c793d2253616e732d536572696622203e",
                                  "id": 2655,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13742:137:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_99245622ad97a8c87b7aa2f41c2ec58e17fa54d446a40f3aaf903677e6bb4901",
                                    "typeString": "literal_string \"<text font-size=\"25\" text-anchor=\"middle\" x=\"200\" y=\"300\" fill=\"#FF69B4\" stroke=\"#00EDF5\" font-weight=\"Bold\" font-family=\"Sans-Serif\" >\""
                                  },
                                  "value": "<text font-size=\"25\" text-anchor=\"middle\" x=\"200\" y=\"300\" fill=\"#FF69B4\" stroke=\"#00EDF5\" font-weight=\"Bold\" font-family=\"Sans-Serif\" >"
                                },
                                {
                                  "id": 2656,
                                  "name": "shareString",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2610,
                                  "src": "13889:11:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "2045746820436c61696d61626c65",
                                  "id": 2657,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13902:16:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_4711da88cba57e20cce02ce3e337560dc265424e96585e3f533e5688b0f9bf32",
                                    "typeString": "literal_string \" Eth Claimable\""
                                  },
                                  "value": " Eth Claimable"
                                },
                                {
                                  "hexValue": "3c2f746578743e",
                                  "id": 2658,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13926:9:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_85c126d4ff13939c5e4159ad4b7ad42f1c8aff9e195f156cf2ab5a8b3ed7c6b5",
                                    "typeString": "literal_string \"</text>\""
                                  },
                                  "value": "</text>"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_0820e98774b1b5883ced868c11578fb4d4a9c405a309bc1d673416acf862b15a",
                                    "typeString": "literal_string \"<defs><style>@font-face{font-family:\"Permanent Marker\";src:url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAr4AA0AAAAAD/gAAQBCAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABMAAAAE8AAABgYbLjY2NtYXAAAAGAAAAAWgAAAVoM5AMpY3Z0IAAAAdwAAAACAAAAAgAVAABmcGdtAAAB4AAAAPcAAAFhkkHa+mdseWYAAALYAAAFogAAB9S42zT5aGVhZAAACHwAAAA2AAAANghIWvtoaGVhAAAItAAAAB0AAAAkBH0BgGhtdHgAAAjUAAAAHAAAABwPZ//6bG9jYQAACPAAAAAQAAAAEAUYB0JtYXhwAAAJAAAAAB4AAAAgAhQCGW5hbWUAAAkgAAABuwAAA1RQW8M9cG9zdAAACtwAAAAUAAAAIP+2ADpwcmVwAAAK8AAAAAcAAAAHaAaMhXicY2BhMmacwMDKwMC0h6mLgYGhB0Iz3mUwZgRymRhgoIGBQV2AAQFcPP2CGBwYFBiCmfL+H2awZSlgdAUKgzQxMBUyfQNSCgwMAE76DFAAeJxjYGBgZoBgGQZGBhAIAfIYwXwWBgsgzcXAwcAEhAoMbgx+DMH//wPFFBhcgeyg////P/y/9/+2/5uheqGAkY2BIGAkrISBgYkZymABYlYiTB08AAC6og4SAAAAFQAAeJxdkD1OxDAQhWMSFnIDJAvJI2spVrboqVI4kVCasKHwNPxIuxLZOyCloXHBWd52KXMxBN4EVkDj8Xuj+fRmkJgaeeP3QrzzID7f4C73efr4YCGMUmXnIJ4sTgzEiixSoyqky2rtNaugwu0mqEq9PG+QLacaG9vA1wpJ67v43ntCwfL43TLfWGQHTDZhAkfA7huwmwBx/sPi1NQK6VXj7zx6J1E4lkSqxNh4jE4Ss8XimDHW1+5iTntmsFhZnM+E1qOQSDiEWWlCH4IMcYMfPf7Vg0j+G8VvI16gHETfTJ1ekzwYmjTFhOwsclO3vowRie0X5WBrXAB4nHVVSa8j1RX2ufNUt0bf8vTK03NV+/Haz/0GG7ppN69BCETSCVkECSEWvUDZRELJhh3LREL8g/yN8ANgySqLiA1LdiAQEkp2eTlVhiWusst1zx2/4Zxe71c+0NN3/yX/IN/0/t7r7TfQbOj+QJsDlAe63+Cf9nUfLq/C1XV9c1nBrqmgDB6K0nNZe9J4kEGUYbcPol/RfQXS0+YMGlHLetFFD6Q8wL6N0b2nUtRLDxt4UcmISEkp0ZoTQZVMslylsWLCLdbb8fY3bzy7As6oAiI5A1eXAIQk683VzW6kIp861bcc6NkHD4DpJM0cZ7yo19sJl9zMrV/5bObWu+3Vang7MT7yllMqVH7x6M37NlaT3z57Y6GCjJv1OtVJnCiwJNSnqzJZ1U2RlbEWcWq1ppJyQgjl/bHRSmo1rhKlk4QCY0QKaoNimuDiIkstmOCiMQLEOOWcj16aCSIEOJwmTR3h3klozkqrCOeGZB0Hd9/d/Yd8TX7ofXbkABEvEWUEDe961zYt6qYlBy5gv7tu6iewewLHON6Xu/0On08g7K4u25EVTCFIDzHUi+XC4ybxCgJbpCjxd3oc+whkKdu+OCQmTY0RpKbrVS8XXXe8S1Esi/alH46hbhvdbpq6Xfe8mhGajyZRzC03iLESwIjgggoWa84Vd4IwSogBU27LcjtQuZKOpkn1/HFfOHGdmkRyRZWVwssoilT1uz88O1ERFcg4APRRB5ywogmTl6aNtgJ1gwOAXgiTpyrTg1kS1pllxBRaMIKCAQ0taYazECexwn05qhg3DPkj7Mv0MBmMU40UKcYSZYPVnnPAxVAZynHlUJuRcBExAhsSISkQJpgKHPcz47HkkqhB6VABIKPcCg5MYasVw4VhMY5H/qWGBAVuaGTNy4rijrpzSAkgKHaVkcwIKC+YoFmZnyj0AaFgBIa8Xl6Uynf6+PHuf+Qr8m3vr6gPdJcIZS0kuvM6XB3lUtES/VaBKDDSBE9KZB2fEMqjg7EDkozu87T8heIGfYuz4QyeLj39p2EiznF/3ulyWqYaZc/lydNXX51Obs6n6FGCAHE8AWeKMySUtqQS+cLNNNU20lplwzDI/IAJIZ2lzijQgefBcYL/eDqarucPnpXGKKWINfx9NRykCIrCS67ONykDM1SHv33y6WtmfHpRCcYEEiSxi0+iOML1YHSzfzgd/v75hw/tbLH0JO1ntFiVZjAoZHV9uZudPB7F54GhALhToyDd6fuv0CJkOo7RbaRn7v6N+e773p86NBGFq/qAUB2gboHcdYB1Fir7LaoV6SNqxaVsEcSboJF2ZZfGMFc2RyyRDbEhcgNytyGAQbTXBiaofCulkZJzChDFLnZ+yqfbB4fN4OVcxcrnsdcEKGGP33l+T5NqfrKcTpeT2dh6QSUeQRoTmdMP33lhd28RKGAOKhKrEEFjqYhwIIW3o9l0wM/eW/OzP0Kqwmo5z6hNczF9evt4TKwavHZ7ydPmBN0ZR8vmXiq0turmdn2SMpGFGDeoMc/aqhorBsC9d+BH82Q0PClAwL3LEUUGOWYxnYKOrIN/5dN5M+ardHW/qyHm7ifyOWL6ca+XH1CQnSavFyi8DrNfMPq5XIhwBLMFskMaRYnhfVsVZJdUlteY0TYEv4B15UBaBeP7zQaWm7ayHHMh9kUE0NREr863fUV2f/7LR0+Zjx04TEWD6P67p7aaz7w9xXMQORgWNBtlCquFYOg1atJX3n73nFmqy/E4UhGKhhNggImAUyL8+s3bRxMaedd6n2ERGD0s3CA9e2tJhJUxfBHnNsmS0ekwFZha6krmLvQLa4d9lUgrmAOtiZHoeqGlQODSwdhiCornebUtz1+/aSIsbgg6ISqxYLGeUIoq18NRqVgymXssWzE2U4Z9oswqxYiLBU6a9v4PxderQQAAAAEAAAABAEJAxpAWXw889QgLBAAAAAAAyTVKIAAAAADVK8zX/+z/1QLcAu8AAAAJAAIAAAAAAAB4nGNgZGBgKfi3m0Geae//NwwgwMiACtgBhGwFAAAAAAF7AAABewAAAoIACQJN/+wCvf/xApYACgJOAAoAAAAGAAwAzgHeAoQDLgPqeJxjYGRgYGBn2M7AxAACjGCSiwHIZUwEMQEVgwExAAB4nJVRzWrbQBD+1nFSCq3praWnoaekxPrx0ToF2wHRxBin5K4oiyyiSGKl2PjSJ8gL5C36DD30IfoYfYJ+Xi/BmJRSLbv7zcw33+yMALzDTyhsv4h7ixX9kcMdvMIXhw/wCXOHu/iA1uFDvMWjw0d4jyeHe/iM78xS3de0lvjlsIKomcMd9FTt8AHG6pvDXQTqh8OH+Kh+O3wEr/PG4R6+doajql6bPFu0cpyeyCAIA7lZy3lVtjLOS21OJS5TT86KQiytEaMbbZb61ptpc5+UmszLxNxpM9fZQ5GY0AuCMBrH03n0zNgS+o6xnyjOf61Nk1elWIW/5C7ath76/mq18pI6SRfaq0zmF3mqy0Y3/kU8mkyvJv2BF2CECjXWMMiRYcF5C46R4oT3AAFCbsENGYJzckvLGJNdQjPrlFZMnMIjOkPBJTtqjbU07w17yfOWzJm17pFYla3mJS2DOxuZ88zwQK2NL2RGYN8SsXKMKePRCxq7Cv09jX9VlD3+tfU27GPTs+y84f/qbmbQcsJD+FwruzxGau6UUU2rIi9jtGC11Go2dmI+LtjtCBN2fMWzzz/CV/wB3KikGwB4nGNgZgCD/5sZjBkwATsALLAB8LgB/4WwBI0A) format(\"woff\"); font-weight:normal;font-style:normal;}</style></defs><circle cx=\"200\" cy=\"200\" r=\"170\" fill=\"#\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_8f11e118fffaa6266eedbccfbfc0839b2a8324d56074ef7004803d5cc01ccac4",
                                    "typeString": "literal_string \"\"/>,<g transform=\"matrix(.707107 -.70710678 .70710678 .707107 16 153)\" stroke=\"none\" fill-rule=\"nonzero\"><path d=\"M196.2512 233.555c8.3009 0 9.8263-6.9913 8.1372-12.24-1.6351-5.0915-6.5388-9.2041-16.1456-13.4342-18.6514-8.1867-44.9124-15.3737-44.9124-17.8813s11.2595-.665 25.952-3.4659c11.1504-2.1342 12.204-6.4434 13.6215-13.9247 1.6891-8.8516-4.0689-15.5493-4.0689-15.5493s9.8988-3.9178 9.8988-16.099-11.4057-17.6453-11.4057-17.6453 4.6668-3.0747 5.866-10.2425c1.4894-8.8319-4.4865-16.6662-12.6045-22.5219-6.8467-4.9352-15.5279-9.3614-21.9741-12.0446-5.5393-2.3102-9.6994-3.936-23.3019-3.7602-10.9517.1372-16.3081-.2153-17.144-3.9951-.6356-2.8202 1.6347-5.7382 3.904-12.8275 2.8157-8.7339 10.0441-31.256-3.0874-51.3503-5.0481-7.7155-18.1245-7.598-20.7756-4.9148-5.0497 5.1108 1.5253 15.3338-1.98 33.645-2.4151 12.6321-5.3214 21.249-17.2164 30.9824-6.8661 5.6207-22.0854 14.963-33.8356 30.6297-4.3587 5.7979-17.9428 4.7004-25.5348 3.5652-3.032-.4507-5.8841 1.7227-6.4831 4.9739-6.0301 32.3922-1.9433 66.2534.0905 79.3165.4911 3.1726 3.1423 5.4245 6.1208 5.1895 6.7737-.5086 18.2526-1.2925 21.8119-.8611 7.1738.8611 21.9389 12.4552 42.1698 18.6239 17.9615 5.4838 43.5155 10.5559 54.9387 11.2413s59.8411 14.5903 67.9588 14.5903z\" fill=\"#ffca28\"/><path d=\"M131.2159 74.786v.3141c6.9566.0192 13.2219 7.0502 12.9677 14.5512-.31 8.7336-11.6234 12.3186-7.3188 24.6756.8706 2.5251 11.4597 6.6976 8.8616 19.2512-2.1244 10.2827-10.0614 9.5562-10.0614 14.7071 0 8.7359 9.4624 14.5704 10.1345 24.5197s-4.0677 11.5345-3.7421 14.9828c.2368 2.5466 1.2729 3.4652 1.2729 2.1941 0-2.5082 11.2594-.6666 25.951-3.4675 11.1514-2.1342 12.2049-6.4434 13.6224-13.9252 1.6891-8.8511-4.0695-15.5488-4.0695-15.5488s9.8995-3.9183 9.8995-16.0979-11.4057-17.6469-11.4057-17.6469 4.6667-3.0743 5.8647-10.242c1.4906-8.8319-4.4856-16.6662-12.6037-22.5221-6.8469-4.9351-15.5274-9.3618-21.9737-12.0429-4.632-1.94-8.3376-3.3884-17.3994-3.7025z\" fill=\"#ffb300\"/><path d=\"M135.3022 150.9304c-.1636-4.1328.091-5.2682 2.1071-5.8173s5.7028.9998 5.7028.9998c14.8553-1.3524 30.8928 2.0552 35.7408 10.9277 0 0-23.609-1.8607-32.4723-1.3523-6.9549.4122-10.8781.4892-11.0784-4.7579zm42.0433-27.6145c-14.5104-5.4647-31.4737-6.4432-36.486-6.4432-7.1193 0-5.7568-11.6727-2.7244-13.8658 2.0889-.9203 4.5581 2.3106 6.5015 3.0748 5.7759 2.2908 30.1841 3.7407 32.7089 17.2342zm.9263 109.5939c-26.6423-5.0914-62.148-15.1978-90.3348-19.1146-20.7393-2.878-32.3452-11.5346-41.0801-16.392-4.9223-2.7417-8.8089-4.9147-12.713-5.9722-10.3344-2.8205-18.2891-1.2347-24.7356-1.489s7.7542-10.0275 26.4972-6.0523c4.758.9998 9.1353 3.7409 14.2568 6.5999 8.8262 4.9161 19.6143 12.241 39.3193 15.7064 11.0417 1.9591 27.8048 3.9566 43.5505 8.2251 12.4227 3.35 46.9653 15.2178 58.9874 16.8051 6.1574.8227 11.587-.9805 11.606-.9805 0 0-1.0361 2.6641-5.2309 4.0149-4.4679 1.45-9.7167.6467-20.1228-1.3508zm-62.0753-158.301c-3.7771.5875-11.986-2.0552-8.5724-10.947 5.8122-15.1194 6.2843-20.3472 6.0476-35.5457-.1812-10.8894-3.3052-18.2322-5.6474-22.6781 0 0 18.8516 13.7094 9.3162 56.5404-1.3982 6.2276-1.144 12.6304-1.144 12.6304zm61.0586 109.1441s-4.2854 2.8393-10.0614 5.0142c-5.7934 2.1727-15.4195 3.9951-19.233 4.0143s-8.355-4.3284-5.0847-5.9542c3.2511-1.6044 34.3791-3.0743 34.3791-3.0743z\" fill=\"#eda600\"/></g>\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_694256f82ef7790bbfa08638b313ae40691f166d31980cbd69a21b2bc1484269",
                                    "typeString": "literal_string \"<polygon points=\"200,359 80,220 98,195 200,256\" fill=\"#\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_b26240e716d0906f15dfc172fadbe2347b20c889873f9bdb04fd7ee803f7f175",
                                    "typeString": "literal_string \"\"/>\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_ce0bdc2c45e837800b70acd567ff57aa2b142ca7c37d5d4073ca1e4fccee929f",
                                    "typeString": "literal_string \"<polygon points=\"200,359 98,215 200,276\" fill=\"#8c8c8c\" />\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_f0054cf28d09e166075d6691c26a3217b7de3d7dece11b692e2224f9d8dd99ee",
                                    "typeString": "literal_string \"<polygon points=\"200,359 302,215 200,276\" fill=\"#3c3c3b\" />\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_e6be56b6c29390c31b0c186086a71783c1fd3cc65b6493cab6c63a8322950337",
                                    "typeString": "literal_string \"<text font-size=\"122\" x=\"5\" y=\"240\" font-family=\"Permanent Marker\"  opacity=\".4\" fill=\"#\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_9a1b4a34549853ec360fbdad76c22c28affcd59f6c91f4fae7015af824de67cd",
                                    "typeString": "literal_string \"\">FRENS</text>\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_bdf00ba64794e0345b508ae702b52944bd4f997946892e9fa9ae53a01a4cae85",
                                    "typeString": "literal_string \"<text font-size=\"122\" x=\"5\" y=\"240\" font-family=\"Permanent Marker\" fill=\"none\"  stroke-width=\"2\" stroke=\"#\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_f3f187c58ab836b744e6eb0272d75c4cc2f30233416729901331dfdea251d09c",
                                    "typeString": "literal_string \"\">FRENS</text><text font-size=\"50\" text-anchor=\"middle\" x=\"200\" y=\"135\" fill=\"#FF69B4\" stroke=\"#00EDF5\" font-weight=\"Bold\" font-family=\"Sans-Serif\" opacity=\".8\">\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_b6ee96e7166402c66a60c745b2e54bae2a950cd694d6fc5ed31c4730260033f8",
                                    "typeString": "literal_string \" Eth\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_85c126d4ff13939c5e4159ad4b7ad42f1c8aff9e195f156cf2ab5a8b3ed7c6b5",
                                    "typeString": "literal_string \"</text>\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_99245622ad97a8c87b7aa2f41c2ec58e17fa54d446a40f3aaf903677e6bb4901",
                                    "typeString": "literal_string \"<text font-size=\"25\" text-anchor=\"middle\" x=\"200\" y=\"300\" fill=\"#FF69B4\" stroke=\"#00EDF5\" font-weight=\"Bold\" font-family=\"Sans-Serif\" >\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_4711da88cba57e20cce02ce3e337560dc265424e96585e3f533e5688b0f9bf32",
                                    "typeString": "literal_string \" Eth Claimable\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_85c126d4ff13939c5e4159ad4b7ad42f1c8aff9e195f156cf2ab5a8b3ed7c6b5",
                                    "typeString": "literal_string \"</text>\""
                                  }
                                ],
                                "expression": {
                                  "id": 2636,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "5548:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 2637,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "5552:12:14",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "5548:16:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 2659,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5548:8397:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 2635,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5541:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 2634,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "5541:6:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 2660,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5541:8405:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5518:8428:14"
                      },
                      {
                        "expression": {
                          "id": 2662,
                          "name": "render",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2633,
                          "src": "13960:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 2576,
                        "id": 2663,
                        "nodeType": "Return",
                        "src": "13953:13:14"
                      }
                    ]
                  },
                  "functionSelector": "a2d6c6da",
                  "id": 2665,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "renderTokenById",
                  "nameLocation": "5010:15:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2573,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2572,
                        "mutability": "mutable",
                        "name": "id",
                        "nameLocation": "5034:2:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2665,
                        "src": "5026:10:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2571,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5026:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5025:12:14"
                  },
                  "returnParameters": {
                    "id": 2576,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2575,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2665,
                        "src": "5059:13:14",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2574,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "5059:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5058:15:14"
                  },
                  "scope": 2881,
                  "src": "5001:8970:14",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2744,
                    "nodeType": "Block",
                    "src": "14057:413:14",
                    "statements": [
                      {
                        "assignments": [
                          2673
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2673,
                            "mutability": "mutable",
                            "name": "leftOfDecimal",
                            "nameLocation": "14077:13:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2744,
                            "src": "14063:27:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2672,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "14063:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2679,
                        "initialValue": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2677,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2675,
                                "name": "amountInWei",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2667,
                                "src": "14102:11:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 2676,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "14116:7:14",
                                "subdenomination": "ether",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                  "typeString": "int_const 1000000000000000000"
                                },
                                "value": "1"
                              },
                              "src": "14102:21:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2674,
                            "name": "uint2str",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2880,
                            "src": "14093:8:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (string memory)"
                            }
                          },
                          "id": 2678,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14093:31:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14063:61:14"
                      },
                      {
                        "assignments": [
                          2681
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2681,
                            "mutability": "mutable",
                            "name": "rightOfDecimal",
                            "nameLocation": "14135:14:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2744,
                            "src": "14130:19:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2680,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "14130:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2690,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2689,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2684,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2682,
                                  "name": "amountInWei",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2667,
                                  "src": "14153:11:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "%",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 2683,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "14167:7:14",
                                  "subdenomination": "ether",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                    "typeString": "int_const 1000000000000000000"
                                  },
                                  "value": "1"
                                },
                                "src": "14153:21:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 2685,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "14152:23:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_rational_100000000000000_by_1",
                              "typeString": "int_const 100000000000000"
                            },
                            "id": 2688,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 2686,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "14178:2:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "hexValue": "3134",
                              "id": 2687,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "14182:2:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_14_by_1",
                                "typeString": "int_const 14"
                              },
                              "value": "14"
                            },
                            "src": "14178:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_100000000000000_by_1",
                              "typeString": "int_const 100000000000000"
                            }
                          },
                          "src": "14152:32:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14130:54:14"
                      },
                      {
                        "assignments": [
                          2692
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2692,
                            "mutability": "mutable",
                            "name": "rod",
                            "nameLocation": "14204:3:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2744,
                            "src": "14190:17:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 2691,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "14190:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2696,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2694,
                              "name": "rightOfDecimal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2681,
                              "src": "14219:14:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2693,
                            "name": "uint2str",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2880,
                            "src": "14210:8:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (string memory)"
                            }
                          },
                          "id": 2695,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14210:24:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14190:44:14"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2699,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2697,
                            "name": "rightOfDecimal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2681,
                            "src": "14243:14:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "hexValue": "31303030",
                            "id": 2698,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "14260:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000_by_1",
                              "typeString": "int_const 1000"
                            },
                            "value": "1000"
                          },
                          "src": "14243:21:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2709,
                        "nodeType": "IfStatement",
                        "src": "14240:55:14",
                        "trueBody": {
                          "expression": {
                            "id": 2707,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 2700,
                              "name": "rod",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2692,
                              "src": "14266:3:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 2704,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "14286:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  },
                                  "value": "0"
                                },
                                {
                                  "id": 2705,
                                  "name": "rod",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2692,
                                  "src": "14291:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 2702,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "14272:6:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                    "typeString": "type(string storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 2701,
                                    "name": "string",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "14272:6:14",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 2703,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "14279:6:14",
                                "memberName": "concat",
                                "nodeType": "MemberAccess",
                                "src": "14272:13:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
                                  "typeString": "function () pure returns (string memory)"
                                }
                              },
                              "id": 2706,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "14272:23:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "src": "14266:29:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "id": 2708,
                          "nodeType": "ExpressionStatement",
                          "src": "14266:29:14"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2712,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2710,
                            "name": "rightOfDecimal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2681,
                            "src": "14304:14:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "hexValue": "313030",
                            "id": 2711,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "14321:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_100_by_1",
                              "typeString": "int_const 100"
                            },
                            "value": "100"
                          },
                          "src": "14304:20:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2722,
                        "nodeType": "IfStatement",
                        "src": "14301:54:14",
                        "trueBody": {
                          "expression": {
                            "id": 2720,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 2713,
                              "name": "rod",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2692,
                              "src": "14326:3:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 2717,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "14346:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  },
                                  "value": "0"
                                },
                                {
                                  "id": 2718,
                                  "name": "rod",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2692,
                                  "src": "14351:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 2715,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "14332:6:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                    "typeString": "type(string storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 2714,
                                    "name": "string",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "14332:6:14",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 2716,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "14339:6:14",
                                "memberName": "concat",
                                "nodeType": "MemberAccess",
                                "src": "14332:13:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
                                  "typeString": "function () pure returns (string memory)"
                                }
                              },
                              "id": 2719,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "14332:23:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "src": "14326:29:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "id": 2721,
                          "nodeType": "ExpressionStatement",
                          "src": "14326:29:14"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2725,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2723,
                            "name": "rightOfDecimal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2681,
                            "src": "14364:14:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "hexValue": "3130",
                            "id": 2724,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "14381:2:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            "value": "10"
                          },
                          "src": "14364:19:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2735,
                        "nodeType": "IfStatement",
                        "src": "14361:53:14",
                        "trueBody": {
                          "expression": {
                            "id": 2733,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 2726,
                              "name": "rod",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2692,
                              "src": "14385:3:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 2730,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "14405:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  },
                                  "value": "0"
                                },
                                {
                                  "id": 2731,
                                  "name": "rod",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2692,
                                  "src": "14410:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 2728,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "14391:6:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                    "typeString": "type(string storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 2727,
                                    "name": "string",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "14391:6:14",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 2729,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "14398:6:14",
                                "memberName": "concat",
                                "nodeType": "MemberAccess",
                                "src": "14391:13:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
                                  "typeString": "function () pure returns (string memory)"
                                }
                              },
                              "id": 2732,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "14391:23:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "src": "14385:29:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "id": 2734,
                          "nodeType": "ExpressionStatement",
                          "src": "14385:29:14"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2739,
                              "name": "leftOfDecimal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2673,
                              "src": "14441:13:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "hexValue": "2e",
                              "id": 2740,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "14456:3:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf",
                                "typeString": "literal_string \".\""
                              },
                              "value": "."
                            },
                            {
                              "id": 2741,
                              "name": "rod",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2692,
                              "src": "14461:3:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf",
                                "typeString": "literal_string \".\""
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 2737,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "14427:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                "typeString": "type(string storage pointer)"
                              },
                              "typeName": {
                                "id": 2736,
                                "name": "string",
                                "nodeType": "ElementaryTypeName",
                                "src": "14427:6:14",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 2738,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "14434:6:14",
                            "memberName": "concat",
                            "nodeType": "MemberAccess",
                            "src": "14427:13:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
                              "typeString": "function () pure returns (string memory)"
                            }
                          },
                          "id": 2742,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14427:38:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 2671,
                        "id": 2743,
                        "nodeType": "Return",
                        "src": "14420:45:14"
                      }
                    ]
                  },
                  "functionSelector": "edd148a2",
                  "id": 2745,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getEthDecimalString",
                  "nameLocation": "13985:19:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2668,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2667,
                        "mutability": "mutable",
                        "name": "amountInWei",
                        "nameLocation": "14010:11:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2745,
                        "src": "14005:16:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2666,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "14005:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14004:18:14"
                  },
                  "returnParameters": {
                    "id": 2671,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2670,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2745,
                        "src": "14043:13:14",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2669,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "14043:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14042:15:14"
                  },
                  "scope": 2881,
                  "src": "13976:494:14",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2785,
                    "nodeType": "Block",
                    "src": "14576:251:14",
                    "statements": [
                      {
                        "assignments": [
                          2757
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2757,
                            "mutability": "mutable",
                            "name": "stakingPool",
                            "nameLocation": "14595:11:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2785,
                            "src": "14582:24:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStakingPool_$4120",
                              "typeString": "contract IStakingPool"
                            },
                            "typeName": {
                              "id": 2756,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2755,
                                "name": "IStakingPool",
                                "nameLocations": [
                                  "14582:12:14"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 4120,
                                "src": "14582:12:14"
                              },
                              "referencedDeclaration": 4120,
                              "src": "14582:12:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStakingPool_$4120",
                                "typeString": "contract IStakingPool"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2764,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 2761,
                                  "name": "poolAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2747,
                                  "src": "14630:11:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 2760,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "14622:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                  "typeString": "type(address payable)"
                                },
                                "typeName": {
                                  "id": 2759,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "14622:8:14",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2762,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "14622:20:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "id": 2758,
                            "name": "IStakingPool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4120,
                            "src": "14609:12:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IStakingPool_$4120_$",
                              "typeString": "type(contract IStakingPool)"
                            }
                          },
                          "id": 2763,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14609:34:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IStakingPool_$4120",
                            "typeString": "contract IStakingPool"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14582:61:14"
                      },
                      {
                        "assignments": [
                          2766
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2766,
                            "mutability": "mutable",
                            "name": "poolPubKey",
                            "nameLocation": "14662:10:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2785,
                            "src": "14649:23:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 2765,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "14649:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2770,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 2767,
                              "name": "stakingPool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2757,
                              "src": "14675:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStakingPool_$4120",
                                "typeString": "contract IStakingPool"
                              }
                            },
                            "id": 2768,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "14687:9:14",
                            "memberName": "getPubKey",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4093,
                            "src": "14675:21:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () view external returns (bytes memory)"
                            }
                          },
                          "id": 2769,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14675:23:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14649:49:14"
                      },
                      {
                        "assignments": [
                          2775
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2775,
                            "mutability": "mutable",
                            "name": "poolOperators",
                            "nameLocation": "14720:13:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2785,
                            "src": "14704:29:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                              "typeString": "uint32[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 2773,
                                "name": "uint32",
                                "nodeType": "ElementaryTypeName",
                                "src": "14704:6:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "id": 2774,
                              "nodeType": "ArrayTypeName",
                              "src": "14704:8:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
                                "typeString": "uint32[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2780,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2778,
                              "name": "poolPubKey",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2766,
                              "src": "14772:10:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 2776,
                              "name": "ssvRegistry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2173,
                              "src": "14736:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ISSVRegistry_$4051",
                                "typeString": "contract ISSVRegistry"
                              }
                            },
                            "id": 2777,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "14748:23:14",
                            "memberName": "getOperatorsByValidator",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3991,
                            "src": "14736:35:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes_memory_ptr_$returns$_t_array$_t_uint32_$dyn_memory_ptr_$",
                              "typeString": "function (bytes memory) view external returns (uint32[] memory)"
                            }
                          },
                          "id": 2779,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14736:47:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                            "typeString": "uint32[] memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14704:79:14"
                      },
                      {
                        "expression": {
                          "components": [
                            {
                              "id": 2781,
                              "name": "poolOperators",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2775,
                              "src": "14796:13:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                                "typeString": "uint32[] memory"
                              }
                            },
                            {
                              "id": 2782,
                              "name": "poolPubKey",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2766,
                              "src": "14811:10:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "id": 2783,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "14795:27:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_array$_t_uint32_$dyn_memory_ptr_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(uint32[] memory,bytes memory)"
                          }
                        },
                        "functionReturnParameters": 2754,
                        "id": 2784,
                        "nodeType": "Return",
                        "src": "14789:33:14"
                      }
                    ]
                  },
                  "functionSelector": "a090f9b4",
                  "id": 2786,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getOperatorsForPool",
                  "nameLocation": "14483:19:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2748,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2747,
                        "mutability": "mutable",
                        "name": "poolAddress",
                        "nameLocation": "14511:11:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2786,
                        "src": "14503:19:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2746,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14503:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14502:21:14"
                  },
                  "returnParameters": {
                    "id": 2754,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2751,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2786,
                        "src": "14545:15:14",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                          "typeString": "uint32[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 2749,
                            "name": "uint32",
                            "nodeType": "ElementaryTypeName",
                            "src": "14545:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "id": 2750,
                          "nodeType": "ArrayTypeName",
                          "src": "14545:8:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
                            "typeString": "uint32[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2753,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2786,
                        "src": "14562:12:14",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2752,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "14562:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14544:31:14"
                  },
                  "scope": 2881,
                  "src": "14474:353:14",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2879,
                    "nodeType": "Block",
                    "src": "14911:434:14",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2795,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2793,
                            "name": "_i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2788,
                            "src": "14923:2:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2794,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "14929:1:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "14923:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2799,
                        "nodeType": "IfStatement",
                        "src": "14919:44:14",
                        "trueBody": {
                          "id": 2798,
                          "nodeType": "Block",
                          "src": "14932:31:14",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "30",
                                "id": 2796,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "14951:3:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                  "typeString": "literal_string \"0\""
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 2792,
                              "id": 2797,
                              "nodeType": "Return",
                              "src": "14944:10:14"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          2801
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2801,
                            "mutability": "mutable",
                            "name": "j",
                            "nameLocation": "14975:1:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2879,
                            "src": "14970:6:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2800,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "14970:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2803,
                        "initialValue": {
                          "id": 2802,
                          "name": "_i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2788,
                          "src": "14979:2:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14970:11:14"
                      },
                      {
                        "assignments": [
                          2805
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2805,
                            "mutability": "mutable",
                            "name": "len",
                            "nameLocation": "14994:3:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2879,
                            "src": "14989:8:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2804,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "14989:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2806,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14989:8:14"
                      },
                      {
                        "body": {
                          "id": 2817,
                          "nodeType": "Block",
                          "src": "15020:45:14",
                          "statements": [
                            {
                              "expression": {
                                "id": 2811,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "15032:5:14",
                                "subExpression": {
                                  "id": 2810,
                                  "name": "len",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2805,
                                  "src": "15032:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2812,
                              "nodeType": "ExpressionStatement",
                              "src": "15032:5:14"
                            },
                            {
                              "expression": {
                                "id": 2815,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 2813,
                                  "name": "j",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2801,
                                  "src": "15049:1:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "/=",
                                "rightHandSide": {
                                  "hexValue": "3130",
                                  "id": 2814,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "15054:2:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "src": "15049:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2816,
                              "nodeType": "ExpressionStatement",
                              "src": "15049:7:14"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2809,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2807,
                            "name": "j",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2801,
                            "src": "15012:1:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2808,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15017:1:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "15012:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2818,
                        "nodeType": "WhileStatement",
                        "src": "15005:60:14"
                      },
                      {
                        "assignments": [
                          2820
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2820,
                            "mutability": "mutable",
                            "name": "bstr",
                            "nameLocation": "15085:4:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2879,
                            "src": "15072:17:14",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 2819,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "15072:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2825,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2823,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2805,
                              "src": "15102:3:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2822,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "15092:9:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (bytes memory)"
                            },
                            "typeName": {
                              "id": 2821,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "15096:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            }
                          },
                          "id": 2824,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15092:14:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "15072:34:14"
                      },
                      {
                        "assignments": [
                          2827
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2827,
                            "mutability": "mutable",
                            "name": "k",
                            "nameLocation": "15119:1:14",
                            "nodeType": "VariableDeclaration",
                            "scope": 2879,
                            "src": "15114:6:14",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2826,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "15114:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2829,
                        "initialValue": {
                          "id": 2828,
                          "name": "len",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2805,
                          "src": "15123:3:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "15114:12:14"
                      },
                      {
                        "body": {
                          "id": 2872,
                          "nodeType": "Block",
                          "src": "15150:164:14",
                          "statements": [
                            {
                              "expression": {
                                "id": 2837,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 2833,
                                  "name": "k",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2827,
                                  "src": "15162:1:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2836,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 2834,
                                    "name": "k",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2827,
                                    "src": "15166:1:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "hexValue": "31",
                                    "id": 2835,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "15168:1:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "src": "15166:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "15162:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2838,
                              "nodeType": "ExpressionStatement",
                              "src": "15162:7:14"
                            },
                            {
                              "assignments": [
                                2840
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 2840,
                                  "mutability": "mutable",
                                  "name": "temp",
                                  "nameLocation": "15187:4:14",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 2872,
                                  "src": "15181:10:14",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  },
                                  "typeName": {
                                    "id": 2839,
                                    "name": "uint8",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "15181:5:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 2854,
                              "initialValue": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    "id": 2852,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "hexValue": "3438",
                                      "id": 2841,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "15195:2:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_48_by_1",
                                        "typeString": "int_const 48"
                                      },
                                      "value": "48"
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "arguments": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 2850,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 2844,
                                            "name": "_i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2788,
                                            "src": "15206:2:14",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "-",
                                          "rightExpression": {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 2849,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "commonType": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              },
                                              "id": 2847,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "id": 2845,
                                                "name": "_i",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2788,
                                                "src": "15211:2:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "/",
                                              "rightExpression": {
                                                "hexValue": "3130",
                                                "id": 2846,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "number",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "15216:2:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_rational_10_by_1",
                                                  "typeString": "int_const 10"
                                                },
                                                "value": "10"
                                              },
                                              "src": "15211:7:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "*",
                                            "rightExpression": {
                                              "hexValue": "3130",
                                              "id": 2848,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "15221:2:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_10_by_1",
                                                "typeString": "int_const 10"
                                              },
                                              "value": "10"
                                            },
                                            "src": "15211:12:14",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "15206:17:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 2843,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "15200:5:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_uint8_$",
                                          "typeString": "type(uint8)"
                                        },
                                        "typeName": {
                                          "id": 2842,
                                          "name": "uint8",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "15200:5:14",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 2851,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "15200:24:14",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "src": "15195:29:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  }
                                ],
                                "id": 2853,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "15194:31:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "15181:44:14"
                            },
                            {
                              "assignments": [
                                2856
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 2856,
                                  "mutability": "mutable",
                                  "name": "b1",
                                  "nameLocation": "15244:2:14",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 2872,
                                  "src": "15237:9:14",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  },
                                  "typeName": {
                                    "id": 2855,
                                    "name": "bytes1",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "15237:6:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes1",
                                      "typeString": "bytes1"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 2861,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "id": 2859,
                                    "name": "temp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2840,
                                    "src": "15256:4:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  ],
                                  "id": 2858,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "15249:6:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes1_$",
                                    "typeString": "type(bytes1)"
                                  },
                                  "typeName": {
                                    "id": 2857,
                                    "name": "bytes1",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "15249:6:14",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 2860,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "15249:12:14",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "15237:24:14"
                            },
                            {
                              "expression": {
                                "id": 2866,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 2862,
                                    "name": "bstr",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2820,
                                    "src": "15273:4:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 2864,
                                  "indexExpression": {
                                    "id": 2863,
                                    "name": "k",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2827,
                                    "src": "15278:1:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "15273:7:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 2865,
                                  "name": "b1",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2856,
                                  "src": "15283:2:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "src": "15273:12:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "id": 2867,
                              "nodeType": "ExpressionStatement",
                              "src": "15273:12:14"
                            },
                            {
                              "expression": {
                                "id": 2870,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 2868,
                                  "name": "_i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2788,
                                  "src": "15297:2:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "/=",
                                "rightHandSide": {
                                  "hexValue": "3130",
                                  "id": 2869,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "15303:2:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "src": "15297:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2871,
                              "nodeType": "ExpressionStatement",
                              "src": "15297:8:14"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2832,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2830,
                            "name": "_i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2788,
                            "src": "15141:2:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2831,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15147:1:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "15141:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2873,
                        "nodeType": "WhileStatement",
                        "src": "15134:180:14"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2876,
                              "name": "bstr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2820,
                              "src": "15335:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 2875,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "15328:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 2874,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "15328:6:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 2877,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15328:12:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 2792,
                        "id": 2878,
                        "nodeType": "Return",
                        "src": "15321:19:14"
                      }
                    ]
                  },
                  "id": 2880,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "uint2str",
                  "nameLocation": "14841:8:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2789,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2788,
                        "mutability": "mutable",
                        "name": "_i",
                        "nameLocation": "14855:2:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2880,
                        "src": "14850:7:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2787,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "14850:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14849:9:14"
                  },
                  "returnParameters": {
                    "id": 2792,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2791,
                        "mutability": "mutable",
                        "name": "_uintAsString",
                        "nameLocation": "14896:13:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 2880,
                        "src": "14882:27:14",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2790,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "14882:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14881:29:14"
                  },
                  "scope": 2881,
                  "src": "14832:513:14",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 2882,
              "src": "466:14881:14",
              "usedErrors": []
            }
          ],
          "src": "32:15316:14"
        },
        "id": 14
      },
      "contracts/StakingPool.sol": {
        "ast": {
          "absolutePath": "contracts/StakingPool.sol",
          "exportedSymbols": {
            "Context": [
              1787
            ],
            "IDepositContract": [
              3815
            ],
            "IERC165": [
              2026
            ],
            "IERC721": [
              1054
            ],
            "IERC721Enumerable": [
              1441
            ],
            "IFrensPoolShare": [
              3849
            ],
            "IStakingPoolFactory": [
              4130
            ],
            "Ownable": [
              104
            ],
            "StakingPool": [
              3530
            ]
          },
          "id": 3531,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 2883,
              "literals": [
                "solidity",
                ">=",
                "0.8",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:31:15"
            },
            {
              "absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
              "file": "@openzeppelin/contracts/access/Ownable.sol",
              "id": 2884,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 3531,
              "sourceUnit": 105,
              "src": "96:52:15",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/interfaces/IERC721Enumerable.sol",
              "file": "@openzeppelin/contracts/interfaces/IERC721Enumerable.sol",
              "id": 2885,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 3531,
              "sourceUnit": 108,
              "src": "149:66:15",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/interfaces/IStakingPoolFactory.sol",
              "file": "./interfaces/IStakingPoolFactory.sol",
              "id": 2886,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 3531,
              "sourceUnit": 4131,
              "src": "216:46:15",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/interfaces/IDepositContract.sol",
              "file": "./interfaces/IDepositContract.sol",
              "id": 2887,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 3531,
              "sourceUnit": 3816,
              "src": "263:43:15",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/interfaces/IFrensPoolShare.sol",
              "file": "./interfaces/IFrensPoolShare.sol",
              "id": 2888,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 3531,
              "sourceUnit": 3850,
              "src": "307:42:15",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 2889,
                    "name": "Ownable",
                    "nameLocations": [
                      "376:7:15"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 104,
                    "src": "376:7:15"
                  },
                  "id": 2890,
                  "nodeType": "InheritanceSpecifier",
                  "src": "376:7:15"
                }
              ],
              "canonicalName": "StakingPool",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 3530,
              "linearizedBaseContracts": [
                3530,
                104,
                1787
              ],
              "name": "StakingPool",
              "nameLocation": "361:11:15",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "eventSelector": "1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a44",
                  "id": 2896,
                  "name": "Deposit",
                  "nameLocation": "395:7:15",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 2895,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2892,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "depositContractAddress",
                        "nameLocation": "411:22:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 2896,
                        "src": "403:30:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2891,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "403:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2894,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "caller",
                        "nameLocation": "443:6:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 2896,
                        "src": "435:14:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2893,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "435:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "402:48:15"
                  },
                  "src": "389:62:15"
                },
                {
                  "constant": false,
                  "functionSelector": "87f8ab26",
                  "id": 2900,
                  "mutability": "mutable",
                  "name": "depositAmount",
                  "nameLocation": "485:13:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3530,
                  "src": "455:43:15",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  },
                  "typeName": {
                    "id": 2899,
                    "keyType": {
                      "id": 2897,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "464:4:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "455:22:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                      "typeString": "mapping(uint256 => uint256)"
                    },
                    "valueType": {
                      "id": 2898,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "472:4:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "7d882097",
                  "id": 2902,
                  "mutability": "mutable",
                  "name": "totalDeposits",
                  "nameLocation": "514:13:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3530,
                  "src": "502:25:15",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2901,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "502:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "82a790cf",
                  "id": 2905,
                  "mutability": "mutable",
                  "name": "idsInThisPool",
                  "nameLocation": "545:13:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3530,
                  "src": "531:27:15",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 2903,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "531:4:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 2904,
                    "nodeType": "ArrayTypeName",
                    "src": "531:6:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "canonicalName": "StakingPool.State",
                  "id": 2909,
                  "members": [
                    {
                      "id": 2906,
                      "name": "acceptingDeposits",
                      "nameLocation": "576:17:15",
                      "nodeType": "EnumValue",
                      "src": "576:17:15"
                    },
                    {
                      "id": 2907,
                      "name": "staked",
                      "nameLocation": "595:6:15",
                      "nodeType": "EnumValue",
                      "src": "595:6:15"
                    },
                    {
                      "id": 2908,
                      "name": "exited",
                      "nameLocation": "603:6:15",
                      "nodeType": "EnumValue",
                      "src": "603:6:15"
                    }
                  ],
                  "name": "State",
                  "nameLocation": "568:5:15",
                  "nodeType": "EnumDefinition",
                  "src": "563:48:15"
                },
                {
                  "constant": false,
                  "id": 2912,
                  "mutability": "mutable",
                  "name": "currentState",
                  "nameLocation": "620:12:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3530,
                  "src": "614:18:15",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_State_$2909",
                    "typeString": "enum StakingPool.State"
                  },
                  "typeName": {
                    "id": 2911,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2910,
                      "name": "State",
                      "nameLocations": [
                        "614:5:15"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2909,
                      "src": "614:5:15"
                    },
                    "referencedDeclaration": 2909,
                    "src": "614:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$2909",
                      "typeString": "enum StakingPool.State"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "functionSelector": "2a4dbd2b",
                  "id": 2914,
                  "mutability": "mutable",
                  "name": "depositContractAddress",
                  "nameLocation": "652:22:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3530,
                  "src": "637:37:15",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2913,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "637:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 2916,
                  "mutability": "mutable",
                  "name": "rightfulOwner",
                  "nameLocation": "694:13:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3530,
                  "src": "678:29:15",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2915,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "678:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "functionSelector": "7be0b4a0",
                  "id": 2918,
                  "mutability": "mutable",
                  "name": "validatorPubKey",
                  "nameLocation": "724:15:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3530,
                  "src": "711:28:15",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 2917,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "711:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 2921,
                  "mutability": "mutable",
                  "name": "depositContract",
                  "nameLocation": "761:15:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3530,
                  "src": "744:32:15",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IDepositContract_$3815",
                    "typeString": "contract IDepositContract"
                  },
                  "typeName": {
                    "id": 2920,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2919,
                      "name": "IDepositContract",
                      "nameLocations": [
                        "744:16:15"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3815,
                      "src": "744:16:15"
                    },
                    "referencedDeclaration": 3815,
                    "src": "744:16:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IDepositContract_$3815",
                      "typeString": "contract IDepositContract"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2924,
                  "mutability": "mutable",
                  "name": "factoryContract",
                  "nameLocation": "800:15:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3530,
                  "src": "780:35:15",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IStakingPoolFactory_$4130",
                    "typeString": "contract IStakingPoolFactory"
                  },
                  "typeName": {
                    "id": 2923,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2922,
                      "name": "IStakingPoolFactory",
                      "nameLocations": [
                        "780:19:15"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4130,
                      "src": "780:19:15"
                    },
                    "referencedDeclaration": 4130,
                    "src": "780:19:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStakingPoolFactory_$4130",
                      "typeString": "contract IStakingPoolFactory"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2927,
                  "mutability": "mutable",
                  "name": "frensPoolShare",
                  "nameLocation": "835:14:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3530,
                  "src": "819:30:15",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                    "typeString": "contract IFrensPoolShare"
                  },
                  "typeName": {
                    "id": 2926,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2925,
                      "name": "IFrensPoolShare",
                      "nameLocations": [
                        "819:15:15"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3849,
                      "src": "819:15:15"
                    },
                    "referencedDeclaration": 3849,
                    "src": "819:15:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                      "typeString": "contract IFrensPoolShare"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2963,
                    "nodeType": "Block",
                    "src": "949:283:15",
                    "statements": [
                      {
                        "expression": {
                          "id": 2939,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2936,
                            "name": "currentState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2912,
                            "src": "955:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 2937,
                              "name": "State",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2909,
                              "src": "970:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                "typeString": "type(enum StakingPool.State)"
                              }
                            },
                            "id": 2938,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "976:17:15",
                            "memberName": "acceptingDeposits",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2906,
                            "src": "970:23:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "src": "955:38:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$2909",
                            "typeString": "enum StakingPool.State"
                          }
                        },
                        "id": 2940,
                        "nodeType": "ExpressionStatement",
                        "src": "955:38:15"
                      },
                      {
                        "expression": {
                          "id": 2943,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2941,
                            "name": "depositContractAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2914,
                            "src": "999:22:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 2942,
                            "name": "depositContractAddress_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2929,
                            "src": "1024:23:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "999:48:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 2944,
                        "nodeType": "ExpressionStatement",
                        "src": "999:48:15"
                      },
                      {
                        "expression": {
                          "id": 2949,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2945,
                            "name": "depositContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2921,
                            "src": "1053:15:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IDepositContract_$3815",
                              "typeString": "contract IDepositContract"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 2947,
                                "name": "depositContractAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2914,
                                "src": "1088:22:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 2946,
                              "name": "IDepositContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3815,
                              "src": "1071:16:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IDepositContract_$3815_$",
                                "typeString": "type(contract IDepositContract)"
                              }
                            },
                            "id": 2948,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1071:40:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IDepositContract_$3815",
                              "typeString": "contract IDepositContract"
                            }
                          },
                          "src": "1053:58:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IDepositContract_$3815",
                            "typeString": "contract IDepositContract"
                          }
                        },
                        "id": 2950,
                        "nodeType": "ExpressionStatement",
                        "src": "1053:58:15"
                      },
                      {
                        "expression": {
                          "id": 2955,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2951,
                            "name": "factoryContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2924,
                            "src": "1117:15:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStakingPoolFactory_$4130",
                              "typeString": "contract IStakingPoolFactory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 2953,
                                "name": "factory_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2931,
                                "src": "1155:8:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 2952,
                              "name": "IStakingPoolFactory",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4130,
                              "src": "1135:19:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IStakingPoolFactory_$4130_$",
                                "typeString": "type(contract IStakingPoolFactory)"
                              }
                            },
                            "id": 2954,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1135:29:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStakingPoolFactory_$4130",
                              "typeString": "contract IStakingPoolFactory"
                            }
                          },
                          "src": "1117:47:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IStakingPoolFactory_$4130",
                            "typeString": "contract IStakingPoolFactory"
                          }
                        },
                        "id": 2956,
                        "nodeType": "ExpressionStatement",
                        "src": "1117:47:15"
                      },
                      {
                        "expression": {
                          "id": 2961,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2957,
                            "name": "frensPoolShare",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2927,
                            "src": "1170:14:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                              "typeString": "contract IFrensPoolShare"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 2959,
                                "name": "frensPoolShareAddress_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2933,
                                "src": "1203:22:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 2958,
                              "name": "IFrensPoolShare",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3849,
                              "src": "1187:15:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IFrensPoolShare_$3849_$",
                                "typeString": "type(contract IFrensPoolShare)"
                              }
                            },
                            "id": 2960,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1187:39:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                              "typeString": "contract IFrensPoolShare"
                            }
                          },
                          "src": "1170:56:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                            "typeString": "contract IFrensPoolShare"
                          }
                        },
                        "id": 2962,
                        "nodeType": "ExpressionStatement",
                        "src": "1170:56:15"
                      }
                    ]
                  },
                  "id": 2964,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2934,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2929,
                        "mutability": "mutable",
                        "name": "depositContractAddress_",
                        "nameLocation": "874:23:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 2964,
                        "src": "866:31:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2928,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "866:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2931,
                        "mutability": "mutable",
                        "name": "factory_",
                        "nameLocation": "907:8:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 2964,
                        "src": "899:16:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2930,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "899:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2933,
                        "mutability": "mutable",
                        "name": "frensPoolShareAddress_",
                        "nameLocation": "925:22:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 2964,
                        "src": "917:30:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2932,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "917:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "865:83:15"
                  },
                  "returnParameters": {
                    "id": 2935,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "949:0:15"
                  },
                  "scope": 3530,
                  "src": "854:378:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3020,
                    "nodeType": "Block",
                    "src": "1289:337:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_enum$_State_$2909",
                                "typeString": "enum StakingPool.State"
                              },
                              "id": 2973,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2970,
                                "name": "currentState",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2912,
                                "src": "1303:12:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$2909",
                                  "typeString": "enum StakingPool.State"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 2971,
                                  "name": "State",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2909,
                                  "src": "1319:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                    "typeString": "type(enum StakingPool.State)"
                                  }
                                },
                                "id": 2972,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "1325:17:15",
                                "memberName": "acceptingDeposits",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2906,
                                "src": "1319:23:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$2909",
                                  "typeString": "enum StakingPool.State"
                                }
                              },
                              "src": "1303:39:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6e6f7420616363657074696e67206465706f73697473",
                              "id": 2974,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1344:24:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_50658a37ec54949fc12cd48aa0e210509c880b9aae3001508f07a56843d40880",
                                "typeString": "literal_string \"not accepting deposits\""
                              },
                              "value": "not accepting deposits"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_50658a37ec54949fc12cd48aa0e210509c880b9aae3001508f07a56843d40880",
                                "typeString": "literal_string \"not accepting deposits\""
                              }
                            ],
                            "id": 2969,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1295:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2975,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1295:74:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2976,
                        "nodeType": "ExpressionStatement",
                        "src": "1295:74:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2981,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 2978,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "1383:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 2979,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1387:5:15",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "1383:9:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2980,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1396:1:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "1383:14:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6d757374206465706f736974206574686572",
                              "id": 2982,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1399:20:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_047e60e450174b0a20069a9cb8362865bfe5607213b8888c29d67a10d2b260f7",
                                "typeString": "literal_string \"must deposit ether\""
                              },
                              "value": "must deposit ether"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_047e60e450174b0a20069a9cb8362865bfe5607213b8888c29d67a10d2b260f7",
                                "typeString": "literal_string \"must deposit ether\""
                              }
                            ],
                            "id": 2977,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1375:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2983,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1375:45:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2984,
                        "nodeType": "ExpressionStatement",
                        "src": "1375:45:15"
                      },
                      {
                        "assignments": [
                          2986
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2986,
                            "mutability": "mutable",
                            "name": "id",
                            "nameLocation": "1431:2:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3020,
                            "src": "1426:7:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2985,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "1426:4:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2990,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 2987,
                              "name": "frensPoolShare",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2927,
                              "src": "1436:14:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                                "typeString": "contract IFrensPoolShare"
                              }
                            },
                            "id": 2988,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1451:16:15",
                            "memberName": "incrementTokenId",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3825,
                            "src": "1436:31:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$__$returns$_t_uint256_$",
                              "typeString": "function () external returns (uint256)"
                            }
                          },
                          "id": 2989,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1436:33:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1426:43:15"
                      },
                      {
                        "expression": {
                          "id": 2996,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 2991,
                              "name": "depositAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2900,
                              "src": "1475:13:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 2993,
                            "indexExpression": {
                              "id": 2992,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2986,
                              "src": "1489:2:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1475:17:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 2994,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "1495:3:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2995,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1499:5:15",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "1495:9:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1475:29:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2997,
                        "nodeType": "ExpressionStatement",
                        "src": "1475:29:15"
                      },
                      {
                        "expression": {
                          "id": 3001,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2998,
                            "name": "totalDeposits",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2902,
                            "src": "1510:13:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "expression": {
                              "id": 2999,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "1527:3:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 3000,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1531:5:15",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "1527:9:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1510:26:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3002,
                        "nodeType": "ExpressionStatement",
                        "src": "1510:26:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3006,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2986,
                              "src": "1561:2:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 3003,
                              "name": "idsInThisPool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2905,
                              "src": "1542:13:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 3005,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1556:4:15",
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "1542:18:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                              "typeString": "function (uint256[] storage pointer,uint256)"
                            }
                          },
                          "id": 3007,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1542:22:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3008,
                        "nodeType": "ExpressionStatement",
                        "src": "1542:22:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3012,
                              "name": "userAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2966,
                              "src": "1590:11:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3013,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2986,
                              "src": "1603:2:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 3016,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "1615:4:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                ],
                                "id": 3015,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1607:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3014,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1607:7:15",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3017,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1607:13:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 3009,
                              "name": "frensPoolShare",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2927,
                              "src": "1570:14:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                                "typeString": "contract IFrensPoolShare"
                              }
                            },
                            "id": 3011,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1585:4:15",
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3834,
                            "src": "1570:19:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function (address,uint256,address) external"
                            }
                          },
                          "id": 3018,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1570:51:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3019,
                        "nodeType": "ExpressionStatement",
                        "src": "1570:51:15"
                      }
                    ]
                  },
                  "functionSelector": "f340fa01",
                  "id": 3021,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "deposit",
                  "nameLocation": "1245:7:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2967,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2966,
                        "mutability": "mutable",
                        "name": "userAddress",
                        "nameLocation": "1261:11:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3021,
                        "src": "1253:19:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2965,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1253:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1252:21:15"
                  },
                  "returnParameters": {
                    "id": 2968,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1289:0:15"
                  },
                  "scope": 3530,
                  "src": "1236:390:15",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3074,
                    "nodeType": "Block",
                    "src": "1677:347:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 3029,
                                  "name": "_id",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3023,
                                  "src": "1713:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 3027,
                                  "name": "frensPoolShare",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2927,
                                  "src": "1691:14:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                                    "typeString": "contract IFrensPoolShare"
                                  }
                                },
                                "id": 3028,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1706:6:15",
                                "memberName": "exists",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3841,
                                "src": "1691:21:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (uint256) external returns (bool)"
                                }
                              },
                              "id": 3030,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1691:26:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6e6f74206578697374",
                              "id": 3031,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1719:11:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_613b590133514e9d25a2c1ce384159f96f154135bf8704ce9e525824c58d376a",
                                "typeString": "literal_string \"not exist\""
                              },
                              "value": "not exist"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_613b590133514e9d25a2c1ce384159f96f154135bf8704ce9e525824c58d376a",
                                "typeString": "literal_string \"not exist\""
                              }
                            ],
                            "id": 3026,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1683:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3032,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1683:48:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3033,
                        "nodeType": "ExpressionStatement",
                        "src": "1683:48:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3043,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 3037,
                                    "name": "_id",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3023,
                                    "src": "1772:3:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 3035,
                                    "name": "frensPoolShare",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2927,
                                    "src": "1745:14:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                                      "typeString": "contract IFrensPoolShare"
                                    }
                                  },
                                  "id": 3036,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1760:11:15",
                                  "memberName": "getPoolById",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3848,
                                  "src": "1745:26:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                                    "typeString": "function (uint256) view external returns (address)"
                                  }
                                },
                                "id": 3038,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1745:31:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 3041,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "1788:4:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_StakingPool_$3530",
                                      "typeString": "contract StakingPool"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_StakingPool_$3530",
                                      "typeString": "contract StakingPool"
                                    }
                                  ],
                                  "id": 3040,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1780:7:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 3039,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1780:7:15",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 3042,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1780:13:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1745:48:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "77726f6e67207374616b696e6720706f6f6c",
                              "id": 3044,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1795:20:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_bc8097e4f22cd38d305855905857ee7726203311b02f65b4e36865ec549aa7ee",
                                "typeString": "literal_string \"wrong staking pool\""
                              },
                              "value": "wrong staking pool"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_bc8097e4f22cd38d305855905857ee7726203311b02f65b4e36865ec549aa7ee",
                                "typeString": "literal_string \"wrong staking pool\""
                              }
                            ],
                            "id": 3034,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1737:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3045,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1737:79:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3046,
                        "nodeType": "ExpressionStatement",
                        "src": "1737:79:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_enum$_State_$2909",
                                "typeString": "enum StakingPool.State"
                              },
                              "id": 3051,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3048,
                                "name": "currentState",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2912,
                                "src": "1830:12:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$2909",
                                  "typeString": "enum StakingPool.State"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 3049,
                                  "name": "State",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2909,
                                  "src": "1846:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                    "typeString": "type(enum StakingPool.State)"
                                  }
                                },
                                "id": 3050,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "1852:17:15",
                                "memberName": "acceptingDeposits",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2906,
                                "src": "1846:23:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$2909",
                                  "typeString": "enum StakingPool.State"
                                }
                              },
                              "src": "1830:39:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6e6f7420616363657074696e67206465706f73697473",
                              "id": 3052,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1871:24:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_50658a37ec54949fc12cd48aa0e210509c880b9aae3001508f07a56843d40880",
                                "typeString": "literal_string \"not accepting deposits\""
                              },
                              "value": "not accepting deposits"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_50658a37ec54949fc12cd48aa0e210509c880b9aae3001508f07a56843d40880",
                                "typeString": "literal_string \"not accepting deposits\""
                              }
                            ],
                            "id": 3047,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1822:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3053,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1822:74:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3054,
                        "nodeType": "ExpressionStatement",
                        "src": "1822:74:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_enum$_State_$2909",
                                "typeString": "enum StakingPool.State"
                              },
                              "id": 3059,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3056,
                                "name": "currentState",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2912,
                                "src": "1910:12:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$2909",
                                  "typeString": "enum StakingPool.State"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 3057,
                                  "name": "State",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2909,
                                  "src": "1926:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                    "typeString": "type(enum StakingPool.State)"
                                  }
                                },
                                "id": 3058,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "1932:17:15",
                                "memberName": "acceptingDeposits",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2906,
                                "src": "1926:23:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$2909",
                                  "typeString": "enum StakingPool.State"
                                }
                              },
                              "src": "1910:39:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3055,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1902:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3060,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1902:48:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3061,
                        "nodeType": "ExpressionStatement",
                        "src": "1902:48:15"
                      },
                      {
                        "expression": {
                          "id": 3067,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 3062,
                              "name": "depositAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2900,
                              "src": "1956:13:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 3064,
                            "indexExpression": {
                              "id": 3063,
                              "name": "_id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3023,
                              "src": "1970:3:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1956:18:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "expression": {
                              "id": 3065,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "1978:3:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 3066,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1982:5:15",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "1978:9:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1956:31:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3068,
                        "nodeType": "ExpressionStatement",
                        "src": "1956:31:15"
                      },
                      {
                        "expression": {
                          "id": 3072,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3069,
                            "name": "totalDeposits",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2902,
                            "src": "1993:13:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "expression": {
                              "id": 3070,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2010:3:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 3071,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2014:5:15",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "2010:9:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1993:26:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3073,
                        "nodeType": "ExpressionStatement",
                        "src": "1993:26:15"
                      }
                    ]
                  },
                  "functionSelector": "8620891c",
                  "id": 3075,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "addToDeposit",
                  "nameLocation": "1639:12:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3024,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3023,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "1657:3:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3075,
                        "src": "1652:8:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3022,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1652:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1651:10:15"
                  },
                  "returnParameters": {
                    "id": 3025,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1677:0:15"
                  },
                  "scope": 3530,
                  "src": "1630:394:15",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3129,
                    "nodeType": "Block",
                    "src": "2077:328:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_enum$_State_$2909",
                                "typeString": "enum StakingPool.State"
                              },
                              "id": 3086,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3083,
                                "name": "currentState",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2912,
                                "src": "2091:12:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$2909",
                                  "typeString": "enum StakingPool.State"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "expression": {
                                  "id": 3084,
                                  "name": "State",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2909,
                                  "src": "2107:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                    "typeString": "type(enum StakingPool.State)"
                                  }
                                },
                                "id": 3085,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "2113:6:15",
                                "memberName": "staked",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2907,
                                "src": "2107:12:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$2909",
                                  "typeString": "enum StakingPool.State"
                                }
                              },
                              "src": "2091:28:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "63616e6e6f74207769746864726177206f6e6365207374616b6564",
                              "id": 3087,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2121:29:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_708bf55cf6ead8dea092c82dc09b0d4d72f663f31eeff9eb9efa6fb6fc0d2641",
                                "typeString": "literal_string \"cannot withdraw once staked\""
                              },
                              "value": "cannot withdraw once staked"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_708bf55cf6ead8dea092c82dc09b0d4d72f663f31eeff9eb9efa6fb6fc0d2641",
                                "typeString": "literal_string \"cannot withdraw once staked\""
                              }
                            ],
                            "id": 3082,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2083:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3088,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2083:68:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3089,
                        "nodeType": "ExpressionStatement",
                        "src": "2083:68:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3097,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 3091,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "2165:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 3092,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2169:6:15",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2165:10:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 3095,
                                    "name": "_id",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3077,
                                    "src": "2202:3:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 3093,
                                    "name": "frensPoolShare",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2927,
                                    "src": "2179:14:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                                      "typeString": "contract IFrensPoolShare"
                                    }
                                  },
                                  "id": 3094,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2194:7:15",
                                  "memberName": "ownerOf",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 987,
                                  "src": "2179:22:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                                    "typeString": "function (uint256) view external returns (address)"
                                  }
                                },
                                "id": 3096,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2179:27:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2165:41:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6e6f7420746865206f776e6572",
                              "id": 3098,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2208:15:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_09ee694bb6d0f66081e15dd53293c7f941705ae2fd8f9732918eb9f8e2ff3219",
                                "typeString": "literal_string \"not the owner\""
                              },
                              "value": "not the owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_09ee694bb6d0f66081e15dd53293c7f941705ae2fd8f9732918eb9f8e2ff3219",
                                "typeString": "literal_string \"not the owner\""
                              }
                            ],
                            "id": 3090,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2157:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3099,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2157:67:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3100,
                        "nodeType": "ExpressionStatement",
                        "src": "2157:67:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3106,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 3102,
                                  "name": "depositAmount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2900,
                                  "src": "2238:13:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                    "typeString": "mapping(uint256 => uint256)"
                                  }
                                },
                                "id": 3104,
                                "indexExpression": {
                                  "id": 3103,
                                  "name": "_id",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3077,
                                  "src": "2252:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2238:18:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 3105,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3079,
                                "src": "2260:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2238:29:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6e6f7420656e6f756768206465706f7369746564",
                              "id": 3107,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2269:22:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_85c56fdd810ecac0e0d24c0cd67c0395d5799f1d6532c0300c2d118e7243822c",
                                "typeString": "literal_string \"not enough deposited\""
                              },
                              "value": "not enough deposited"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_85c56fdd810ecac0e0d24c0cd67c0395d5799f1d6532c0300c2d118e7243822c",
                                "typeString": "literal_string \"not enough deposited\""
                              }
                            ],
                            "id": 3101,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2230:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3108,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2230:62:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3109,
                        "nodeType": "ExpressionStatement",
                        "src": "2230:62:15"
                      },
                      {
                        "expression": {
                          "id": 3114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 3110,
                              "name": "depositAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2900,
                              "src": "2298:13:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 3112,
                            "indexExpression": {
                              "id": 3111,
                              "name": "_id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3077,
                              "src": "2312:3:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2298:18:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 3113,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3079,
                            "src": "2320:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2298:29:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3115,
                        "nodeType": "ExpressionStatement",
                        "src": "2298:29:15"
                      },
                      {
                        "expression": {
                          "id": 3118,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3116,
                            "name": "totalDeposits",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2902,
                            "src": "2333:13:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 3117,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3079,
                            "src": "2350:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2333:24:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3119,
                        "nodeType": "ExpressionStatement",
                        "src": "2333:24:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3126,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3079,
                              "src": "2392:7:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 3122,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "2371:3:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 3123,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2375:6:15",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "2371:10:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 3121,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2363:8:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                  "typeString": "type(address payable)"
                                },
                                "typeName": {
                                  "id": 3120,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2363:8:15",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3124,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2363:19:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "id": 3125,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2383:8:15",
                            "memberName": "transfer",
                            "nodeType": "MemberAccess",
                            "src": "2363:28:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 3127,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2363:37:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3128,
                        "nodeType": "ExpressionStatement",
                        "src": "2363:37:15"
                      }
                    ]
                  },
                  "functionSelector": "441a3e70",
                  "id": 3130,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "withdraw",
                  "nameLocation": "2037:8:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3080,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3077,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "2051:3:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3130,
                        "src": "2046:8:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3076,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2046:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3079,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "2061:7:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3130,
                        "src": "2056:12:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3078,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2056:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2045:24:15"
                  },
                  "returnParameters": {
                    "id": 3081,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2077:0:15"
                  },
                  "scope": 3530,
                  "src": "2028:377:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3197,
                    "nodeType": "Block",
                    "src": "2438:440:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_enum$_State_$2909",
                                "typeString": "enum StakingPool.State"
                              },
                              "id": 3137,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3134,
                                "name": "currentState",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2912,
                                "src": "2452:12:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$2909",
                                  "typeString": "enum StakingPool.State"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 3135,
                                  "name": "State",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2909,
                                  "src": "2468:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                    "typeString": "type(enum StakingPool.State)"
                                  }
                                },
                                "id": 3136,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "2474:6:15",
                                "memberName": "staked",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2907,
                                "src": "2468:12:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$2909",
                                  "typeString": "enum StakingPool.State"
                                }
                              },
                              "src": "2452:28:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "757365207769746864726177207768656e206e6f74207374616b6564",
                              "id": 3138,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2482:30:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_23e3cdd019d219795cbb826322029bc3c9e493fd421b8c7075b9411e241ce9a7",
                                "typeString": "literal_string \"use withdraw when not staked\""
                              },
                              "value": "use withdraw when not staked"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_23e3cdd019d219795cbb826322029bc3c9e493fd421b8c7075b9411e241ce9a7",
                                "typeString": "literal_string \"use withdraw when not staked\""
                              }
                            ],
                            "id": 3133,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2444:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3139,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2444:69:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3140,
                        "nodeType": "ExpressionStatement",
                        "src": "2444:69:15"
                      },
                      {
                        "assignments": [
                          3142
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3142,
                            "mutability": "mutable",
                            "name": "contractBalance",
                            "nameLocation": "2524:15:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3197,
                            "src": "2519:20:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3141,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "2519:4:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3148,
                        "initialValue": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 3145,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "2550:4:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_StakingPool_$3530",
                                  "typeString": "contract StakingPool"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_StakingPool_$3530",
                                  "typeString": "contract StakingPool"
                                }
                              ],
                              "id": 3144,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2542:7:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 3143,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2542:7:15",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 3146,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2542:13:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 3147,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2556:7:15",
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "src": "2542:21:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2519:44:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3152,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3150,
                                "name": "contractBalance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3142,
                                "src": "2577:15:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "313030",
                                "id": 3151,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2595:3:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_100_by_1",
                                  "typeString": "int_const 100"
                                },
                                "value": "100"
                              },
                              "src": "2577:21:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6d696e696d756d206f66203130302077656920746f2064697374726962757465",
                              "id": 3153,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2600:34:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_0f00fb37f6a37183ae3803ed39ad837a119d5582659746e10b4b04d676b4b4ea",
                                "typeString": "literal_string \"minimum of 100 wei to distribute\""
                              },
                              "value": "minimum of 100 wei to distribute"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_0f00fb37f6a37183ae3803ed39ad837a119d5582659746e10b4b04d676b4b4ea",
                                "typeString": "literal_string \"minimum of 100 wei to distribute\""
                              }
                            ],
                            "id": 3149,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2569:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3154,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2569:66:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3155,
                        "nodeType": "ExpressionStatement",
                        "src": "2569:66:15"
                      },
                      {
                        "body": {
                          "id": 3195,
                          "nodeType": "Block",
                          "src": "2684:190:15",
                          "statements": [
                            {
                              "assignments": [
                                3168
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 3168,
                                  "mutability": "mutable",
                                  "name": "id",
                                  "nameLocation": "2697:2:15",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 3195,
                                  "src": "2692:7:15",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 3167,
                                    "name": "uint",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2692:4:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 3172,
                              "initialValue": {
                                "baseExpression": {
                                  "id": 3169,
                                  "name": "idsInThisPool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2905,
                                  "src": "2702:13:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                    "typeString": "uint256[] storage ref"
                                  }
                                },
                                "id": 3171,
                                "indexExpression": {
                                  "id": 3170,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3157,
                                  "src": "2716:1:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2702:16:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "2692:26:15"
                            },
                            {
                              "assignments": [
                                3174
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 3174,
                                  "mutability": "mutable",
                                  "name": "tokenOwner",
                                  "nameLocation": "2734:10:15",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 3195,
                                  "src": "2726:18:15",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "typeName": {
                                    "id": 3173,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2726:7:15",
                                    "stateMutability": "nonpayable",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 3179,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "id": 3177,
                                    "name": "id",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3168,
                                    "src": "2770:2:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 3175,
                                    "name": "frensPoolShare",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2927,
                                    "src": "2747:14:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                                      "typeString": "contract IFrensPoolShare"
                                    }
                                  },
                                  "id": 3176,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2762:7:15",
                                  "memberName": "ownerOf",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 987,
                                  "src": "2747:22:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                                    "typeString": "function (uint256) view external returns (address)"
                                  }
                                },
                                "id": 3178,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2747:26:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "2726:47:15"
                            },
                            {
                              "assignments": [
                                3181
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 3181,
                                  "mutability": "mutable",
                                  "name": "share",
                                  "nameLocation": "2786:5:15",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 3195,
                                  "src": "2781:10:15",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 3180,
                                    "name": "uint",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2781:4:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 3186,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "id": 3183,
                                    "name": "id",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3168,
                                    "src": "2804:2:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 3184,
                                    "name": "contractBalance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3142,
                                    "src": "2808:15:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 3182,
                                  "name": "_getShare",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3238,
                                  "src": "2794:9:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) view returns (uint256)"
                                  }
                                },
                                "id": 3185,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2794:30:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "2781:43:15"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 3192,
                                    "name": "share",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3181,
                                    "src": "2861:5:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 3189,
                                        "name": "tokenOwner",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3174,
                                        "src": "2840:10:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 3188,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "2832:8:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_payable_$",
                                        "typeString": "type(address payable)"
                                      },
                                      "typeName": {
                                        "id": 3187,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "2832:8:15",
                                        "stateMutability": "payable",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 3190,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "2832:19:15",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address_payable",
                                      "typeString": "address payable"
                                    }
                                  },
                                  "id": 3191,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2852:8:15",
                                  "memberName": "transfer",
                                  "nodeType": "MemberAccess",
                                  "src": "2832:28:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256)"
                                  }
                                },
                                "id": 3193,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2832:35:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 3194,
                              "nodeType": "ExpressionStatement",
                              "src": "2832:35:15"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3163,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3160,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3157,
                            "src": "2655:1:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 3161,
                              "name": "idsInThisPool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2905,
                              "src": "2657:13:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 3162,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2671:6:15",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "2657:20:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2655:22:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3196,
                        "initializationExpression": {
                          "assignments": [
                            3157
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 3157,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "2650:1:15",
                              "nodeType": "VariableDeclaration",
                              "scope": 3196,
                              "src": "2645:6:15",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 3156,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "2645:4:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 3159,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 3158,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2652:1:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "2645:8:15"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 3165,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "2679:3:15",
                            "subExpression": {
                              "id": 3164,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3157,
                              "src": "2679:1:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 3166,
                          "nodeType": "ExpressionStatement",
                          "src": "2679:3:15"
                        },
                        "nodeType": "ForStatement",
                        "src": "2641:233:15"
                      }
                    ]
                  },
                  "functionSelector": "e4fc6b6d",
                  "id": 3198,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "distribute",
                  "nameLocation": "2418:10:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3131,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2428:2:15"
                  },
                  "returnParameters": {
                    "id": 3132,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2438:0:15"
                  },
                  "scope": 3530,
                  "src": "2409:469:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3237,
                    "nodeType": "Block",
                    "src": "2962:266:15",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3211,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 3207,
                              "name": "depositAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2900,
                              "src": "2971:13:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 3209,
                            "indexExpression": {
                              "id": 3208,
                              "name": "_id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3200,
                              "src": "2985:3:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2971:18:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 3210,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2993:1:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2971:23:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3214,
                        "nodeType": "IfStatement",
                        "src": "2968:36:15",
                        "trueBody": {
                          "expression": {
                            "hexValue": "30",
                            "id": 3212,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3003:1:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "functionReturnParameters": 3206,
                          "id": 3213,
                          "nodeType": "Return",
                          "src": "2996:8:15"
                        }
                      },
                      {
                        "assignments": [
                          3216
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3216,
                            "mutability": "mutable",
                            "name": "calcedShare",
                            "nameLocation": "3015:11:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3237,
                            "src": "3010:16:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3215,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "3010:4:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3224,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3223,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 3221,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 3217,
                              "name": "_contractBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3202,
                              "src": "3030:16:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "baseExpression": {
                                "id": 3218,
                                "name": "depositAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2900,
                                "src": "3049:13:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                  "typeString": "mapping(uint256 => uint256)"
                                }
                              },
                              "id": 3220,
                              "indexExpression": {
                                "id": 3219,
                                "name": "_id",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3200,
                                "src": "3063:3:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3049:18:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3030:37:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 3222,
                            "name": "totalDeposits",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2902,
                            "src": "3070:13:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3030:53:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3010:73:15"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3227,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3225,
                            "name": "calcedShare",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3216,
                            "src": "3092:11:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 3226,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3106:1:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "3092:15:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "expression": {
                            "hexValue": "30",
                            "id": 3234,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3222:1:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "functionReturnParameters": 3206,
                          "id": 3235,
                          "nodeType": "Return",
                          "src": "3215:8:15"
                        },
                        "id": 3236,
                        "nodeType": "IfStatement",
                        "src": "3089:134:15",
                        "trueBody": {
                          "id": 3233,
                          "nodeType": "Block",
                          "src": "3108:102:15",
                          "statements": [
                            {
                              "expression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 3230,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 3228,
                                      "name": "calcedShare",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3216,
                                      "src": "3123:11:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "-",
                                    "rightExpression": {
                                      "hexValue": "31",
                                      "id": 3229,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "3137:1:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "3123:15:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 3231,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "3122:17:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "functionReturnParameters": 3206,
                              "id": 3232,
                              "nodeType": "Return",
                              "src": "3116:23:15"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 3238,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_getShare",
                  "nameLocation": "2891:9:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3203,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3200,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "2906:3:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3238,
                        "src": "2901:8:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3199,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2901:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3202,
                        "mutability": "mutable",
                        "name": "_contractBalance",
                        "nameLocation": "2916:16:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3238,
                        "src": "2911:21:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3201,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2911:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2900:33:15"
                  },
                  "returnParameters": {
                    "id": 3206,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3205,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3238,
                        "src": "2956:4:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3204,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2956:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2955:6:15"
                  },
                  "scope": 3530,
                  "src": "2882:346:15",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3258,
                    "nodeType": "Block",
                    "src": "3286:99:15",
                    "statements": [
                      {
                        "assignments": [
                          3246
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3246,
                            "mutability": "mutable",
                            "name": "contractBalance",
                            "nameLocation": "3297:15:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3258,
                            "src": "3292:20:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3245,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "3292:4:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3252,
                        "initialValue": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 3249,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "3323:4:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_StakingPool_$3530",
                                  "typeString": "contract StakingPool"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_StakingPool_$3530",
                                  "typeString": "contract StakingPool"
                                }
                              ],
                              "id": 3248,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3315:7:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 3247,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3315:7:15",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 3250,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3315:13:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 3251,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3329:7:15",
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "src": "3315:21:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3292:44:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3254,
                              "name": "_id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3240,
                              "src": "3359:3:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3255,
                              "name": "contractBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3246,
                              "src": "3364:15:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3253,
                            "name": "_getShare",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3238,
                            "src": "3349:9:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256) view returns (uint256)"
                            }
                          },
                          "id": 3256,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3349:31:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 3244,
                        "id": 3257,
                        "nodeType": "Return",
                        "src": "3342:38:15"
                      }
                    ]
                  },
                  "functionSelector": "cfb5a5f8",
                  "id": 3259,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getShare",
                  "nameLocation": "3241:8:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3241,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3240,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "3255:3:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3259,
                        "src": "3250:8:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3239,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "3250:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3249:10:15"
                  },
                  "returnParameters": {
                    "id": 3244,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3243,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3259,
                        "src": "3280:4:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3242,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "3280:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3279:6:15"
                  },
                  "scope": 3530,
                  "src": "3232:153:15",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3279,
                    "nodeType": "Block",
                    "src": "3456:118:15",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_State_$2909",
                            "typeString": "enum StakingPool.State"
                          },
                          "id": 3269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3266,
                            "name": "currentState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2912,
                            "src": "3465:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 3267,
                              "name": "State",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2909,
                              "src": "3481:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                "typeString": "type(enum StakingPool.State)"
                              }
                            },
                            "id": 3268,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "3487:17:15",
                            "memberName": "acceptingDeposits",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2906,
                            "src": "3481:23:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "src": "3465:39:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 3277,
                          "nodeType": "Block",
                          "src": "3535:35:15",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 3274,
                                    "name": "_id",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3261,
                                    "src": "3559:3:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 3273,
                                  "name": "getShare",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3259,
                                  "src": "3550:8:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                                    "typeString": "function (uint256) view returns (uint256)"
                                  }
                                },
                                "id": 3275,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3550:13:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "functionReturnParameters": 3265,
                              "id": 3276,
                              "nodeType": "Return",
                              "src": "3543:20:15"
                            }
                          ]
                        },
                        "id": 3278,
                        "nodeType": "IfStatement",
                        "src": "3462:108:15",
                        "trueBody": {
                          "id": 3272,
                          "nodeType": "Block",
                          "src": "3506:23:15",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "30",
                                "id": 3270,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3521:1:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 3265,
                              "id": 3271,
                              "nodeType": "Return",
                              "src": "3514:8:15"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "functionSelector": "678e300a",
                  "id": 3280,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getDistributableShare",
                  "nameLocation": "3398:21:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3262,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3261,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "3425:3:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3280,
                        "src": "3420:8:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3260,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "3420:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3419:10:15"
                  },
                  "returnParameters": {
                    "id": 3265,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3264,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3280,
                        "src": "3450:4:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3263,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "3450:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3449:6:15"
                  },
                  "scope": 3530,
                  "src": "3389:185:15",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3287,
                    "nodeType": "Block",
                    "src": "3632:33:15",
                    "statements": [
                      {
                        "expression": {
                          "id": 3285,
                          "name": "validatorPubKey",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2918,
                          "src": "3645:15:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage",
                            "typeString": "bytes storage ref"
                          }
                        },
                        "functionReturnParameters": 3284,
                        "id": 3286,
                        "nodeType": "Return",
                        "src": "3638:22:15"
                      }
                    ]
                  },
                  "functionSelector": "4ad02ef1",
                  "id": 3288,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getPubKey",
                  "nameLocation": "3587:9:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3281,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3596:2:15"
                  },
                  "returnParameters": {
                    "id": 3284,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3283,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3288,
                        "src": "3619:12:15",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3282,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3619:5:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3618:14:15"
                  },
                  "scope": 3530,
                  "src": "3578:87:15",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3299,
                    "nodeType": "Block",
                    "src": "3728:38:15",
                    "statements": [
                      {
                        "expression": {
                          "id": 3297,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3295,
                            "name": "validatorPubKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2918,
                            "src": "3734:15:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage",
                              "typeString": "bytes storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3296,
                            "name": "publicKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3290,
                            "src": "3752:9:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "src": "3734:27:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage",
                            "typeString": "bytes storage ref"
                          }
                        },
                        "id": 3298,
                        "nodeType": "ExpressionStatement",
                        "src": "3734:27:15"
                      }
                    ]
                  },
                  "functionSelector": "e32d2913",
                  "id": 3300,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 3293,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3292,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "3719:9:15"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 46,
                        "src": "3719:9:15"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3719:9:15"
                    }
                  ],
                  "name": "setPubKey",
                  "nameLocation": "3678:9:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3291,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3290,
                        "mutability": "mutable",
                        "name": "publicKey",
                        "nameLocation": "3701:9:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3300,
                        "src": "3688:22:15",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3289,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3688:5:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3687:24:15"
                  },
                  "returnParameters": {
                    "id": 3294,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3728:0:15"
                  },
                  "scope": 3530,
                  "src": "3669:97:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3328,
                    "nodeType": "Block",
                    "src": "3824:240:15",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_State_$2909",
                            "typeString": "enum StakingPool.State"
                          },
                          "id": 3308,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3305,
                            "name": "currentState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2912,
                            "src": "3833:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 3306,
                              "name": "State",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2909,
                              "src": "3849:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                "typeString": "type(enum StakingPool.State)"
                              }
                            },
                            "id": 3307,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "3855:6:15",
                            "memberName": "staked",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2907,
                            "src": "3849:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "src": "3833:28:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3311,
                        "nodeType": "IfStatement",
                        "src": "3830:48:15",
                        "trueBody": {
                          "expression": {
                            "hexValue": "7374616b6564",
                            "id": 3309,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3870:8:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_4008fd5ad7acf888b1ace16d44fc4662c9aa79bc457792bb4b657bfe6dd7d8db",
                              "typeString": "literal_string \"staked\""
                            },
                            "value": "staked"
                          },
                          "functionReturnParameters": 3304,
                          "id": 3310,
                          "nodeType": "Return",
                          "src": "3863:15:15"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_State_$2909",
                            "typeString": "enum StakingPool.State"
                          },
                          "id": 3315,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3312,
                            "name": "currentState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2912,
                            "src": "3887:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 3313,
                              "name": "State",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2909,
                              "src": "3903:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                "typeString": "type(enum StakingPool.State)"
                              }
                            },
                            "id": 3314,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "3909:17:15",
                            "memberName": "acceptingDeposits",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2906,
                            "src": "3903:23:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "src": "3887:39:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3318,
                        "nodeType": "IfStatement",
                        "src": "3884:71:15",
                        "trueBody": {
                          "expression": {
                            "hexValue": "616363657074696e67206465706f73697473",
                            "id": 3316,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3935:20:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_ab722f99c034996a3c4781140aa2cbb98fbb075c17e0ffeeae9000c47c493558",
                              "typeString": "literal_string \"accepting deposits\""
                            },
                            "value": "accepting deposits"
                          },
                          "functionReturnParameters": 3304,
                          "id": 3317,
                          "nodeType": "Return",
                          "src": "3928:27:15"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_State_$2909",
                            "typeString": "enum StakingPool.State"
                          },
                          "id": 3322,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3319,
                            "name": "currentState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2912,
                            "src": "3964:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 3320,
                              "name": "State",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2909,
                              "src": "3980:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                "typeString": "type(enum StakingPool.State)"
                              }
                            },
                            "id": 3321,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "3986:6:15",
                            "memberName": "exited",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2908,
                            "src": "3980:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "src": "3964:28:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3325,
                        "nodeType": "IfStatement",
                        "src": "3961:48:15",
                        "trueBody": {
                          "expression": {
                            "hexValue": "657869746564",
                            "id": 3323,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4001:8:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_a12a7ae4132c3f93fcc4fb46e9e900a1d1105abfd1ce8bcec1c533b1cd0a973c",
                              "typeString": "literal_string \"exited\""
                            },
                            "value": "exited"
                          },
                          "functionReturnParameters": 3304,
                          "id": 3324,
                          "nodeType": "Return",
                          "src": "3994:15:15"
                        }
                      },
                      {
                        "expression": {
                          "hexValue": "7374617465206661696c757265",
                          "id": 3326,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4022:15:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_99e0c06fba2f3410e69c5ae29fea0ce50e9917845c5cb728f21d43c711531546",
                            "typeString": "literal_string \"state failure\""
                          },
                          "value": "state failure"
                        },
                        "functionReturnParameters": 3304,
                        "id": 3327,
                        "nodeType": "Return",
                        "src": "4015:22:15"
                      }
                    ]
                  },
                  "functionSelector": "1865c57d",
                  "id": 3329,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getState",
                  "nameLocation": "3779:8:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3301,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3787:2:15"
                  },
                  "returnParameters": {
                    "id": 3304,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3303,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3329,
                        "src": "3810:13:15",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3302,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3810:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3809:15:15"
                  },
                  "scope": 3530,
                  "src": "3770:294:15",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3340,
                    "nodeType": "Block",
                    "src": "4129:36:15",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 3336,
                            "name": "depositAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2900,
                            "src": "4142:13:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 3338,
                          "indexExpression": {
                            "id": 3337,
                            "name": "_id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3331,
                            "src": "4156:3:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4142:18:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 3335,
                        "id": 3339,
                        "nodeType": "Return",
                        "src": "4135:25:15"
                      }
                    ]
                  },
                  "functionSelector": "378de45b",
                  "id": 3341,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getDepositAmount",
                  "nameLocation": "4077:16:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3332,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3331,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "4099:3:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3341,
                        "src": "4094:8:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3330,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4094:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4093:10:15"
                  },
                  "returnParameters": {
                    "id": 3335,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3334,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3341,
                        "src": "4124:4:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3333,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4124:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4123:6:15"
                  },
                  "scope": 3530,
                  "src": "4068:97:15",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3446,
                    "nodeType": "Block",
                    "src": "4336:897:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3361,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 3357,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "4358:4:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_StakingPool_$3530",
                                        "typeString": "contract StakingPool"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_StakingPool_$3530",
                                        "typeString": "contract StakingPool"
                                      }
                                    ],
                                    "id": 3356,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4350:7:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 3355,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4350:7:15",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 3358,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4350:13:15",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 3359,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4364:7:15",
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "4350:21:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "hexValue": "3332",
                                "id": 3360,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4375:8:15",
                                "subdenomination": "ether",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_32000000000000000000_by_1",
                                  "typeString": "int_const 32000000000000000000"
                                },
                                "value": "32"
                              },
                              "src": "4350:33:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6e6f7420656e6f75676820657468",
                              "id": 3362,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4385:16:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_f38787fedbd8f1d66c237a0aae7262ee866033b9295a240f1f05b891b71df4a6",
                                "typeString": "literal_string \"not enough eth\""
                              },
                              "value": "not enough eth"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_f38787fedbd8f1d66c237a0aae7262ee866033b9295a240f1f05b891b71df4a6",
                                "typeString": "literal_string \"not enough eth\""
                              }
                            ],
                            "id": 3354,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4342:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3363,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4342:60:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3364,
                        "nodeType": "ExpressionStatement",
                        "src": "4342:60:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_enum$_State_$2909",
                                "typeString": "enum StakingPool.State"
                              },
                              "id": 3369,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3366,
                                "name": "currentState",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2912,
                                "src": "4416:12:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$2909",
                                  "typeString": "enum StakingPool.State"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 3367,
                                  "name": "State",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2909,
                                  "src": "4432:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                    "typeString": "type(enum StakingPool.State)"
                                  }
                                },
                                "id": 3368,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "4438:17:15",
                                "memberName": "acceptingDeposits",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2906,
                                "src": "4432:23:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$2909",
                                  "typeString": "enum StakingPool.State"
                                }
                              },
                              "src": "4416:39:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "77726f6e67207374617465",
                              "id": 3370,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4457:13:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5707d4fbf04e9bc9ef481445136a118e0a93f13ffc5a45989669399492733b10",
                                "typeString": "literal_string \"wrong state\""
                              },
                              "value": "wrong state"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5707d4fbf04e9bc9ef481445136a118e0a93f13ffc5a45989669399492733b10",
                                "typeString": "literal_string \"wrong state\""
                              }
                            ],
                            "id": 3365,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4408:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4408:63:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3372,
                        "nodeType": "ExpressionStatement",
                        "src": "4408:63:15"
                      },
                      {
                        "assignments": [
                          3374
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3374,
                            "mutability": "mutable",
                            "name": "zero",
                            "nameLocation": "4490:4:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3446,
                            "src": "4477:17:15",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 3373,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "4477:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3375,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4477:17:15"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 3382,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 3377,
                                "name": "validatorPubKey",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2918,
                                "src": "4513:15:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_storage",
                                  "typeString": "bytes storage ref"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_storage",
                                  "typeString": "bytes storage ref"
                                }
                              ],
                              "id": 3376,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "4503:9:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 3378,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4503:26:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [
                              {
                                "id": 3380,
                                "name": "zero",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3374,
                                "src": "4543:4:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 3379,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "4533:9:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 3381,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4533:15:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "4503:45:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "expression": {
                            "id": 3397,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 3395,
                              "name": "validatorPubKey",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2918,
                              "src": "4664:15:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage",
                                "typeString": "bytes storage ref"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "id": 3396,
                              "name": "pubkey",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3343,
                              "src": "4682:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            },
                            "src": "4664:24:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage",
                              "typeString": "bytes storage ref"
                            }
                          },
                          "id": 3398,
                          "nodeType": "ExpressionStatement",
                          "src": "4664:24:15"
                        },
                        "id": 3399,
                        "nodeType": "IfStatement",
                        "src": "4500:188:15",
                        "trueBody": {
                          "id": 3394,
                          "nodeType": "Block",
                          "src": "4549:109:15",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    "id": 3390,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "arguments": [
                                        {
                                          "id": 3385,
                                          "name": "validatorPubKey",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2918,
                                          "src": "4575:15:15",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_storage",
                                            "typeString": "bytes storage ref"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes_storage",
                                            "typeString": "bytes storage ref"
                                          }
                                        ],
                                        "id": 3384,
                                        "name": "keccak256",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -8,
                                        "src": "4565:9:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                          "typeString": "function (bytes memory) pure returns (bytes32)"
                                        }
                                      },
                                      "id": 3386,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "4565:26:15",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "arguments": [
                                        {
                                          "id": 3388,
                                          "name": "pubkey",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 3343,
                                          "src": "4605:6:15",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_calldata_ptr",
                                            "typeString": "bytes calldata"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes_calldata_ptr",
                                            "typeString": "bytes calldata"
                                          }
                                        ],
                                        "id": 3387,
                                        "name": "keccak256",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -8,
                                        "src": "4595:9:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                          "typeString": "function (bytes memory) pure returns (bytes32)"
                                        }
                                      },
                                      "id": 3389,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "4595:17:15",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "src": "4565:47:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "7075626b657920646f6573206e6f74206d617463682073746f7265642076616c7565",
                                    "id": 3391,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4614:36:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_1f95e1006439a03f464ded557f26b38b2cf611c266c988e8828aea8d1d9aca8c",
                                      "typeString": "literal_string \"pubkey does not match stored value\""
                                    },
                                    "value": "pubkey does not match stored value"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_1f95e1006439a03f464ded557f26b38b2cf611c266c988e8828aea8d1d9aca8c",
                                      "typeString": "literal_string \"pubkey does not match stored value\""
                                    }
                                  ],
                                  "id": 3383,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "4557:7:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 3392,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4557:94:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 3393,
                              "nodeType": "ExpressionStatement",
                              "src": "4557:94:15"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 3403,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3400,
                            "name": "currentState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2912,
                            "src": "4694:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 3401,
                              "name": "State",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2909,
                              "src": "4709:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                "typeString": "type(enum StakingPool.State)"
                              }
                            },
                            "id": 3402,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "4715:6:15",
                            "memberName": "staked",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2907,
                            "src": "4709:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "src": "4694:27:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$2909",
                            "typeString": "enum StakingPool.State"
                          }
                        },
                        "id": 3404,
                        "nodeType": "ExpressionStatement",
                        "src": "4694:27:15"
                      },
                      {
                        "assignments": [
                          3406
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3406,
                            "mutability": "mutable",
                            "name": "value",
                            "nameLocation": "4732:5:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3446,
                            "src": "4727:10:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3405,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "4727:4:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3408,
                        "initialValue": {
                          "hexValue": "3332",
                          "id": 3407,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4740:8:15",
                          "subdenomination": "ether",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_32000000000000000000_by_1",
                            "typeString": "int_const 32000000000000000000"
                          },
                          "value": "32"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4727:21:15"
                      },
                      {
                        "assignments": [
                          3410
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3410,
                            "mutability": "mutable",
                            "name": "withdrawalCredFromAddr",
                            "nameLocation": "4835:22:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3446,
                            "src": "4822:35:15",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 3409,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "4822:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3417,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 3414,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "4886:4:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                ],
                                "id": 3413,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4878:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3412,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4878:7:15",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3415,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4878:13:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3411,
                            "name": "_toWithdrawalCred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3476,
                            "src": "4860:17:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address) pure returns (bytes memory)"
                            }
                          },
                          "id": 3416,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4860:32:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4822:70:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              "id": 3425,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 3420,
                                    "name": "withdrawal_credentials",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3345,
                                    "src": "4974:22:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  ],
                                  "id": 3419,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -8,
                                  "src": "4964:9:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 3421,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4964:33:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 3423,
                                    "name": "withdrawalCredFromAddr",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3410,
                                    "src": "5011:22:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "id": 3422,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -8,
                                  "src": "5001:9:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 3424,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5001:33:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "src": "4964:70:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "7769746864726177616c2063726564656e7469616c206d69736d61746368",
                              "id": 3426,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5036:32:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_4d3bad30e34d265ba637120749aea53712f8ab28de2e5f774effbd4113b7d808",
                                "typeString": "literal_string \"withdrawal credential mismatch\""
                              },
                              "value": "withdrawal credential mismatch"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_4d3bad30e34d265ba637120749aea53712f8ab28de2e5f774effbd4113b7d808",
                                "typeString": "literal_string \"withdrawal credential mismatch\""
                              }
                            ],
                            "id": 3418,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4956:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3427,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4956:113:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3428,
                        "nodeType": "ExpressionStatement",
                        "src": "4956:113:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3434,
                              "name": "pubkey",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3343,
                              "src": "5113:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            },
                            {
                              "id": 3435,
                              "name": "withdrawal_credentials",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3345,
                              "src": "5121:22:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            },
                            {
                              "id": 3436,
                              "name": "signature",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3347,
                              "src": "5145:9:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            },
                            {
                              "id": 3437,
                              "name": "deposit_data_root",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3349,
                              "src": "5156:17:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              },
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              },
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_calldata_ptr",
                                  "typeString": "bytes calldata"
                                },
                                {
                                  "typeIdentifier": "t_bytes_calldata_ptr",
                                  "typeString": "bytes calldata"
                                },
                                {
                                  "typeIdentifier": "t_bytes_calldata_ptr",
                                  "typeString": "bytes calldata"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "expression": {
                                "id": 3429,
                                "name": "depositContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2921,
                                "src": "5075:15:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IDepositContract_$3815",
                                  "typeString": "contract IDepositContract"
                                }
                              },
                              "id": 3431,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5091:7:15",
                              "memberName": "deposit",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3814,
                              "src": "5075:23:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_payable$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes32_$returns$__$",
                                "typeString": "function (bytes memory,bytes memory,bytes memory,bytes32) payable external"
                              }
                            },
                            "id": 3433,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 3432,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3406,
                                "src": "5106:5:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "5075:37:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_payable$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes32_$returns$__$value",
                              "typeString": "function (bytes memory,bytes memory,bytes memory,bytes32) payable external"
                            }
                          },
                          "id": 3438,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5075:99:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3439,
                        "nodeType": "ExpressionStatement",
                        "src": "5075:99:15"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3441,
                              "name": "depositContractAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2914,
                              "src": "5193:22:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 3442,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "5217:3:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3443,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5221:6:15",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "5217:10:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3440,
                            "name": "Deposit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2896,
                            "src": "5185:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 3444,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5185:43:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3445,
                        "nodeType": "EmitStatement",
                        "src": "5180:48:15"
                      }
                    ]
                  },
                  "functionSelector": "4b2b4e36",
                  "id": 3447,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 3352,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3351,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "4327:9:15"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 46,
                        "src": "4327:9:15"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4327:9:15"
                    }
                  ],
                  "name": "stake",
                  "nameLocation": "4179:5:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3350,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3343,
                        "mutability": "mutable",
                        "name": "pubkey",
                        "nameLocation": "4205:6:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3447,
                        "src": "4190:21:15",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3342,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4190:5:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3345,
                        "mutability": "mutable",
                        "name": "withdrawal_credentials",
                        "nameLocation": "4232:22:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3447,
                        "src": "4217:37:15",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3344,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4217:5:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3347,
                        "mutability": "mutable",
                        "name": "signature",
                        "nameLocation": "4275:9:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3447,
                        "src": "4260:24:15",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3346,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4260:5:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3349,
                        "mutability": "mutable",
                        "name": "deposit_data_root",
                        "nameLocation": "4298:17:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3447,
                        "src": "4290:25:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3348,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4290:7:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4184:135:15"
                  },
                  "returnParameters": {
                    "id": 3353,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4336:0:15"
                  },
                  "scope": 3530,
                  "src": "4170:1063:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3475,
                    "nodeType": "Block",
                    "src": "5311:220:15",
                    "statements": [
                      {
                        "assignments": [
                          3455
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3455,
                            "mutability": "mutable",
                            "name": "uintFromAddress",
                            "nameLocation": "5322:15:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3475,
                            "src": "5317:20:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3454,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "5317:4:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3463,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 3460,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3449,
                                  "src": "5356:1:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 3459,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "5348:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint160_$",
                                  "typeString": "type(uint160)"
                                },
                                "typeName": {
                                  "id": 3458,
                                  "name": "uint160",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "5348:7:15",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3461,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5348:10:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint160",
                                "typeString": "uint160"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint160",
                                "typeString": "uint160"
                              }
                            ],
                            "id": 3457,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5340:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 3456,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5340:7:15",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 3462,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5340:19:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5317:42:15"
                      },
                      {
                        "assignments": [
                          3465
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3465,
                            "mutability": "mutable",
                            "name": "withdralDesired",
                            "nameLocation": "5378:15:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3475,
                            "src": "5365:28:15",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 3464,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "5365:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3472,
                        "initialValue": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3470,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3468,
                                "name": "uintFromAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3455,
                                "src": "5413:15:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030",
                                "id": 3469,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5431:66:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_452312848583266388373324160190187140051835877600158453279131187530910662656_by_1",
                                  "typeString": "int_const 4523...(67 digits omitted)...2656"
                                },
                                "value": "0x0100000000000000000000000000000000000000000000000000000000000000"
                              },
                              "src": "5413:84:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 3466,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "5396:3:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 3467,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "5400:12:15",
                            "memberName": "encodePacked",
                            "nodeType": "MemberAccess",
                            "src": "5396:16:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 3471,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5396:102:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5365:133:15"
                      },
                      {
                        "expression": {
                          "id": 3473,
                          "name": "withdralDesired",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3465,
                          "src": "5511:15:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 3453,
                        "id": 3474,
                        "nodeType": "Return",
                        "src": "5504:22:15"
                      }
                    ]
                  },
                  "id": 3476,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_toWithdrawalCred",
                  "nameLocation": "5246:17:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3450,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3449,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "5272:1:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3476,
                        "src": "5264:9:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3448,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5264:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5263:11:15"
                  },
                  "returnParameters": {
                    "id": 3453,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3452,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3476,
                        "src": "5297:12:15",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3451,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5297:5:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5296:14:15"
                  },
                  "scope": 3530,
                  "src": "5237:294:15",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 3494,
                    "nodeType": "Block",
                    "src": "5648:62:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 3489,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "5691:4:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_StakingPool_$3530",
                                      "typeString": "contract StakingPool"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_StakingPool_$3530",
                                      "typeString": "contract StakingPool"
                                    }
                                  ],
                                  "id": 3488,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5683:7:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 3487,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5683:7:15",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 3490,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5683:13:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 3491,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5697:7:15",
                              "memberName": "balance",
                              "nodeType": "MemberAccess",
                              "src": "5683:21:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 3483,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "5662:3:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 3484,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5666:6:15",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "5662:10:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 3482,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "5654:8:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                  "typeString": "type(address payable)"
                                },
                                "typeName": {
                                  "id": 3481,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "5654:8:15",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3485,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5654:19:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "id": 3486,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5674:8:15",
                            "memberName": "transfer",
                            "nodeType": "MemberAccess",
                            "src": "5654:28:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 3492,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5654:51:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3493,
                        "nodeType": "ExpressionStatement",
                        "src": "5654:51:15"
                      }
                    ]
                  },
                  "functionSelector": "e2664e49",
                  "id": 3495,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 3479,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3478,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "5639:9:15"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 46,
                        "src": "5639:9:15"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "5639:9:15"
                    }
                  ],
                  "name": "rugpull",
                  "nameLocation": "5622:7:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3477,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5629:2:15"
                  },
                  "returnParameters": {
                    "id": 3480,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5648:0:15"
                  },
                  "scope": 3530,
                  "src": "5613:97:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3508,
                    "nodeType": "Block",
                    "src": "5877:67:15",
                    "statements": [
                      {
                        "expression": {
                          "id": 3506,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3502,
                            "name": "frensPoolShare",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2927,
                            "src": "5883:14:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                              "typeString": "contract IFrensPoolShare"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 3504,
                                "name": "frensPoolShareAddress_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3497,
                                "src": "5916:22:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 3503,
                              "name": "IFrensPoolShare",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3849,
                              "src": "5900:15:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IFrensPoolShare_$3849_$",
                                "typeString": "type(contract IFrensPoolShare)"
                              }
                            },
                            "id": 3505,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5900:39:15",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                              "typeString": "contract IFrensPoolShare"
                            }
                          },
                          "src": "5883:56:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IFrensPoolShare_$3849",
                            "typeString": "contract IFrensPoolShare"
                          }
                        },
                        "id": 3507,
                        "nodeType": "ExpressionStatement",
                        "src": "5883:56:15"
                      }
                    ]
                  },
                  "functionSelector": "2edaf74d",
                  "id": 3509,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 3500,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3499,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "5867:9:15"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 46,
                        "src": "5867:9:15"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "5867:9:15"
                    }
                  ],
                  "name": "setFrensPoolShare",
                  "nameLocation": "5810:17:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3498,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3497,
                        "mutability": "mutable",
                        "name": "frensPoolShareAddress_",
                        "nameLocation": "5836:22:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 3509,
                        "src": "5828:30:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3496,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5828:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5827:32:15"
                  },
                  "returnParameters": {
                    "id": 3501,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5877:0:15"
                  },
                  "scope": 3530,
                  "src": "5801:143:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3520,
                    "nodeType": "Block",
                    "src": "5974:149:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 3512,
                            "name": "distribute",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3198,
                            "src": "5980:10:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 3513,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5980:12:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3514,
                        "nodeType": "ExpressionStatement",
                        "src": "5980:12:15"
                      },
                      {
                        "expression": {
                          "id": 3518,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3515,
                            "name": "currentState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2912,
                            "src": "5998:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 3516,
                              "name": "State",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2909,
                              "src": "6013:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_State_$2909_$",
                                "typeString": "type(enum StakingPool.State)"
                              }
                            },
                            "id": 3517,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "6019:6:15",
                            "memberName": "exited",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2908,
                            "src": "6013:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$2909",
                              "typeString": "enum StakingPool.State"
                            }
                          },
                          "src": "5998:27:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$2909",
                            "typeString": "enum StakingPool.State"
                          }
                        },
                        "id": 3519,
                        "nodeType": "ExpressionStatement",
                        "src": "5998:27:15"
                      }
                    ]
                  },
                  "functionSelector": "2def6620",
                  "id": 3521,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "unstake",
                  "nameLocation": "5957:7:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3510,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5964:2:15"
                  },
                  "returnParameters": {
                    "id": 3511,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5974:0:15"
                  },
                  "scope": 3530,
                  "src": "5948:175:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3524,
                    "nodeType": "Block",
                    "src": "6196:124:15",
                    "statements": []
                  },
                  "id": 3525,
                  "implemented": true,
                  "kind": "receive",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3522,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6176:2:15"
                  },
                  "returnParameters": {
                    "id": 3523,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6196:0:15"
                  },
                  "scope": 3530,
                  "src": "6169:151:15",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 3528,
                    "nodeType": "Block",
                    "src": "6352:2:15",
                    "statements": []
                  },
                  "id": 3529,
                  "implemented": true,
                  "kind": "fallback",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3526,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6332:2:15"
                  },
                  "returnParameters": {
                    "id": 3527,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6352:0:15"
                  },
                  "scope": 3530,
                  "src": "6324:30:15",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 3531,
              "src": "352:6004:15",
              "usedErrors": []
            }
          ],
          "src": "0:6357:15"
        },
        "id": 15
      },
      "contracts/StakingPoolFactory.sol": {
        "ast": {
          "absolutePath": "contracts/StakingPoolFactory.sol",
          "exportedSymbols": {
            "Context": [
              1787
            ],
            "IDepositContract": [
              3815
            ],
            "IERC165": [
              2026
            ],
            "IERC721": [
              1054
            ],
            "IERC721Enumerable": [
              1441
            ],
            "IFrensPoolShare": [
              3849
            ],
            "IStakingPoolFactory": [
              4130
            ],
            "Ownable": [
              104
            ],
            "StakingPool": [
              3530
            ],
            "StakingPoolFactory": [
              3725
            ]
          },
          "id": 3726,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 3532,
              "literals": [
                "solidity",
                ">=",
                "0.8",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:31:16"
            },
            {
              "absolutePath": "contracts/StakingPool.sol",
              "file": "./StakingPool.sol",
              "id": 3533,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 3726,
              "sourceUnit": 3531,
              "src": "65:27:16",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
              "file": "@openzeppelin/contracts/access/Ownable.sol",
              "id": 3534,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 3726,
              "sourceUnit": 105,
              "src": "93:52:16",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 3535,
                    "name": "Ownable",
                    "nameLocations": [
                      "179:7:16"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 104,
                    "src": "179:7:16"
                  },
                  "id": 3536,
                  "nodeType": "InheritanceSpecifier",
                  "src": "179:7:16"
                }
              ],
              "canonicalName": "StakingPoolFactory",
              "contractDependencies": [
                3530
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 3725,
              "linearizedBaseContracts": [
                3725,
                104,
                1787
              ],
              "name": "StakingPoolFactory",
              "nameLocation": "157:18:16",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "5aad6cf0",
                  "id": 3540,
                  "mutability": "mutable",
                  "name": "stakingPools",
                  "nameLocation": "214:12:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 3725,
                  "src": "193:33:16",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_StakingPool_$3530_$dyn_storage",
                    "typeString": "contract StakingPool[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3538,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3537,
                        "name": "StakingPool",
                        "nameLocations": [
                          "193:11:16"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3530,
                        "src": "193:11:16"
                      },
                      "referencedDeclaration": 3530,
                      "src": "193:11:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_StakingPool_$3530",
                        "typeString": "contract StakingPool"
                      }
                    },
                    "id": 3539,
                    "nodeType": "ArrayTypeName",
                    "src": "193:13:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_StakingPool_$3530_$dyn_storage_ptr",
                      "typeString": "contract StakingPool[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 3544,
                  "mutability": "mutable",
                  "name": "existsStakingPool",
                  "nameLocation": "255:17:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 3725,
                  "src": "230:42:16",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "typeName": {
                    "id": 3543,
                    "keyType": {
                      "id": 3541,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "238:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "230:24:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                      "typeString": "mapping(address => bool)"
                    },
                    "valueType": {
                      "id": 3542,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "249:4:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3546,
                  "mutability": "mutable",
                  "name": "depositContractAddress",
                  "nameLocation": "286:22:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 3725,
                  "src": "278:30:16",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3545,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "278:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3548,
                  "mutability": "mutable",
                  "name": "ssvRegistryAddress",
                  "nameLocation": "320:18:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 3725,
                  "src": "312:26:16",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3547,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "312:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3550,
                  "mutability": "mutable",
                  "name": "frensPoolShareAddress",
                  "nameLocation": "350:21:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 3725,
                  "src": "342:29:16",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3549,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "342:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "anonymous": false,
                  "eventSelector": "18cc83251b20febb5b0c01f457a3e15b6e2eb22f48b01a0b9e5a24012cc2f692",
                  "id": 3562,
                  "name": "Create",
                  "nameLocation": "382:6:16",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3561,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3552,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "contractId",
                        "nameLocation": "407:10:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3562,
                        "src": "394:23:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3551,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "394:4:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3554,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "contractAddress",
                        "nameLocation": "470:15:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3562,
                        "src": "454:31:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3553,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "454:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3556,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "creator",
                        "nameLocation": "499:7:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3562,
                        "src": "491:15:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3555,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "491:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3558,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "520:5:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3562,
                        "src": "512:13:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3557,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "512:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3560,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "depositContractAddress",
                        "nameLocation": "539:22:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3562,
                        "src": "531:30:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3559,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "531:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "388:177:16"
                  },
                  "src": "376:190:16"
                },
                {
                  "anonymous": false,
                  "eventSelector": "767d0acba39e4cf96349b168ed9d32211fb4940be0f3549d31154941785c9b6a",
                  "id": 3571,
                  "name": "Owners",
                  "nameLocation": "576:6:16",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3570,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3564,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "contractAddress",
                        "nameLocation": "604:15:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3571,
                        "src": "588:31:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3563,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "588:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3567,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "owners",
                        "nameLocation": "635:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3571,
                        "src": "625:16:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 3565,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "625:7:16",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 3566,
                          "nodeType": "ArrayTypeName",
                          "src": "625:9:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3569,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "signaturesRequired",
                        "nameLocation": "663:18:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3571,
                        "src": "647:34:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3568,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "647:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "582:103:16"
                  },
                  "src": "570:116:16"
                },
                {
                  "body": {
                    "id": 3586,
                    "nodeType": "Block",
                    "src": "757:97:16",
                    "statements": [
                      {
                        "expression": {
                          "id": 3580,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3578,
                            "name": "depositContractAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3546,
                            "src": "763:22:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3579,
                            "name": "depContAddress_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3573,
                            "src": "788:15:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "763:40:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 3581,
                        "nodeType": "ExpressionStatement",
                        "src": "763:40:16"
                      },
                      {
                        "expression": {
                          "id": 3584,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3582,
                            "name": "ssvRegistryAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3548,
                            "src": "809:18:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3583,
                            "name": "ssvRegistryAddress_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3575,
                            "src": "830:19:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "809:40:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 3585,
                        "nodeType": "ExpressionStatement",
                        "src": "809:40:16"
                      }
                    ]
                  },
                  "id": 3587,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3576,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3573,
                        "mutability": "mutable",
                        "name": "depContAddress_",
                        "nameLocation": "711:15:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3587,
                        "src": "703:23:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3572,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "703:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3575,
                        "mutability": "mutable",
                        "name": "ssvRegistryAddress_",
                        "nameLocation": "736:19:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3587,
                        "src": "728:27:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3574,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "728:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "702:54:16"
                  },
                  "returnParameters": {
                    "id": 3577,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "757:0:16"
                  },
                  "scope": 3725,
                  "src": "691:163:16",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3598,
                    "nodeType": "Block",
                    "src": "933:57:16",
                    "statements": [
                      {
                        "expression": {
                          "id": 3596,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3594,
                            "name": "frensPoolShareAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3550,
                            "src": "939:21:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3595,
                            "name": "frensPoolShareAddress_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3589,
                            "src": "963:22:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "939:46:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 3597,
                        "nodeType": "ExpressionStatement",
                        "src": "939:46:16"
                      }
                    ]
                  },
                  "functionSelector": "2edaf74d",
                  "id": 3599,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 3592,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3591,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "923:9:16"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 46,
                        "src": "923:9:16"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "923:9:16"
                    }
                  ],
                  "name": "setFrensPoolShare",
                  "nameLocation": "866:17:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3590,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3589,
                        "mutability": "mutable",
                        "name": "frensPoolShareAddress_",
                        "nameLocation": "892:22:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3599,
                        "src": "884:30:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3588,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "884:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "883:32:16"
                  },
                  "returnParameters": {
                    "id": 3593,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "933:0:16"
                  },
                  "scope": 3725,
                  "src": "857:133:16",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3668,
                    "nodeType": "Block",
                    "src": "1065:422:16",
                    "statements": [
                      {
                        "assignments": [
                          3609
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3609,
                            "mutability": "mutable",
                            "name": "id",
                            "nameLocation": "1076:2:16",
                            "nodeType": "VariableDeclaration",
                            "scope": 3668,
                            "src": "1071:7:16",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3608,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "1071:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3612,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 3610,
                            "name": "numberOfStakingPools",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3678,
                            "src": "1081:20:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 3611,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1081:22:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1071:32:16"
                      },
                      {
                        "assignments": [
                          3615
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3615,
                            "mutability": "mutable",
                            "name": "stakingPool",
                            "nameLocation": "1122:11:16",
                            "nodeType": "VariableDeclaration",
                            "scope": 3668,
                            "src": "1110:23:16",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_StakingPool_$3530",
                              "typeString": "contract StakingPool"
                            },
                            "typeName": {
                              "id": 3614,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 3613,
                                "name": "StakingPool",
                                "nameLocations": [
                                  "1110:11:16"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 3530,
                                "src": "1110:11:16"
                              },
                              "referencedDeclaration": 3530,
                              "src": "1110:11:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_StakingPool_$3530",
                                "typeString": "contract StakingPool"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3626,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 3619,
                              "name": "depositContractAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3546,
                              "src": "1152:22:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 3622,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "1184:4:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_StakingPoolFactory_$3725",
                                    "typeString": "contract StakingPoolFactory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_StakingPoolFactory_$3725",
                                    "typeString": "contract StakingPoolFactory"
                                  }
                                ],
                                "id": 3621,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1176:7:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3620,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1176:7:16",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3623,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1176:13:16",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3624,
                              "name": "frensPoolShareAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3550,
                              "src": "1191:21:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3618,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "1136:15:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_creation_nonpayable$_t_address_$_t_address_$_t_address_$returns$_t_contract$_StakingPool_$3530_$",
                              "typeString": "function (address,address,address) returns (contract StakingPool)"
                            },
                            "typeName": {
                              "id": 3617,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 3616,
                                "name": "StakingPool",
                                "nameLocations": [
                                  "1140:11:16"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 3530,
                                "src": "1140:11:16"
                              },
                              "referencedDeclaration": 3530,
                              "src": "1140:11:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_StakingPool_$3530",
                                "typeString": "contract StakingPool"
                              }
                            }
                          },
                          "id": 3625,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1136:77:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_StakingPool_$3530",
                            "typeString": "contract StakingPool"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1110:103:16"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3630,
                              "name": "stakingPool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3615,
                              "src": "1237:11:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_StakingPool_$3530",
                                "typeString": "contract StakingPool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_StakingPool_$3530",
                                "typeString": "contract StakingPool"
                              }
                            ],
                            "expression": {
                              "id": 3627,
                              "name": "stakingPools",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3540,
                              "src": "1219:12:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_contract$_StakingPool_$3530_$dyn_storage",
                                "typeString": "contract StakingPool[] storage ref"
                              }
                            },
                            "id": 3629,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1232:4:16",
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "1219:17:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_contract$_StakingPool_$3530_$dyn_storage_ptr_$_t_contract$_StakingPool_$3530_$returns$__$bound_to$_t_array$_t_contract$_StakingPool_$3530_$dyn_storage_ptr_$",
                              "typeString": "function (contract StakingPool[] storage pointer,contract StakingPool)"
                            }
                          },
                          "id": 3631,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1219:30:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3632,
                        "nodeType": "ExpressionStatement",
                        "src": "1219:30:16"
                      },
                      {
                        "expression": {
                          "id": 3640,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 3633,
                              "name": "existsStakingPool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3544,
                              "src": "1255:17:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 3638,
                            "indexExpression": {
                              "arguments": [
                                {
                                  "id": 3636,
                                  "name": "stakingPool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3615,
                                  "src": "1281:11:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                ],
                                "id": 3635,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1273:7:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3634,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1273:7:16",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3637,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1273:20:16",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1255:39:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 3639,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1297:4:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "1255:46:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3641,
                        "nodeType": "ExpressionStatement",
                        "src": "1255:46:16"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3646,
                              "name": "owner_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3601,
                              "src": "1350:6:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 3643,
                                  "name": "stakingPool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3615,
                                  "src": "1319:11:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                ],
                                "id": 3642,
                                "name": "StakingPool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3530,
                                "src": "1307:11:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_StakingPool_$3530_$",
                                  "typeString": "type(contract StakingPool)"
                                }
                              },
                              "id": 3644,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1307:24:16",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_StakingPool_$3530",
                                "typeString": "contract StakingPool"
                              }
                            },
                            "id": 3645,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1332:17:16",
                            "memberName": "transferOwnership",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 83,
                            "src": "1307:42:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address) external"
                            }
                          },
                          "id": 3647,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1307:50:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3648,
                        "nodeType": "ExpressionStatement",
                        "src": "1307:50:16"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3650,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3609,
                              "src": "1375:2:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 3653,
                                  "name": "stakingPool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3615,
                                  "src": "1387:11:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                ],
                                "id": 3652,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1379:7:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3651,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1379:7:16",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3654,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1379:20:16",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 3655,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "1401:3:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3656,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1405:6:16",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1401:10:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3657,
                              "name": "owner_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3601,
                              "src": "1413:6:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3658,
                              "name": "depositContractAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3546,
                              "src": "1421:22:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3649,
                            "name": "Create",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3562,
                            "src": "1368:6:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (uint256,address,address,address,address)"
                            }
                          },
                          "id": 3659,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1368:76:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3660,
                        "nodeType": "EmitStatement",
                        "src": "1363:81:16"
                      },
                      {
                        "expression": {
                          "components": [
                            {
                              "arguments": [
                                {
                                  "id": 3663,
                                  "name": "stakingPool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3615,
                                  "src": "1465:11:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                ],
                                "id": 3662,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1457:7:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3661,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1457:7:16",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3664,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1457:20:16",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3665,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3609,
                              "src": "1479:2:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 3666,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1456:26:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
                            "typeString": "tuple(address,uint256)"
                          }
                        },
                        "functionReturnParameters": 3607,
                        "id": 3667,
                        "nodeType": "Return",
                        "src": "1450:32:16"
                      }
                    ]
                  },
                  "functionSelector": "9ed93318",
                  "id": 3669,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "create",
                  "nameLocation": "1004:6:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3602,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3601,
                        "mutability": "mutable",
                        "name": "owner_",
                        "nameLocation": "1024:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3669,
                        "src": "1016:14:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3600,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1016:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1010:24:16"
                  },
                  "returnParameters": {
                    "id": 3607,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3604,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3669,
                        "src": "1050:7:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3603,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1050:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3606,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3669,
                        "src": "1059:4:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3605,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1059:4:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1049:15:16"
                  },
                  "scope": 3725,
                  "src": "995:492:16",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3677,
                    "nodeType": "Block",
                    "src": "1549:37:16",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 3674,
                            "name": "stakingPools",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3540,
                            "src": "1562:12:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_contract$_StakingPool_$3530_$dyn_storage",
                              "typeString": "contract StakingPool[] storage ref"
                            }
                          },
                          "id": 3675,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1575:6:16",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "1562:19:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 3673,
                        "id": 3676,
                        "nodeType": "Return",
                        "src": "1555:26:16"
                      }
                    ]
                  },
                  "functionSelector": "6202d396",
                  "id": 3678,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "numberOfStakingPools",
                  "nameLocation": "1500:20:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3670,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1520:2:16"
                  },
                  "returnParameters": {
                    "id": 3673,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3672,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3678,
                        "src": "1543:4:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3671,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1543:4:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1542:6:16"
                  },
                  "scope": 3725,
                  "src": "1491:95:16",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3710,
                    "nodeType": "Block",
                    "src": "1724:143:16",
                    "statements": [
                      {
                        "assignments": [
                          3691
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3691,
                            "mutability": "mutable",
                            "name": "stakingPool",
                            "nameLocation": "1742:11:16",
                            "nodeType": "VariableDeclaration",
                            "scope": 3710,
                            "src": "1730:23:16",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_StakingPool_$3530",
                              "typeString": "contract StakingPool"
                            },
                            "typeName": {
                              "id": 3690,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 3689,
                                "name": "StakingPool",
                                "nameLocations": [
                                  "1730:11:16"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 3530,
                                "src": "1730:11:16"
                              },
                              "referencedDeclaration": 3530,
                              "src": "1730:11:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_StakingPool_$3530",
                                "typeString": "contract StakingPool"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3695,
                        "initialValue": {
                          "baseExpression": {
                            "id": 3692,
                            "name": "stakingPools",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3540,
                            "src": "1756:12:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_contract$_StakingPool_$3530_$dyn_storage",
                              "typeString": "contract StakingPool[] storage ref"
                            }
                          },
                          "id": 3694,
                          "indexExpression": {
                            "id": 3693,
                            "name": "_index",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3680,
                            "src": "1769:6:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1756:20:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_StakingPool_$3530",
                            "typeString": "contract StakingPool"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1730:46:16"
                      },
                      {
                        "expression": {
                          "components": [
                            {
                              "arguments": [
                                {
                                  "id": 3698,
                                  "name": "stakingPool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3691,
                                  "src": "1798:11:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                ],
                                "id": 3697,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1790:7:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3696,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1790:7:16",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3699,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1790:20:16",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 3702,
                                    "name": "stakingPool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3691,
                                    "src": "1820:11:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_StakingPool_$3530",
                                      "typeString": "contract StakingPool"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_StakingPool_$3530",
                                      "typeString": "contract StakingPool"
                                    }
                                  ],
                                  "id": 3701,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1812:7:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 3700,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1812:7:16",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 3703,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1812:20:16",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 3704,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1833:7:16",
                              "memberName": "balance",
                              "nodeType": "MemberAccess",
                              "src": "1812:28:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 3705,
                                  "name": "stakingPool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3691,
                                  "src": "1842:11:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_StakingPool_$3530",
                                    "typeString": "contract StakingPool"
                                  }
                                },
                                "id": 3706,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1854:5:16",
                                "memberName": "owner",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 32,
                                "src": "1842:17:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                                  "typeString": "function () view external returns (address)"
                                }
                              },
                              "id": 3707,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1842:19:16",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "id": 3708,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1789:73:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_address_$_t_uint256_$_t_address_$",
                            "typeString": "tuple(address,uint256,address)"
                          }
                        },
                        "functionReturnParameters": 3688,
                        "id": 3709,
                        "nodeType": "Return",
                        "src": "1782:80:16"
                      }
                    ]
                  },
                  "functionSelector": "a2b44d75",
                  "id": 3711,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getStakingPool",
                  "nameLocation": "1599:14:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3681,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3680,
                        "mutability": "mutable",
                        "name": "_index",
                        "nameLocation": "1622:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3711,
                        "src": "1614:14:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3679,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1614:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1613:16:16"
                  },
                  "returnParameters": {
                    "id": 3688,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3683,
                        "mutability": "mutable",
                        "name": "stakingPoolAddress",
                        "nameLocation": "1664:18:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3711,
                        "src": "1656:26:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3682,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1656:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3685,
                        "mutability": "mutable",
                        "name": "balance",
                        "nameLocation": "1693:7:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3711,
                        "src": "1688:12:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3684,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1688:4:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3687,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1714:5:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3711,
                        "src": "1706:13:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3686,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1706:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1650:73:16"
                  },
                  "scope": 3725,
                  "src": "1590:277:16",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3723,
                    "nodeType": "Block",
                    "src": "1955:57:16",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "baseExpression": {
                                "id": 3718,
                                "name": "existsStakingPool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3544,
                                "src": "1968:17:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 3720,
                              "indexExpression": {
                                "id": 3719,
                                "name": "_stakingPoolAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3713,
                                "src": "1986:19:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1968:38:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "id": 3721,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1967:40:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 3717,
                        "id": 3722,
                        "nodeType": "Return",
                        "src": "1961:46:16"
                      }
                    ]
                  },
                  "functionSelector": "76f42f8a",
                  "id": 3724,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "doesStakingPoolExist",
                  "nameLocation": "1880:20:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3714,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3713,
                        "mutability": "mutable",
                        "name": "_stakingPoolAddress",
                        "nameLocation": "1909:19:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 3724,
                        "src": "1901:27:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3712,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1901:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1900:29:16"
                  },
                  "returnParameters": {
                    "id": 3717,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3716,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3724,
                        "src": "1950:4:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3715,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1950:4:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1949:6:16"
                  },
                  "scope": 3725,
                  "src": "1871:141:16",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "scope": 3726,
              "src": "148:1868:16",
              "usedErrors": []
            }
          ],
          "src": "32:1985:16"
        },
        "id": 16
      },
      "contracts/ToColor.sol": {
        "ast": {
          "absolutePath": "contracts/ToColor.sol",
          "exportedSymbols": {
            "ToColor": [
              3801
            ]
          },
          "id": 3802,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 3727,
              "literals": [
                "solidity",
                ">=",
                "0.8",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:31:17"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "ToColor",
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 3801,
              "linearizedBaseContracts": [
                3801
              ],
              "name": "ToColor",
              "nameLocation": "73:7:17",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 3730,
                  "mutability": "constant",
                  "name": "ALPHABET",
                  "nameLocation": "113:8:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 3801,
                  "src": "87:55:17",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes16",
                    "typeString": "bytes16"
                  },
                  "typeName": {
                    "id": 3728,
                    "name": "bytes16",
                    "nodeType": "ElementaryTypeName",
                    "src": "87:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes16",
                      "typeString": "bytes16"
                    }
                  },
                  "value": {
                    "hexValue": "30313233343536373839616263646566",
                    "id": 3729,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "124:18:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
                      "typeString": "literal_string \"0123456789abcdef\""
                    },
                    "value": "0123456789abcdef"
                  },
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3799,
                    "nodeType": "Block",
                    "src": "218:245:17",
                    "statements": [
                      {
                        "assignments": [
                          3738
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3738,
                            "mutability": "mutable",
                            "name": "buffer",
                            "nameLocation": "239:6:17",
                            "nodeType": "VariableDeclaration",
                            "scope": 3799,
                            "src": "226:19:17",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 3737,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "226:5:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3743,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "36",
                              "id": 3741,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "258:1:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              },
                              "value": "6"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              }
                            ],
                            "id": 3740,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "248:9:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (bytes memory)"
                            },
                            "typeName": {
                              "id": 3739,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "252:5:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            }
                          },
                          "id": 3742,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "248:12:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "226:34:17"
                      },
                      {
                        "body": {
                          "id": 3792,
                          "nodeType": "Block",
                          "src": "300:128:17",
                          "statements": [
                            {
                              "expression": {
                                "id": 3771,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 3754,
                                    "name": "buffer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3738,
                                    "src": "312:6:17",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 3760,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 3759,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 3757,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 3755,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3745,
                                        "src": "319:1:17",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "hexValue": "32",
                                        "id": 3756,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "321:1:17",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_2_by_1",
                                          "typeString": "int_const 2"
                                        },
                                        "value": "2"
                                      },
                                      "src": "319:3:17",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "hexValue": "31",
                                      "id": 3758,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "323:1:17",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "319:5:17",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "312:13:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 3761,
                                    "name": "ALPHABET",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3730,
                                    "src": "328:8:17",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes16",
                                      "typeString": "bytes16"
                                    }
                                  },
                                  "id": 3770,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    "id": 3769,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "arguments": [
                                        {
                                          "baseExpression": {
                                            "id": 3764,
                                            "name": "value",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 3732,
                                            "src": "343:5:17",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes3",
                                              "typeString": "bytes3"
                                            }
                                          },
                                          "id": 3766,
                                          "indexExpression": {
                                            "id": 3765,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 3745,
                                            "src": "349:1:17",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "343:8:17",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes1",
                                            "typeString": "bytes1"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes1",
                                            "typeString": "bytes1"
                                          }
                                        ],
                                        "id": 3763,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "337:5:17",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_uint8_$",
                                          "typeString": "type(uint8)"
                                        },
                                        "typeName": {
                                          "id": 3762,
                                          "name": "uint8",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "337:5:17",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 3767,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "337:15:17",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "&",
                                    "rightExpression": {
                                      "hexValue": "307866",
                                      "id": 3768,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "355:3:17",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_15_by_1",
                                        "typeString": "int_const 15"
                                      },
                                      "value": "0xf"
                                    },
                                    "src": "337:21:17",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "328:31:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "src": "312:47:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "id": 3772,
                              "nodeType": "ExpressionStatement",
                              "src": "312:47:17"
                            },
                            {
                              "expression": {
                                "id": 3790,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 3773,
                                    "name": "buffer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3738,
                                    "src": "371:6:17",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 3777,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 3776,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 3774,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3745,
                                      "src": "378:1:17",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "hexValue": "32",
                                      "id": 3775,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "380:1:17",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "src": "378:3:17",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "371:11:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 3778,
                                    "name": "ALPHABET",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3730,
                                    "src": "385:8:17",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes16",
                                      "typeString": "bytes16"
                                    }
                                  },
                                  "id": 3789,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    "id": 3788,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "arguments": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_bytes1",
                                            "typeString": "bytes1"
                                          },
                                          "id": 3785,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "baseExpression": {
                                              "id": 3781,
                                              "name": "value",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 3732,
                                              "src": "400:5:17",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes3",
                                                "typeString": "bytes3"
                                              }
                                            },
                                            "id": 3783,
                                            "indexExpression": {
                                              "id": 3782,
                                              "name": "i",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 3745,
                                              "src": "406:1:17",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "400:8:17",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes1",
                                              "typeString": "bytes1"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": ">>",
                                          "rightExpression": {
                                            "hexValue": "34",
                                            "id": 3784,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "410:1:17",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_4_by_1",
                                              "typeString": "int_const 4"
                                            },
                                            "value": "4"
                                          },
                                          "src": "400:11:17",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes1",
                                            "typeString": "bytes1"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes1",
                                            "typeString": "bytes1"
                                          }
                                        ],
                                        "id": 3780,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "394:5:17",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_uint8_$",
                                          "typeString": "type(uint8)"
                                        },
                                        "typeName": {
                                          "id": 3779,
                                          "name": "uint8",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "394:5:17",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 3786,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "394:18:17",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "&",
                                    "rightExpression": {
                                      "hexValue": "307866",
                                      "id": 3787,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "415:3:17",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_15_by_1",
                                        "typeString": "int_const 15"
                                      },
                                      "value": "0xf"
                                    },
                                    "src": "394:24:17",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "385:34:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "src": "371:48:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "id": 3791,
                              "nodeType": "ExpressionStatement",
                              "src": "371:48:17"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3750,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3748,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3745,
                            "src": "288:1:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "hexValue": "33",
                            "id": 3749,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "292:1:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3_by_1",
                              "typeString": "int_const 3"
                            },
                            "value": "3"
                          },
                          "src": "288:5:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3793,
                        "initializationExpression": {
                          "assignments": [
                            3745
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 3745,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "281:1:17",
                              "nodeType": "VariableDeclaration",
                              "scope": 3793,
                              "src": "273:9:17",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 3744,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "273:7:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 3747,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 3746,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "285:1:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "273:13:17"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 3752,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "295:3:17",
                            "subExpression": {
                              "id": 3751,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3745,
                              "src": "295:1:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 3753,
                          "nodeType": "ExpressionStatement",
                          "src": "295:3:17"
                        },
                        "nodeType": "ForStatement",
                        "src": "268:160:17"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3796,
                              "name": "buffer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3738,
                              "src": "449:6:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 3795,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "442:6:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 3794,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "442:6:17",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 3797,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "442:14:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 3736,
                        "id": 3798,
                        "nodeType": "Return",
                        "src": "435:21:17"
                      }
                    ]
                  },
                  "id": 3800,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toColor",
                  "nameLocation": "158:7:17",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3733,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3732,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "173:5:17",
                        "nodeType": "VariableDeclaration",
                        "scope": 3800,
                        "src": "166:12:17",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes3",
                          "typeString": "bytes3"
                        },
                        "typeName": {
                          "id": 3731,
                          "name": "bytes3",
                          "nodeType": "ElementaryTypeName",
                          "src": "166:6:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes3",
                            "typeString": "bytes3"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "165:14:17"
                  },
                  "returnParameters": {
                    "id": 3736,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3735,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3800,
                        "src": "203:13:17",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3734,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "203:6:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "202:15:17"
                  },
                  "scope": 3801,
                  "src": "149:314:17",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 3802,
              "src": "65:400:17",
              "usedErrors": []
            }
          ],
          "src": "32:434:17"
        },
        "id": 17
      },
      "contracts/interfaces/IDepositContract.sol": {
        "ast": {
          "absolutePath": "contracts/interfaces/IDepositContract.sol",
          "exportedSymbols": {
            "IDepositContract": [
              3815
            ]
          },
          "id": 3816,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 3803,
              "literals": [
                "solidity",
                ">=",
                "0.8",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "1:31:18"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IDepositContract",
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 3815,
              "linearizedBaseContracts": [
                3815
              ],
              "name": "IDepositContract",
              "nameLocation": "76:16:18",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "22895118",
                  "id": 3814,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "deposit",
                  "nameLocation": "109:7:18",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3812,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3805,
                        "mutability": "mutable",
                        "name": "pubkey",
                        "nameLocation": "141:6:18",
                        "nodeType": "VariableDeclaration",
                        "scope": 3814,
                        "src": "126:21:18",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3804,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "126:5:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3807,
                        "mutability": "mutable",
                        "name": "withdrawal_credentials",
                        "nameLocation": "172:22:18",
                        "nodeType": "VariableDeclaration",
                        "scope": 3814,
                        "src": "157:37:18",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3806,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "157:5:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3809,
                        "mutability": "mutable",
                        "name": "signature",
                        "nameLocation": "219:9:18",
                        "nodeType": "VariableDeclaration",
                        "scope": 3814,
                        "src": "204:24:18",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3808,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "204:5:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3811,
                        "mutability": "mutable",
                        "name": "deposit_data_root",
                        "nameLocation": "246:17:18",
                        "nodeType": "VariableDeclaration",
                        "scope": 3814,
                        "src": "238:25:18",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3810,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "238:7:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "116:153:18"
                  },
                  "returnParameters": {
                    "id": 3813,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "286:0:18"
                  },
                  "scope": 3815,
                  "src": "100:187:18",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 3816,
              "src": "66:224:18",
              "usedErrors": []
            }
          ],
          "src": "1:290:18"
        },
        "id": 18
      },
      "contracts/interfaces/IFrensPoolShare.sol": {
        "ast": {
          "absolutePath": "contracts/interfaces/IFrensPoolShare.sol",
          "exportedSymbols": {
            "IERC165": [
              2026
            ],
            "IERC721": [
              1054
            ],
            "IERC721Enumerable": [
              1441
            ],
            "IFrensPoolShare": [
              3849
            ]
          },
          "id": 3850,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 3817,
              "literals": [
                "solidity",
                ">=",
                "0.8",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:31:19"
            },
            {
              "absolutePath": "@openzeppelin/contracts/interfaces/IERC721Enumerable.sol",
              "file": "@openzeppelin/contracts/interfaces/IERC721Enumerable.sol",
              "id": 3818,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 3850,
              "sourceUnit": 108,
              "src": "64:66:19",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 3819,
                    "name": "IERC721Enumerable",
                    "nameLocations": [
                      "162:17:19"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1441,
                    "src": "162:17:19"
                  },
                  "id": 3820,
                  "nodeType": "InheritanceSpecifier",
                  "src": "162:17:19"
                }
              ],
              "canonicalName": "IFrensPoolShare",
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 3849,
              "linearizedBaseContracts": [
                3849,
                1441,
                1054,
                2026
              ],
              "name": "IFrensPoolShare",
              "nameLocation": "143:15:19",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "4f3130fa",
                  "id": 3825,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "incrementTokenId",
                  "nameLocation": "192:16:19",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3821,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "208:2:19"
                  },
                  "returnParameters": {
                    "id": 3824,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3823,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3825,
                        "src": "228:4:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3822,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "228:4:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "227:6:19"
                  },
                  "scope": 3849,
                  "src": "183:51:19",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "0d4d1513",
                  "id": 3834,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mint",
                  "nameLocation": "247:4:19",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3832,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3827,
                        "mutability": "mutable",
                        "name": "userAddress",
                        "nameLocation": "260:11:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 3834,
                        "src": "252:19:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3826,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "252:7:19",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3829,
                        "mutability": "mutable",
                        "name": "id",
                        "nameLocation": "278:2:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 3834,
                        "src": "273:7:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3828,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "273:4:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3831,
                        "mutability": "mutable",
                        "name": "_pool",
                        "nameLocation": "290:5:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 3834,
                        "src": "282:13:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3830,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "282:7:19",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "251:45:19"
                  },
                  "returnParameters": {
                    "id": 3833,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "305:0:19"
                  },
                  "scope": 3849,
                  "src": "238:68:19",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "4f558e79",
                  "id": 3841,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "exists",
                  "nameLocation": "319:6:19",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3837,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3836,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "331:3:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 3841,
                        "src": "326:8:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3835,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "326:4:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "325:10:19"
                  },
                  "returnParameters": {
                    "id": 3840,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3839,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3841,
                        "src": "353:4:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3838,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "353:4:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "352:6:19"
                  },
                  "scope": 3849,
                  "src": "310:49:19",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "0bc59b38",
                  "id": 3848,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getPoolById",
                  "nameLocation": "372:11:19",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3844,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3843,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "389:3:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 3848,
                        "src": "384:8:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3842,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "384:4:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "383:10:19"
                  },
                  "returnParameters": {
                    "id": 3847,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3846,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3848,
                        "src": "416:7:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3845,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "416:7:19",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "415:9:19"
                  },
                  "scope": 3849,
                  "src": "363:62:19",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 3850,
              "src": "133:296:19",
              "usedErrors": []
            }
          ],
          "src": "0:430:19"
        },
        "id": 19
      },
      "contracts/interfaces/ISSVRegistry.sol": {
        "ast": {
          "absolutePath": "contracts/interfaces/ISSVRegistry.sol",
          "exportedSymbols": {
            "ISSVRegistry": [
              4051
            ]
          },
          "id": 4052,
          "license": "GPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 3851,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".2"
              ],
              "nodeType": "PragmaDirective",
              "src": "81:23:20"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "ISSVRegistry",
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 4051,
              "linearizedBaseContracts": [
                4051
              ],
              "name": "ISSVRegistry",
              "nameLocation": "116:12:20",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "ISSVRegistry.Oess",
                  "id": 3858,
                  "members": [
                    {
                      "constant": false,
                      "id": 3853,
                      "mutability": "mutable",
                      "name": "operatorId",
                      "nameLocation": "164:10:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 3858,
                      "src": "157:17:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 3852,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "157:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3855,
                      "mutability": "mutable",
                      "name": "sharedPublicKey",
                      "nameLocation": "190:15:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 3858,
                      "src": "184:21:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 3854,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "184:5:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3857,
                      "mutability": "mutable",
                      "name": "encryptedKey",
                      "nameLocation": "221:12:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 3858,
                      "src": "215:18:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 3856,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "215:5:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Oess",
                  "nameLocation": "142:4:20",
                  "nodeType": "StructDefinition",
                  "scope": 4051,
                  "src": "135:105:20",
                  "visibility": "public"
                },
                {
                  "documentation": {
                    "id": 3859,
                    "nodeType": "StructuredDocumentation",
                    "src": "246:13:20",
                    "text": "errors "
                  },
                  "errorSelector": "69765c95",
                  "id": 3861,
                  "name": "ExceedRegisteredOperatorsByAccountLimit",
                  "nameLocation": "270:39:20",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 3860,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "309:2:20"
                  },
                  "src": "264:48:20"
                },
                {
                  "errorSelector": "0f861bc0",
                  "id": 3863,
                  "name": "OperatorDeleted",
                  "nameLocation": "323:15:20",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 3862,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "338:2:20"
                  },
                  "src": "317:24:20"
                },
                {
                  "errorSelector": "8d09a73e",
                  "id": 3865,
                  "name": "ValidatorAlreadyExists",
                  "nameLocation": "352:22:20",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 3864,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "374:2:20"
                  },
                  "src": "346:31:20"
                },
                {
                  "errorSelector": "6df5ab76",
                  "id": 3867,
                  "name": "ExceedValidatorLimit",
                  "nameLocation": "388:20:20",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 3866,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "408:2:20"
                  },
                  "src": "382:29:20"
                },
                {
                  "errorSelector": "ae4207eb",
                  "id": 3869,
                  "name": "OperatorNotFound",
                  "nameLocation": "422:16:20",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 3868,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "438:2:20"
                  },
                  "src": "416:25:20"
                },
                {
                  "errorSelector": "637297a4",
                  "id": 3871,
                  "name": "InvalidPublicKeyLength",
                  "nameLocation": "452:22:20",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 3870,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "474:2:20"
                  },
                  "src": "446:31:20"
                },
                {
                  "errorSelector": "9c920ce0",
                  "id": 3873,
                  "name": "OessDataStructureInvalid",
                  "nameLocation": "488:24:20",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 3872,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "512:2:20"
                  },
                  "src": "482:33:20"
                },
                {
                  "documentation": {
                    "id": 3874,
                    "nodeType": "StructuredDocumentation",
                    "src": "521:48:20",
                    "text": " @dev Initializes the contract"
                  },
                  "functionSelector": "8129fc1c",
                  "id": 3877,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "initialize",
                  "nameLocation": "583:10:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3875,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "593:2:20"
                  },
                  "returnParameters": {
                    "id": 3876,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "604:0:20"
                  },
                  "scope": 4051,
                  "src": "574:31:20",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 3878,
                    "nodeType": "StructuredDocumentation",
                    "src": "611:345:20",
                    "text": " @dev Registers a new operator.\n @param name Operator's display name.\n @param ownerAddress Operator's ethereum address that can collect fees.\n @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\n @param fee The fee which the operator charges for each block."
                  },
                  "functionSelector": "580ee1b8",
                  "id": 3891,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "registerOperator",
                  "nameLocation": "970:16:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3887,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3880,
                        "mutability": "mutable",
                        "name": "name",
                        "nameLocation": "1003:4:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3891,
                        "src": "987:20:20",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3879,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "987:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3882,
                        "mutability": "mutable",
                        "name": "ownerAddress",
                        "nameLocation": "1017:12:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3891,
                        "src": "1009:20:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3881,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1009:7:20",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3884,
                        "mutability": "mutable",
                        "name": "publicKey",
                        "nameLocation": "1046:9:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3891,
                        "src": "1031:24:20",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3883,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1031:5:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3886,
                        "mutability": "mutable",
                        "name": "fee",
                        "nameLocation": "1064:3:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3891,
                        "src": "1057:10:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 3885,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "1057:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "986:82:20"
                  },
                  "returnParameters": {
                    "id": 3890,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3889,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3891,
                        "src": "1087:6:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 3888,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1087:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1086:8:20"
                  },
                  "scope": 4051,
                  "src": "961:134:20",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 3892,
                    "nodeType": "StructuredDocumentation",
                    "src": "1101:82:20",
                    "text": " @dev removes an operator.\n @param operatorId Operator id."
                  },
                  "functionSelector": "2e1d2f05",
                  "id": 3897,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "removeOperator",
                  "nameLocation": "1197:14:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3895,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3894,
                        "mutability": "mutable",
                        "name": "operatorId",
                        "nameLocation": "1219:10:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3897,
                        "src": "1212:17:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 3893,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1212:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1211:19:20"
                  },
                  "returnParameters": {
                    "id": 3896,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1239:0:20"
                  },
                  "scope": 4051,
                  "src": "1188:52:20",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 3898,
                    "nodeType": "StructuredDocumentation",
                    "src": "1246:122:20",
                    "text": " @dev Updates an operator fee.\n @param operatorId Operator id.\n @param fee New operator fee."
                  },
                  "functionSelector": "85157361",
                  "id": 3905,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateOperatorFee",
                  "nameLocation": "1382:17:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3903,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3900,
                        "mutability": "mutable",
                        "name": "operatorId",
                        "nameLocation": "1416:10:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3905,
                        "src": "1409:17:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 3899,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1409:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3902,
                        "mutability": "mutable",
                        "name": "fee",
                        "nameLocation": "1443:3:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3905,
                        "src": "1436:10:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 3901,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "1436:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1399:53:20"
                  },
                  "returnParameters": {
                    "id": 3904,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1461:0:20"
                  },
                  "scope": 4051,
                  "src": "1373:89:20",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 3906,
                    "nodeType": "StructuredDocumentation",
                    "src": "1468:117:20",
                    "text": " @dev Updates an operator fee.\n @param operatorId Operator id.\n @param score New score."
                  },
                  "functionSelector": "5f10ac30",
                  "id": 3913,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateOperatorScore",
                  "nameLocation": "1599:19:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3911,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3908,
                        "mutability": "mutable",
                        "name": "operatorId",
                        "nameLocation": "1635:10:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3913,
                        "src": "1628:17:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 3907,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1628:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3910,
                        "mutability": "mutable",
                        "name": "score",
                        "nameLocation": "1662:5:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3913,
                        "src": "1655:12:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 3909,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1655:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1618:55:20"
                  },
                  "returnParameters": {
                    "id": 3912,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1682:0:20"
                  },
                  "scope": 4051,
                  "src": "1590:93:20",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 3914,
                    "nodeType": "StructuredDocumentation",
                    "src": "1689:332:20",
                    "text": " @dev Registers a new validator.\n @param ownerAddress The user's ethereum address that is the owner of the validator.\n @param publicKey Validator public key.\n @param operatorIds Operator ids.\n @param sharesPublicKeys Shares public keys.\n @param sharesEncrypted Encrypted private keys."
                  },
                  "functionSelector": "9b4ddb5d",
                  "id": 3930,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "registerValidator",
                  "nameLocation": "2035:17:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3928,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3916,
                        "mutability": "mutable",
                        "name": "ownerAddress",
                        "nameLocation": "2070:12:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3930,
                        "src": "2062:20:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3915,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2062:7:20",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3918,
                        "mutability": "mutable",
                        "name": "publicKey",
                        "nameLocation": "2107:9:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3930,
                        "src": "2092:24:20",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3917,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "2092:5:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3921,
                        "mutability": "mutable",
                        "name": "operatorIds",
                        "nameLocation": "2144:11:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3930,
                        "src": "2126:29:20",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
                          "typeString": "uint32[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 3919,
                            "name": "uint32",
                            "nodeType": "ElementaryTypeName",
                            "src": "2126:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "id": 3920,
                          "nodeType": "ArrayTypeName",
                          "src": "2126:8:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
                            "typeString": "uint32[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3924,
                        "mutability": "mutable",
                        "name": "sharesPublicKeys",
                        "nameLocation": "2182:16:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3930,
                        "src": "2165:33:20",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "bytes[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 3922,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "2165:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "id": 3923,
                          "nodeType": "ArrayTypeName",
                          "src": "2165:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                            "typeString": "bytes[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3927,
                        "mutability": "mutable",
                        "name": "sharesEncrypted",
                        "nameLocation": "2225:15:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3930,
                        "src": "2208:32:20",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "bytes[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 3925,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "2208:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "id": 3926,
                          "nodeType": "ArrayTypeName",
                          "src": "2208:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                            "typeString": "bytes[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2052:194:20"
                  },
                  "returnParameters": {
                    "id": 3929,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2255:0:20"
                  },
                  "scope": 4051,
                  "src": "2026:230:20",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 3931,
                    "nodeType": "StructuredDocumentation",
                    "src": "2262:92:20",
                    "text": " @dev removes a validator.\n @param publicKey Validator's public key."
                  },
                  "functionSelector": "b2f569c5",
                  "id": 3936,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "removeValidator",
                  "nameLocation": "2368:15:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3934,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3933,
                        "mutability": "mutable",
                        "name": "publicKey",
                        "nameLocation": "2399:9:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3936,
                        "src": "2384:24:20",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3932,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "2384:5:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2383:26:20"
                  },
                  "returnParameters": {
                    "id": 3935,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2418:0:20"
                  },
                  "scope": 4051,
                  "src": "2359:60:20",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "45413bf4",
                  "id": 3941,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "enableOwnerValidators",
                  "nameLocation": "2434:21:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3939,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3938,
                        "mutability": "mutable",
                        "name": "ownerAddress",
                        "nameLocation": "2464:12:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3941,
                        "src": "2456:20:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3937,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2456:7:20",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2455:22:20"
                  },
                  "returnParameters": {
                    "id": 3940,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2486:0:20"
                  },
                  "scope": 4051,
                  "src": "2425:62:20",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "27467a18",
                  "id": 3946,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "disableOwnerValidators",
                  "nameLocation": "2502:22:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3944,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3943,
                        "mutability": "mutable",
                        "name": "ownerAddress",
                        "nameLocation": "2533:12:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3946,
                        "src": "2525:20:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3942,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2525:7:20",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2524:22:20"
                  },
                  "returnParameters": {
                    "id": 3945,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2555:0:20"
                  },
                  "scope": 4051,
                  "src": "2493:63:20",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "a3b3f606",
                  "id": 3953,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isLiquidated",
                  "nameLocation": "2571:12:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3949,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3948,
                        "mutability": "mutable",
                        "name": "ownerAddress",
                        "nameLocation": "2592:12:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3953,
                        "src": "2584:20:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3947,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2584:7:20",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2583:22:20"
                  },
                  "returnParameters": {
                    "id": 3952,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3951,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3953,
                        "src": "2629:4:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3950,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2629:4:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2628:6:20"
                  },
                  "scope": 4051,
                  "src": "2562:73:20",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 3954,
                    "nodeType": "StructuredDocumentation",
                    "src": "2641:94:20",
                    "text": " @dev Gets an operator by operator id.\n @param operatorId Operator id."
                  },
                  "functionSelector": "0260d443",
                  "id": 3973,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getOperatorById",
                  "nameLocation": "2749:15:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3957,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3956,
                        "mutability": "mutable",
                        "name": "operatorId",
                        "nameLocation": "2772:10:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3973,
                        "src": "2765:17:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 3955,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2765:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2764:19:20"
                  },
                  "returnParameters": {
                    "id": 3972,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3959,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3973,
                        "src": "2836:13:20",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3958,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2836:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3961,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3973,
                        "src": "2863:7:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3960,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2863:7:20",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3963,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3973,
                        "src": "2884:12:20",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3962,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "2884:5:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3965,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3973,
                        "src": "2910:7:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3964,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2910:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3967,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3973,
                        "src": "2931:7:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3966,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2931:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3969,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3973,
                        "src": "2952:7:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3968,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2952:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3971,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3973,
                        "src": "2973:4:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3970,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2973:4:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2822:165:20"
                  },
                  "scope": 4051,
                  "src": "2740:248:20",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 3974,
                    "nodeType": "StructuredDocumentation",
                    "src": "2994:96:20",
                    "text": " @dev Returns operators for owner.\n @param ownerAddress Owner's address."
                  },
                  "functionSelector": "0dc1eeff",
                  "id": 3982,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getOperatorsByOwnerAddress",
                  "nameLocation": "3104:26:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3977,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3976,
                        "mutability": "mutable",
                        "name": "ownerAddress",
                        "nameLocation": "3139:12:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3982,
                        "src": "3131:20:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3975,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3131:7:20",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3130:22:20"
                  },
                  "returnParameters": {
                    "id": 3981,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3980,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3982,
                        "src": "3192:15:20",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                          "typeString": "uint32[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 3978,
                            "name": "uint32",
                            "nodeType": "ElementaryTypeName",
                            "src": "3192:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "id": 3979,
                          "nodeType": "ArrayTypeName",
                          "src": "3192:8:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
                            "typeString": "uint32[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3191:17:20"
                  },
                  "scope": 4051,
                  "src": "3095:114:20",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 3983,
                    "nodeType": "StructuredDocumentation",
                    "src": "3215:131:20",
                    "text": " @dev Gets operators list which are in use by validator.\n @param validatorPublicKey Validator's public key."
                  },
                  "functionSelector": "053e8349",
                  "id": 3991,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getOperatorsByValidator",
                  "nameLocation": "3360:23:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3986,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3985,
                        "mutability": "mutable",
                        "name": "validatorPublicKey",
                        "nameLocation": "3399:18:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3991,
                        "src": "3384:33:20",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 3984,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3384:5:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3383:35:20"
                  },
                  "returnParameters": {
                    "id": 3990,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3989,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3991,
                        "src": "3458:15:20",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
                          "typeString": "uint32[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 3987,
                            "name": "uint32",
                            "nodeType": "ElementaryTypeName",
                            "src": "3458:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "id": 3988,
                          "nodeType": "ArrayTypeName",
                          "src": "3458:8:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
                            "typeString": "uint32[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3457:17:20"
                  },
                  "scope": 4051,
                  "src": "3351:124:20",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 3992,
                    "nodeType": "StructuredDocumentation",
                    "src": "3481:84:20",
                    "text": " @dev Gets operator's owner.\n @param operatorId Operator id."
                  },
                  "functionSelector": "e7b21748",
                  "id": 3999,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getOperatorOwner",
                  "nameLocation": "3579:16:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3995,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3994,
                        "mutability": "mutable",
                        "name": "operatorId",
                        "nameLocation": "3603:10:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 3999,
                        "src": "3596:17:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 3993,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3596:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3595:19:20"
                  },
                  "returnParameters": {
                    "id": 3998,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3997,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3999,
                        "src": "3638:7:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3996,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3638:7:20",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3637:9:20"
                  },
                  "scope": 4051,
                  "src": "3570:77:20",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 4000,
                    "nodeType": "StructuredDocumentation",
                    "src": "3653:88:20",
                    "text": " @dev Gets operator current fee.\n @param operatorId Operator id."
                  },
                  "functionSelector": "f8f08d7f",
                  "id": 4007,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getOperatorFee",
                  "nameLocation": "3755:14:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4003,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4002,
                        "mutability": "mutable",
                        "name": "operatorId",
                        "nameLocation": "3777:10:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 4007,
                        "src": "3770:17:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 4001,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3770:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3769:19:20"
                  },
                  "returnParameters": {
                    "id": 4006,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4005,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4007,
                        "src": "3828:6:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 4004,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "3828:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3827:8:20"
                  },
                  "scope": 4051,
                  "src": "3746:90:20",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 4008,
                    "nodeType": "StructuredDocumentation",
                    "src": "3842:52:20",
                    "text": " @dev Gets active validator count."
                  },
                  "functionSelector": "2340e8d3",
                  "id": 4013,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "activeValidatorCount",
                  "nameLocation": "3908:20:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4009,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3928:2:20"
                  },
                  "returnParameters": {
                    "id": 4012,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4011,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4013,
                        "src": "3954:6:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 4010,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3954:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3953:8:20"
                  },
                  "scope": 4051,
                  "src": "3899:63:20",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 4014,
                    "nodeType": "StructuredDocumentation",
                    "src": "3968:104:20",
                    "text": " @dev Gets an validator by public key.\n @param publicKey Validator's public key."
                  },
                  "functionSelector": "6c36511a",
                  "id": 4025,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "validators",
                  "nameLocation": "4086:10:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4017,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4016,
                        "mutability": "mutable",
                        "name": "publicKey",
                        "nameLocation": "4112:9:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 4025,
                        "src": "4097:24:20",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 4015,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4097:5:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4096:26:20"
                  },
                  "returnParameters": {
                    "id": 4024,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4019,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4025,
                        "src": "4175:7:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4018,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4175:7:20",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4021,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4025,
                        "src": "4196:12:20",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 4020,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4196:5:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4023,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4025,
                        "src": "4222:4:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 4022,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4222:4:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4161:75:20"
                  },
                  "scope": 4051,
                  "src": "4077:160:20",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 4026,
                    "nodeType": "StructuredDocumentation",
                    "src": "4243:116:20",
                    "text": " @dev Gets a validator public keys by owner's address.\n @param ownerAddress Owner's Address."
                  },
                  "functionSelector": "0e32066a",
                  "id": 4034,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getValidatorsByAddress",
                  "nameLocation": "4373:22:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4029,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4028,
                        "mutability": "mutable",
                        "name": "ownerAddress",
                        "nameLocation": "4404:12:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 4034,
                        "src": "4396:20:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4027,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4396:7:20",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4395:22:20"
                  },
                  "returnParameters": {
                    "id": 4033,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4032,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4034,
                        "src": "4457:14:20",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                          "typeString": "bytes[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 4030,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "4457:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "id": 4031,
                          "nodeType": "ArrayTypeName",
                          "src": "4457:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                            "typeString": "bytes[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4456:16:20"
                  },
                  "scope": 4051,
                  "src": "4364:109:20",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 4035,
                    "nodeType": "StructuredDocumentation",
                    "src": "4479:94:20",
                    "text": " @dev Get validator's owner.\n @param publicKey Validator's public key."
                  },
                  "functionSelector": "c87b3038",
                  "id": 4042,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getValidatorOwner",
                  "nameLocation": "4587:17:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4038,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4037,
                        "mutability": "mutable",
                        "name": "publicKey",
                        "nameLocation": "4620:9:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 4042,
                        "src": "4605:24:20",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 4036,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4605:5:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4604:26:20"
                  },
                  "returnParameters": {
                    "id": 4041,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4040,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4042,
                        "src": "4654:7:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4039,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4654:7:20",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4653:9:20"
                  },
                  "scope": 4051,
                  "src": "4578:85:20",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 4043,
                    "nodeType": "StructuredDocumentation",
                    "src": "4669:104:20",
                    "text": " @dev Get validators amount per operator.\n @param operatorId Operator public key"
                  },
                  "functionSelector": "d379a5f2",
                  "id": 4050,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "validatorsPerOperatorCount",
                  "nameLocation": "4787:26:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4046,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4045,
                        "mutability": "mutable",
                        "name": "operatorId",
                        "nameLocation": "4821:10:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 4050,
                        "src": "4814:17:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 4044,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4814:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4813:19:20"
                  },
                  "returnParameters": {
                    "id": 4049,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4048,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4050,
                        "src": "4856:6:20",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 4047,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4856:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4855:8:20"
                  },
                  "scope": 4051,
                  "src": "4778:86:20",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 4052,
              "src": "106:4760:20",
              "usedErrors": [
                3861,
                3863,
                3865,
                3867,
                3869,
                3871,
                3873
              ]
            }
          ],
          "src": "81:4785:20"
        },
        "id": 20
      },
      "contracts/interfaces/IStakingPool.sol": {
        "ast": {
          "absolutePath": "contracts/interfaces/IStakingPool.sol",
          "exportedSymbols": {
            "Context": [
              1787
            ],
            "IStakingPool": [
              4120
            ],
            "Ownable": [
              104
            ]
          },
          "id": 4121,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 4053,
              "literals": [
                "solidity",
                ">=",
                "0.8",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:31:21"
            },
            {
              "absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
              "file": "@openzeppelin/contracts/access/Ownable.sol",
              "id": 4054,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4121,
              "sourceUnit": 105,
              "src": "65:52:21",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IStakingPool",
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 4120,
              "linearizedBaseContracts": [
                4120
              ],
              "name": "IStakingPool",
              "nameLocation": "129:12:21",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "f340fa01",
                  "id": 4059,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "deposit",
                  "nameLocation": "154:7:21",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4057,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4056,
                        "mutability": "mutable",
                        "name": "userAddress",
                        "nameLocation": "170:11:21",
                        "nodeType": "VariableDeclaration",
                        "scope": 4059,
                        "src": "162:19:21",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4055,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "162:7:21",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "161:21:21"
                  },
                  "returnParameters": {
                    "id": 4058,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "199:0:21"
                  },
                  "scope": 4120,
                  "src": "145:55:21",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "8620891c",
                  "id": 4064,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "addToDeposit",
                  "nameLocation": "213:12:21",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4062,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4061,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "231:3:21",
                        "nodeType": "VariableDeclaration",
                        "scope": 4064,
                        "src": "226:8:21",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4060,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "226:4:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "225:10:21"
                  },
                  "returnParameters": {
                    "id": 4063,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "252:0:21"
                  },
                  "scope": 4120,
                  "src": "204:49:21",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "441a3e70",
                  "id": 4071,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "withdraw",
                  "nameLocation": "266:8:21",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4069,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4066,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "280:3:21",
                        "nodeType": "VariableDeclaration",
                        "scope": 4071,
                        "src": "275:8:21",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4065,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "275:4:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4068,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "290:7:21",
                        "nodeType": "VariableDeclaration",
                        "scope": 4071,
                        "src": "285:12:21",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4067,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "285:4:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "274:24:21"
                  },
                  "returnParameters": {
                    "id": 4070,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "307:0:21"
                  },
                  "scope": 4120,
                  "src": "257:51:21",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "e4fc6b6d",
                  "id": 4074,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "distribute",
                  "nameLocation": "321:10:21",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4072,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "331:2:21"
                  },
                  "returnParameters": {
                    "id": 4073,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "342:0:21"
                  },
                  "scope": 4120,
                  "src": "312:31:21",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "cfb5a5f8",
                  "id": 4081,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getShare",
                  "nameLocation": "356:8:21",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4077,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4076,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "370:3:21",
                        "nodeType": "VariableDeclaration",
                        "scope": 4081,
                        "src": "365:8:21",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4075,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "365:4:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "364:10:21"
                  },
                  "returnParameters": {
                    "id": 4080,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4079,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4081,
                        "src": "397:4:21",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4078,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "397:4:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "396:6:21"
                  },
                  "scope": 4120,
                  "src": "347:56:21",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "678e300a",
                  "id": 4088,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getDistributableShare",
                  "nameLocation": "416:21:21",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4084,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4083,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "443:3:21",
                        "nodeType": "VariableDeclaration",
                        "scope": 4088,
                        "src": "438:8:21",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4082,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "438:4:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "437:10:21"
                  },
                  "returnParameters": {
                    "id": 4087,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4086,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4088,
                        "src": "470:4:21",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4085,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "470:4:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "469:6:21"
                  },
                  "scope": 4120,
                  "src": "407:69:21",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "4ad02ef1",
                  "id": 4093,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getPubKey",
                  "nameLocation": "489:9:21",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4089,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "498:2:21"
                  },
                  "returnParameters": {
                    "id": 4092,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4091,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4093,
                        "src": "523:12:21",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 4090,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "523:5:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "522:14:21"
                  },
                  "scope": 4120,
                  "src": "480:57:21",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "1865c57d",
                  "id": 4098,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getState",
                  "nameLocation": "550:8:21",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4094,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "558:2:21"
                  },
                  "returnParameters": {
                    "id": 4097,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4096,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4098,
                        "src": "583:13:21",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4095,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "583:6:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "582:15:21"
                  },
                  "scope": 4120,
                  "src": "541:57:21",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "378de45b",
                  "id": 4105,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getDepositAmount",
                  "nameLocation": "611:16:21",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4101,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4100,
                        "mutability": "mutable",
                        "name": "_id",
                        "nameLocation": "633:3:21",
                        "nodeType": "VariableDeclaration",
                        "scope": 4105,
                        "src": "628:8:21",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4099,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "628:4:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "627:10:21"
                  },
                  "returnParameters": {
                    "id": 4104,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4103,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4105,
                        "src": "660:4:21",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4102,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "660:4:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "659:6:21"
                  },
                  "scope": 4120,
                  "src": "602:64:21",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "4b2b4e36",
                  "id": 4116,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "stake",
                  "nameLocation": "680:5:21",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4114,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4107,
                        "mutability": "mutable",
                        "name": "pubkey",
                        "nameLocation": "706:6:21",
                        "nodeType": "VariableDeclaration",
                        "scope": 4116,
                        "src": "691:21:21",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 4106,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "691:5:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4109,
                        "mutability": "mutable",
                        "name": "withdrawal_credentials",
                        "nameLocation": "733:22:21",
                        "nodeType": "VariableDeclaration",
                        "scope": 4116,
                        "src": "718:37:21",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 4108,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "718:5:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4111,
                        "mutability": "mutable",
                        "name": "signature",
                        "nameLocation": "776:9:21",
                        "nodeType": "VariableDeclaration",
                        "scope": 4116,
                        "src": "761:24:21",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 4110,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "761:5:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4113,
                        "mutability": "mutable",
                        "name": "deposit_data_root",
                        "nameLocation": "799:17:21",
                        "nodeType": "VariableDeclaration",
                        "scope": 4116,
                        "src": "791:25:21",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 4112,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "791:7:21",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "685:135:21"
                  },
                  "returnParameters": {
                    "id": 4115,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "829:0:21"
                  },
                  "scope": 4120,
                  "src": "671:159:21",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "2def6620",
                  "id": 4119,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "unstake",
                  "nameLocation": "845:7:21",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4117,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "852:2:21"
                  },
                  "returnParameters": {
                    "id": 4118,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "863:0:21"
                  },
                  "scope": 4120,
                  "src": "836:28:21",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 4121,
              "src": "119:748:21",
              "usedErrors": []
            }
          ],
          "src": "32:836:21"
        },
        "id": 21
      },
      "contracts/interfaces/IStakingPoolFactory.sol": {
        "ast": {
          "absolutePath": "contracts/interfaces/IStakingPoolFactory.sol",
          "exportedSymbols": {
            "IStakingPoolFactory": [
              4130
            ]
          },
          "id": 4131,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 4122,
              "literals": [
                "solidity",
                ">=",
                "0.8",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:31:22"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IStakingPoolFactory",
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 4130,
              "linearizedBaseContracts": [
                4130
              ],
              "name": "IStakingPoolFactory",
              "nameLocation": "74:19:22",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "76f42f8a",
                  "id": 4129,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "doesStakingPoolExist",
                  "nameLocation": "108:20:22",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4125,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4124,
                        "mutability": "mutable",
                        "name": "stakingPoolAddress",
                        "nameLocation": "137:18:22",
                        "nodeType": "VariableDeclaration",
                        "scope": 4129,
                        "src": "129:26:22",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4123,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "129:7:22",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "128:28:22"
                  },
                  "returnParameters": {
                    "id": 4128,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4127,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4129,
                        "src": "179:4:22",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 4126,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "179:4:22",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "178:6:22"
                  },
                  "scope": 4130,
                  "src": "99:86:22",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 4131,
              "src": "64:124:22",
              "usedErrors": []
            }
          ],
          "src": "0:189:22"
        },
        "id": 22
      }
    }
  }
}
